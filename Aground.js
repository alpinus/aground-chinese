(function(console, $hx_exports, $global) {
    "use strict";
    $hx_exports.openfl = $hx_exports.openfl || {};
    $hx_exports.lime = $hx_exports.lime || {};
    var $hxClasses = {},
    $estr = function() {
        return js_Boot.__string_rec(this, '');
    };
    function $extend(from, fields) {
        function Inherit() {}
        Inherit.prototype = from;
        var proto = new Inherit();
        for (var name in fields) proto[name] = fields[name];
        if (fields.toString !== Object.prototype.toString) proto.toString = fields.toString;
        return proto;
    }
    var AbstractClass = function() {};
    $hxClasses["AbstractClass"] = AbstractClass;
    AbstractClass.__name__ = ["AbstractClass"];
    var AbstractClassBuilder = function() {};
    $hxClasses["AbstractClassBuilder"] = AbstractClassBuilder;
    AbstractClassBuilder.__name__ = ["AbstractClassBuilder"];
    var ApplicationMain = function() {};
    $hxClasses["ApplicationMain"] = ApplicationMain;
    ApplicationMain.__name__ = ["ApplicationMain"];
    ApplicationMain.config = null;
    ApplicationMain.preloader = null;
    ApplicationMain.create = function() {
        var app = new openfl_display_Application();
        app.create(ApplicationMain.config);
        var display = new com_davidmaletz_mining_ui_Preloader();
        ApplicationMain.preloader = new openfl_display_Preloader(display);
        app.setPreloader(ApplicationMain.preloader);
        ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
        ApplicationMain.preloader.create(ApplicationMain.config);
        var urls = [];
        var types = [];
        urls.push("data/title_full.jpg");
        types.push("IMAGE");
        urls.push("data/areas/start.xml");
        types.push("TEXT");
        urls.push("data/areas.xml");
        types.push("TEXT");
        urls.push("data/bg.png");
        types.push("IMAGE");
        urls.push("data/crafting.xml");
        types.push("TEXT");
        urls.push("data/dig.xml");
        types.push("TEXT");
        urls.push("data/ellipse.png");
        types.push("IMAGE");
        urls.push("data/enemies.xml");
        types.push("TEXT");
        urls.push("data/farm.xml");
        types.push("TEXT");
        urls.push("data/fonts/damage.fnt");
        types.push("TEXT");
        urls.push("data/fonts/damage.png");
        types.push("IMAGE");
        urls.push("data/fonts/font.fnt");
        types.push("TEXT");
        urls.push("data/fonts/font_0.png");
        types.push("IMAGE");
        urls.push("data/fonts/font_1.png");
        types.push("IMAGE");
        urls.push("data/game_over.png");
        types.push("IMAGE");
        urls.push("data/items.xml");
        types.push("TEXT");
        urls.push("data/keys.png");
        types.push("IMAGE");
        urls.push("data/lang/en_US.xml");
        types.push("TEXT");
        urls.push("data/lang/keyboards/default.xml");
        types.push("TEXT");
        urls.push("data/lang/languages.xml");
        types.push("TEXT");
        urls.push("data/npc/alchemist.xml");
        types.push("TEXT");
        urls.push("data/npc/builder.xml");
        types.push("TEXT");
        urls.push("data/npc/farmer.xml");
        types.push("TEXT");
        urls.push("data/npc/miner.xml");
        types.push("TEXT");
        urls.push("data/npc/trader.xml");
        types.push("TEXT");
        urls.push("data/objects.xml");
        types.push("TEXT");
        urls.push("data/projectiles/arrow.png");
        types.push("IMAGE");
        urls.push("data/quests.xml");
        types.push("TEXT");
        urls.push("data/scenes/hut/alchemist.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/builder.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/farmer.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/fire.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/hut.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/miner.png");
        types.push("IMAGE");
        urls.push("data/scenes/hut/scene.xml");
        types.push("TEXT");
        urls.push("data/scenes/hut/trader.png");
        types.push("IMAGE");
        urls.push("data/sounds.xml");
        types.push("TEXT");
        urls.push("data/structures.xml");
        types.push("TEXT");
        urls.push("data/tile/achievements.png");
        types.push("IMAGE");
        urls.push("data/tile/achievement_flash.png");
        types.push("IMAGE");
        urls.push("data/tile/alchemist.png");
        types.push("IMAGE");
        urls.push("data/tile/anims.xml");
        types.push("TEXT");
        urls.push("data/tile/boar.png");
        types.push("IMAGE");
        urls.push("data/tile/boat.png");
        types.push("IMAGE");
        urls.push("data/tile/bush.png");
        types.push("IMAGE");
        urls.push("data/tile/cage.png");
        types.push("IMAGE");
        urls.push("data/tile/clouds.png");
        types.push("IMAGE");
        urls.push("data/tile/crack.png");
        types.push("IMAGE");
        urls.push("data/tile/death.png");
        types.push("IMAGE");
        urls.push("data/tile/dock.png");
        types.push("IMAGE");
        urls.push("data/tile/dockhouse.png");
        types.push("IMAGE");
        urls.push("data/tile/dock_front.png");
        types.push("IMAGE");
        urls.push("data/tile/dragon.png");
        types.push("IMAGE");
        urls.push("data/tile/farm.png");
        types.push("IMAGE");
        urls.push("data/tile/food_market.png");
        types.push("IMAGE");
        urls.push("data/tile/golem.png");
        types.push("IMAGE");
        urls.push("data/tile/hut.png");
        types.push("IMAGE");
        urls.push("data/tile/items.png");
        types.push("IMAGE");
        urls.push("data/tile/kitchen.png");
        types.push("IMAGE");
        urls.push("data/tile/kitchen2.png");
        types.push("IMAGE");
        urls.push("data/tile/lab.png");
        types.push("IMAGE");
        urls.push("data/tile/mineral_market.png");
        types.push("IMAGE");
        urls.push("data/tile/npc.png");
        types.push("IMAGE");
        urls.push("data/tile/orchard.png");
        types.push("IMAGE");
        urls.push("data/tile/pen.png");
        types.push("IMAGE");
        urls.push("data/tile/pen_fence.png");
        types.push("IMAGE");
        urls.push("data/tile/player.png");
        types.push("IMAGE");
        urls.push("data/tile/rat.png");
        types.push("IMAGE");
        urls.push("data/tile/redbreast.png");
        types.push("IMAGE");
        urls.push("data/tile/red_bush.png");
        types.push("IMAGE");
        urls.push("data/tile/seagull.png");
        types.push("IMAGE");
        urls.push("data/tile/smelter.png");
        types.push("IMAGE");
        urls.push("data/tile/storehouse.png");
        types.push("IMAGE");
        urls.push("data/tile/sun.png");
        types.push("IMAGE");
        urls.push("data/tile/tiles.png");
        types.push("IMAGE");
        urls.push("data/tile/tiles.xml");
        types.push("TEXT");
        urls.push("data/tile/tree1.png");
        types.push("IMAGE");
        urls.push("data/tile/tree2.png");
        types.push("IMAGE");
        urls.push("data/tile/tree3.png");
        types.push("IMAGE");
        urls.push("data/tile/ui.png");
        types.push("IMAGE");
        urls.push("data/tile/water.png");
        types.push("IMAGE");
        urls.push("data/tile/waves.png");
        types.push("IMAGE");
        urls.push("data/tile/weaps_market.png");
        types.push("IMAGE");
        urls.push("data/tile/weps.png");
        types.push("IMAGE");
        urls.push("data/tile/wheat.png");
        types.push("IMAGE");
        urls.push("data/tile/workshop.png");
        types.push("IMAGE");
        urls.push("data/tile/wyrm.png");
        types.push("IMAGE");
        urls.push("data/title.png");
        types.push("IMAGE");
        urls.push("data/title_full.jpg");
        types.push("IMAGE");
        urls.push("data/trees.xml");
        types.push("TEXT");
        urls.push("data/ui/achievement_bg.png");
        types.push("IMAGE");
        urls.push("data/ui/ancient_scroll.png");
        types.push("IMAGE");
        urls.push("data/ui/ancient_window.png");
        types.push("IMAGE");
        urls.push("data/ui/bar.png");
        types.push("IMAGE");
        urls.push("data/ui/bar_fuel.png");
        types.push("IMAGE");
        urls.push("data/ui/buttons.png");
        types.push("IMAGE");
        urls.push("data/ui/gradient.png");
        types.push("IMAGE");
        urls.push("data/ui/inventory.png");
        types.push("IMAGE");
        urls.push("data/ui/quest.png");
        types.push("IMAGE");
        urls.push("data/ui/questlog.png");
        types.push("IMAGE");
        urls.push("data/ui/speech.png");
        types.push("IMAGE");
        urls.push("data/volumes.xml");
        types.push("TEXT");
        urls.push("sound/achievement.ogg");
        types.push("SOUND");
        urls.push("sound/axe.ogg");
        types.push("SOUND");
        urls.push("sound/axe_tree.ogg");
        types.push("SOUND");
        urls.push("sound/blocked.ogg");
        types.push("SOUND");
        urls.push("sound/boar_death.ogg");
        types.push("SOUND");
        urls.push("sound/bow.ogg");
        types.push("SOUND");
        urls.push("sound/build.ogg");
        types.push("SOUND");
        urls.push("sound/buy.ogg");
        types.push("SOUND");
        urls.push("sound/cancel.ogg");
        types.push("SOUND");
        urls.push("sound/death.ogg");
        types.push("SOUND");
        urls.push("sound/drop.ogg");
        types.push("SOUND");
        urls.push("sound/eat.ogg");
        types.push("SOUND");
        urls.push("sound/enemy.ogg");
        types.push("SOUND");
        urls.push("sound/fire.ogg");
        types.push("SOUND");
        urls.push("sound/hit.ogg");
        types.push("SOUND");
        urls.push("sound/item.ogg");
        types.push("SOUND");
        urls.push("sound/levelup.ogg");
        types.push("SOUND");
        urls.push("sound/low_hp.ogg");
        types.push("SOUND");
        urls.push("sound/miss.ogg");
        types.push("SOUND");
        urls.push("sound/move.ogg");
        types.push("SOUND");
        urls.push("sound/pick.ogg");
        types.push("SOUND");
        urls.push("sound/rain.ogg");
        types.push("SOUND");
        urls.push("sound/rat_death.ogg");
        types.push("SOUND");
        urls.push("sound/rock_door.ogg");
        types.push("SOUND");
        urls.push("sound/select.ogg");
        types.push("SOUND");
        urls.push("sound/smelter.ogg");
        types.push("SOUND");
        urls.push("sound/sword.ogg");
        types.push("SOUND");
        urls.push("sound/talking1.ogg");
        types.push("SOUND");
        urls.push("sound/talking2.ogg");
        types.push("SOUND");
        urls.push("sound/thunder.ogg");
        types.push("SOUND");
        urls.push("sound/tree_felled.ogg");
        types.push("SOUND");
        urls.push("sound/workshop.ogg");
        types.push("SOUND");
        urls.push("sound/wyrm_death.ogg");
        types.push("SOUND");
        urls.push("sound/game_over.ogg");
        types.push("MUSIC");
        urls.push("sound/no_boundaries.ogg");
        types.push("MUSIC");
        urls.push("sound/title.ogg");
        types.push("MUSIC");
        
        if (ApplicationMain.config.assetsPrefix != null) {
            var _g1 = 0;
            var _g = urls.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (types[i] != "FONT") urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
            }
        }
        ApplicationMain.preloader.load(urls, types);
        var result = app.exec();
    };
    ApplicationMain.init = function() {
        var loaded = 0;
        var total = 0;
        var library_onLoad = function(__) {
            loaded++;
            if (loaded == total) ApplicationMain.start();
        };
        ApplicationMain.preloader = null;
        if (total == 0) ApplicationMain.start();
    };
    ApplicationMain.main = function() {
        ApplicationMain.config = {
            build: "6180",
            company: "Fancy Fish Games",
            file: "Aground",
            fps: 60,
            name: "Aground",
            orientation: "",
            packageName: "com.davidmaletz.mining.Aground",
            version: "1.0.0",
            windows: [{
                antialiasing: 0,
                background: 0,
                borderless: false,
                depthBuffer: false,
                display: 0,
                fullscreen: false,
                hardware: true,
                height: 0,
                parameters: "{}",
                resizable: true,
                stencilBuffer: true,
                title: "Aground",
                vsync: false,
                width: 0,
                x: null,
                y: null
            }]
        };
    };
    ApplicationMain.start = function() {
        var hasMain = false;
        var entryPoint = Type.resolveClass("com.davidmaletz.mining.Main");
        var _g = 0;
        var _g1 = Type.getClassFields(entryPoint);
        while (_g < _g1.length) {
            var methodName = _g1[_g]; ++_g;
            if (methodName == "main") {
                hasMain = true;
                break;
            }
        }
        lime_Assets.initialize();
        if (hasMain) Reflect.callMethod(entryPoint, Reflect.field(entryPoint, "main"), []);
        else {
            var instance = Type.createInstance(DocumentClass, []);
        }
        if (openfl_Lib.current.stage.window.__fullscreen) openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen", false, false, true, true));
        openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize", false, false));
    };
    var openfl_events_IEventDispatcher = function() {};
    $hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
    openfl_events_IEventDispatcher.__name__ = ["openfl", "events", "IEventDispatcher"];
    openfl_events_IEventDispatcher.prototype = {
        __class__: openfl_events_IEventDispatcher
    };
    var openfl_events_EventDispatcher = function(target) {
        if (target != null) this.__targetDispatcher = target;
    };
    $hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
    openfl_events_EventDispatcher.__name__ = ["openfl", "events", "EventDispatcher"];
    openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
    openfl_events_EventDispatcher.__sortByPriority = function(l1, l2) {
        if (l1.priority == l2.priority) return 0;
        else if (l1.priority > l2.priority) return - 1;
        else return 1;
    };
    openfl_events_EventDispatcher.prototype = {
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
            if (this.__eventMap == null) {
                this.__dispatching = new haxe_ds_StringMap();
                this.__eventMap = new haxe_ds_StringMap();
                this.__newEventMap = new haxe_ds_StringMap();
            }
            if (!this.__eventMap.exists(type)) {
                var list = [];
                list.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
                this.__eventMap.set(type, list);
            } else {
                var list1;
                if (this.__dispatching.get(type) == true) {
                    if (!this.__newEventMap.exists(type)) {
                        var _this = this.__eventMap.get(type);
                        list1 = _this.slice();
                        this.__newEventMap.set(type, list1);
                    } else list1 = this.__newEventMap.get(type);
                } else list1 = this.__eventMap.get(type);
                var _g1 = 0;
                var _g = list1.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    if (Reflect.compareMethods(list1[i].callback, listener)) return;
                }
                list1.push(new openfl_events__$EventDispatcher_Listener(listener, useCapture, priority));
                list1.sort(openfl_events_EventDispatcher.__sortByPriority);
            }
        },
        dispatchEvent: function(event) {
            if (this.__targetDispatcher != null) event.target = this.__targetDispatcher;
            else event.target = this;
            return this.__dispatchEvent(event);
        },
        hasEventListener: function(type) {
            if (this.__eventMap == null) return false;
            if (this.__dispatching.get(type) == true && this.__newEventMap.exists(type)) return this.__newEventMap.get(type).length > 0;
            else return this.__eventMap.exists(type);
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
            if (this.__eventMap == null) return;
            var list = this.__eventMap.get(type);
            if (list == null) return;
            var dispatching = this.__dispatching.get(type) == true;
            if (dispatching) {
                if (!this.__newEventMap.exists(type)) {
                    var _this = this.__eventMap.get(type);
                    list = _this.slice();
                    this.__newEventMap.set(type, list);
                } else list = this.__newEventMap.get(type);
            }
            var _g1 = 0;
            var _g = list.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (list[i].match(listener, useCapture)) {
                    list.splice(i, 1);
                    break;
                }
            }
            if (!dispatching) {
                if (list.length == 0) this.__eventMap.remove(type);
                if (!this.__eventMap.iterator().hasNext()) {
                    this.__eventMap = null;
                    this.__newEventMap = null;
                }
            }
        },
        toString: function() {
            var full = Type.getClassName(js_Boot.getClass(this));
            var $short = full.split(".").pop();
            return "[object " + $short + "]";
        },
        willTrigger: function(type) {
            return this.hasEventListener(type);
        },
        __dispatchEvent: function(event) {
            if (this.__eventMap == null || event == null) return false;
            var type = event.type;
            var list;
            if (this.__dispatching.get(type) == true) {
                list = this.__newEventMap.get(type);
                if (list == null) return false;
                list = list.slice();
            } else {
                list = this.__eventMap.get(type);
                if (list == null) return false;
                this.__dispatching.set(type, true);
            }
            if (event.target == null) {
                if (this.__targetDispatcher != null) event.target = this.__targetDispatcher;
                else event.target = this;
            }
            event.currentTarget = this;
            var capture = event.eventPhase == 1;
            var index = 0;
            var listener;
            while (index < list.length) {
                listener = list[index];
                if (listener.useCapture == capture) {
                    listener.callback(event);
                    if (event.__isCanceledNow) break;
                }
                if (listener == list[index]) index++;
            }
            if (this.__newEventMap != null && this.__newEventMap.exists(type)) {
                var list1 = this.__newEventMap.get(type);
                if (list1.length > 0) this.__eventMap.set(type, list1);
                else this.__eventMap.remove(type);
                if (!this.__eventMap.iterator().hasNext()) {
                    this.__eventMap = null;
                    this.__newEventMap = null;
                } else this.__newEventMap.remove(type);
            }
            this.__dispatching.set(event.type, false);
            return true;
        },
        __class__: openfl_events_EventDispatcher
    };
    var openfl_display_IBitmapDrawable = function() {};
    $hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
    openfl_display_IBitmapDrawable.__name__ = ["openfl", "display", "IBitmapDrawable"];
    openfl_display_IBitmapDrawable.prototype = {
        __class__: openfl_display_IBitmapDrawable
    };
    var openfl_display_DisplayObject = function() {
        this.__cacheAsBitmapSmooth = true;
        this.__cacheAsBitmap = false;
        this.__maskCached = false;
        openfl_events_EventDispatcher.call(this);
        this.__alpha = 1;
        this.__transform = new openfl_geom_Matrix();
        this.__visible = true;
        this.__rotation = 0;
        this.__rotationSine = 0;
        this.__rotationCosine = 1;
        this.__renderTransform = new openfl_geom_Matrix();
        this.__offset = new openfl_geom_Point();
        this.__worldOffset = new openfl_geom_Point();
        this.__worldAlpha = 1;
        this.__worldTransform = new openfl_geom_Matrix();
        this.__worldColorTransform = new openfl_geom_ColorTransform();
        this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
    };
    $hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
    openfl_display_DisplayObject.__name__ = ["openfl", "display", "DisplayObject"];
    openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
    openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
    openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getBounds: function(targetCoordinateSpace) {
            var matrix;
            if (targetCoordinateSpace != null) {
                matrix = this.__getWorldTransform().clone();
                matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
            } else {
                matrix = openfl_geom_Matrix.__temp;
                matrix.identity();
            }
            var bounds = new openfl_geom_Rectangle();
            this.__getBounds(bounds, matrix);
            return bounds;
        },
        getRect: function(targetCoordinateSpace) {
            return this.getBounds(targetCoordinateSpace);
        },
        globalToLocal: function(pos) {
            pos = pos.clone();
            this.__getWorldTransform().__transformInversePoint(pos);
            return pos;
        },
        hitTestObject: function(obj) {
            if (obj != null && obj.parent != null && this.parent != null) {
                var currentBounds = this.getBounds(this);
                var targetBounds = obj.getBounds(this);
                return currentBounds.intersects(targetBounds);
            }
            return false;
        },
        hitTestPoint: function(x, y, shapeFlag) {
            if (shapeFlag == null) shapeFlag = false;
            if (this.parent != null) {
                var bounds = new openfl_geom_Rectangle();
                this.__getBounds(bounds, this.__getWorldTransform());
                return bounds.containsPoint(new openfl_geom_Point(x, y));
            }
            return false;
        },
        localToGlobal: function(point) {
            return this.__getWorldTransform().transformPoint(point);
        },
        __broadcast: function(event, notifyChilden) {
            if (this.__eventMap != null && this.hasEventListener(event.type)) {
                var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
                if (event.__isCanceled) return true;
                return result;
            }
            return false;
        },
        __dispatchEvent: function(event) {
            var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this, event);
            if (event.__isCanceled) return true;
            if (event.bubbles && this.parent != null && this.parent != this) {
                event.eventPhase = 3;
                if (event.target == null) event.target = this;
                this.parent.__dispatchEvent(event);
            }
            return result;
        },
        __enterFrame: function(deltaTime) {},
        __getBounds: function(rect, matrix) {
            if (this.__graphics != null) this.__graphics.__getBounds(rect, matrix);
        },
        __getCursor: function() {
            return null;
        },
        __getInteractive: function(stack) {
            return false;
        },
        __getLocalBounds: function(rect) {
            this.__getBounds(rect, this.__transform);
        },
        __getRenderBounds: function(rect, matrix) {
            if (this.__scrollRect == null) this.__getBounds(rect, matrix);
            else {
                var r = openfl_geom_Rectangle.__temp;
                r.copyFrom(this.__scrollRect);
                r.__transform(r, matrix);
                rect.__expand(matrix.tx, matrix.ty, r.width, r.height);
            }
        },
        __getWorldTransform: function() {
            if (this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
                var list = [];
                var current = this;
                var transformDirty = this.__transformDirty;
                if (this.parent == null) {
                    if (transformDirty) this.__update(true, false);
                } else while (current.parent != null) {
                    list.push(current);
                    current = current.parent;
                    if (current.__transformDirty) transformDirty = true;
                }
                if (transformDirty) {
                    var i = list.length;
                    while (--i >= 0) list[i].__update(true, false);
                }
            }
            return this.__worldTransform;
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (this.__graphics != null) {
                if (!hitObject.get_visible() || this.__isMask) return false;
                if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
                if (this.__graphics.__hitTest(x, y, shapeFlag, this.__getWorldTransform())) {
                    if (stack != null && !interactiveOnly) stack.push(hitObject);
                    return true;
                }
            }
            return false;
        },
        __hitTestMask: function(x, y) {
            if (this.__graphics != null) {
                if (this.__graphics.__hitTest(x, y, true, this.__getWorldTransform())) return true;
            }
            return false;
        },
        __renderCairo: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoShape.render(this, renderSession);
        },
        __renderCairoMask: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics, renderSession);
        },
        __renderCanvas: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasShape.render(this, renderSession);
        },
        __renderCanvasMask: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession);
        },
        __renderDOM: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_dom_DOMShape.render(this, renderSession);
        },
        __renderGL: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0) return;
            if (this.__cacheAsBitmap) {
                this.__cacheGL(renderSession);
                return;
            }
            if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
            if (this.__graphics != null) {
                if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession);
                else {
                    openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
                    openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
                }
            }
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
            if (this.__scrollRect != null) renderSession.maskManager.popRect();
        },
        __drawGraphicsGL: function(renderSession) {
            if (this.__graphics != null) {
                if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession);
                else {
                    openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
                    openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
                }
            }
        },
        __preRenderGL: function(renderSession) {
            if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
        },
        __postRenderGL: function(renderSession) {
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
            if (this.__scrollRect != null) renderSession.maskManager.popRect();
        },
        __cacheGL: function(renderSession) {
            var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
            var x = this.__cachedBitmapBounds.x;
            var y = this.__cachedBitmapBounds.y;
            var w = this.__cachedBitmapBounds.width;
            var h = this.__cachedBitmapBounds.height;
            if (this.__cacheGLMatrix == null) this.__cacheGLMatrix = new openfl_geom_Matrix();
            if (hasCacheMatrix) {
                var bmpBounds = openfl_geom_Rectangle.__temp;
                this.__cachedBitmapBounds.__transform(bmpBounds, this.__cacheAsBitmapMatrix);
                x = bmpBounds.x;
                y = bmpBounds.y;
                w = bmpBounds.width;
                h = bmpBounds.height;
                this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
            } else this.__cacheGLMatrix.identity();
            if (w <= 0 && h <= 0) return;
            if (this.__updateCachedBitmap || this.__updateFilters) {
                if (this.__cachedFilterBounds != null) {
                    w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
                    h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
                }
                if (this.__cachedBitmap == null) this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
                this.__cachedBitmap.__resize(Math.ceil(w), Math.ceil(h));
                var m = this.__cacheGLMatrix.clone();
                m.translate( - x, -y);
                var shader = this.__shader;
                this.__shader = null;
                this.__cachedBitmap.__drawGL(renderSession, this, m, null, null, null, true, false, true);
                this.__shader = shader;
                this.__updateCachedBitmap = false;
            }
            if (this.__updateFilters) {
                openfl_filters_BitmapFilter.__applyFilters(this.__filters, renderSession, this.__cachedBitmap, this.__cachedBitmap, null, null);
                this.__updateFilters = false;
            }
            this.__cacheGLMatrix.invert();
            this.__cacheGLMatrix.__translateTransformed(x, y);
            this.__cacheGLMatrix.concat(this.__renderTransform);
            this.__cacheGLMatrix.translate(this.__offset.x, this.__offset.y);
            renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap, this.__cacheAsBitmapSmooth, this.__cacheGLMatrix, this.__worldColorTransform, this.__worldAlpha, this.blendMode, this.__shader, 0);
        },
        __setStageReference: function(stage) {
            if (this.stage != stage) {
                if (this.stage != null) {
                    if (this.stage.get_focus() == this) this.stage.set_focus(null);
                    this.dispatchEvent(new openfl_events_Event("removedFromStage", false, false));
                }
                this.stage = stage;
                if (stage != null) this.dispatchEvent(new openfl_events_Event("addedToStage", false, false));
            }
        },
        __setRenderDirty: function() {
            if (!this.__renderDirty) {
                this.__updateCachedBitmap = true;
                this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                this.__renderDirty = true;
                openfl_display_DisplayObject.__worldRenderDirty++;
            }
        },
        __setTransformDirty: function() {
            if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
            }
        },
        __update: function(transformOnly, updateChildren, maskGraphics) {
            this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
            this.__updateTransforms();
            if (this.parent != null && this.__isMask) this.__maskCached = false;
            if (updateChildren && this.__transformDirty) {
                this.__transformDirty = false;
                openfl_display_DisplayObject.__worldTransformDirty--;
            }
            if (!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
                if (this.__maskGraphics == null) this.__maskGraphics = new openfl_display_Graphics();
                this.__maskGraphics.clear();
                this.__mask.__update(true, true, this.__maskGraphics);
                this.__mask.__maskCached = true;
            }
            if (maskGraphics != null) this.__updateMask(maskGraphics);
            if (!transformOnly && this.__cacheAsBitmap) {
                if (this.__updateCachedBitmap || this.__updateFilters) {
                    if (this.__cachedBitmapBounds == null) this.__cachedBitmapBounds = new openfl_geom_Rectangle();
                    if (this.cacheAsBitmapBounds != null) this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds);
                    else {
                        this.__cachedBitmapBounds.setEmpty();
                        this.__getRenderBounds(this.__cachedBitmapBounds, openfl_geom_Matrix.__identity);
                    }
                    if (this.__filters != null) {
                        if (this.__cachedFilterBounds == null) this.__cachedFilterBounds = new openfl_geom_Rectangle();
                        this.__cachedFilterBounds.setEmpty();
                        openfl_filters_BitmapFilter.__expandBounds(this.__filters, this.__cachedFilterBounds, openfl_geom_Matrix.__identity);
                        this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
                        this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
                    }
                }
            }
            if (!transformOnly) {
                if (!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
                if (this.parent != null) {
                    this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
                    this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
                    if (this.blendMode == null || this.blendMode == 10) this.__blendMode = this.parent.__blendMode;
                    if (this.shader == null) this.__shader = this.parent.__shader;
                } else this.__worldAlpha = this.get_alpha();
                if (updateChildren && this.__renderDirty) this.__renderDirty = false;
            }
        },
        __updateChildren: function(transformOnly) {
            this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
            if (!this.__renderable && !this.__isMask) return;
            this.__worldAlpha = this.get_alpha();
            if (this.__transformDirty) {
                this.__transformDirty = false;
                openfl_display_DisplayObject.__worldTransformDirty--;
            }
        },
        __updateMask: function(maskGraphics) {
            if (this.__graphics != null) {
                maskGraphics.__commands.overrideMatrix(this.__worldTransform);
                maskGraphics.__commands.append(this.__graphics.__commands);
                maskGraphics.set___dirty(true);
                maskGraphics.__visible = true;
                if (maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
                this.__graphics.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity);
            }
        },
        __updateTransforms: function(overrideTransform) {
            var overrided = overrideTransform != null;
            var local;
            if (overrided) local = overrideTransform.clone();
            else local = this.__transform;
            if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
            if (!overrided && this.parent != null) {
                var parentTransform = this.parent.__worldTransform;
                this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
                this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
                this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
                this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
                this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
                this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
                this.__worldOffset.copyFrom(this.parent.__worldOffset);
            } else {
                this.__worldTransform.copyFrom(local);
                this.__worldOffset.setTo(0, 0);
            }
            if (this.__scrollRect != null) {
                this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
                this.__worldOffset.offset(this.__offset.x, this.__offset.y);
            } else this.__offset.setTo(0, 0);
            this.__renderTransform.copyFrom(this.__worldTransform);
            this.__renderTransform.translate( - this.__worldOffset.x, -this.__worldOffset.y);
        },
        get_alpha: function() {
            return this.__alpha;
        },
        set_alpha: function(value) {
            if (value > 1.0) value = 1.0;
            if (value != this.__alpha) {
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
            }
            return this.__alpha = value;
        },
        set_blendMode: function(value) {
            this.__blendMode = value;
            return this.blendMode = value;
        },
        set_shader: function(value) {
            this.__shader = value;
            return this.shader = value;
        },
        get_cacheAsBitmap: function() {
            return this.__cacheAsBitmap;
        },
        set_cacheAsBitmap: function(value) {
            if (!this.__renderDirty) {
                this.__updateCachedBitmap = true;
                this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                this.__renderDirty = true;
                openfl_display_DisplayObject.__worldRenderDirty++;
            }
            return this.__forceCacheAsBitmap ? this.__cacheAsBitmap = true: this.__cacheAsBitmap = value;
        },
        get_cacheAsBitmapMatrix: function() {
            return this.__cacheAsBitmapMatrix;
        },
        set_cacheAsBitmapMatrix: function(value) {
            if (!this.__renderDirty) {
                this.__updateCachedBitmap = true;
                this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                this.__renderDirty = true;
                openfl_display_DisplayObject.__worldRenderDirty++;
            }
            return this.__cacheAsBitmapMatrix = value.clone();
        },
        get_cacheAsBitmapSmooth: function() {
            return this.__cacheAsBitmapSmooth;
        },
        set_cacheAsBitmapSmooth: function(value) {
            return this.__cacheAsBitmapSmooth = value;
        },
        get_filters: function() {
            if (this.__filters == null) return [];
            else return this.__filters.slice();
        },
        set_filters: function(value) {
            if (value != null && value.length > 0) {
                this.__filters = value;
                this.__forceCacheAsBitmap = true;
                this.__cacheAsBitmap = true;
                this.__updateFilters = true;
            } else {
                this.__filters = null;
                this.__forceCacheAsBitmap = false;
                this.__cacheAsBitmap = false;
                this.__updateFilters = false;
            }
            if (!this.__renderDirty) {
                this.__updateCachedBitmap = true;
                this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                this.__renderDirty = true;
                openfl_display_DisplayObject.__worldRenderDirty++;
            }
            return value;
        },
        get_height: function() {
            var bounds = new openfl_geom_Rectangle();
            this.__getBounds(bounds, this.__transform);
            return bounds.height;
        },
        set_height: function(value) {
            var bounds = new openfl_geom_Rectangle();
            var matrix = openfl_geom_Matrix.__temp;
            matrix.identity();
            this.__getBounds(bounds, matrix);
            if (value != bounds.height) this.set_scaleY(value / bounds.height);
            else this.set_scaleY(1);
            return value;
        },
        get_mask: function() {
            return this.__mask;
        },
        set_mask: function(value) {
            if (value != this.__mask) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
            }
            if (this.__mask != null) {
                this.__mask.__isMask = false;
                this.__mask.__maskCached = false;
                this.__mask.__setTransformDirty();
                this.__mask.__setRenderDirty();
                this.__maskGraphics = null;
            }
            if (value != null) value.__isMask = true;
            return this.__mask = value;
        },
        get_mouseX: function() {
            var mouseX;
            if (this.stage != null) mouseX = this.stage.__mouseX;
            else mouseX = openfl_Lib.current.stage.__mouseX;
            var mouseY;
            if (this.stage != null) mouseY = this.stage.__mouseY;
            else mouseY = openfl_Lib.current.stage.__mouseY;
            return this.__getWorldTransform().__transformInverseX(mouseX, mouseY);
        },
        get_mouseY: function() {
            var mouseX;
            if (this.stage != null) mouseX = this.stage.__mouseX;
            else mouseX = openfl_Lib.current.stage.__mouseX;
            var mouseY;
            if (this.stage != null) mouseY = this.stage.__mouseY;
            else mouseY = openfl_Lib.current.stage.__mouseY;
            return this.__getWorldTransform().__transformInverseY(mouseX, mouseY);
        },
        get_name: function() {
            return this.__name;
        },
        set_name: function(value) {
            return this.__name = value;
        },
        get_root: function() {
            if (this.stage != null) return openfl_Lib.current;
            return null;
        },
        get_rotation: function() {
            return this.__rotation;
        },
        set_rotation: function(value) {
            if (value != this.__rotation) {
                this.__rotation = value;
                var radians = this.__rotation * (Math.PI / 180);
                this.__rotationSine = Math.sin(radians);
                this.__rotationCosine = Math.cos(radians);
                var __scaleX = this.get_scaleX();
                var __scaleY = this.get_scaleY();
                this.__transform.a = this.__rotationCosine * __scaleX;
                this.__transform.b = this.__rotationSine * __scaleX;
                this.__transform.c = -this.__rotationSine * __scaleY;
                this.__transform.d = this.__rotationCosine * __scaleY;
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
            }
            return value;
        },
        get_scaleX: function() {
            if (this.__transform.b == 0) return this.__transform.a;
            else return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
        },
        set_scaleX: function(value) {
            if (this.__transform.c == 0) {
                if (value != this.__transform.a) {
                    if (!this.__transformDirty) {
                        this.__transformDirty = true;
                        openfl_display_DisplayObject.__worldTransformDirty++;
                    }
                }
                this.__transform.a = value;
            } else {
                var a = this.__rotationCosine * value;
                var b = this.__rotationSine * value;
                if (this.__transform.a != a || this.__transform.b != b) {
                    if (!this.__transformDirty) {
                        this.__transformDirty = true;
                        openfl_display_DisplayObject.__worldTransformDirty++;
                    }
                }
                this.__transform.a = a;
                this.__transform.b = b;
            }
            return value;
        },
        get_scaleY: function() {
            if (this.__transform.c == 0) return this.__transform.d;
            else return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
        },
        set_scaleY: function(value) {
            if (this.__transform.c == 0) {
                if (value != this.__transform.d) {
                    if (!this.__transformDirty) {
                        this.__transformDirty = true;
                        openfl_display_DisplayObject.__worldTransformDirty++;
                    }
                }
                this.__transform.d = value;
            } else {
                var c = -this.__rotationSine * value;
                var d = this.__rotationCosine * value;
                if (this.__transform.d != d || this.__transform.c != c) {
                    if (!this.__transformDirty) {
                        this.__transformDirty = true;
                        openfl_display_DisplayObject.__worldTransformDirty++;
                    }
                }
                this.__transform.c = c;
                this.__transform.d = d;
            }
            return value;
        },
        get_scrollRect: function() {
            if (this.__scrollRect == null) return null;
            return this.__scrollRect.clone();
        },
        set_scrollRect: function(value) {
            if (value != this.__scrollRect) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
            }
            return this.__scrollRect = value;
        },
        get_transform: function() {
            if (this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
            return this.__objectTransform;
        },
        set_transform: function(value) {
            if (value == null) throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
            if (this.__objectTransform == null) this.__objectTransform = new openfl_geom_Transform(this);
            if (!this.__transformDirty) {
                this.__transformDirty = true;
                openfl_display_DisplayObject.__worldTransformDirty++;
            }
            this.__objectTransform.set_matrix(value.get_matrix());
            this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
            return this.__objectTransform;
        },
        get_visible: function() {
            return this.__visible;
        },
        set_visible: function(value) {
            if (value != this.__visible) {
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
            }
            return this.__visible = value;
        },
        get_width: function() {
            var bounds = new openfl_geom_Rectangle();
            this.__getBounds(bounds, this.__transform);
            return bounds.width;
        },
        set_width: function(value) {
            var bounds = new openfl_geom_Rectangle();
            var matrix = openfl_geom_Matrix.__temp;
            matrix.identity();
            this.__getBounds(bounds, matrix);
            if (value != bounds.width) this.set_scaleX(value / bounds.width);
            else this.set_scaleX(1);
            return value;
        },
        get_x: function() {
            return this.__transform.tx;
        },
        set_x: function(value) {
            if (value != this.__transform.tx) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
            }
            return this.__transform.tx = value;
        },
        get_y: function() {
            return this.__transform.ty;
        },
        set_y: function(value) {
            if (value != this.__transform.ty) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
            }
            return this.__transform.ty = value;
        },
        __class__: openfl_display_DisplayObject,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_width: "set_width",
            get_width: "get_width",
            set_visible: "set_visible",
            get_visible: "get_visible",
            set_transform: "set_transform",
            get_transform: "get_transform",
            set_shader: "set_shader",
            set_scrollRect: "set_scrollRect",
            get_scrollRect: "get_scrollRect",
            set_scaleY: "set_scaleY",
            get_scaleY: "get_scaleY",
            set_scaleX: "set_scaleX",
            get_scaleX: "get_scaleX",
            set_rotation: "set_rotation",
            get_rotation: "get_rotation",
            get_root: "get_root",
            set_name: "set_name",
            get_name: "get_name",
            get_mouseY: "get_mouseY",
            get_mouseX: "get_mouseX",
            set_mask: "set_mask",
            get_mask: "get_mask",
            set_height: "set_height",
            get_height: "get_height",
            set_filters: "set_filters",
            get_filters: "get_filters",
            set_cacheAsBitmapSmooth: "set_cacheAsBitmapSmooth",
            get_cacheAsBitmapSmooth: "get_cacheAsBitmapSmooth",
            set_cacheAsBitmapMatrix: "set_cacheAsBitmapMatrix",
            get_cacheAsBitmapMatrix: "get_cacheAsBitmapMatrix",
            set_cacheAsBitmap: "set_cacheAsBitmap",
            get_cacheAsBitmap: "get_cacheAsBitmap",
            set_blendMode: "set_blendMode",
            set_alpha: "set_alpha",
            get_alpha: "get_alpha"
        }
    });
    var openfl_display_InteractiveObject = function() {
        openfl_display_DisplayObject.call(this);
        this.doubleClickEnabled = false;
        this.mouseEnabled = true;
        this.needsSoftKeyboard = false;
        this.__tabEnabled = false;
        this.tabIndex = -1;
    };
    $hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
    openfl_display_InteractiveObject.__name__ = ["openfl", "display", "InteractiveObject"];
    openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
    openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype, {
        requestSoftKeyboard: function() {
            openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
            return false;
        },
        __getInteractive: function(stack) {
            if (stack != null) {
                stack.push(this);
                if (this.parent != null) this.parent.__getInteractive(stack);
            }
            return true;
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
            return openfl_display_DisplayObject.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly, hitObject);
        },
        get_tabEnabled: function() {
            return this.__tabEnabled;
        },
        set_tabEnabled: function(value) {
            return this.__tabEnabled = value;
        },
        __class__: openfl_display_InteractiveObject,
        __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, {
            set_tabEnabled: "set_tabEnabled",
            get_tabEnabled: "get_tabEnabled"
        })
    });
    var openfl_display_DisplayObjectContainer = function() {
        openfl_display_InteractiveObject.call(this);
        this.mouseChildren = true;
        this.__children = [];
        this.__removedChildren = [];
    };
    $hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
    openfl_display_DisplayObjectContainer.__name__ = ["openfl", "display", "DisplayObjectContainer"];
    openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
    openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype, {
        addChild: function(child) {
            if (child != null) {
                if (child.parent != null) child.parent.removeChild(child);
                this.__children.push(child);
                child.parent = this;
                if (this.stage != null) child.__setStageReference(this.stage);
                if (!child.__transformDirty) {
                    child.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                if (!child.__renderDirty) {
                    child.__updateCachedBitmap = true;
                    child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
                    child.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
                var event = new openfl_events_Event("added", true);
                event.target = child;
                child.__dispatchEvent(event);
            }
            return child;
        },
        addChildAt: function(child, index) {
            if (index > this.__children.length || index < 0) throw new js__$Boot_HaxeError("Invalid index position " + index);
            if (child.parent == this) HxOverrides.remove(this.__children, child);
            else {
                if (child.parent != null) child.parent.removeChild(child);
                child.parent = this;
                if (this.stage != null) child.__setStageReference(this.stage);
                if (!child.__transformDirty) {
                    child.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                if (!child.__renderDirty) {
                    child.__updateCachedBitmap = true;
                    child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
                    child.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
                var event = new openfl_events_Event("added", true);
                event.target = child;
                child.__dispatchEvent(event);
            }
            this.__children.splice(index, 0, child);
            return child;
        },
        areInaccessibleObjectsUnderPoint: function(point) {
            return false;
        },
        contains: function(child) {
            while (child != this && child != null) child = child.parent;
            return child == this;
        },
        getChildAt: function(index) {
            if (index >= 0 && index < this.__children.length) return this.__children[index];
            return null;
        },
        getChildByName: function(name) {
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                if (child.get_name() == name) return child;
            }
            return null;
        },
        getChildIndex: function(child) {
            var _g1 = 0;
            var _g = this.__children.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (this.__children[i] == child) return i;
            }
            return - 1;
        },
        getObjectsUnderPoint: function(point) {
            var stack = [];
            this.__hitTest(point.x, point.y, false, stack, false, this);
            stack.reverse();
            return stack;
        },
        removeChild: function(child) {
            if (child != null && child.parent == this) {
                child.__dispatchEvent(new openfl_events_Event("removed", true));
                if (this.stage != null) child.__setStageReference(null);
                child.parent = null;
                HxOverrides.remove(this.__children, child);
                this.__removedChildren.push(child);
                if (!child.__transformDirty) {
                    child.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                if (!child.__renderDirty) {
                    child.__updateCachedBitmap = true;
                    child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
                    child.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
            }
            return child;
        },
        removeChildAt: function(index) {
            if (index >= 0 && index < this.__children.length) return this.removeChild(this.__children[index]);
            return null;
        },
        removeChildren: function(beginIndex, endIndex) {
            if (endIndex == null) endIndex = 2147483647;
            if (beginIndex == null) beginIndex = 0;
            if (endIndex == 2147483647) {
                endIndex = this.__children.length - 1;
                if (endIndex < 0) return;
            }
            if (beginIndex > this.__children.length - 1) return;
            else if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
            var numRemovals = endIndex - beginIndex;
            while (numRemovals >= 0) {
                this.removeChildAt(beginIndex);
                numRemovals--;
            }
        },
        resolve: function(fieldName) {
            if (this.__children == null) return null;
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                if (child.get_name() == fieldName) return child;
            }
            return null;
        },
        setChildIndex: function(child, index) {
            if (index >= 0 && index <= this.__children.length && child.parent == this) {
                HxOverrides.remove(this.__children, child);
                this.__children.splice(index, 0, child);
            }
        },
        swapChildren: function(child1, child2) {
            if (child1.parent == this && child2.parent == this) {
                var index1 = HxOverrides.indexOf(this.__children, child1, 0);
                var index2 = HxOverrides.indexOf(this.__children, child2, 0);
                this.__children[index1] = child2;
                this.__children[index2] = child1;
            }
        },
        swapChildrenAt: function(index1, index2) {
            var swap = this.__children[index1];
            this.__children[index1] = this.__children[index2];
            this.__children[index2] = swap;
            swap = null;
        },
        __broadcast: function(event, notifyChilden) {
            if (event.target == null) event.target = this;
            var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this, event, notifyChilden);
            if (!event.__isCanceled && notifyChilden) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g]; ++_g;
                    child.__broadcast(event, true);
                    if (event.__isCanceled) return true;
                }
            }
            return result;
        },
        __enterFrame: function(deltaTime) {
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__enterFrame(deltaTime);
            }
        },
        __getBounds: function(rect, matrix) {
            openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix);
            if (this.__children.length == 0) return;
            if (matrix != null) {
                this.__updateTransforms(matrix);
                this.__updateChildren(true);
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                if (child.get_scaleX() == 0 || child.get_scaleY() == 0) continue;
                child.__getBounds(rect, child.__worldTransform);
            }
            if (matrix != null) {
                this.__updateTransforms();
                this.__updateChildren(true);
            }
        },
        __getRenderBounds: function(rect, matrix) {
            if (this.__scrollRect != null) {
                openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this, rect, matrix);
                return;
            } else openfl_display_InteractiveObject.prototype.__getBounds.call(this, rect, matrix);
            if (this.__children.length == 0) return;
            if (matrix != null) {
                this.__updateTransforms(matrix);
                this.__updateChildren(true);
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                if (child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) continue;
                child.__getRenderBounds(rect, child.__worldTransform);
            }
            if (matrix != null) {
                this.__updateTransforms();
                this.__updateChildren(true);
            }
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
            if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
            if (this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x, y)))) return false;
            var i = this.__children.length;
            if (interactiveOnly) {
                if (stack == null || !this.mouseChildren) {
                    while (--i >= 0) if (this.__children[i].__hitTest(x, y, shapeFlag, null, true, this.__children[i])) {
                        if (stack != null) stack.push(hitObject);
                        return true;
                    }
                } else if (stack != null) {
                    var length = stack.length;
                    var interactive = false;
                    var hitTest = false;
                    while (--i >= 0) {
                        interactive = this.__children[i].__getInteractive(null);
                        if (interactive || this.mouseEnabled && !hitTest) {
                            if (this.__children[i].__hitTest(x, y, shapeFlag, stack, true, this.__children[i])) {
                                hitTest = true;
                                if (interactive) break;
                            }
                        }
                    }
                    if (hitTest) {
                        stack.splice(length, 0, hitObject);
                        return true;
                    }
                }
            } else while (--i >= 0) this.__children[i].__hitTest(x, y, shapeFlag, stack, false, this.__children[i]);
            return false;
        },
        __hitTestMask: function(x, y) {
            var i = this.__children.length;
            while (--i >= 0) if (this.__children[i].__hitTestMask(x, y)) return true;
            return false;
        },
        __renderCairo: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0) return;
            openfl_display_InteractiveObject.prototype.__renderCairo.call(this, renderSession);
            if (this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(), this.__worldTransform);
            if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__renderCairo(renderSession);
            }
            if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
            if (this.__mask != null) renderSession.maskManager.popMask();
            if (this.get_scrollRect() != null) renderSession.maskManager.popRect();
        },
        __renderCairoMask: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics, renderSession);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__renderCairoMask(renderSession);
            }
        },
        __renderCanvas: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0) return;
            openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
            if (this.get_scrollRect() != null) renderSession.maskManager.pushRect(this.get_scrollRect(), this.__worldTransform);
            if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__renderCanvas(renderSession);
            }
            if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
            if (this.__mask != null) renderSession.maskManager.popMask();
            if (this.get_scrollRect() != null) renderSession.maskManager.popRect();
        },
        __renderCanvasMask: function(renderSession) {
            if (this.__graphics != null) openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics, renderSession);
            var bounds = new openfl_geom_Rectangle();
            this.__getBounds(bounds, this.__transform);
            renderSession.context.rect(0, 0, bounds.width, bounds.height);
        },
        __renderDOM: function(renderSession) {
            openfl_display_InteractiveObject.prototype.__renderDOM.call(this, renderSession);
            if (this.__mask != null) renderSession.maskManager.pushMask(this.__mask);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__renderDOM(renderSession);
            }
            var _g2 = 0;
            var _g11 = this.__removedChildren;
            while (_g2 < _g11.length) {
                var orphan = _g11[_g2]; ++_g2;
                if (orphan.stage == null) orphan.__renderDOM(renderSession);
            }
            if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
            if (this.__mask != null) renderSession.maskManager.popMask();
        },
        __renderGL: function(renderSession) {
            if (!this.__renderable || this.__worldAlpha <= 0) return;
            if (this.__cacheAsBitmap) {
                this.__cacheGL(renderSession);
                return;
            }
            if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
            if (this.__graphics != null) {
                if (this.__graphics.__hardware) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this, renderSession);
                else {
                    openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics, renderSession);
                    openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession);
                }
            }
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__renderGL(renderSession);
            }
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
            if (this.__scrollRect != null) renderSession.maskManager.popRect();
            if (this.__removedChildren.length > 0) this.__removedChildren.splice(0, this.__removedChildren.length);
        },
        __setStageReference: function(stage) {
            if (this.stage != stage) {
                if (this.stage != null) this.__dispatchEvent(new openfl_events_Event("removedFromStage", false, false));
                this.stage = stage;
                if (stage != null) this.__dispatchEvent(new openfl_events_Event("addedToStage", false, false));
                if (this.__children != null) {
                    var _g = 0;
                    var _g1 = this.__children;
                    while (_g < _g1.length) {
                        var child = _g1[_g]; ++_g;
                        child.__setStageReference(stage);
                    }
                }
            }
        },
        __update: function(transformOnly, updateChildren, maskGraphics) {
            openfl_display_InteractiveObject.prototype.__update.call(this, transformOnly, updateChildren, maskGraphics);
            if (!this.__renderable && !this.__isMask) return;
            if (updateChildren) {
                var _g = 0;
                var _g1 = this.__children;
                while (_g < _g1.length) {
                    var child = _g1[_g]; ++_g;
                    child.__update(transformOnly, true, maskGraphics);
                }
            }
        },
        __updateChildren: function(transformOnly) {
            openfl_display_InteractiveObject.prototype.__updateChildren.call(this, transformOnly);
            var _g = 0;
            var _g1 = this.__children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                child.__update(transformOnly, true);
            }
        },
        get_numChildren: function() {
            return this.__children.length;
        },
        __class__: openfl_display_DisplayObjectContainer,
        __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, {
            get_numChildren: "get_numChildren"
        })
    });
    var openfl_display_Sprite = function() {
        openfl_display_DisplayObjectContainer.call(this);
        this.buttonMode = false;
        this.useHandCursor = true;
        this.loaderInfo = openfl_display_LoaderInfo.create(null);
    };
    $hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
    openfl_display_Sprite.__name__ = ["openfl", "display", "Sprite"];
    openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
    openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
        startDrag: function(lockCenter, bounds) {
            if (lockCenter == null) lockCenter = false;
            if (this.stage != null) this.stage.__startDrag(this, lockCenter, bounds);
        },
        stopDrag: function() {
            if (this.stage != null) this.stage.__stopDrag(this);
        },
        __getCursor: function() {
            if (this.buttonMode && this.useHandCursor) return lime_ui_MouseCursor.POINTER;
            else return null;
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (this.hitArea != null) {
                if (!this.hitArea.mouseEnabled) {
                    this.hitArea.mouseEnabled = true;
                    var hitTest = this.hitArea.__hitTest(x, y, shapeFlag, null, true, hitObject);
                    this.hitArea.mouseEnabled = false;
                    if (hitTest) stack[stack.length] = hitObject;
                    return hitTest;
                }
            } else {
                if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) return false;
                if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
                if (openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this, x, y, shapeFlag, stack, interactiveOnly, hitObject)) return interactiveOnly;
                else if ((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x, y, shapeFlag, this.__getWorldTransform())) {
                    if (stack != null) stack.push(hitObject);
                    return true;
                }
            }
            return false;
        },
        __hitTestMask: function(x, y) {
            if (openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this, x, y)) return true;
            else if (this.__graphics != null && this.__graphics.__hitTest(x, y, true, this.__getWorldTransform())) return true;
            return false;
        },
        get_graphics: function() {
            if (this.__graphics == null) {
                this.__graphics = new openfl_display_Graphics();
                this.__graphics.__owner = this;
            }
            return this.__graphics;
        },
        get_tabEnabled: function() {
            return this.__tabEnabled || this.buttonMode;
        },
        __class__: openfl_display_Sprite,
        __properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__, {
            get_graphics: "get_graphics"
        })
    });
    var com_davidmaletz_faengfl_InitSprite = function() {
        openfl_display_Sprite.call(this);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.faengfl.InitSprite"] = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_faengfl_InitSprite.__name__ = ["com", "davidmaletz", "faengfl", "InitSprite"];
    com_davidmaletz_faengfl_InitSprite.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_InitSprite.prototype = $extend(openfl_display_Sprite.prototype, {
        init: function(e) {
            throw new js__$Boot_HaxeError("This should never be called.");
        },
        destroy: function(e) {
            throw new js__$Boot_HaxeError("This should never be called.");
        },
        __class__: com_davidmaletz_faengfl_InitSprite
    });
    var com_davidmaletz_faengfl_Application = function(id, font, w, h, lang, smooth, framebuffer) {
        if (framebuffer == null) framebuffer = false;
        if (smooth == null) smooth = true;
        com_davidmaletz_faengfl_InitSprite.call(this);
        com_davidmaletz_faengfl_Application.instance = this;
        new com_davidmaletz_faengfl_TouchAdapter();
        com_davidmaletz_faengfl_TextSprite.SMOOTH = smooth;
        com_fancyfish_faeng_text_FontManager.defaultFont.set(com_fancyfish_faeng_common_Lang.getFontCached(font, false));
        this._width = w;
        this._height = h;
        window.addEventListener("keydown",
        function(e) {
            if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
                e.preventDefault();
            }
        },
        false);
        if (openfl_Assets.exists("data/lang/languages.xml")) {
            com_fancyfish_faeng_common_Lang.init(null, Xml.parse(openfl_Assets.getText("data/lang/languages.xml")).firstElement());
            if (lang == null) lang = com_fancyfish_faeng_common_Lang.default_lang;
            com_fancyfish_faeng_common_Lang.setLanguage(lang, "data/lang/", null);
        }
        if (framebuffer) this.container = new com_davidmaletz_faengfl_FramebufferSprite(w, h);
        else this.container = new com_davidmaletz_faengfl_ContainerSprite(w, h);
        this.top = new openfl_display_Sprite();
    };
    $hxClasses["com.davidmaletz.faengfl.Application"] = com_davidmaletz_faengfl_Application;
    com_davidmaletz_faengfl_Application.__name__ = ["com", "davidmaletz", "faengfl", "Application"];
    com_davidmaletz_faengfl_Application.instance = null;
    com_davidmaletz_faengfl_Application.setFocus = function(f, e) {
        if (com_davidmaletz_faengfl_Application.focus != f) {
            var old = com_davidmaletz_faengfl_Application.focus;
            com_davidmaletz_faengfl_Application.focus = f;
            if (old != null) old.loseFocus();
            if (com_davidmaletz_faengfl_Application.focus != null) com_davidmaletz_faengfl_Application.focus.gainFocus(e);
        }
    };
    com_davidmaletz_faengfl_Application.getFocus = function() {
        return com_davidmaletz_faengfl_Application.focus;
    };
    com_davidmaletz_faengfl_Application.button_factory = null;
    com_davidmaletz_faengfl_Application.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_faengfl_Application.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            openfl_Lib.current.stage.addEventListener("enterFrame", com_davidmaletz_faengfl_FaengFL.enter_frame, false, 1000);
            openfl_Lib.current.stage.addEventListener("resize", $bind(this, this.resize));
            this.resize(null);
            this.addChild(this.container);
            this.addChild(this.top);
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("enterFrame", com_davidmaletz_faengfl_FaengFL.enter_frame);
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            openfl_Lib.current.stage.removeEventListener("resize", $bind(this, this.resize));
        },
        resize: function(e) {
            var w = this.stage.stageWidth;
            var h = this.stage.stageHeight;
            var x = 0.0;
            var iw = this._width;
            var ih = this._height;
            var s = Math.min(w / iw, h / ih);
            this.container.set_scaleX(this.container.set_scaleY(s));
            this.container.set_x((w - iw * s) * 0.5 + x * s);
            this.container.set_y((h - ih * s) * 0.5);
            var g = this.top.get_graphics();
            g.clear();
            var b = new openfl_geom_Rectangle(this.container.get_x() - x * s, this.container.get_y(), iw * s, ih * s);
            if (b.get_left() > 0) {
                g.beginFill(0);
                g.drawRect(0, 0, b.get_left(), h);
                g.drawRect(b.get_right(), 0, w - b.get_right(), h);
                g.endFill();
            }
            if (b.get_top() > 0) {
                g.beginFill(0);
                g.drawRect(0, 0, w, b.get_top());
                g.drawRect(0, b.get_bottom(), w, h - b.get_bottom());
                g.endFill();
            }
        },
        __class__: com_davidmaletz_faengfl_Application
    });
    var openfl_geom_Point = function(x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.x = x;
        this.y = y;
    };
    $hxClasses["openfl.geom.Point"] = openfl_geom_Point;
    openfl_geom_Point.__name__ = ["openfl", "geom", "Point"];
    openfl_geom_Point.distance = function(pt1, pt2) {
        var dx = pt1.x - pt2.x;
        var dy = pt1.y - pt2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    openfl_geom_Point.interpolate = function(pt1, pt2, f) {
        return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x), pt2.y + f * (pt1.y - pt2.y));
    };
    openfl_geom_Point.polar = function(len, angle) {
        return new openfl_geom_Point(len * Math.cos(angle), len * Math.sin(angle));
    };
    openfl_geom_Point.prototype = {
        add: function(v) {
            return new openfl_geom_Point(v.x + this.x, v.y + this.y);
        },
        clone: function() {
            return new openfl_geom_Point(this.x, this.y);
        },
        copyFrom: function(sourcePoint) {
            this.x = sourcePoint.x;
            this.y = sourcePoint.y;
        },
        equals: function(toCompare) {
            return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
        },
        normalize: function(thickness) {
            if (this.x == 0 && this.y == 0) return;
            else {
                var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
                this.x *= norm;
                this.y *= norm;
            }
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy;
        },
        setTo: function(xa, ya) {
            this.x = xa;
            this.y = ya;
        },
        subtract: function(v) {
            return new openfl_geom_Point(this.x - v.x, this.y - v.y);
        },
        toString: function() {
            return "(x=" + this.x + ", y=" + this.y + ")";
        },
        __toLimeVector2: function() {
            return new lime_math_Vector2(this.x, this.y);
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        __class__: openfl_geom_Point,
        __properties__: {
            get_length: "get_length"
        }
    };
    var com_davidmaletz_mining_Main = function() {
        com_davidmaletz_mining_Main.settings = openfl_net_SharedObject.getLocal("settings", "aground");
        com_davidmaletz_mining_Main.damageFont = new com_fancyfish_faeng_common_mutable_Mutable();
        com_davidmaletz_controls_ClickableHandler.globalOnSelect = com_davidmaletz_mining_Main.select;
        com_davidmaletz_controls_ClickableHandler.globalOnCancel = com_davidmaletz_mining_Main.cancel;
        com_davidmaletz_controls_ClickableHandler.globalOnMove = com_davidmaletz_mining_Main.move;
        com_davidmaletz_faengfl_Button.globalOnRelease = com_davidmaletz_mining_Main.select;
        com_davidmaletz_mining_Main.damageFont.set(com_fancyfish_faeng_common_Lang.getFontCached("data/fonts/damage.fnt", false));
        com_davidmaletz_faengfl_EventHandler.additionalVars = com_davidmaletz_mining_Main.additionalVars;
        com_davidmaletz_faengfl_Application.call(this, "Aground", "data/fonts/font.fnt", 256, 144, Reflect.field(com_davidmaletz_mining_Main.settings.data, "language"), false, true);
        com_davidmaletz_mining_Main.label_factory = new com_davidmaletz_mining_ui_LabelFactory();
        com_davidmaletz_faengfl_Application.button_factory = new com_davidmaletz_mining_ui_MyButtonFactory();
        com_davidmaletz_mining_Main.window_factory = new com_davidmaletz_mining_ui_WindowFactory();
        var s = new com_davidmaletz_mining_ui_ScrollbarUI();
        com_davidmaletz_controls_scroll_Scrollbar.ui = s;
        com_davidmaletz_controls_Slider.ui = new com_davidmaletz_mining_ui_MySliderUI(s);
        com_davidmaletz_lerp_PositionKeyframe.ROUND = true;
        com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap = com_davidmaletz_faengfl_AutoTileBitmap.get("data/keys.png", Math.round(com_davidmaletz_mining_Main.keyCenter.x * 2), Math.round(com_davidmaletz_mining_Main.keyCenter.y * 2), com_davidmaletz_mining_Main.keyCenter);
        new com_davidmaletz_mining_MyController(com_davidmaletz_mining_Main.settings);
        new com_davidmaletz_mining_MyAchievements(com_davidmaletz_mining_Main.settings);
        var d = Reflect.field(com_davidmaletz_mining_Main.settings.data, "fullscreen");
        if (d == true) openfl_Lib.current.stage.set_displayState(1);
        var d1 = Reflect.field(com_davidmaletz_mining_Main.settings.data, "text_speed");
        if (d1 != null) com_davidmaletz_faengfl_RevealText.TEXT_SPEED = d1;
        this.fullRes = new com_davidmaletz_faengfl_ContainerSprite(256, 144);
        com_davidmaletz_faengfl_SoundManager.init(com_davidmaletz_mining_Main.settings, $bind(this, this.splash));
        var elem = window.document.getElementById('openfl-content');
        elem.addEventListener("dragover", com_davidmaletz_mining_Main.preventDefault, false);
        elem.addEventListener("dragleave", com_davidmaletz_mining_Main.preventDefault, false);
        elem.addEventListener("drop", com_davidmaletz_mining_Main.dropFile, false);
    };
    $hxClasses["com.davidmaletz.mining.Main"] = com_davidmaletz_mining_Main;
    com_davidmaletz_mining_Main.__name__ = ["com", "davidmaletz", "mining", "Main"];
    com_davidmaletz_mining_Main.settings = null;
    com_davidmaletz_mining_Main.damageFont = null;
    com_davidmaletz_mining_Main.preventDefault = function(e) {
        e.stopPropagation();
        e.preventDefault();
    };
    com_davidmaletz_mining_Main.importFile = function(e) {
        com_davidmaletz_mining_ui_Options.importFile(e.target.result);
    };
    com_davidmaletz_mining_Main.isTitleScreen = function() {
        var c = com_davidmaletz_faengfl_Application.instance.container;
        if (c.get_numChildren() > 0) {
            var child;
            child = js_Boot.__cast(c.getChildAt(0), openfl_display_Sprite);
            return child.get_numChildren() > 0 && Std["is"](child.getChildAt(0), com_davidmaletz_mining_ui_TitleScreen);
        } else return false;
    };
    com_davidmaletz_mining_Main.dropFile = function(e) {
        com_davidmaletz_mining_Main.preventDefault(e);
        var files = e.target.files || e.dataTransfer.files;
        if (files && files.length > 0) {
            if (!com_davidmaletz_mining_Main.isTitleScreen()) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, "Can only import saves on Title Screen."), 1);
                return;
            }
            var reader = new FileReader();
            reader.onload = com_davidmaletz_mining_Main.importFile;
            reader.readAsText(files[0]);
        }
    };
    com_davidmaletz_mining_Main.select = function() {
        com_davidmaletz_faengfl_SoundManager.playSFX("select");
    };
    com_davidmaletz_mining_Main.cancel = function() {
        com_davidmaletz_faengfl_SoundManager.playSFX("cancel");
    };
    com_davidmaletz_mining_Main.move = function() {
        com_davidmaletz_faengfl_SoundManager.playSFX("move");
    };
    com_davidmaletz_mining_Main.getContainer = function() {
        return com_davidmaletz_faengfl_Application.instance.container;
    };
    com_davidmaletz_mining_Main.layersBelowVisible = function(layer, visible) {
        var _g = 0;
        while (_g < layer) {
            var i = _g++;
            com_davidmaletz_faengfl_Application.instance.container.getChildAt(i).set_visible(visible);
        }
    };
    com_davidmaletz_mining_Main.getFullRes = function() {
        return (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).fullRes;
    };
    com_davidmaletz_mining_Main.showPopup = function(d) {
        com_davidmaletz_faengfl_Application.instance.container.addDisplay(d, 1);
    };
    com_davidmaletz_mining_Main.setColorMatrix = function(m) { (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance.container, com_davidmaletz_faengfl_FramebufferSprite)).colorMatrix = m;
    };
    com_davidmaletz_mining_Main.slot = null;
    com_davidmaletz_mining_Main.saveTime = null;
    com_davidmaletz_mining_Main.loadTime = null;
    com_davidmaletz_mining_Main.writeHeader = function(b, player) {
        player.write(b);
        com_davidmaletz_faengfl_UTFUtils.writeUTF(b, player.area.spawner.id);
        var t = Math.round(com_davidmaletz_mining_Main.saveTime + (openfl_Lib.getTimer() - com_davidmaletz_mining_Main.loadTime) / 1000.0);
        b.writeInt32(t);
    };
    com_davidmaletz_mining_Main.readHeader = function(b, version) {
        var p;
        p = js_Boot.__cast(com_davidmaletz_mining_world_Object.load(b, version), com_davidmaletz_mining_Player);
        var a = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
        var t = b.readInt32();
        return {
            player: p,
            area: a,
            time: t
        };
    };
    com_davidmaletz_mining_Main.getSlotHeader = function(slot) {
        var save = Reflect.field(com_davidmaletz_mining_Main.settings.data, slot);
        try {
            var b = com_davidmaletz_mining_Main._load(save);
            var ver = b.readUInt16();
            if (! (ver >= 11)) throw new js__$Boot_HaxeError("Bad save version.");
            return com_davidmaletz_mining_Main.readHeader(b, ver);
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            return save == null;
        }
    };
    com_davidmaletz_mining_Main.exportSlot = function(slot) {
        var save = Reflect.field(com_davidmaletz_mining_Main.settings.data, slot);
        try {
            var b = com_davidmaletz_mining_Main._load(save);
            return haxe_crypto_Base64.encode(b.readAll());
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            return null;
        }
    };
    com_davidmaletz_mining_Main.importSlot = function(data) {
        try {
            var bytes = haxe_crypto_Base64.decode(data);
            var b = new haxe_io_BytesInput(bytes);
            var ver = b.readUInt16();
            if (! (ver >= 11)) throw new js__$Boot_HaxeError("Bad save version.");
            com_davidmaletz_mining_Main.readHeader(b, ver);
            return bytes;
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            return null;
        }
    };
    com_davidmaletz_mining_Main.save = function(player) {
        if (player.area == null) return;
        var b = new haxe_io_BytesOutput();
        b.writeUInt16(17);
        com_davidmaletz_mining_Main.writeHeader(b, player);
        player.area.write(b);
        b.flush();
        b.close();
        com_davidmaletz_mining_Main.setSlot(com_davidmaletz_mining_Main.slot, b.getBytes());
        new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("common", "save"));
    };
    com_davidmaletz_mining_Main["delete"] = function(slot) {
        if (Reflect.field(com_davidmaletz_mining_Main.settings.data, slot) != null) {
            com_davidmaletz_mining_Main.settings.data[slot] = null;
            com_davidmaletz_mining_Main.settings.flush();
            return true;
        } else return false;
    };
    com_davidmaletz_mining_Main.deleteSave = function(slot, popup) {
        if (com_davidmaletz_mining_Main["delete"](slot) && popup) new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("common", "del_save"));
    };
    com_davidmaletz_mining_Main.setSlot = function(slot, data) {
        com_davidmaletz_mining_Main.settings.data[slot] = data;
        com_davidmaletz_mining_Main.settings.flush();
    };
    com_davidmaletz_mining_Main.canLoad = function(ver) {
        return ver >= 11;
    };
    com_davidmaletz_mining_Main._load = function(data) {
        if (data == null) throw new js__$Boot_HaxeError("No save data.");
        var b = new haxe_io_BytesInput(data);
        return b;
    };
    com_davidmaletz_mining_Main.hasSave = function(slot) {
        return Reflect.field(com_davidmaletz_mining_Main.settings.data, slot) != null;
    };
    com_davidmaletz_mining_Main.slotToId = function(slot) {
        return "slot" + slot;
    };
    com_davidmaletz_mining_Main.getLocalPlayer = function() {
        return (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player;
    };
    com_davidmaletz_mining_Main.loadSave = function(slot) {
        return (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).load(slot);
    };
    com_davidmaletz_mining_Main.loadLastSave = function() {
        var p = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).load(com_davidmaletz_mining_Main.slot);
        return p;
    };
    com_davidmaletz_mining_Main.titleScreen = function() {
        com_davidmaletz_faengfl_SoundManager.playBGM("title");
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(com_davidmaletz_faengfl_Application.instance.container);
        var c = com_davidmaletz_faengfl_Application.instance.container;
        c.addDisplay(new com_davidmaletz_mining_ui_TitleScreen(), 0);
    };
    com_davidmaletz_mining_Main.gameOver = function() {
        com_davidmaletz_faengfl_SoundManager.playBGM("game_over", 1, 0);
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(com_davidmaletz_faengfl_Application.instance.container);
        var c = com_davidmaletz_faengfl_Application.instance.container;
        c.addDisplay(new com_davidmaletz_mining_ui_GameOver(), 0);
    };
    com_davidmaletz_mining_Main.toggleFullscreen = function() {
        var s = openfl_Lib.current.stage;
        if (s.get_displayState() == 2) s.set_displayState(1);
        else s.set_displayState(2);
        var ret = s.get_displayState() != 2;
        com_davidmaletz_mining_Main.settings.data.fullscreen = ret;
        return ret;
    };
    com_davidmaletz_mining_Main.isFullscreen = function() {
        return openfl_Lib.current.stage.get_displayState() != 2;
    };
    com_davidmaletz_mining_Main.closeWindows = function() {
        var c = com_davidmaletz_faengfl_Application.instance.container;
        if (c.get_numChildren() <= 1) return;
        var ui;
        ui = js_Boot.__cast(c.getChildAt(1), openfl_display_Sprite);
        var len = ui.get_numChildren();
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var c1 = ui.getChildAt(i);
            if (js_Boot.__instanceof(c1, com_davidmaletz_faengfl_Window))(js_Boot.__cast(c1, com_davidmaletz_faengfl_Window)).close();
        }
    };
    com_davidmaletz_mining_Main.additionalVars = function(v) {
        v.set("Quest", com_davidmaletz_mining_npc_Quest);
        v.set("Item", com_davidmaletz_mining_item_Item);
        v.set("Recipe", com_davidmaletz_mining_item_Recipe);
        v.set("Tile", com_davidmaletz_tiles_Tile);
        v.set("hasStorm", com_davidmaletz_mining_effects_Storm.hasStorm);
        v.set("ObjectInfo", com_davidmaletz_mining_world_ObjectInfo);
        v.set("FarmInfo", com_davidmaletz_mining_item_FarmInfo);
        v.set("StructureInfo", com_davidmaletz_mining_structure_StructureInfo);
        v.set("ObjectLayer", com_davidmaletz_mining_world_ObjectLayer);
    };
    com_davidmaletz_mining_Main.window_factory = null;
    com_davidmaletz_mining_Main.label_factory = null;
    com_davidmaletz_mining_Main.__super__ = com_davidmaletz_faengfl_Application;
    com_davidmaletz_mining_Main.prototype = $extend(com_davidmaletz_faengfl_Application.prototype, {
        resize: function(e) {
            com_davidmaletz_faengfl_Application.prototype.resize.call(this, e);
            this.fullRes.set_scaleX(this.container.get_scaleX());
            this.fullRes.set_scaleY(this.container.get_scaleY());
            this.fullRes.set_rotation(this.container.get_rotation());
            this.fullRes.set_x(this.container.get_x());
            this.fullRes.set_y(this.container.get_y());
        },
        init: function(e) {
            com_davidmaletz_faengfl_Application.prototype.init.call(this, e);
            this.addChildAt(this.fullRes, 1);
            openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.key_down), false, 100);
            openfl_Lib.current.stage.addEventListener("keyUp", $bind(this, this.key_up), false, 100);
        },
        destroy: function(e) {
            com_davidmaletz_faengfl_Application.prototype.destroy.call(this, e);
            openfl_Lib.current.stage.removeEventListener("keyDown", $bind(this, this.key_down));
            openfl_Lib.current.stage.removeEventListener("keyUp", $bind(this, this.key_up));
        },
        key_down: function(e) {
            if (e.altKey && e.keyCode == 13) e.stopImmediatePropagation();
        },
        key_up: function(e) {
            if (e.altKey && e.keyCode == 13) {
                com_davidmaletz_mining_Main.toggleFullscreen();
                com_davidmaletz_mining_Main.settings.flush();
                e.stopImmediatePropagation();
            }
        },
        load: function(slot) {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this.container);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            com_davidmaletz_mining_Main.slot = slot;
            this.player = null;
            var area;
            var save = Reflect.field(com_davidmaletz_mining_Main.settings.data, slot);
            var err = null;
            var gen = null;
            try {
                var b = com_davidmaletz_mining_Main._load(save);
                var ver = b.readUInt16();
                if (! (ver >= 11)) throw new js__$Boot_HaxeError("Bad save version.");
                var header = com_davidmaletz_mining_Main.readHeader(b, ver);
                this.player = header.player;
                area = com_davidmaletz_mining_world_Area.readArea(b, ver);
                com_davidmaletz_mining_Main.saveTime = header.time;
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                if (save != null) {
                    err = Std.string(e);
                    haxe_Log.trace(err, {
                        fileName: "Main.hx",
                        lineNumber: 261,
                        className: "com.davidmaletz.mining.Main",
                        methodName: "load"
                    });
                    com_fancyfish_faeng_common_Utils.printExceptionTrace();
                }
                gen = com_davidmaletz_mining_world_Generate.create("start");
                area = gen.area;
                this.player = gen.player;
                new com_davidmaletz_mining_ui_MoveTooltip();
                com_davidmaletz_mining_Main.saveTime = 0;
            }
            if (this.player == null) throw new js__$Boot_HaxeError("No player found!");
            area.addObject(this.player);
            var r = new com_davidmaletz_mining_renderer_AreaRenderer(area);
            c.addDisplay(new com_davidmaletz_mining_renderer_Parallax(r), 0);
            c.addDisplay(r, 0);
            com_davidmaletz_mining_Main.loadTime = openfl_Lib.getTimer();
            if (err != null) new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("common", "save_corrupt"), 16777215, -16777216, 30, 60, 30);
            if (gen != null) gen.init(r);
            else com_davidmaletz_mining_world_Generate.runLoad(r, this.player);
            return this.player;
        },
        splash: function() {
            var bmp = openfl_Assets.getBitmapData("data/title_full.jpg");
            var b = new openfl_display_Bitmap(bmp, 1, true);
            b.set_scaleX(b.set_scaleY(256 / bmp.width));
            var s = new com_davidmaletz_lerp_LerpSprite();
            s.addChild(b);
            var func = function() {
                s.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 60, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, s));
            };
            s.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 60, func);
            this.fullRes.addChild(s);
            new com_davidmaletz_mining_ui_transition_Modal(s, null);
            com_davidmaletz_mining_Main.titleScreen();
            new com_davidmaletz_mining_ui_transition_Modal(s, com_davidmaletz_mining_ui_Preloader.onStart);
        },
        __class__: com_davidmaletz_mining_Main
    });
    var DocumentClass = function() {
        openfl_Lib.current.addChild(this);
        com_davidmaletz_mining_Main.call(this);
        this.dispatchEvent(new openfl_events_Event("addedToStage", false, false));
    };
    $hxClasses["DocumentClass"] = DocumentClass;
    DocumentClass.__name__ = ["DocumentClass"];
    DocumentClass.__super__ = com_davidmaletz_mining_Main;
    DocumentClass.prototype = $extend(com_davidmaletz_mining_Main.prototype, {
        __class__: DocumentClass
    });
    var lime_AssetLibrary = function() {
        this.onChange = new lime_app_Event_$Void_$Void();
    };
    $hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
    lime_AssetLibrary.__name__ = ["lime", "AssetLibrary"];
    lime_AssetLibrary.prototype = {
        exists: function(id, type) {
            return false;
        },
        getAudioBuffer: function(id) {
            return null;
        },
        getBytes: function(id) {
            return null;
        },
        getFont: function(id) {
            return null;
        },
        getImage: function(id) {
            return null;
        },
        getPath: function(id) {
            return null;
        },
        getText: function(id) {
            var bytes = this.getBytes(id);
            if (bytes == null) return null;
            else return bytes.getString(0, bytes.length);
        },
        isLocal: function(id, type) {
            return true;
        },
        list: function(type) {
            return null;
        },
        load: function() {
            var _g = this;
            return new lime_app_Future(function() {
                return _g;
            });
        },
        loadAudioBuffer: function(id) {
            var _g = this;
            return new lime_app_Future(function() {
                return _g.getAudioBuffer(id);
            });
        },
        loadBytes: function(id) {
            var _g = this;
            return new lime_app_Future(function() {
                return _g.getBytes(id);
            });
        },
        loadFont: function(id) {
            var _g = this;
            return new lime_app_Future(function() {
                return _g.getFont(id);
            });
        },
        loadImage: function(id) {
            var _g = this;
            return new lime_app_Future(function() {
                return _g.getImage(id);
            });
        },
        loadText: function(id) {
            return this.loadBytes(id).then(function(bytes) {
                return new lime_app_Future(function() {
                    if (bytes == null) return null;
                    else return bytes.getString(0, bytes.length);
                });
            });
        },
        unload: function() {},
        __class__: lime_AssetLibrary
    };
    var DefaultAssetLibrary = function() {
        this.type = new haxe_ds_StringMap();
        this.path = new haxe_ds_StringMap();
        this.className = new haxe_ds_StringMap();
        lime_AssetLibrary.call(this);
        var id;
        id = "data/title_full.jpg";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/areas/start.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/areas.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/bg.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/crafting.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/dig.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/ellipse.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/enemies.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/farm.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/fonts/damage.fnt";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/fonts/damage.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/fonts/font.fnt";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/fonts/font_0.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/fonts/font_1.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/game_over.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/items.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/keys.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/lang/en_US.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/lang/keyboards/default.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/lang/languages.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/npc/alchemist.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/npc/builder.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/npc/farmer.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/npc/miner.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/npc/trader.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/objects.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/projectiles/arrow.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/quests.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/scenes/hut/alchemist.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/builder.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/farmer.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/fire.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/hut.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/miner.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/scenes/hut/scene.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/scenes/hut/trader.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/sounds.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/structures.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/tile/achievements.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/achievement_flash.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/alchemist.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/anims.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/tile/boar.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/boat.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/bush.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/cage.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/clouds.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/crack.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/death.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/dock.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/dockhouse.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/dock_front.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/dragon.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/farm.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/food_market.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/golem.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/hut.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/items.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/kitchen.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/kitchen2.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/lab.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/mineral_market.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/npc.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/orchard.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/pen.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/pen_fence.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/player.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/rat.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/redbreast.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/red_bush.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/seagull.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/smelter.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/storehouse.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/sun.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/tiles.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/tiles.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/tile/tree1.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/tree2.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/tree3.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/ui.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/water.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/waves.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/weaps_market.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/weps.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/wheat.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/workshop.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/tile/wyrm.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/title.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/title_full.jpg";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/trees.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "data/ui/achievement_bg.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/ancient_scroll.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/ancient_window.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/bar.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/bar_fuel.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/buttons.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/gradient.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/inventory.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/quest.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/questlog.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/ui/speech.png";
        this.path.set(id, id);
        this.type.set(id, "IMAGE");
        id = "data/volumes.xml";
        this.path.set(id, id);
        this.type.set(id, "TEXT");
        id = "sound/achievement.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/axe.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/axe_tree.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/blocked.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/boar_death.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/bow.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/build.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/buy.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/cancel.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/death.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/drop.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/eat.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/enemy.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/fire.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/hit.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/item.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/levelup.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/low_hp.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/miss.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/move.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/pick.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/rain.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/rat_death.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/rock_door.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/select.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/smelter.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/sword.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/talking1.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/talking2.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/thunder.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/tree_felled.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/workshop.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/wyrm_death.ogg";
        this.path.set(id, id);
        this.type.set(id, "SOUND");
        id = "sound/game_over.ogg";
        this.path.set(id, id);
        this.type.set(id, "MUSIC");
        id = "sound/no_boundaries.ogg";
        this.path.set(id, id);
        this.type.set(id, "MUSIC");
        id = "sound/title.ogg";
        this.path.set(id, id);
        this.type.set(id, "MUSIC");
        var assetsPrefix = null;
        if (ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config, "assetsPrefix")) assetsPrefix = ApplicationMain.config.assetsPrefix;
        if (assetsPrefix != null) {
            var $it0 = this.path.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                var value = assetsPrefix + this.path.get(k);
                this.path.set(k, value);
            }
        }
    };
    $hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
    DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
    DefaultAssetLibrary.__super__ = lime_AssetLibrary;
    DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype, {
        exists: function(id, type) {
            var requestedType;
            if (type != null) requestedType = js_Boot.__cast(type, String);
            else requestedType = null;
            var assetType = this.type.get(id);
            if (assetType != null) {
                if (assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) return true;
                if (requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") return true;
            }
            return false;
        },
        getAudioBuffer: function(id) {
            return null;
        },
        getBytes: function(id) {
            var loader;
            var key = this.path.get(id);
            loader = lime_app_Preloader.loaders.get(key);
            if (loader == null) return null;
            var bytes = loader.bytes;
            if (bytes != null) return bytes;
            else return null;
        },
        getFont: function(id) {
            return js_Boot.__cast(Type.createInstance(this.className.get(id), []), lime_text_Font);
        },
        getImage: function(id) {
            return lime_graphics_Image.fromImageElement((function($this) {
                var $r;
                var key = $this.path.get(id);
                $r = lime_app_Preloader.images.get(key);
                return $r;
            } (this)));
        },
        getPath: function(id) {
            return this.path.get(id);
        },
        getText: function(id) {
            var loader;
            var key = this.path.get(id);
            loader = lime_app_Preloader.loaders.get(key);
            if (loader == null) return null;
            var bytes = loader.bytes;
            if (bytes != null) return bytes.getString(0, bytes.length);
            else return null;
        },
        isLocal: function(id, type) {
            var requestedType;
            if (type != null) requestedType = js_Boot.__cast(type, String);
            else requestedType = null;
            return true;
        },
        list: function(type) {
            var requestedType;
            if (type != null) requestedType = js_Boot.__cast(type, String);
            else requestedType = null;
            var items = [];
            var $it0 = this.type.keys();
            while ($it0.hasNext()) {
                var id = $it0.next();
                if (requestedType == null || this.exists(id, type)) items.push(id);
            }
            return items;
        },
        loadAudioBuffer: function(id) {
            var _g = this;
            var promise = new lime_app_Promise();
            promise.completeWith(new lime_app_Future(function() {
                return _g.getAudioBuffer(id);
            }));
            return promise.future;
        },
        loadBytes: function(id) {
            var promise = new lime_app_Promise();
            if (this.path.exists(id)) {
                var request = new lime_net_HTTPRequest();
                promise.completeWith(request.load(this.path.get(id) + "?" + lime_Assets.cache.version));
            } else promise.complete(this.getBytes(id));
            return promise.future;
        },
        loadImage: function(id) {
            var promise = new lime_app_Promise();
            if (this.path.exists(id)) {
                var image = new Image();
                image.onload = function(_) {
                    promise.complete(lime_graphics_Image.fromImageElement(image));
                };
                image.onerror = $bind(promise, promise.error);
                image.src = this.path.get(id) + "?" + lime_Assets.cache.version;
            } else promise.complete(this.getImage(id));
            return promise.future;
        },
        loadText: function(id) {
            var promise = new lime_app_Promise();
            if (this.path.exists(id)) {
                var request = new lime_net_HTTPRequest();
                var future = request.load(this.path.get(id) + "?" + lime_Assets.cache.version);
                future.onProgress(function(progress) {
                    promise.progress(progress);
                });
                future.onError(function(msg) {
                    promise.error(msg);
                });
                future.onComplete(function(bytes) {
                    promise.complete(bytes.getString(0, bytes.length));
                });
            } else promise.complete(this.getText(id));
            return promise.future;
        },
        __class__: DefaultAssetLibrary
    });
    var EReg = function(r, opt) {
        opt = opt.split("u").join("");
        this.r = new RegExp(r, opt);
    };
    $hxClasses["EReg"] = EReg;
    EReg.__name__ = ["EReg"];
    EReg.prototype = {
        match: function(s) {
            if (this.r.global) this.r.lastIndex = 0;
            this.r.m = this.r.exec(s);
            this.r.s = s;
            return this.r.m != null;
        },
        matched: function(n) {
            if (this.r.m != null && n >= 0 && n < this.r.m.length) return this.r.m[n];
            else throw new js__$Boot_HaxeError("EReg::matched");
        },
        replace: function(s, by) {
            return s.replace(this.r, by);
        },
        __class__: EReg
    };
    var HxOverrides = function() {};
    $hxClasses["HxOverrides"] = HxOverrides;
    HxOverrides.__name__ = ["HxOverrides"];
    HxOverrides.strDate = function(s) {
        var _g = s.length;
        switch (_g) {
        case 8:
            var k = s.split(":");
            var d = new Date();
            d.setTime(0);
            d.setUTCHours(k[0]);
            d.setUTCMinutes(k[1]);
            d.setUTCSeconds(k[2]);
            return d;
        case 10:
            var k1 = s.split("-");
            return new Date(k1[0], k1[1] - 1, k1[2], 0, 0, 0);
        case 19:
            var k2 = s.split(" ");
            var y = k2[0].split("-");
            var t = k2[1].split(":");
            return new Date(y[0], y[1] - 1, y[2], t[0], t[1], t[2]);
        default:
            throw new js__$Boot_HaxeError("Invalid date format : " + s);
        }
    };
    HxOverrides.cca = function(s, index) {
        var x = s.charCodeAt(index);
        if (x != x) return undefined;
        return x;
    };
    HxOverrides.substr = function(s, pos, len) {
        if (pos != null && pos != 0 && len != null && len < 0) return "";
        if (len == null) len = s.length;
        if (pos < 0) {
            pos = s.length + pos;
            if (pos < 0) pos = 0;
        } else if (len < 0) len = s.length + len - pos;
        return s.substr(pos, len);
    };
    HxOverrides.indexOf = function(a, obj, i) {
        var len = a.length;
        if (i < 0) {
            i += len;
            if (i < 0) i = 0;
        }
        while (i < len) {
            if (a[i] === obj) return i;
            i++;
        }
        return - 1;
    };
    HxOverrides.remove = function(a, obj) {
        var i = HxOverrides.indexOf(a, obj, 0);
        if (i == -1) return false;
        a.splice(i, 1);
        return true;
    };
    HxOverrides.iter = function(a) {
        return {
            cur: 0,
            arr: a,
            hasNext: function() {
                return this.cur < this.arr.length;
            },
            next: function() {
                return this.arr[this.cur++];
            }
        };
    };
    var IntIterator = function(min, max) {
        this.min = min;
        this.max = max;
    };
    $hxClasses["IntIterator"] = IntIterator;
    IntIterator.__name__ = ["IntIterator"];
    IntIterator.prototype = {
        hasNext: function() {
            return this.min < this.max;
        },
        next: function() {
            return this.min++;
        },
        __class__: IntIterator
    };
    var List = function() {
        this.length = 0;
    };
    $hxClasses["List"] = List;
    List.__name__ = ["List"];
    List.prototype = {
        add: function(item) {
            var x = [item];
            if (this.h == null) this.h = x;
            else this.q[1] = x;
            this.q = x;
            this.length++;
        },
        pop: function() {
            if (this.h == null) return null;
            var x = this.h[0];
            this.h = this.h[1];
            if (this.h == null) this.q = null;
            this.length--;
            return x;
        },
        __class__: List
    };
    Math.__name__ = ["Math"];
    var NMEPreloader = function() {
        openfl_display_Sprite.call(this);
        var backgroundColor = this.getBackgroundColor();
        var r = backgroundColor >> 16 & 255;
        var g = backgroundColor >> 8 & 255;
        var b = backgroundColor & 255;
        var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
        var color = 0;
        if (perceivedLuminosity < 70) color = 16777215;
        var x = 30;
        var height = 7;
        var y = this.getHeight() / 2 - height / 2;
        var width = this.getWidth() - x * 2;
        var padding = 2;
        this.outline = new openfl_display_Sprite();
        this.outline.get_graphics().beginFill(color, 0.07);
        this.outline.get_graphics().drawRect(0, 0, width, height);
        this.outline.set_x(x);
        this.outline.set_y(y);
        this.addChild(this.outline);
        this.progress = new openfl_display_Sprite();
        this.progress.get_graphics().beginFill(color, 0.35);
        this.progress.get_graphics().drawRect(0, 0, width - padding * 2, height - padding * 2);
        this.progress.set_x(x + padding);
        this.progress.set_y(y + padding);
        this.progress.set_scaleX(0);
        this.addChild(this.progress);
    };
    $hxClasses["NMEPreloader"] = NMEPreloader;
    NMEPreloader.__name__ = ["NMEPreloader"];
    NMEPreloader.__super__ = openfl_display_Sprite;
    NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype, {
        getBackgroundColor: function() {
            return 0;
        },
        getHeight: function() {
            var height = 0;
            if (height > 0) return height;
            else return openfl_Lib.current.stage.stageHeight;
        },
        getWidth: function() {
            var width = 0;
            if (width > 0) return width;
            else return openfl_Lib.current.stage.stageWidth;
        },
        onInit: function() {},
        onLoaded: function() {
            this.dispatchEvent(new openfl_events_Event("complete"));
        },
        onUpdate: function(bytesLoaded, bytesTotal) {
            var percentLoaded = bytesLoaded / bytesTotal;
            if (percentLoaded > 1) percentLoaded = 1;
            this.progress.set_scaleX(percentLoaded);
        },
        __class__: NMEPreloader
    });
    var PriorityManager = function() {};
    $hxClasses["PriorityManager"] = PriorityManager;
    PriorityManager.__name__ = ["PriorityManager"];
    PriorityManager.getPriority = function() {
        return PriorityManager.priority + 1;
    };
    var Reflect = function() {};
    $hxClasses["Reflect"] = Reflect;
    Reflect.__name__ = ["Reflect"];
    Reflect.hasField = function(o, field) {
        return Object.prototype.hasOwnProperty.call(o, field);
    };
    Reflect.field = function(o, field) {
        try {
            return o[field];
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            return null;
        }
    };
    Reflect.setField = function(o, field, value) {
        o[field] = value;
    };
    Reflect.getProperty = function(o, field) {
        var tmp;
        if (o == null) return null;
        else if (o.__properties__ && (tmp = o.__properties__["get_" + field])) return o[tmp]();
        else return o[field];
    };
    Reflect.setProperty = function(o, field, value) {
        var tmp;
        if (o.__properties__ && (tmp = o.__properties__["set_" + field])) o[tmp](value);
        else o[field] = value;
    };
    Reflect.callMethod = function(o, func, args) {
        return func.apply(o, args);
    };
    Reflect.fields = function(o) {
        var a = [];
        if (o != null) {
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            for (var f in o) {
                if (f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o, f)) a.push(f);
            }
        }
        return a;
    };
    Reflect.isFunction = function(f) {
        return typeof(f) == "function" && !(f.__name__ || f.__ename__);
    };
    Reflect.compareMethods = function(f1, f2) {
        if (f1 == f2) return true;
        if (!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
        return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
    };
    Reflect.deleteField = function(o, field) {
        if (!Object.prototype.hasOwnProperty.call(o, field)) return false;
        delete(o[field]);
        return true;
    };
    Reflect.makeVarArgs = function(f) {
        return function() {
            var a = Array.prototype.slice.call(arguments);
            return f(a);
        };
    };
    var Std = function() {};
    $hxClasses["Std"] = Std;
    Std.__name__ = ["Std"];
    Std["is"] = function(v, t) {
        return js_Boot.__instanceof(v, t);
    };
    Std.string = function(s) {
        return js_Boot.__string_rec(s, "");
    };
    Std["int"] = function(x) {
        return x | 0;
    };
    Std.parseInt = function(x) {
        var v = parseInt(x, 10);
        if (v == 0 && (HxOverrides.cca(x, 1) == 120 || HxOverrides.cca(x, 1) == 88)) v = parseInt(x);
        if (isNaN(v)) return null;
        return v;
    };
    Std.parseFloat = function(x) {
        return parseFloat(x);
    };
    var StringBuf = function() {
        this.b = "";
    };
    $hxClasses["StringBuf"] = StringBuf;
    StringBuf.__name__ = ["StringBuf"];
    StringBuf.prototype = {
        add: function(x) {
            this.b += Std.string(x);
        },
        addSub: function(s, pos, len) {
            if (len == null) this.b += HxOverrides.substr(s, pos, null);
            else this.b += HxOverrides.substr(s, pos, len);
        },
        __class__: StringBuf
    };
    var StringTools = function() {};
    $hxClasses["StringTools"] = StringTools;
    StringTools.__name__ = ["StringTools"];
    StringTools.urlEncode = function(s) {
        return encodeURIComponent(s);
    };
    StringTools.urlDecode = function(s) {
        return decodeURIComponent(s.split("+").join(" "));
    };
    StringTools.startsWith = function(s, start) {
        return s.length >= start.length && HxOverrides.substr(s, 0, start.length) == start;
    };
    StringTools.endsWith = function(s, end) {
        var elen = end.length;
        var slen = s.length;
        return slen >= elen && HxOverrides.substr(s, slen - elen, elen) == end;
    };
    StringTools.isSpace = function(s, pos) {
        var c = HxOverrides.cca(s, pos);
        return c > 8 && c < 14 || c == 32;
    };
    StringTools.ltrim = function(s) {
        var l = s.length;
        var r = 0;
        while (r < l && StringTools.isSpace(s, r)) r++;
        if (r > 0) return HxOverrides.substr(s, r, l - r);
        else return s;
    };
    StringTools.rtrim = function(s) {
        var l = s.length;
        var r = 0;
        while (r < l && StringTools.isSpace(s, l - r - 1)) r++;
        if (r > 0) return HxOverrides.substr(s, 0, l - r);
        else return s;
    };
    StringTools.trim = function(s) {
        return StringTools.ltrim(StringTools.rtrim(s));
    };
    StringTools.replace = function(s, sub, by) {
        return s.split(sub).join(by);
    };
    StringTools.hex = function(n, digits) {
        var s = "";
        var hexChars = "0123456789ABCDEF";
        do {
            s = hexChars.charAt(n & 15) + s;
            n >>>= 4;
        } while ( n > 0 );
        if (digits != null) while (s.length < digits) s = "0" + s;
        return s;
    };
    StringTools.fastCodeAt = function(s, index) {
        return s.charCodeAt(index);
    };
    var ValueType = $hxClasses["ValueType"] = {
        __ename__: ["ValueType"],
        __constructs__: ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]
    };
    ValueType.TNull = ["TNull", 0];
    ValueType.TNull.toString = $estr;
    ValueType.TNull.__enum__ = ValueType;
    ValueType.TInt = ["TInt", 1];
    ValueType.TInt.toString = $estr;
    ValueType.TInt.__enum__ = ValueType;
    ValueType.TFloat = ["TFloat", 2];
    ValueType.TFloat.toString = $estr;
    ValueType.TFloat.__enum__ = ValueType;
    ValueType.TBool = ["TBool", 3];
    ValueType.TBool.toString = $estr;
    ValueType.TBool.__enum__ = ValueType;
    ValueType.TObject = ["TObject", 4];
    ValueType.TObject.toString = $estr;
    ValueType.TObject.__enum__ = ValueType;
    ValueType.TFunction = ["TFunction", 5];
    ValueType.TFunction.toString = $estr;
    ValueType.TFunction.__enum__ = ValueType;
    ValueType.TClass = function(c) {
        var $x = ["TClass", 6, c];
        $x.__enum__ = ValueType;
        $x.toString = $estr;
        return $x;
    };
    ValueType.TEnum = function(e) {
        var $x = ["TEnum", 7, e];
        $x.__enum__ = ValueType;
        $x.toString = $estr;
        return $x;
    };
    ValueType.TUnknown = ["TUnknown", 8];
    ValueType.TUnknown.toString = $estr;
    ValueType.TUnknown.__enum__ = ValueType;
    var Type = function() {};
    $hxClasses["Type"] = Type;
    Type.__name__ = ["Type"];
    Type.getClass = function(o) {
        if (o == null) return null;
        else return js_Boot.getClass(o);
    };
    Type.getSuperClass = function(c) {
        return c.__super__;
    };
    Type.getClassName = function(c) {
        var a = c.__name__;
        if (a == null) return null;
        return a.join(".");
    };
    Type.getEnumName = function(e) {
        var a = e.__ename__;
        return a.join(".");
    };
    Type.resolveClass = function(name) {
        var cl = $hxClasses[name];
        if (cl == null || !cl.__name__) return null;
        return cl;
    };
    Type.resolveEnum = function(name) {
        var e = $hxClasses[name];
        if (e == null || !e.__ename__) return null;
        return e;
    };
    Type.createInstance = function(cl, args) {
        var _g = args.length;
        switch (_g) {
        case 0:
            return new cl();
        case 1:
            return new cl(args[0]);
        case 2:
            return new cl(args[0], args[1]);
        case 3:
            return new cl(args[0], args[1], args[2]);
        case 4:
            return new cl(args[0], args[1], args[2], args[3]);
        case 5:
            return new cl(args[0], args[1], args[2], args[3], args[4]);
        case 6:
            return new cl(args[0], args[1], args[2], args[3], args[4], args[5]);
        case 7:
            return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        case 8:
            return new cl(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
        default:
            throw new js__$Boot_HaxeError("Too many arguments");
        }
        return null;
    };
    Type.createEmptyInstance = function(cl) {
        function empty() {};
        empty.prototype = cl.prototype;
        return new empty();
    };
    Type.createEnum = function(e, constr, params) {
        var f = Reflect.field(e, constr);
        if (f == null) throw new js__$Boot_HaxeError("No such constructor " + constr);
        if (Reflect.isFunction(f)) {
            if (params == null) throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
            return Reflect.callMethod(e, f, params);
        }
        if (params != null && params.length != 0) throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
        return f;
    };
    Type.getClassFields = function(c) {
        var a = Reflect.fields(c);
        HxOverrides.remove(a, "__name__");
        HxOverrides.remove(a, "__interfaces__");
        HxOverrides.remove(a, "__properties__");
        HxOverrides.remove(a, "__super__");
        HxOverrides.remove(a, "__meta__");
        HxOverrides.remove(a, "prototype");
        return a;
    };
    Type.getEnumConstructs = function(e) {
        var a = e.__constructs__;
        return a.slice();
    };
    Type["typeof"] = function(v) {
        var _g = typeof(v);
        switch (_g) {
        case "boolean":
            return ValueType.TBool;
        case "string":
            return ValueType.TClass(String);
        case "number":
            if (Math.ceil(v) == v % 2147483648.0) return ValueType.TInt;
            return ValueType.TFloat;
        case "object":
            if (v == null) return ValueType.TNull;
            var e = v.__enum__;
            if (e != null) return ValueType.TEnum(e);
            var c = js_Boot.getClass(v);
            if (c != null) return ValueType.TClass(c);
            return ValueType.TObject;
        case "function":
            if (v.__name__ || v.__ename__) return ValueType.TObject;
            return ValueType.TFunction;
        case "undefined":
            return ValueType.TNull;
        default:
            return ValueType.TUnknown;
        }
    };
    Type.enumEq = function(a, b) {
        if (a == b) return true;
        try {
            if (a[0] != b[0]) return false;
            var _g1 = 2;
            var _g = a.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (!Type.enumEq(a[i], b[i])) return false;
            }
            var e = a.__enum__;
            if (e != b.__enum__ || e == null) return false;
        } catch(e1) {
            haxe_CallStack.lastException = e1;
            if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
            return false;
        }
        return true;
    };
    var _$UInt_UInt_$Impl_$ = {};
    $hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
    _$UInt_UInt_$Impl_$.__name__ = ["_UInt", "UInt_Impl_"];
    _$UInt_UInt_$Impl_$.gt = function(a, b) {
        var aNeg = a < 0;
        var bNeg = b < 0;
        if (aNeg != bNeg) return aNeg;
        else return a > b;
    };
    _$UInt_UInt_$Impl_$.toFloat = function(this1) {
        var $int = this1;
        if ($int < 0) return 4294967296.0 + $int;
        else return $int + 0.0;
    };
    var Xml = function(nodeType) {
        this.nodeType = nodeType;
        this.children = [];
        this.attributeMap = new haxe_ds_StringMap();
    };
    $hxClasses["Xml"] = Xml;
    Xml.__name__ = ["Xml"];
    Xml.parse = function(str) {
        return haxe_xml_Parser.parse(str);
    };
    Xml.createElement = function(name) {
        var xml = new Xml(Xml.Element);
        if (xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
        xml.nodeName = name;
        return xml;
    };
    Xml.createPCData = function(data) {
        var xml = new Xml(Xml.PCData);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
        xml.nodeValue = data;
        return xml;
    };
    Xml.createCData = function(data) {
        var xml = new Xml(Xml.CData);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
        xml.nodeValue = data;
        return xml;
    };
    Xml.createComment = function(data) {
        var xml = new Xml(Xml.Comment);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
        xml.nodeValue = data;
        return xml;
    };
    Xml.createDocType = function(data) {
        var xml = new Xml(Xml.DocType);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
        xml.nodeValue = data;
        return xml;
    };
    Xml.createProcessingInstruction = function(data) {
        var xml = new Xml(Xml.ProcessingInstruction);
        if (xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
        xml.nodeValue = data;
        return xml;
    };
    Xml.createDocument = function() {
        return new Xml(Xml.Document);
    };
    Xml.prototype = {
        get_nodeValue: function() {
            if (this.nodeType == Xml.Document || this.nodeType == Xml.Element) throw new js__$Boot_HaxeError("Bad node type, unexpected " + this.nodeType);
            return this.nodeValue;
        },
        get: function(att) {
            if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
            return this.attributeMap.get(att);
        },
        set: function(att, value) {
            if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
            this.attributeMap.set(att, value);
        },
        exists: function(att) {
            if (this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
            return this.attributeMap.exists(att);
        },
        elements: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            var ret;
            var _g = [];
            var _g1 = 0;
            var _g2 = this.children;
            while (_g1 < _g2.length) {
                var child = _g2[_g1]; ++_g1;
                if (child.nodeType == Xml.Element) _g.push(child);
            }
            ret = _g;
            return HxOverrides.iter(ret);
        },
        elementsNamed: function(name) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            var ret;
            var _g = [];
            var _g1 = 0;
            var _g2 = this.children;
            while (_g1 < _g2.length) {
                var child = _g2[_g1]; ++_g1;
                if (child.nodeType == Xml.Element && (function($this) {
                    var $r;
                    if (child.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
                    $r = child.nodeName;
                    return $r;
                } (this)) == name) _g.push(child);
            }
            ret = _g;
            return HxOverrides.iter(ret);
        },
        firstChild: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            return this.children[0];
        },
        firstElement: function() {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            var _g = 0;
            var _g1 = this.children;
            while (_g < _g1.length) {
                var child = _g1[_g]; ++_g;
                if (child.nodeType == Xml.Element) return child;
            }
            return null;
        },
        addChild: function(x) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            if (x.parent != null) x.parent.removeChild(x);
            this.children.push(x);
            x.parent = this;
        },
        removeChild: function(x) {
            if (this.nodeType != Xml.Document && this.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
            if (HxOverrides.remove(this.children, x)) {
                x.parent = null;
                return true;
            }
            return false;
        },
        __class__: Xml,
        __properties__: {
            get_nodeValue: "get_nodeValue"
        }
    };
    var com_davidmaletz_controls_ClickableColumns = function() {};
    $hxClasses["com.davidmaletz.controls.ClickableColumns"] = com_davidmaletz_controls_ClickableColumns;
    com_davidmaletz_controls_ClickableColumns.__name__ = ["com", "davidmaletz", "controls", "ClickableColumns"];
    com_davidmaletz_controls_ClickableColumns.prototype = {
        __class__: com_davidmaletz_controls_ClickableColumns
    };
    var com_davidmaletz_controls_ArrayClickableColumns = function() {
        this.clickables = [];
        this.parents = [];
    };
    $hxClasses["com.davidmaletz.controls.ArrayClickableColumns"] = com_davidmaletz_controls_ArrayClickableColumns;
    com_davidmaletz_controls_ArrayClickableColumns.__name__ = ["com", "davidmaletz", "controls", "ArrayClickableColumns"];
    com_davidmaletz_controls_ArrayClickableColumns.__interfaces__ = [com_davidmaletz_controls_ClickableColumns];
    com_davidmaletz_controls_ArrayClickableColumns.prototype = {
        getCount: function() {
            return this.clickables.length;
        },
        getParent: function(col) {
            return this.parents[col];
        },
        get: function(col) {
            return this.clickables[col];
        },
        clear: function() {
            this.clickables.length = 0;
            this.parents.length = 0;
        },
        addColumn: function(col, c, parent) {
            this.clickables.splice(col, 0, [c]);
            this.parents.splice(col, 0, parent);
        },
        addClickable: function(c, parent) {
            var b = c.getPos();
            var len = this.clickables.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var ar = this.clickables[i];
                var x = ar[0].getPos().x;
                if (b.x < x) {
                    this.clickables.splice(i, 0, [c]);
                    this.parents.splice(i, 0, parent);
                    if (this.listener != null) this.listener();
                    return;
                } else if (b.x == x) {
                    var pos = com_davidmaletz_controls_ClickableHandler.lower_bound(ar, b.y);
                    ar.splice(pos, 0, c);
                    if (this.listener != null) this.listener();
                    return;
                }
            }
            this.addColumn(this.clickables.length, c, parent);
            if (this.listener != null) this.listener();
        },
        changeSelected: function(selected, col) {},
        inBounds: function(col, p) {
            return true;
        },
        getYOffset: function(col) {
            return 0;
        },
        setAddListener: function(func) {
            this.listener = func;
        },
        fireAdd: function() {
            if (this.listener != null) this.listener();
        },
        __class__: com_davidmaletz_controls_ArrayClickableColumns
    };
    var com_davidmaletz_controls_Clickable = function() {};
    $hxClasses["com.davidmaletz.controls.Clickable"] = com_davidmaletz_controls_Clickable;
    com_davidmaletz_controls_Clickable.__name__ = ["com", "davidmaletz", "controls", "Clickable"];
    com_davidmaletz_controls_Clickable.prototype = {
        __class__: com_davidmaletz_controls_Clickable
    };
    var com_davidmaletz_controls_Button = function(x, y, bg, hover, text, col, scale, fnt) {
        if (scale == null) scale = 1;
        if (col == null) col = 0;
        this.onClickFunc = null;
        openfl_display_Sprite.call(this);
        var w = bg.getWidth();
        var h = bg.getHeight();
        this._bounds = new openfl_geom_Rectangle(x, y, w, h);
        this.bg = bg.create(0, 0);
        this.hover = hover.create(0, 0);
        this.set_x(x);
        this.set_y(y);
        if (this.bg != null) this.addChild(this.bg);
        if (this.hover != null) {
            this.hover.set_visible(false);
            this.addChild(this.hover);
        }
        if (text != null) {
            var t = new com_davidmaletz_faengfl_TextSprite(text, new com_fancyfish_faeng_text_CharacterPlacer(w, 1), col, scale, fnt);
            t.set_y((h - scale * 8) * 0.5 - 1);
            this.addChild(t);
        }
    };
    $hxClasses["com.davidmaletz.controls.Button"] = com_davidmaletz_controls_Button;
    com_davidmaletz_controls_Button.__name__ = ["com", "davidmaletz", "controls", "Button"];
    com_davidmaletz_controls_Button.__interfaces__ = [com_davidmaletz_controls_Clickable];
    com_davidmaletz_controls_Button.__super__ = openfl_display_Sprite;
    com_davidmaletz_controls_Button.prototype = $extend(openfl_display_Sprite.prototype, {
        getPos: function() {
            return this._bounds;
        },
        onHover: function(hover) {
            if (this.bg != null) this.bg.set_visible(!hover);
            if (this.hover != null) this.hover.set_visible(hover);
        },
        onClick: function() {
            if (this.onClickFunc != null) this.onClickFunc();
            return true;
        },
        __class__: com_davidmaletz_controls_Button
    });
    var com_davidmaletz_controls_ClickableHandler = function(l, cols) {
        this.selected = null;
        this.pressed = null;
        this.isInit = false;
        if (cols == null) this.clickables = new com_davidmaletz_controls_ArrayClickableColumns();
        else this.clickables = cols;
        this.listener = l;
        this.clickables.setAddListener($bind(this, this.addListener));
    };
    $hxClasses["com.davidmaletz.controls.ClickableHandler"] = com_davidmaletz_controls_ClickableHandler;
    com_davidmaletz_controls_ClickableHandler.__name__ = ["com", "davidmaletz", "controls", "ClickableHandler"];
    com_davidmaletz_controls_ClickableHandler.lower_bound = function(ar, y) {
        var count = ar.length;
        var cur = 0;
        var step;
        while (count > 0) {
            step = count >> 1;
            var val = ar[cur + step].getPos().y;
            if (val < y) {
                cur += step + 1;
                count -= step + 1;
            } else if (val == y) return cur + step;
            else count = step;
        }
        return cur;
    };
    com_davidmaletz_controls_ClickableHandler.point = null;
    com_davidmaletz_controls_ClickableHandler.prototype = {
        init: function() {
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.tap), false, com_davidmaletz_faengfl_Window.window_ct);
            com_davidmaletz_controls_Controller.instance.addEventListener("press", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct);
            com_davidmaletz_controls_Controller.instance.addEventListener("release", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct);
            if (this.selected == null) this.moveSelection(1, 0);
            this.isInit = true;
        },
        destroy: function() {
            this.isInit = false;
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.tap));
            com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.modal));
            com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.modal));
        },
        iterator: function() {
            return new com_davidmaletz_controls__$ClickableHandler_CIterator(this.clickables);
        },
        modal: function(e) {
            e.stopImmediatePropagation();
        },
        addClickable: function(c, parent) {
            this.clickables.addClickable(c, parent);
        },
        addListener: function() {
            if (this.selected != null) {
                var len = this.clickables.getCount();
                var _g = 0;
                while (_g < len) {
                    var x = _g++;
                    var ar = this.clickables.get(x);
                    var l = ar.length;
                    var _g1 = 0;
                    while (_g1 < l) {
                        var y = _g1++;
                        if (ar[y] == this.selected) {
                            this.setSelected(this.selected, x, y);
                            return;
                        }
                    }
                }
                this.setSelected(null, 0, 0);
            }
        },
        clickOnSelect: function(c, x, y) {
            return false;
        },
        doClick: function() {
            if (this.listener.canSelect(this.selected)) {
                if (this.selected.onClick() && com_davidmaletz_controls_ClickableHandler.globalOnSelect != null) com_davidmaletz_controls_ClickableHandler.globalOnSelect();
            }
        },
        moveSelection: function(dx, dy) {
            var len = this.clickables.getCount();
            if (len == 0) return;
            if (this.selected == null) {
                var y = this.clickables.getYOffset(0);
                var ar = this.clickables.get(0);
                if (y >= ar.length) y = ar.length - 1;
                this.setSelected(ar[y], 0, y);
            } else {
                var x = this.sel_x + dx;
                var y1 = this.sel_y + dy;
                if (x < 0 || x >= len) return;
                if (x != this.sel_x) y1 += this.clickables.getYOffset(x) - this.clickables.getYOffset(this.sel_x);
                var ar1 = this.clickables.get(x);
                if (y1 < 0) return;
                if (!js_Boot.__instanceof(this.clickables, com_davidmaletz_controls_CompoundClickableColumns)) {
                    if (dx > 0) {
                        len--;
                        while (x < len) {
                            if (ar1.length > y1 && ar1[y1] != this.selected) break;
                            x++;
                            ar1 = this.clickables.get(x);
                        }
                    } else if (dx < 0) while (x > 0) {
                        if (ar1.length > y1 && ar1[y1] != this.selected) break;
                        x--;
                        ar1 = this.clickables.get(x);
                    }
                }
                if (y1 >= ar1.length) y1 = ar1.length - 1;
                if (this.setSelected(ar1[y1], x, y1)) {
                    if (this.clickOnSelect(this.selected, x, y1)) this.doClick();
                    else if (this.isInit && com_davidmaletz_controls_ClickableHandler.globalOnMove != null) com_davidmaletz_controls_ClickableHandler.globalOnMove();
                }
            }
        },
        tap: function(e) {
            this.modal(e);
            if (this.pressed == null) {
                var _g = e.key;
                switch (_g) {
                case "up":
                    this.moveSelection(0, -1);
                    break;
                case "down":
                    this.moveSelection(0, 1);
                    break;
                case "left":
                    this.moveSelection( - 1, 0);
                    break;
                case "right":
                    this.moveSelection(1, 0);
                    break;
                case "select":
                    if (this.selected != null) this.doClick();
                    else if (this.listener != null) this.listener.onEmptySelect();
                    break;
                case "cancel":
                    if (this.listener != null) {
                        if (com_davidmaletz_controls_ClickableHandler.globalOnCancel != null) com_davidmaletz_controls_ClickableHandler.globalOnCancel();
                        this.listener.onCancel();
                    }
                    break;
                }
            }
        },
        changeSelected: function() {
            this.clickables.changeSelected(this.selected, this.sel_x);
        },
        setSelected: function(c, x, y) {
            if (this.selected != c) {
                if (this.selected != null) this.selected.onHover(false);
                this.selected = c;
                if (this.selected != null) {
                    this.selected.onHover(true);
                    this.sel_x = x;
                    this.sel_y = y;
                    this.changeSelected();
                }
                return true;
            } else {
                this.sel_x = x;
                this.sel_y = y;
                return false;
            }
        },
        getSelected: function() {
            return this.selected;
        },
        getSelectedParent: function() {
            return this.clickables.getParent(this.sel_x);
        },
        getClickable: function(e) {
            if (com_davidmaletz_controls_ClickableHandler.point == null) com_davidmaletz_controls_ClickableHandler.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_ClickableHandler.point.setTo(e.stageX, e.stageY);
            var len = this.clickables.getCount();
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (!this.clickables.getParent(i).get_visible()) continue;
                var p = this.clickables.getParent(i).globalToLocal(com_davidmaletz_controls_ClickableHandler.point);
                var ar = this.clickables.get(i);
                if (!this.clickables.inBounds(i, p)) continue;
                var j = com_davidmaletz_controls_ClickableHandler.lower_bound(ar, p.y);
                if (j > 0) {
                    var c = ar[j - 1];
                    if (c.getPos().containsPoint(p)) return {
                        clickable: c,
                        x: i,
                        y: j - 1
                    };
                }
            }
            return null;
        },
        down: function(e) {
            var c = this.getClickable(e);
            if (c != null) {
                this.setSelected(c.clickable, c.x, c.y);
                this.pressed = c.clickable;
            } else this.setSelected(null, 0, 0);
        },
        up: function(e) {
            if (this.pressed != null) {
                if (this.pressed != this.selected) {
                    this.pressed = null;
                    return;
                }
                if (com_davidmaletz_controls_ClickableHandler.point == null) com_davidmaletz_controls_ClickableHandler.point = new openfl_geom_Point(e.stageX, e.stageY);
                else com_davidmaletz_controls_ClickableHandler.point.setTo(e.stageX, e.stageY);
                var p = this.clickables.getParent(this.sel_x).globalToLocal(com_davidmaletz_controls_ClickableHandler.point);
                if (this.pressed.getPos().containsPoint(p)) this.doClick();
                this.pressed = null;
            } else if (this.listener != null) this.listener.onEmptySelect();
        },
        move: function(e) {
            this.reset(e);
        },
        reset: function(e) {
            var c = this.getClickable(e);
            if (c != null) this.setSelected(c.clickable, c.x, c.y);
            else this.setSelected(null, 0, 0);
        },
        __class__: com_davidmaletz_controls_ClickableHandler
    };
    var com_davidmaletz_controls_Listener = function() {};
    $hxClasses["com.davidmaletz.controls.Listener"] = com_davidmaletz_controls_Listener;
    com_davidmaletz_controls_Listener.__name__ = ["com", "davidmaletz", "controls", "Listener"];
    com_davidmaletz_controls_Listener.prototype = {
        __class__: com_davidmaletz_controls_Listener
    };
    var com_davidmaletz_controls__$ClickableHandler_CIterator = function(cols) {
        this.i = 0;
        this.cols = cols;
    };
    $hxClasses["com.davidmaletz.controls._ClickableHandler.CIterator"] = com_davidmaletz_controls__$ClickableHandler_CIterator;
    com_davidmaletz_controls__$ClickableHandler_CIterator.__name__ = ["com", "davidmaletz", "controls", "_ClickableHandler", "CIterator"];
    com_davidmaletz_controls__$ClickableHandler_CIterator.prototype = {
        hasNext: function() {
            return this.i + 1 < this.cols.getCount() || this.cur != null && this.cur.hasNext();
        },
        next: function() {
            if (this.cur == null || !this.cur.hasNext()) {
                var _this = this.cols.get(this.i++);
                this.cur = HxOverrides.iter(_this);
            }
            return this.cur.next();
        },
        __class__: com_davidmaletz_controls__$ClickableHandler_CIterator
    };
    var com_davidmaletz_lerp_Lerpable = function() {};
    $hxClasses["com.davidmaletz.lerp.Lerpable"] = com_davidmaletz_lerp_Lerpable;
    com_davidmaletz_lerp_Lerpable.__name__ = ["com", "davidmaletz", "lerp", "Lerpable"];
    com_davidmaletz_lerp_Lerpable.prototype = {
        __class__: com_davidmaletz_lerp_Lerpable
    };
    var com_davidmaletz_lerp_LerpSpriteBase = function() {
        this.saturation = 1;
        com_davidmaletz_faengfl_InitSprite.call(this);
    };
    $hxClasses["com.davidmaletz.lerp.LerpSpriteBase"] = com_davidmaletz_lerp_LerpSpriteBase;
    com_davidmaletz_lerp_LerpSpriteBase.__name__ = ["com", "davidmaletz", "lerp", "LerpSpriteBase"];
    com_davidmaletz_lerp_LerpSpriteBase.__interfaces__ = [com_davidmaletz_lerp_Lerpable];
    com_davidmaletz_lerp_LerpSpriteBase.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_lerp_LerpSpriteBase.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        hasTrack: function(cls) {
            return this.tracks != null && this.tracks.hasTrack(cls);
        },
        getLerp: function(cls) {
            return this.tracks.getTrack(cls).getTo();
        },
        getFrame: function(cls) {
            return this.tracks.getTrack(cls).getFrame();
        },
        hasLerp: function() {
            return this.tracks != null;
        },
        clearLerp: function() {
            this.tracks = null;
        },
        clearTrack: function(cls) {
            if (this.tracks != null) this.tracks.removeTrack(cls);
        },
        finishTrack: function(cls) {
            if (this.tracks != null && this.tracks.hasTrack(cls)) this.tracks.getTrack(cls).advanceFrame(this, 9999999);
        },
        lerp: function(k, frames, onComplete) {
            if (this.tracks == null) this.tracks = new com_davidmaletz_lerp_LerpTracks();
            this.tracks.getTrack(k == null ? null: js_Boot.getClass(k)).setLerp(this, k, frames, onComplete);
        },
        advanceFrame: function(df) {
            if (this.tracks != null && !this.tracks.advanceFrame(this, df)) this.tracks = null;
        },
        set_saturation: function(f) {
            this.saturation = f;
            return f;
        },
        __class__: com_davidmaletz_lerp_LerpSpriteBase,
        __properties__: $extend(com_davidmaletz_faengfl_InitSprite.prototype.__properties__, {
            set_saturation: "set_saturation"
        })
    });
    var com_davidmaletz_lerp_LerpSprite = function() {
        com_davidmaletz_lerp_LerpSpriteBase.call(this);
    };
    $hxClasses["com.davidmaletz.lerp.LerpSprite"] = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_lerp_LerpSprite.__name__ = ["com", "davidmaletz", "lerp", "LerpSprite"];
    com_davidmaletz_lerp_LerpSprite.__super__ = com_davidmaletz_lerp_LerpSpriteBase;
    com_davidmaletz_lerp_LerpSprite.prototype = $extend(com_davidmaletz_lerp_LerpSpriteBase.prototype, {
        init: function(e) {
            this.destroy(null);
            this.myPriority = com_davidmaletz_lerp_LerpSprite.priority;
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame), false, PriorityManager.priority + 1);
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        handle_frame: function(e) {
            if (this.myPriority >= com_davidmaletz_lerp_LerpSprite.priority) this.advanceFrame(com_davidmaletz_faengfl_FaengFL.frameTime);
        },
        __class__: com_davidmaletz_lerp_LerpSprite
    });
    var com_davidmaletz_controls_ClickableSprite = function() {
        this.clickables = new com_davidmaletz_controls_ClickableHandler(this, this.createClickables());
        com_davidmaletz_lerp_LerpSprite.call(this);
    };
    $hxClasses["com.davidmaletz.controls.ClickableSprite"] = com_davidmaletz_controls_ClickableSprite;
    com_davidmaletz_controls_ClickableSprite.__name__ = ["com", "davidmaletz", "controls", "ClickableSprite"];
    com_davidmaletz_controls_ClickableSprite.__interfaces__ = [com_davidmaletz_controls_Listener];
    com_davidmaletz_controls_ClickableSprite.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_controls_ClickableSprite.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        createClickables: function() {
            return null;
        },
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            this.clickables.init();
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.up));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.move));
            this.clickables.destroy();
        },
        down: function(e) {
            e.stopImmediatePropagation();
            this.clickables.down(e);
        },
        up: function(e) {
            e.stopImmediatePropagation();
            this.clickables.up(e);
        },
        move: function(e) {
            e.stopImmediatePropagation();
            this.clickables.move(e);
        },
        addClickable: function(c) {
            if (js_Boot.__instanceof(c, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(c, openfl_display_DisplayObject));
            this.clickables.clickables.addClickable(c, this);
        },
        onEmptySelect: function() {},
        onCancel: function() {},
        canSelect: function(c) {
            return ! (this.tracks != null);
        },
        swapClickables: function(c) {
            var $it0 = new com_davidmaletz_controls__$ClickableHandler_CIterator(this.clickables.clickables);
            while ($it0.hasNext()) {
                var c1 = $it0.next();
                if (js_Boot.__instanceof(c1, openfl_display_DisplayObject)) this.removeChild(js_Boot.__cast(c1, openfl_display_DisplayObject));
            }
            var old = this.clickables;
            if (c == null) c = new com_davidmaletz_controls_ClickableHandler(this);
            this.clickables = c;
            var $it1 = new com_davidmaletz_controls__$ClickableHandler_CIterator(this.clickables.clickables);
            while ($it1.hasNext()) {
                var c2 = $it1.next();
                if (js_Boot.__instanceof(c2, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(c2, openfl_display_DisplayObject));
            }
            return old;
        },
        __class__: com_davidmaletz_controls_ClickableSprite
    });
    var com_davidmaletz_faengfl_Window = function(container, draw, modal, allowDarken, anim, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        if (anim == null) anim = true;
        if (allowDarken == null) allowDarken = true;
        if (modal == null) modal = true;
        this.onClose = null;
        com_davidmaletz_lerp_LerpSprite.call(this);
        var w = container.getWidth();
        var h = container.getHeight();
        this.isModal = modal;
        if (this.isModal && allowDarken) {
            this.darken = new openfl_display_Sprite();
            var g = this.darken.get_graphics();
            g.beginFill(0, 0.25);
            g.drawRect(0, 0, w, h);
            g.endFill();
        }
        if (draw != null) {
            this.set_x(Math.round((w - draw.getWidth()) * halign));
            var s = draw.create(0, 0);
            if (s != null) this.addChild(s);
            var ty = Math.round((h - draw.getHeight()) * valign);
            if (anim) {
                if (valign < 0.25) this.closePosY = this.set_y( - draw.getHeight());
                else this.closePosY = this.set_y(container.getHeight());
                this.lerp(new com_davidmaletz_lerp_PositionKeyframe(this.get_x(), ty), 10);
            } else {
                this.set_y(ty);
                this.closePosY = NaN;
            }
        }
    };
    $hxClasses["com.davidmaletz.faengfl.Window"] = com_davidmaletz_faengfl_Window;
    com_davidmaletz_faengfl_Window.__name__ = ["com", "davidmaletz", "faengfl", "Window"];
    com_davidmaletz_faengfl_Window.addTextTo = function(parent, txt, x, y, color, scale, w) {
        if (w == null) w = 0;
        if (scale == null) scale = 1;
        var t = new com_davidmaletz_faengfl_TextSprite(txt, new com_fancyfish_faeng_text_CharacterPlacer(w, w == 0 ? 0 : 1), color, scale);
        t.set_x(x);
        t.set_y(y);
        parent.addChild(t);
    };
    com_davidmaletz_faengfl_Window.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_faengfl_Window.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            if (this.isModal) {
                com_davidmaletz_faengfl_Window.window_ct += 4;
                com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.down), false, com_davidmaletz_faengfl_Window.window_ct);
                com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.up), false, com_davidmaletz_faengfl_Window.window_ct);
                com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.move), false, com_davidmaletz_faengfl_Window.window_ct);
            }
            if (this.parent != null && this.darken != null) this.parent.addChildAt(this.darken, this.parent.getChildIndex(this));
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            if (this.isModal) {
                com_davidmaletz_faengfl_Window.window_ct -= 2;
                com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.down));
                com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.up));
                com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.move));
            }
            if (this.darken != null && this.darken.parent != null) this.darken.parent.removeChild(this.darken);
        },
        down: function(e) {
            e.stopImmediatePropagation();
        },
        up: function(e) {
            e.stopImmediatePropagation();
        },
        move: function(e) {
            e.stopImmediatePropagation();
        },
        modal: function(e) {
            e.stopImmediatePropagation();
        },
        doClose: function() {
            if (this.parent != null) this.parent.removeChild(this);
            if (this.onClose != null) this.onClose();
        },
        getContainer: function() {
            return js_Boot.__cast(this.parent.parent, com_davidmaletz_faengfl_Container);
        },
        close: function() {
            if (this.parent == null) return;
            if (isNaN(this.closePosY)) this.doClose();
            else if (! (this.tracks != null && this.tracks.hasTrack(com_davidmaletz_lerp_PositionKeyframe))) this.lerp(new com_davidmaletz_lerp_PositionKeyframe(this.get_x(), this.closePosY), 10, $bind(this, this.doClose));
        },
        addText: function(txt, x, y, color, scale, w) {
            if (w == null) w = 0;
            if (scale == null) scale = 1;
            com_davidmaletz_faengfl_Window.addTextTo(this, txt, x, y, color, scale, w);
        },
        addMultilineText: function(txt, x, y, w, color, scale) {
            if (scale == null) scale = 1;
            var t = new com_davidmaletz_faengfl_TextSprite(txt, new com_fancyfish_faeng_text_WrapCharacterPlacer(w), color, scale);
            t.set_x(x);
            t.set_y(y);
            this.addChild(t);
        },
        __class__: com_davidmaletz_faengfl_Window
    });
    var com_davidmaletz_controls_ClickableWindow = function(container, draw, modal, darken, anim, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        if (anim == null) anim = true;
        if (darken == null) darken = true;
        if (modal == null) modal = true;
        this.clickables = new com_davidmaletz_controls_ClickableHandler(this, this.createClickables());
        com_davidmaletz_faengfl_Window.call(this, container, draw, modal, darken, anim, halign, valign);
    };
    $hxClasses["com.davidmaletz.controls.ClickableWindow"] = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_controls_ClickableWindow.__name__ = ["com", "davidmaletz", "controls", "ClickableWindow"];
    com_davidmaletz_controls_ClickableWindow.__interfaces__ = [com_davidmaletz_controls_Listener];
    com_davidmaletz_controls_ClickableWindow.__super__ = com_davidmaletz_faengfl_Window;
    com_davidmaletz_controls_ClickableWindow.prototype = $extend(com_davidmaletz_faengfl_Window.prototype, {
        createClickables: function() {
            return null;
        },
        init: function(e) {
            com_davidmaletz_faengfl_Window.prototype.init.call(this, e);
            if (this.isModal) this.clickables.init();
        },
        destroy: function(e) {
            com_davidmaletz_faengfl_Window.prototype.destroy.call(this, e);
            if (this.isModal) this.clickables.destroy();
        },
        down: function(e) {
            e.stopImmediatePropagation();
            this.clickables.down(e);
        },
        up: function(e) {
            e.stopImmediatePropagation();
            this.clickables.up(e);
        },
        move: function(e) {
            e.stopImmediatePropagation();
            this.clickables.move(e);
        },
        addClickable: function(c) {
            if (js_Boot.__instanceof(c, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(c, openfl_display_DisplayObject));
            this.clickables.clickables.addClickable(c, this);
        },
        onEmptySelect: function() {},
        onCancel: function() {
            if (this.darken != null) this.close();
        },
        canSelect: function(c) {
            return ! (this.tracks != null);
        },
        swapClickables: function(c) {
            var $it0 = new com_davidmaletz_controls__$ClickableHandler_CIterator(this.clickables.clickables);
            while ($it0.hasNext()) {
                var c1 = $it0.next();
                if (js_Boot.__instanceof(c1, openfl_display_DisplayObject)) this.removeChild(js_Boot.__cast(c1, openfl_display_DisplayObject));
            }
            var old = this.clickables;
            if (c == null) c = new com_davidmaletz_controls_ClickableHandler(this);
            this.clickables = c;
            var $it1 = new com_davidmaletz_controls__$ClickableHandler_CIterator(this.clickables.clickables);
            while ($it1.hasNext()) {
                var c2 = $it1.next();
                if (js_Boot.__instanceof(c2, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(c2, openfl_display_DisplayObject));
            }
            return old;
        },
        __class__: com_davidmaletz_controls_ClickableWindow
    });
    var com_davidmaletz_controls_CloseButton = function(closeable, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_faengfl_Application.button_factory.createBG( - 1, -1), com_davidmaletz_faengfl_Application.button_factory.createHover( - 1, -1), new com_fancyfish_faeng_common_mutable_Static("X"));
        this.closeable = closeable;
    };
    $hxClasses["com.davidmaletz.controls.CloseButton"] = com_davidmaletz_controls_CloseButton;
    com_davidmaletz_controls_CloseButton.__name__ = ["com", "davidmaletz", "controls", "CloseButton"];
    com_davidmaletz_controls_CloseButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_controls_CloseButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.closeable.close();
            return true;
        },
        __class__: com_davidmaletz_controls_CloseButton
    });
    var com_davidmaletz_controls_CompoundClickableColumns = function(cols, leftPos) {
        this.columns = [];
        this.columns.push(null);
        var _g = 0;
        while (_g < cols.length) {
            var c = cols[_g]; ++_g;
            this.columns.push(c);
            this.columns.push(null);
        }
        this.leftPos = leftPos;
    };
    $hxClasses["com.davidmaletz.controls.CompoundClickableColumns"] = com_davidmaletz_controls_CompoundClickableColumns;
    com_davidmaletz_controls_CompoundClickableColumns.__name__ = ["com", "davidmaletz", "controls", "CompoundClickableColumns"];
    com_davidmaletz_controls_CompoundClickableColumns.__interfaces__ = [com_davidmaletz_controls_ClickableColumns];
    com_davidmaletz_controls_CompoundClickableColumns.prototype = {
        getCount: function() {
            var ret = 0;
            var _g = 0;
            var _g1 = this.columns;
            while (_g < _g1.length) {
                var c = _g1[_g]; ++_g;
                if (c == null) ret += 0;
                else ret += c.getCount();
            }
            return ret;
        },
        setColumn: function(idx, c) {
            this.columns[idx * 2 + 1] = c;
            c.setAddListener(this.listener);
        },
        clear: function() {
            var _g = 0;
            var _g1 = this.columns;
            while (_g < _g1.length) {
                var c = _g1[_g]; ++_g;
                c.clear();
            }
        },
        getColumn: function(col) {
            var i = 0;
            var _g = 0;
            var _g1 = this.columns;
            while (_g < _g1.length) {
                var c = _g1[_g]; ++_g;
                if (c != null) {
                    var ct = c.getCount();
                    if (col < ct) return {
                        child: c,
                        column: col,
                        index: i
                    };
                    col -= ct;
                }
                i++;
            }
            return null;
        },
        getParent: function(col) {
            var c = this.getColumn(col);
            return c.child.getParent(c.column);
        },
        get: function(col) {
            var c = this.getColumn(col);
            return c.child.get(c.column);
        },
        getC: function(i) {
            var c = this.columns[i];
            if (c == null) {
                c = new com_davidmaletz_controls_ArrayClickableColumns();
                this.columns[i] = c;
                c.setAddListener(this.listener);
            }
            return c;
        },
        addClickable: function(c, parent) {
            var b = c.getPos();
            var len = this.leftPos.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (b.x <= this.leftPos[i]) {
                    this.getC(i * 2).addClickable(c, parent);
                    return;
                }
            }
            this.getC(this.columns.length - 1).addClickable(c, parent);
        },
        changeSelected: function(selected, col) {
            var c = this.getColumn(col);
            c.child.changeSelected(selected, c.column);
        },
        inBounds: function(col, p) {
            var c = this.getColumn(col);
            return c.child.inBounds(c.column, p);
        },
        getYOffset: function(col) {
            var c = this.getColumn(col);
            return c.child.getYOffset(c.column);
        },
        setAddListener: function(func) {
            this.listener = func;
            var _g = 0;
            var _g1 = this.columns;
            while (_g < _g1.length) {
                var c = _g1[_g]; ++_g;
                if (c != null) c.setAddListener(this.listener);
            }
        },
        __class__: com_davidmaletz_controls_CompoundClickableColumns
    };
    var com_davidmaletz_faengfl_controls_ControlListener = function() {};
    $hxClasses["com.davidmaletz.faengfl.controls.ControlListener"] = com_davidmaletz_faengfl_controls_ControlListener;
    com_davidmaletz_faengfl_controls_ControlListener.__name__ = ["com", "davidmaletz", "faengfl", "controls", "ControlListener"];
    com_davidmaletz_faengfl_controls_ControlListener.prototype = {
        __class__: com_davidmaletz_faengfl_controls_ControlListener
    };
    var com_davidmaletz_controls_Controller = function(settings, holdKeys) {
        if (holdKeys == null) holdKeys = ["up", "down", "left", "right"];
        openfl_events_EventDispatcher.call(this);
        com_davidmaletz_controls_Controller.instance = this;
        this.holdKeys = holdKeys;
        this.tap_data = [];
        var _g = 0;
        while (_g < holdKeys.length) {
            var k = holdKeys[_g]; ++_g;
            this.tap_data.push( - 1);
        }
        this.handler = new com_davidmaletz_faengfl_controls_ControlHandler(settings, this, this.tap_data.length * 2);
        openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.onKeyDown));
        openfl_Lib.current.stage.addEventListener("keyUp", $bind(this, this.onKeyUp));
        openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.enter_frame));
        lime_ui_Gamepad.onConnect.add($bind(this, this.onGamepadConnect));
        var $it0 = lime_ui_Gamepad.devices.iterator();
        while ($it0.hasNext()) {
            var g = $it0.next();
            this.onGamepadConnect(g);
        }
    };
    $hxClasses["com.davidmaletz.controls.Controller"] = com_davidmaletz_controls_Controller;
    com_davidmaletz_controls_Controller.__name__ = ["com", "davidmaletz", "controls", "Controller"];
    com_davidmaletz_controls_Controller.__interfaces__ = [com_davidmaletz_faengfl_controls_ControlListener];
    com_davidmaletz_controls_Controller.instance = null;
    com_davidmaletz_controls_Controller.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_controls_Controller.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getCurrentDevice: function() {
            return this.handler.device;
        },
        setCurrentDevice: function(dev) {
            this.handler.device = dev;
        },
        getControls: function(device) {
            return new com_davidmaletz_faengfl_controls_ControlSettings(this.handler.controls[device].key_map);
        },
        copyControls: function(device, controls) {
            controls.key_map = this.handler.controls[device].key_map.clone();
        },
        setControls: function(device, controls) {
            this.handler.setControls(device, controls);
        },
        handleTap: function(i, type, pressed) {
            if (pressed) {
                var d = this.tap_data[i] - 1;
                if (d <= 0) {
                    this.dispatchEvent(new com_davidmaletz_controls_CEvent("tap", type));
                    if (d == 0) this.tap_data[i] = 5;
                    else this.tap_data[i] = 20;
                } else this.tap_data[i] = d;
            } else this.tap_data[i] = -1;
        },
        enter_frame: function(e) {
            var i = 0;
            var _g = 0;
            var _g1 = this.holdKeys;
            while (_g < _g1.length) {
                var k = _g1[_g]; ++_g;
                this.handleTap(i, k, this.handler.isPressed(i * 2));
                i++;
            }
        },
        getKeyBinding: function(key) {
            return this.handler.getKey(key);
        },
        onKeyDown: function(e) {
            this.handler.onKeyDown(e.keyCode);
        },
        onKeyUp: function(e) {
            this.handler.onKeyUp(e.keyCode);
        },
        onButtonDown: function(g, button) {
            this.handler.onGamepadDown(g.id, button);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerButtonEvent("button_down", g.id, button));
        },
        onButtonUp: function(g, button) {
            this.handler.onGamepadUp(g.id, button);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerButtonEvent("button_up", g.id, button));
        },
        onAxisMove: function(g, a, value) {
            this.handler.onGamepadAxis(g.id, a, value);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerAxisEvent("axis_move", g.id, a, value, -1));
        },
        onGamepadConnect: function(g) {
            g.onButtonDown.add((function(f, g1) {
                return function(a1) {
                    f(g1, a1);
                };
            })($bind(this, this.onButtonDown), g));
            g.onButtonUp.add((function(f1, g2) {
                return function(a11) {
                    f1(g2, a11);
                };
            })($bind(this, this.onButtonUp), g));
            g.onAxisMove.add((function(f2, g3) {
                return function(a, a12) {
                    f2(g3, a, a12);
                };
            })($bind(this, this.onAxisMove), g));
            g.onDisconnect.add((function(f3, g4) {
                return function() {
                    f3(g4);
                };
            })($bind(this, this.onGamepadDisconnect), g));
        },
        onGamepadDisconnect: function(g) {
            if (this.handler.controllerId == g.id) this.handler.device = 0;
        },
        isPressed: function(key) {
            return this.handler.isPressed(key);
        },
        press: function(type, key) {
            if (type == null) return;
            if (StringTools.endsWith(type, "_alt")) type = type.substring(0, type.length - 4);
            this.dispatchEvent(new com_davidmaletz_controls_CEvent("press", type));
        },
        release: function(type, key) {
            if (type == null) return;
            if (StringTools.endsWith(type, "_alt")) type = type.substring(0, type.length - 4);
            if (key == -1) this.dispatchEvent(new com_davidmaletz_controls_CEvent("tap", type));
            this.dispatchEvent(new com_davidmaletz_controls_CEvent("release", type));
        },
        getKeyCode: function(key) {
            if (key == null) return - 1;
            var alt = StringTools.endsWith(key, "_alt");
            if (alt) key = key.substring(0, key.length - 4);
            var i = HxOverrides.indexOf(this.holdKeys, key, 0);
            if (i == -1) return - 1;
            else return i * 2 + (alt ? 1 : 0);
        },
        validateControls: function(device, controls) {
            if (device == 0) this.fixAltKeyboard(controls);
            else this.fixAltGamepad(controls);
        },
        fixAltKeyboard: function(controls) {
            var up = new com_davidmaletz_faengfl_controls_KeyboardKey(87);
            if (controls.key_map.get(up) == null) controls.setKey("up_alt", up);
            var down = new com_davidmaletz_faengfl_controls_KeyboardKey(83);
            if (controls.key_map.get(down) == null) controls.setKey("down_alt", down);
            var left = new com_davidmaletz_faengfl_controls_KeyboardKey(65);
            if (controls.key_map.get(left) == null) controls.setKey("left_alt", left);
            var right = new com_davidmaletz_faengfl_controls_KeyboardKey(68);
            if (controls.key_map.get(right) == null) controls.setKey("right_alt", right);
            var select = new com_davidmaletz_faengfl_controls_KeyboardKey(13);
            if (controls.key_map.get(select) == null) controls.setKey("select_alt", select);
            var cancel = new com_davidmaletz_faengfl_controls_KeyboardKey(27);
            if (controls.key_map.get(cancel) == null) controls.setKey("cancel_alt", cancel);
        },
        fixAltGamepad: function(controls) {
            var up = new com_davidmaletz_faengfl_controls_AxisKey(1, false);
            if (controls.key_map.get(up) == null) controls.setKey("up_alt", up);
            var down = new com_davidmaletz_faengfl_controls_AxisKey(1, true);
            if (controls.key_map.get(down) == null) controls.setKey("down_alt", down);
            var left = new com_davidmaletz_faengfl_controls_AxisKey(0, false);
            if (controls.key_map.get(left) == null) controls.setKey("left_alt", left);
            var right = new com_davidmaletz_faengfl_controls_AxisKey(0, true);
            if (controls.key_map.get(right) == null) controls.setKey("right_alt", right);
            var select = new com_davidmaletz_faengfl_controls_ControllerKey(6);
            if (controls.key_map.get(select) == null) controls.setKey("select_alt", select);
            var cancel = new com_davidmaletz_faengfl_controls_ControllerKey(4);
            if (controls.key_map.get(cancel) == null) controls.setKey("cancel_alt", cancel);
        },
        defaultKeyboard: function(controls) {
            controls.setKey("up_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(87));
            controls.setKey("down_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(83));
            controls.setKey("left_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(65));
            controls.setKey("right_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(68));
            controls.setKey("select", new com_davidmaletz_faengfl_controls_KeyboardKey(90));
            controls.setKey("cancel", new com_davidmaletz_faengfl_controls_KeyboardKey(88));
            controls.setKey("up", new com_davidmaletz_faengfl_controls_KeyboardKey(38));
            controls.setKey("down", new com_davidmaletz_faengfl_controls_KeyboardKey(40));
            controls.setKey("left", new com_davidmaletz_faengfl_controls_KeyboardKey(37));
            controls.setKey("right", new com_davidmaletz_faengfl_controls_KeyboardKey(39));
            controls.setKey("select_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(13));
            controls.setKey("cancel_alt", new com_davidmaletz_faengfl_controls_KeyboardKey(27));
        },
        defaultGamepad: function(controls) {
            controls.setKey("up_alt", new com_davidmaletz_faengfl_controls_AxisKey(1, false));
            controls.setKey("down_alt", new com_davidmaletz_faengfl_controls_AxisKey(1, true));
            controls.setKey("left_alt", new com_davidmaletz_faengfl_controls_AxisKey(0, false));
            controls.setKey("right_alt", new com_davidmaletz_faengfl_controls_AxisKey(0, true));
            controls.setKey("select", new com_davidmaletz_faengfl_controls_ControllerKey(0));
            controls.setKey("cancel", new com_davidmaletz_faengfl_controls_ControllerKey(1));
            controls.setKey("up", new com_davidmaletz_faengfl_controls_ControllerKey(11));
            controls.setKey("down", new com_davidmaletz_faengfl_controls_ControllerKey(12));
            controls.setKey("left", new com_davidmaletz_faengfl_controls_ControllerKey(13));
            controls.setKey("right", new com_davidmaletz_faengfl_controls_ControllerKey(14));
            controls.setKey("select_alt", new com_davidmaletz_faengfl_controls_ControllerKey(6));
            controls.setKey("cancel_alt", new com_davidmaletz_faengfl_controls_ControllerKey(4));
        },
        __class__: com_davidmaletz_controls_Controller
    });
    var openfl_events_Event = function(type, bubbles, cancelable) {
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        this.type = type;
        this.bubbles = bubbles;
        this.cancelable = cancelable;
        this.eventPhase = 2;
    };
    $hxClasses["openfl.events.Event"] = openfl_events_Event;
    openfl_events_Event.__name__ = ["openfl", "events", "Event"];
    openfl_events_Event.prototype = {
        clone: function() {
            var event = new openfl_events_Event(this.type, this.bubbles, this.cancelable);
            event.eventPhase = this.eventPhase;
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            return event;
        },
        formatToString: function(className, p1, p2, p3, p4, p5) {
            var parameters = [];
            if (p1 != null) parameters.push(p1);
            if (p2 != null) parameters.push(p2);
            if (p3 != null) parameters.push(p3);
            if (p4 != null) parameters.push(p4);
            if (p5 != null) parameters.push(p5);
            return $bind(this, this.__formatToString).apply(this, [className, parameters]);
        },
        isDefaultPrevented: function() {
            return this.__preventDefault;
        },
        preventDefault: function() {
            if (this.cancelable) this.__preventDefault = true;
        },
        stopImmediatePropagation: function() {
            this.__isCanceled = true;
            this.__isCanceledNow = true;
        },
        stopPropagation: function() {
            this.__isCanceled = true;
        },
        toString: function() {
            return this.__formatToString("Event", ["type", "bubbles", "cancelable"]);
        },
        __formatToString: function(className, parameters) {
            var output = "[" + className;
            var arg = null;
            var _g = 0;
            while (_g < parameters.length) {
                var param = parameters[_g]; ++_g;
                arg = Reflect.field(this, param);
                if (typeof(arg) == "string") output += " " + param + "=\"" + Std.string(arg) + "\"";
                else output += " " + param + "=" + Std.string(arg);
            }
            output += "]";
            return output;
        },
        __class__: openfl_events_Event
    };
    var com_davidmaletz_controls_CEvent = function(type, key) {
        openfl_events_Event.call(this, type);
        this.key = key;
    };
    $hxClasses["com.davidmaletz.controls.CEvent"] = com_davidmaletz_controls_CEvent;
    com_davidmaletz_controls_CEvent.__name__ = ["com", "davidmaletz", "controls", "CEvent"];
    com_davidmaletz_controls_CEvent.__super__ = openfl_events_Event;
    com_davidmaletz_controls_CEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_controls_CEvent
    });
    var com_davidmaletz_controls_SliderUI = function() {};
    $hxClasses["com.davidmaletz.controls.SliderUI"] = com_davidmaletz_controls_SliderUI;
    com_davidmaletz_controls_SliderUI.__name__ = ["com", "davidmaletz", "controls", "SliderUI"];
    com_davidmaletz_controls_SliderUI.prototype = {
        __class__: com_davidmaletz_controls_SliderUI
    };
    var com_davidmaletz_controls_DefaultSliderUI = function(bar, knob) {
        if (bar == null) this.bar_factory = new com_davidmaletz_faengfl_SolidDrawableFactory(16777215);
        else this.bar_factory = bar;
        if (knob == null) this.knob_factory = new com_davidmaletz_faengfl_SolidDrawableFactory(11711154);
        else this.knob_factory = knob;
    };
    $hxClasses["com.davidmaletz.controls.DefaultSliderUI"] = com_davidmaletz_controls_DefaultSliderUI;
    com_davidmaletz_controls_DefaultSliderUI.__name__ = ["com", "davidmaletz", "controls", "DefaultSliderUI"];
    com_davidmaletz_controls_DefaultSliderUI.__interfaces__ = [com_davidmaletz_controls_SliderUI];
    com_davidmaletz_controls_DefaultSliderUI.prototype = {
        getHeight: function() {
            return 6;
        },
        getKnobWidth: function() {
            return 10;
        },
        createBar: function(w) {
            return this.bar_factory.create(w, 6).create(0, 0);
        },
        createKnob: function() {
            return this.knob_factory.create(10, 6).create(0, 0);
        },
        __class__: com_davidmaletz_controls_DefaultSliderUI
    };
    var com_davidmaletz_faengfl_TileLayer = function() {
        openfl_display_Sprite.call(this);
        this.handler = new com_davidmaletz_faengfl_TileHandler();
    };
    $hxClasses["com.davidmaletz.faengfl.TileLayer"] = com_davidmaletz_faengfl_TileLayer;
    com_davidmaletz_faengfl_TileLayer.__name__ = ["com", "davidmaletz", "faengfl", "TileLayer"];
    com_davidmaletz_faengfl_TileLayer.oneTile = function(sheet, x, y, idx) {
        var t = new com_davidmaletz_faengfl_TileLayer();
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(t);
        t.get_graphics().clear();
        t.handler.start(t.get_graphics(), 0);
        t.handler.addTile(sheet, x, y, idx, 1, 1, 0, 0, 1);
        t.handler.finish();
        return t;
    };
    com_davidmaletz_faengfl_TileLayer.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_TileLayer.prototype = $extend(openfl_display_Sprite.prototype, {
        clear: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.get_graphics().clear();
        },
        start: function(flags) {
            if (flags == null) flags = 0;
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.get_graphics().clear();
            this.handler.start(this.get_graphics(), flags);
        },
        finish: function() {
            this.handler.finish();
        },
        addTile: function(sheet, x, y, idx, alpha, a, b, c, d) {
            if (d == null) d = 1;
            if (c == null) c = 0;
            if (b == null) b = 0;
            if (a == null) a = 1;
            if (alpha == null) alpha = 1;
            this.handler.addTile(sheet, x, y, idx, alpha, a, b, c, d);
        },
        __class__: com_davidmaletz_faengfl_TileLayer
    });
    var com_davidmaletz_controls_KeyRenderer = function(key, x, y, controls) {
        com_davidmaletz_faengfl_TileLayer.call(this);
        this.key = key;
        this.tx = x;
        this.ty = y;
        if (controls == null) {
            this.addEventListener("addedToStage", $bind(this, this.init));
            this.addEventListener("removedFromStage", $bind(this, this.destroy));
        } else this.drawKey(controls.key_map.getKey(key));
    };
    $hxClasses["com.davidmaletz.controls.KeyRenderer"] = com_davidmaletz_controls_KeyRenderer;
    com_davidmaletz_controls_KeyRenderer.__name__ = ["com", "davidmaletz", "controls", "KeyRenderer"];
    com_davidmaletz_controls_KeyRenderer.__super__ = com_davidmaletz_faengfl_TileLayer;
    com_davidmaletz_controls_KeyRenderer.prototype = $extend(com_davidmaletz_faengfl_TileLayer.prototype, {
        init: function(e) {
            this.destroy(e);
            com_davidmaletz_controls_Controller.instance.handler.addEventListener("controls_changed", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            com_davidmaletz_controls_Controller.instance.handler.removeEventListener("controls_changed", $bind(this, this.update));
        },
        update: function(e) {
            this.drawKey(com_davidmaletz_controls_Controller.instance.handler.getKey(this.key));
        },
        drawKey: function(key) {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.get_graphics().clear();
            this.handler.start(this.get_graphics(), 16);
            if (key == null) com_davidmaletz_faengfl_controls_KeyboardKey.drawText(this, com_fancyfish_faeng_common_Lang.getText("common", "none"), this.tx, this.ty, 0);
            else key.draw(this, this.tx, this.ty);
            this.handler.finish();
        },
        __class__: com_davidmaletz_controls_KeyRenderer
    });
    var com_davidmaletz_controls_ListItemRenderer = function() {};
    $hxClasses["com.davidmaletz.controls.ListItemRenderer"] = com_davidmaletz_controls_ListItemRenderer;
    com_davidmaletz_controls_ListItemRenderer.__name__ = ["com", "davidmaletz", "controls", "ListItemRenderer"];
    com_davidmaletz_controls_ListItemRenderer.prototype = {
        __class__: com_davidmaletz_controls_ListItemRenderer
    };
    var com_davidmaletz_controls_ListWindow = function(container, factory, renderer, rows, cols, darken, anim, closeButton, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        if (closeButton == null) closeButton = true;
        if (anim == null) anim = true;
        if (darken == null) darken = true;
        this.rows = rows;
        this.cols = cols;
        this.renderer = renderer;
        com_davidmaletz_controls_ClickableWindow.call(this, container, factory.create(this.renderer.getWidth() * this.cols + 8, this.renderer.getHeight(null) * this.rows + 8), true, darken, anim, halign, valign);
        this.curHeight = 0;
        this.rowHeight = 0;
        this.curCol = -1;
        if (closeButton) {
            var close = new com_davidmaletz_controls_CloseButton(this, this.renderer.getWidth() * this.cols + 8, 0);
            this.addChild(close);
            this.clickables.clickables.addClickable(close, this);
        }
    };
    $hxClasses["com.davidmaletz.controls.ListWindow"] = com_davidmaletz_controls_ListWindow;
    com_davidmaletz_controls_ListWindow.__name__ = ["com", "davidmaletz", "controls", "ListWindow"];
    com_davidmaletz_controls_ListWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_controls_ListWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        addItem: function(i) {
            this.curCol++;
            if (this.curCol >= this.cols) {
                this.curCol = 0;
                this.curHeight += this.rowHeight;
                this.rowHeight = 0;
            }
            this.rowHeight = Math.max(this.rowHeight, this.renderer.getHeight(i));
            var c = this.renderer.create(i, this.curCol * this.renderer.getWidth() + 4, this.curHeight + 4);
            if (c != null) {
                this.addChild(c);
                if (js_Boot.__instanceof(c, com_davidmaletz_controls_Clickable)) this.clickables.clickables.addClickable(c, this);
            }
            return c;
        },
        getWidth: function() {
            return this.renderer.getWidth() * this.cols + 8;
        },
        getHeight: function() {
            return this.renderer.getHeight(null) * this.rows + 8;
        },
        __class__: com_davidmaletz_controls_ListWindow
    });
    var com_davidmaletz_controls_ProgressBar = function(w, h, color, percent, lines, bg) {
        if (bg == null) bg = true;
        if (lines == null) lines = true;
        if (percent == null) percent = 1;
        openfl_display_Sprite.call(this);
        if (bg) {
            this.get_graphics().beginFill(16777215);
            this.get_graphics().drawRect(0, 0, w, h);
            this.get_graphics().endFill();
        }
        if (lines) {
            var s = new openfl_display_Sprite();
            var g1 = s.get_graphics();
            g1.beginFill(0);
            g1.drawRect( - 1, -1, w + 2, 1);
            g1.endFill();
            this.addChild(s);
            var s1 = new openfl_display_Sprite();
            var g2 = s1.get_graphics();
            g2.beginFill(0);
            g2.drawRect( - 1, h, w + 2, 1);
            g2.endFill();
            this.addChild(s1);
            var s2 = new openfl_display_Sprite();
            var g3 = s2.get_graphics();
            g3.beginFill(0);
            g3.drawRect( - 1, 0, 1, h);
            g3.endFill();
            this.addChild(s2);
            var s3 = new openfl_display_Sprite();
            var g4 = s3.get_graphics();
            g4.beginFill(0);
            g4.drawRect(w, 0, 1, h);
            g4.endFill();
            this.addChild(s3);
        }
        this.progress = new com_davidmaletz_lerp_LerpSprite();
        var g = this.progress.get_graphics();
        g.beginFill(color);
        g.drawRect(0, 0, w, h);
        g.endFill();
        this.progress.set_scaleX(percent);
        this.addChild(this.progress);
    };
    $hxClasses["com.davidmaletz.controls.ProgressBar"] = com_davidmaletz_controls_ProgressBar;
    com_davidmaletz_controls_ProgressBar.__name__ = ["com", "davidmaletz", "controls", "ProgressBar"];
    com_davidmaletz_controls_ProgressBar.__super__ = openfl_display_Sprite;
    com_davidmaletz_controls_ProgressBar.prototype = $extend(openfl_display_Sprite.prototype, {
        setProgress: function(percent, frames) {
            if (frames == null) frames = 0;
            if (frames == 0) this.progress.set_scaleX(percent);
            else {
                var hasLerp = this.progress.tracks != null;
                this.progress.lerp(new com_davidmaletz_lerp_ScaleKeyframe(percent, 1), frames);
                if (hasLerp) this.progress.handle_frame(null);
            }
        },
        __class__: com_davidmaletz_controls_ProgressBar
    });
    var com_davidmaletz_controls_Slider = function(w, val) {
        openfl_display_Sprite.call(this);
        this._width = w;
        this.addChild(((function($this) {
            var $r;
            if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
            $r = com_davidmaletz_controls_Slider.ui;
            return $r;
        } (this))).createBar(w));
        this.knob = new com_davidmaletz_controls_SliderKnob(this);
        this.addChild(this.knob);
        this.value = -1;
        this.setValue(val);
    };
    $hxClasses["com.davidmaletz.controls.Slider"] = com_davidmaletz_controls_Slider;
    com_davidmaletz_controls_Slider.__name__ = ["com", "davidmaletz", "controls", "Slider"];
    com_davidmaletz_controls_Slider.ui = null;
    com_davidmaletz_controls_Slider.getUI = function() {
        if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
        return com_davidmaletz_controls_Slider.ui;
    };
    com_davidmaletz_controls_Slider.__super__ = openfl_display_Sprite;
    com_davidmaletz_controls_Slider.prototype = $extend(openfl_display_Sprite.prototype, {
        setValue: function(v) {
            if (v < 0) v = 0;
            else if (v > 1) v = 1;
            if (this.value != v) {
                this.value = v;
                this.knob.set_x(Math.round(this.value * (this._width - ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                    $r = com_davidmaletz_controls_Slider.ui;
                    return $r;
                } (this))).getKnobWidth())));
                this.dispatchEvent(new openfl_events_Event("value_changed"));
            }
        },
        setKnobPos: function(x) {
            this.setValue(x / (this._width - ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getKnobWidth()));
        },
        getValue: function() {
            return this.value;
        },
        getWidth: function() {
            return this._width;
        },
        getHeight: function() {
            return ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getHeight();
        },
        __class__: com_davidmaletz_controls_Slider
    });
    var com_davidmaletz_controls_SliderKnob = function(bar) {
        this.downX = 0;
        this.pressed = null;
        this.repeat_ct = 0;
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.bar = bar;
        this.addChild(((function($this) {
            var $r;
            if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
            $r = com_davidmaletz_controls_Slider.ui;
            return $r;
        } (this))).createKnob());
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this, 1.0);
    };
    $hxClasses["com.davidmaletz.controls.SliderKnob"] = com_davidmaletz_controls_SliderKnob;
    com_davidmaletz_controls_SliderKnob.__name__ = ["com", "davidmaletz", "controls", "SliderKnob"];
    com_davidmaletz_controls_SliderKnob.point = null;
    com_davidmaletz_controls_SliderKnob.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_controls_SliderKnob.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        getWidth: function() {
            return ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getKnobWidth();
        },
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.checkRepeat));
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.up));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.move));
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.modal));
            com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.modal));
            com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.modal));
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.checkRepeat));
        },
        checkRepeat: function(e) {
            if (this.pressed != null && isNaN(this.downX)) {
                this.repeat_ct--;
                if (this.repeat_ct <= 0) {
                    if (this.repeat_ct == 0) this.repeat_ct = 5;
                    else this.repeat_ct = 20;
                    this.updateBar();
                }
            }
        },
        updateBar: function() {
            var target = this.pressed.x - ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getKnobWidth() * 0.5;
            var d = Math.abs(target - this.get_x());
            if (d > 20) {
                if (target > this.get_x()) target = this.get_x() + 20;
                else target = this.get_x() - 20;
            }
            this.bar.setKnobPos(target);
        },
        move: function(e) {
            if (!this.get_visible()) return;
            if (com_davidmaletz_controls_SliderKnob.point == null) com_davidmaletz_controls_SliderKnob.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_SliderKnob.point.setTo(e.stageX, e.stageY);
            var p = this.bar.globalToLocal(com_davidmaletz_controls_SliderKnob.point);
            if (this.pressed == null) {
                var h = p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                    $r = com_davidmaletz_controls_Slider.ui;
                    return $r;
                } (this))).getKnobWidth() + this.get_x() && p.y <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                    $r = com_davidmaletz_controls_Slider.ui;
                    return $r;
                } (this))).getHeight() + this.get_y();
                if (h != this.hovered) {
                    this.hovered = h;
                    this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(this.hovered ? 0.7 : 1.0), 10);
                }
                return;
            }
            e.stopImmediatePropagation();
            if (isNaN(this.downX)) this.pressed = p;
            else this.bar.setKnobPos(this.downX + p.x - this.pressed.x);
        },
        inBounds: function(p, fuzzy) {
            if (fuzzy == null) fuzzy = 0;
            return p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getKnobWidth() + this.get_x() && p.y <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getHeight() + this.get_y() + fuzzy;
        },
        inScrollBounds: function(p, fuzzy) {
            if (fuzzy == null) fuzzy = 0;
            return p.x >= 0 && p.y >= 0 && p.x <= this.bar._width && p.y <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getHeight() + fuzzy;
        },
        modal: function(e) {
            e.stopImmediatePropagation();
        },
        down: function(e) {
            if (!this.get_visible()) return;
            if (com_davidmaletz_controls_SliderKnob.point == null) com_davidmaletz_controls_SliderKnob.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_SliderKnob.point.setTo(e.stageX, e.stageY);
            var p = this.bar.globalToLocal(com_davidmaletz_controls_SliderKnob.point);
            if (p.x >= 0 && p.y >= 0 && p.x <= this.bar._width && p.y <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                $r = com_davidmaletz_controls_Slider.ui;
                return $r;
            } (this))).getHeight()) {
                this.pressed = p;
                if (p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                    $r = com_davidmaletz_controls_Slider.ui;
                    return $r;
                } (this))).getKnobWidth() + this.get_x() && p.y <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
                    $r = com_davidmaletz_controls_Slider.ui;
                    return $r;
                } (this))).getHeight() + this.get_y()) this.downX = this.get_x();
                else {
                    this.downX = NaN;
                }
                this.repeat_ct = 0;
                this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(0.5), 10);
                e.stopImmediatePropagation();
                com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
                com_davidmaletz_controls_Controller.instance.addEventListener("press", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
                com_davidmaletz_controls_Controller.instance.addEventListener("release", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            }
        },
        up: function(e) {
            if (!this.get_visible()) return;
            if (this.pressed != null) {
                this.pressed = null;
                this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(1.0), 10);
                this.hovered = false;
                e.stopImmediatePropagation();
                com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.modal));
                com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.modal));
                com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.modal));
            }
        },
        __class__: com_davidmaletz_controls_SliderKnob
    });
    var com_davidmaletz_controls_Spinner = function(c, min, max, val) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        var ht = 12;
        this.addChild(new com_davidmaletz_faengfl_SolidDrawable(16777215, 32, ht, 1).create(0, 0));
        this.min = min;
        this.max = max;
        this.value = val;
        this.field = new com_davidmaletz_controls__$Spinner_MyTextField(this, c, 30, this.value);
        this.field.set_x(1);
        this.field.set_y(1);
        this.addChild(this.field);
        var arrow = new com_fancyfish_faeng_common_mutable_Static(">");
        var f = com_davidmaletz_faengfl_Application.button_factory;
        var bg = f.createBG(12, 7);
        var hover = f.createHover(12, 7);
        this.up = new com_davidmaletz_controls_StaticButton(31, 0, bg, hover, arrow);
        this.up.onClickFunc = $bind(this, this.spinUp);
        this.addChild(this.up);
        this.down = new com_davidmaletz_controls_StaticButton(31, ht * 0.5, bg, hover, arrow);
        this.down.onClickFunc = $bind(this, this.spinDown);
        this.addChild(this.down);
        var c1 = this.up.getChildAt(this.up.get_numChildren() - 1);
        c1.set_rotation( - 90);
        c1.set_x(2);
        c1.set_y(9);
        var c2 = this.down.getChildAt(this.up.get_numChildren() - 1);
        c2.set_rotation(90);
        c2.set_x(11);
        c2.set_y( - 2);
    };
    $hxClasses["com.davidmaletz.controls.Spinner"] = com_davidmaletz_controls_Spinner;
    com_davidmaletz_controls_Spinner.__name__ = ["com", "davidmaletz", "controls", "Spinner"];
    com_davidmaletz_controls_Spinner.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_controls_Spinner.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        setFocused: function(e) {
            openfl_Lib.current.stage.set_focus(this.field);
            com_davidmaletz_faengfl_Application.setFocus(this.field, e);
        },
        hasFocus: function() {
            return this.field == com_davidmaletz_faengfl_Application.focus;
        },
        getWidth: function() {
            return 42;
        },
        getHeight: function() {
            return 12;
        },
        init: function(e) {
            this.destroy(e);
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.tap), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_controls_Controller.instance.addEventListener("release", $bind(this, this.release), false, com_davidmaletz_faengfl_Window.window_ct + 2);
        },
        destroy: function(e) {
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.tap));
            com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.release));
        },
        tap: function(e) {
            var _g = e.key;
            switch (_g) {
            case "up":
                this.up.onHover(true);
                this.up.onClick();
                e.stopImmediatePropagation();
                break;
            case "down":
                this.down.onHover(true);
                this.down.onClick();
                e.stopImmediatePropagation();
                break;
            }
        },
        release: function(e) {
            if (e.key == "up") this.up.onHover(false);
            if (e.key == "down") this.down.onHover(false);
        },
        getValue: function() {
            return this.value;
        },
        setValue: function(v) {
            v = com_fancyfish_faeng_common_Utils.clampi(v, this.min, this.max);
            if (v != this.value) {
                this.value = v;
                this.field.setText(Std.string(this.value));
                this.dispatchEvent(new openfl_events_Event("change_value"));
                return true;
            } else return false;
        },
        spinUp: function() {
            this.setValue(this.value == this.max ? this.min: this.value + 1);
        },
        spinDown: function() {
            this.setValue(this.value == this.min ? this.max: this.value - 1);
        },
        __class__: com_davidmaletz_controls_Spinner
    });
    var com_davidmaletz_faengfl_ScissorSprite = function(w, h, m, c, x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        this._width = w;
        this._height = h;
        this._mask = m;
        this.sx = x;
        this.sy = y;
        if (c != null && js_Boot.__instanceof(c, com_davidmaletz_faengfl_FramebufferSprite)) this.container = c;
        else this.container = null;
        openfl_display_Sprite.call(this);
    };
    $hxClasses["com.davidmaletz.faengfl.ScissorSprite"] = com_davidmaletz_faengfl_ScissorSprite;
    com_davidmaletz_faengfl_ScissorSprite.__name__ = ["com", "davidmaletz", "faengfl", "ScissorSprite"];
    com_davidmaletz_faengfl_ScissorSprite.point = null;
    com_davidmaletz_faengfl_ScissorSprite.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_ScissorSprite.prototype = $extend(openfl_display_Sprite.prototype, {
        toGlobal: function(p) {
            p = this._mask.localToGlobal(p);
            if (this.container != null && js_Boot.__instanceof(this.container, openfl_display_DisplayObject)) p = (js_Boot.__cast(this.container, openfl_display_DisplayObject)).globalToLocal(p);
            return p;
        },
        __renderGL: function(renderSession) {
            if (this._mask.get_scaleX() > 0 && this._mask.stage != null && this.get_numChildren() > 0) {
                renderSession.spriteBatch.flush();
                renderSession.gl.enable(renderSession.gl.SCISSOR_TEST);
                if (com_davidmaletz_faengfl_ScissorSprite.point == null) com_davidmaletz_faengfl_ScissorSprite.point = new openfl_geom_Point(this.sx, this.sy);
                else com_davidmaletz_faengfl_ScissorSprite.point.setTo(this.sx, this.sy);
                var st = this.toGlobal(com_davidmaletz_faengfl_ScissorSprite.point);
                com_davidmaletz_faengfl_ScissorSprite.point.setTo(this._width + this.sx, this._height + this.sy);
                var end = this.toGlobal(com_davidmaletz_faengfl_ScissorSprite.point);
                var ht;
                if (this.container == null) ht = this._mask.stage.stageHeight;
                else ht = this.container.getHeight() + 1;
                renderSession.gl.scissor(Math.round(st.x), Math.round(ht - 1 - end.y), Math.round(end.x - st.x), Math.round(end.y - st.y));
                openfl_display_Sprite.prototype.__renderGL.call(this, renderSession);
                renderSession.spriteBatch.flush();
                renderSession.gl.disable(renderSession.gl.SCISSOR_TEST);
            }
        },
        __class__: com_davidmaletz_faengfl_ScissorSprite
    });
    var com_davidmaletz_faengfl_Focusable = function() {};
    $hxClasses["com.davidmaletz.faengfl.Focusable"] = com_davidmaletz_faengfl_Focusable;
    com_davidmaletz_faengfl_Focusable.__name__ = ["com", "davidmaletz", "faengfl", "Focusable"];
    com_davidmaletz_faengfl_Focusable.prototype = {
        __class__: com_davidmaletz_faengfl_Focusable
    };
    var com_davidmaletz_faengfl_ui_TextField = function(c, width, initial, align, sz, color, bg, font) {
        if (bg == null) bg = 16777215;
        if (color == null) color = 0;
        if (sz == null) sz = 1;
        if (align == null) align = 0;
        if (initial == null) initial = "";
        this.doDrag = -1;
        this.cursor_ct = 30;
        com_davidmaletz_faengfl_ScissorSprite.call(this, width, sz * 10, this, c);
        if (bg != 0) this.addChild(new com_davidmaletz_faengfl_SolidDrawable(bg, width, this._height).create(0, 0));
        this.mutable = new com_fancyfish_faeng_common_mutable_Mutable();
        this.mutable.set(initial);
        this.text = new com_davidmaletz_faengfl_TextSprite(this.mutable, new com_fancyfish_faeng_text_CharacterPlacer(0), color, sz, font);
        this.focusRect = false;
        this.scroll = new openfl_display_Sprite();
        this.scroll.addChild(this.text);
        this.align_w = align;
        this.set_cursor(initial.length);
        this.selection = new com_davidmaletz_faengfl_SolidDrawable(16777215, 1, this._height).create(0, 0);
        this.selection.set_blendMode(3);
        this.selection.set_x(this.getPos(this.cursor));
        this.selection.set_visible(false);
        this.selection.set_scaleX(this.selection.set_scaleY(this.text.get_scaleX()));
        this.scroll.addChild(this.selection);
        this.addChild(this.scroll);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.faengfl.ui.TextField"] = com_davidmaletz_faengfl_ui_TextField;
    com_davidmaletz_faengfl_ui_TextField.__name__ = ["com", "davidmaletz", "faengfl", "ui", "TextField"];
    com_davidmaletz_faengfl_ui_TextField.__interfaces__ = [com_davidmaletz_faengfl_Focusable];
    com_davidmaletz_faengfl_ui_TextField.point = null;
    com_davidmaletz_faengfl_ui_TextField.__super__ = com_davidmaletz_faengfl_ScissorSprite;
    com_davidmaletz_faengfl_ui_TextField.prototype = $extend(com_davidmaletz_faengfl_ScissorSprite.prototype, {
        getPos: function(i) {
            return Math.round(com_fancyfish_faeng_text_CharacterPlacer.getWidth(this.mutable.get(), this.text.font.get(), this.text.get_scaleX(), 0, i));
        },
        getScale: function() {
            return this.text.get_scaleX();
        },
        set_cursor: function(c) {
            this.cursor = c;
            this.cursor_end = c;
            this.updateCursor();
            c;
            return c;
        },
        set_cursor_end: function(c) {
            this.cursor_end = c;
            this.updateCursor();
            return c;
        },
        updateCursor: function() {
            if (this.selection != null) {
                if (com_davidmaletz_faengfl_Application.focus == this) this.selection.set_visible(true);
                var st;
                var end;
                if (this.cursor > this.cursor_end) {
                    st = this.cursor_end;
                    end = this.cursor;
                } else {
                    st = this.cursor;
                    end = this.cursor_end;
                }
                this.selection.set_x(this.getPos(st));
                if (this.cursor_end != this.cursor) this.selection.set_scaleX(this.getPos(end) - this.selection.get_x());
                else this.selection.set_scaleX(1);
                var p = this.getPos(this.cursor_end);
                var s = this._width - p - 1;
                if (this.scroll.get_x() > s) this.scroll.set_x(s);
                else if ( - p > this.scroll.get_x()) this.scroll.set_x( - p);
            }
            var w = (this._width - this.getPos( - 1) - 1) * this.align_w;
            if (this.scroll.get_x() < w) this.scroll.set_x(w);
        },
        getFont: function() {
            return this.text.font.get();
        },
        getText: function() {
            return this.mutable.get();
        },
        setColor: function(c) {
            com_davidmaletz_faengfl_TextSprite.setColor(this.text, c, null);
        },
        setFont: function(f) {
            this.text.font.set(f);
        },
        setText: function(txt) {
            this.mutable.set(txt);
            this.set_cursor(txt.length);
        },
        init: function(e) {
            this.destroy(e);
            this.addEventListener("enterFrame", $bind(this, this.enter_frame));
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.mouse_down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.mouse_move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.mouse_up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.mouse_down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.mouse_move));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.mouse_up));
            if (com_davidmaletz_faengfl_Application.focus == this) this.loseFocus();
        },
        enter_frame: function(e) {
            if (! (com_davidmaletz_faengfl_Application.focus == this)) return;
            if (this.cursor_end != this.cursor) this.selection.set_visible(true);
            else {
                this.cursor_ct--;
                if (this.cursor_ct <= 0) {
                    this.cursor_ct = 30;
                    this.selection.set_visible(!this.selection.get_visible());
                }
            }
        },
        hasFocus: function() {
            return com_davidmaletz_faengfl_Application.focus == this;
        },
        gainFocus: function(e) {
            openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.key_down), false, 10);
            openfl_Lib.current.stage.addEventListener("keyUp", $bind(this, this.key_up), false, 10);
            this.selection.set_visible(true);
        },
        loseFocus: function() {
            openfl_Lib.current.stage.set_focus(null);
            openfl_Lib.current.stage.removeEventListener("keyDown", $bind(this, this.key_down));
            openfl_Lib.current.stage.removeEventListener("keyUp", $bind(this, this.key_up));
            this.selection.set_visible(false);
            this.action(false);
        },
        insert: function(text) {
            this.clearSelection();
            var t = this.mutable.get();
            var len = t.length;
            if (this.cursor == len) this.mutable.set(t + text);
            else this.mutable.set(HxOverrides.substr(t, 0, this.cursor) + text + HxOverrides.substr(t, this.cursor, len - this.cursor));
            var _g = this;
            _g.set_cursor(_g.cursor + text.length);
        },
        hasSelection: function() {
            return this.cursor_end != this.cursor;
        },
        clearSelection: function() {
            if (this.cursor_end != this.cursor) {
                var t = this.mutable.get();
                var len = t.length;
                var st;
                var end;
                if (this.cursor > this.cursor_end) {
                    st = this.cursor_end;
                    end = this.cursor;
                } else {
                    st = this.cursor;
                    end = this.cursor_end;
                }
                this.mutable.set(HxOverrides.substr(t, 0, st) + HxOverrides.substr(t, end, len - end));
                this.cursor = st;
                this.cursor_end = st;
                this.updateCursor();
                st;
                st;
            }
        },
        getSelection: function() {
            var st;
            var end;
            if (this.cursor > this.cursor_end) {
                st = this.cursor_end;
                end = this.cursor;
            } else {
                st = this.cursor;
                end = this.cursor_end;
            }
            if (this.cursor_end != this.cursor) return haxe_Utf8.sub(this.mutable.get(), st, end - st);
            else return "";
        },
        action: function(enter) {},
        paste: function(e) {
            var c = openfl_desktop_Clipboard.get_generalClipboard();
            if (c.hasFormat(2)) this.insert((function($this) {
                var $r;
                var this1 = c.getData(2);
                $r = Std.string(this1);
                return $r;
            } (this)));
        },
        copy: function(e) {
            if (this.cursor_end != this.cursor) openfl_desktop_Clipboard.get_generalClipboard().setData(2, this.getSelection());
        },
        cut: function(e) {
            if (this.cursor_end != this.cursor) {
                openfl_desktop_Clipboard.get_generalClipboard().setData(2, this.getSelection());
                this.clearSelection();
            }
        },
        selectAll: function() {
            this.cursor = 0;
            this.cursor_end = 0;
            this.updateCursor();
            0;
            0;
            this.set_cursor_end((function($this) {
                var $r;
                var s = $this.mutable.get();
                $r = s.length;
                return $r;
            } (this)));
        },
        key_up: function(e) {
            var key = e.keyCode;
            if (key != 27) e.stopImmediatePropagation();
            if (e.ctrlKey) {
                if (key == 67) this.copy(null);
                else if (key == 86) this.paste(null);
                else if (key == 88) this.cut(null);
                else if (key == 65) this.selectAll();
            }
        },
        key_down: function(e) {
            var key = e.keyCode;
            if (key != 27) e.stopImmediatePropagation();
            if (key == 13 || key == 108) this.action(true);
            else if (key == 37) {
                if (e.shiftKey) {
                    if (this.cursor_end != 0) {
                        var _g = this;
                        var _g1 = _g.cursor_end;
                        _g.set_cursor_end(_g1 - 1);
                        _g1;
                    }
                } else {
                    if (this.cursor_end != this.cursor) this.set_cursor(this.cursor_end);
                    if (this.cursor != 0) {
                        var _g2 = this;
                        var _g11 = _g2.cursor;
                        _g2.set_cursor(_g11 - 1);
                        _g11;
                    }
                }
            } else if (key == 39) {
                var len;
                var s = this.mutable.get();
                len = s.length;
                if (e.shiftKey) {
                    if (this.cursor_end != len) {
                        var _g3 = this;
                        var _g12 = _g3.cursor_end;
                        _g3.set_cursor_end(_g12 + 1);
                        _g12;
                    }
                } else {
                    if (this.cursor_end != this.cursor) this.set_cursor(this.cursor_end);
                    if (this.cursor != len) {
                        var _g4 = this;
                        var _g13 = _g4.cursor;
                        _g4.set_cursor(_g13 + 1);
                        _g13;
                    }
                }
            } else if (key == 8) {
                if (this.cursor_end != this.cursor) this.clearSelection();
                else {
                    var t = this.mutable.get();
                    if (this.cursor > 0) {
                        var len1 = t.length;
                        var s1;
                        if (this.cursor == 1) s1 = "";
                        else s1 = HxOverrides.substr(t, 0, this.cursor - 1);
                        if (this.cursor < len1) s1 += HxOverrides.substr(t, this.cursor, len1 - this.cursor);
                        this.mutable.set(s1);
                        var _g5 = this;
                        var _g14 = _g5.cursor;
                        _g5.set_cursor(_g14 - 1);
                        _g14;
                    }
                }
            } else if (key == 46) {
                if (this.cursor_end != this.cursor) this.clearSelection();
                else {
                    var t1 = this.mutable.get();
                    var len2 = t1.length;
                    if (this.cursor < len2) {
                        var s2 = HxOverrides.substr(t1, 0, this.cursor);
                        if (this.cursor + 1 < len2) s2 += HxOverrides.substr(t1, this.cursor + 1, len2 - this.cursor - 1);
                        this.mutable.set(s2);
                    }
                }
            } else if (key == 36) {
                if (e.shiftKey) {
                    if (this.cursor_end != 0) {
                        this.cursor_end = 0;
                        this.updateCursor();
                        0;
                    }
                } else if (this.cursor_end != this.cursor || this.cursor != 0) {
                    this.cursor = 0;
                    this.cursor_end = 0;
                    this.updateCursor();
                    0;
                    0;
                }
            } else if (key == 35) {
                var len3;
                var s3 = this.mutable.get();
                len3 = s3.length;
                if (e.shiftKey) {
                    if (this.cursor_end != len3) {
                        this.cursor_end = len3;
                        this.updateCursor();
                        len3;
                    }
                } else if (this.cursor_end != this.cursor || this.cursor != len3) {
                    this.cursor = len3;
                    this.cursor_end = len3;
                    this.updateCursor();
                    len3;
                    len3;
                }
            } else if (!e.ctrlKey && e.charCode >= 32) this.insert(String.fromCharCode(e.charCode));
        },
        text_input: function(e) {
            this.insert(e.text);
            return true;
        },
        transformPoint: function(e) {
            if (com_davidmaletz_faengfl_ui_TextField.point == null) com_davidmaletz_faengfl_ui_TextField.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_faengfl_ui_TextField.point.setTo(e.stageX, e.stageY);
            return this.globalToLocal(com_davidmaletz_faengfl_ui_TextField.point);
        },
        inBounds: function(p) {
            return p.x >= 0 && p.y >= 0 && p.x < this._width && p.y <= this._height;
        },
        mouse_down: function(e) {
            var p = this.transformPoint(e);
            if (this.inBounds(p)) {
                this.set_cursor(com_fancyfish_faeng_text_CharacterPlacer.getIndex(this.mutable.get(), this.text.font.get(), this.text.get_scaleX(), p.x - this.scroll.get_x()));
                openfl_Lib.current.stage.set_focus(this);
                com_davidmaletz_faengfl_Application.setFocus(this, null);
                this.doDrag = e.id;
            } else if (com_davidmaletz_faengfl_Application.focus == this) com_davidmaletz_faengfl_Application.setFocus(null, null);
        },
        mouse_up: function(e) {
            if (e.id == this.doDrag) this.doDrag = -1;
        },
        mouse_move: function(e) {
            if (e.id != this.doDrag) return;
            var p = this.transformPoint(e);
            var c = com_fancyfish_faeng_text_CharacterPlacer.getIndex(this.mutable.get(), this.text.font.get(), this.text.get_scaleX(), p.x - this.scroll.get_x());
            if (this.cursor_end != c) {
                this.cursor_end = c;
                this.updateCursor();
                c;
            }
        },
        __class__: com_davidmaletz_faengfl_ui_TextField,
        __properties__: $extend(com_davidmaletz_faengfl_ScissorSprite.prototype.__properties__, {
            set_cursor_end: "set_cursor_end",
            set_cursor: "set_cursor"
        })
    });
    var com_davidmaletz_controls__$Spinner_MyTextField = function(s, c, width, value) {
        com_davidmaletz_faengfl_ui_TextField.call(this, c, width, value == null ? "null": "" + value, 1, 1, 0, 0);
        this.spinner = s;
    };
    $hxClasses["com.davidmaletz.controls._Spinner.MyTextField"] = com_davidmaletz_controls__$Spinner_MyTextField;
    com_davidmaletz_controls__$Spinner_MyTextField.__name__ = ["com", "davidmaletz", "controls", "_Spinner", "MyTextField"];
    com_davidmaletz_controls__$Spinner_MyTextField.__super__ = com_davidmaletz_faengfl_ui_TextField;
    com_davidmaletz_controls__$Spinner_MyTextField.prototype = $extend(com_davidmaletz_faengfl_ui_TextField.prototype, {
        gainFocus: function(e) {
            com_davidmaletz_faengfl_ui_TextField.prototype.gainFocus.call(this, e);
            this.selectAll();
            if (e != null) this.key_down(e);
        },
        action: function(enter) {
            var v = Std.parseFloat(StringTools.replace(this.mutable.get(), ",", ""));
            if (isNaN(v) || !this.spinner.setValue(Math.round(v))) this.setText(Std.string(this.spinner.value));
            if (com_davidmaletz_faengfl_Application.focus == this) com_davidmaletz_faengfl_Application.setFocus(null, null);
            if (enter) this.spinner.dispatchEvent(new openfl_events_Event("action"));
        },
        __class__: com_davidmaletz_controls__$Spinner_MyTextField
    });
    var com_davidmaletz_controls_StaticButton = function(x, y, bg, hover, text, col, scale, fnt) {
        if (scale == null) scale = 1;
        if (col == null) col = 0;
        this.clickCt = 0;
        this.touch = -1;
        com_davidmaletz_controls_Button.call(this, x, y, bg, hover, text, col, scale, fnt);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.controls.StaticButton"] = com_davidmaletz_controls_StaticButton;
    com_davidmaletz_controls_StaticButton.__name__ = ["com", "davidmaletz", "controls", "StaticButton"];
    com_davidmaletz_controls_StaticButton.point = null;
    com_davidmaletz_controls_StaticButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_controls_StaticButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        init: function(e) {
            this.destroy(e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.up));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.move));
            this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        enter_frame: function(e) {
            this.clickCt--;
            if (this.clickCt <= 0) {
                this.onClick();
                this.clickCt = 5;
            }
        },
        inBounds: function(e) {
            if (this.parent == null) return false;
            if (com_davidmaletz_controls_StaticButton.point == null) com_davidmaletz_controls_StaticButton.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_StaticButton.point.setTo(e.stageX, e.stageY);
            var p = this.parent.globalToLocal(com_davidmaletz_controls_StaticButton.point);
            return this.getPos().containsPoint(p);
        },
        down: function(e) {
            if (this.inBounds(e)) {
                e.stopImmediatePropagation();
                this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
                this.touch = e.id;
                this.onClick();
                this.clickCt = 20;
                this.addEventListener("enterFrame", $bind(this, this.enter_frame));
            }
        },
        up: function(e) {
            if (e.id == this.touch) {
                e.stopImmediatePropagation();
                this.touch = -1;
                this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
            }
        },
        move: function(e) {
            if (this.touch != -1) e.stopImmediatePropagation();
            else this.onHover(this.inBounds(e));
        },
        __class__: com_davidmaletz_controls_StaticButton
    });
    var com_davidmaletz_controls_scroll_ScrollUI = function() {};
    $hxClasses["com.davidmaletz.controls.scroll.ScrollUI"] = com_davidmaletz_controls_scroll_ScrollUI;
    com_davidmaletz_controls_scroll_ScrollUI.__name__ = ["com", "davidmaletz", "controls", "scroll", "ScrollUI"];
    com_davidmaletz_controls_scroll_ScrollUI.prototype = {
        __class__: com_davidmaletz_controls_scroll_ScrollUI
    };
    var com_davidmaletz_controls_scroll_DefaultScrollUI = function(scrollbar, knob) {
        if (scrollbar == null) this.scrollbar_factory = new com_davidmaletz_faengfl_SolidDrawableFactory(16777215);
        else this.scrollbar_factory = scrollbar;
        if (knob == null) this.knob_factory = new com_davidmaletz_faengfl_SolidDrawableFactory(11711154);
        else this.knob_factory = knob;
    };
    $hxClasses["com.davidmaletz.controls.scroll.DefaultScrollUI"] = com_davidmaletz_controls_scroll_DefaultScrollUI;
    com_davidmaletz_controls_scroll_DefaultScrollUI.__name__ = ["com", "davidmaletz", "controls", "scroll", "DefaultScrollUI"];
    com_davidmaletz_controls_scroll_DefaultScrollUI.__interfaces__ = [com_davidmaletz_controls_scroll_ScrollUI];
    com_davidmaletz_controls_scroll_DefaultScrollUI.prototype = {
        isAlwaysVisible: function() {
            return false;
        },
        getWidth: function() {
            return 6;
        },
        getMinKnobHeight: function() {
            return 10;
        },
        createScrollbar: function(h) {
            return this.scrollbar_factory.create(6, h).create(0, 0);
        },
        createKnob: function() {
            return this.knob_factory.create(6, 1).create(0, 0);
        },
        setKnobHeight: function(knob, h) {
            knob.set_scaleY(h);
        },
        __class__: com_davidmaletz_controls_scroll_DefaultScrollUI
    };
    var com_davidmaletz_controls_scroll_ListGrid = function(w, h, m, c, list) {
        com_davidmaletz_faengfl_ScissorSprite.call(this, w, h, m, c, 0, 0);
        this.curHeight = 0;
        this.rowHeight = 0;
        this.curCol = -1;
        this.rows = [];
        this.clickables = new com_davidmaletz_controls_scroll_ScrollClickableColumns(list);
    };
    $hxClasses["com.davidmaletz.controls.scroll.ListGrid"] = com_davidmaletz_controls_scroll_ListGrid;
    com_davidmaletz_controls_scroll_ListGrid.__name__ = ["com", "davidmaletz", "controls", "scroll", "ListGrid"];
    com_davidmaletz_controls_scroll_ListGrid.__super__ = com_davidmaletz_faengfl_ScissorSprite;
    com_davidmaletz_controls_scroll_ListGrid.prototype = $extend(com_davidmaletz_faengfl_ScissorSprite.prototype, {
        rowCount: function() {
            return this.rows.length + 1;
        },
        yToRow: function(y) {
            return com_fancyfish_faeng_common_Utils.drawCDF(this.rows, y + 0.01, false);
        },
        getRowY: function(row) {
            if (row >= this.rows.length) return this.curHeight + this.rowHeight;
            else if (row < 0) return 0;
            else return this.rows[row];
        },
        getHeight: function() {
            return this.curHeight + this.rowHeight;
        },
        clear: function() {
            this.curHeight = 0;
            this.rowHeight = 0;
            this.curCol = -1;
            this.rows.length = 0;
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.clickables.clear();
        },
        addItem: function(renderer, i, cols) {
            this.curCol++;
            if (this.curCol >= cols) {
                this.curCol = 0;
                this.curHeight += this.rowHeight;
                this.rows.push(this.curHeight);
                this.rowHeight = 0;
            }
            this.rowHeight = Math.max(this.rowHeight, renderer.getHeight(i));
            var c = renderer.create(i, this.curCol * renderer.getWidth(), this.curHeight);
            this.addChild(c);
            if (js_Boot.__instanceof(c, com_davidmaletz_controls_Clickable)) this.clickables.addClickable(c, this);
            return c;
        },
        __class__: com_davidmaletz_controls_scroll_ListGrid
    });
    var com_davidmaletz_controls_scroll_ScrollClickableColumns = function(list) {
        com_davidmaletz_controls_ArrayClickableColumns.call(this);
        this.list = list;
    };
    $hxClasses["com.davidmaletz.controls.scroll.ScrollClickableColumns"] = com_davidmaletz_controls_scroll_ScrollClickableColumns;
    com_davidmaletz_controls_scroll_ScrollClickableColumns.__name__ = ["com", "davidmaletz", "controls", "scroll", "ScrollClickableColumns"];
    com_davidmaletz_controls_scroll_ScrollClickableColumns.__super__ = com_davidmaletz_controls_ArrayClickableColumns;
    com_davidmaletz_controls_scroll_ScrollClickableColumns.prototype = $extend(com_davidmaletz_controls_ArrayClickableColumns.prototype, {
        changeSelected: function(selected, col) {
            this.list.ensureVisible(selected.getPos());
        },
        inBounds: function(col, p) {
            var y = p.y - -this.list.list.get_y();
            return p.x >= 0 && p.x < this.list.getWidth() && y > 0 && y < this.list.getViewportHeight();
        },
        getYOffset: function(col) {
            return this.list.yToRow( - this.list.list.get_y());
        },
        __class__: com_davidmaletz_controls_scroll_ScrollClickableColumns
    });
    var com_davidmaletz_controls_scroll_ScrollKnob = function(bar) {
        this.downY = 0;
        this.pressed = null;
        this.repeat_ct = 0;
        this._height = 1;
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.bar = bar;
        this.addChild(((function($this) {
            var $r;
            if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
            $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
            return $r;
        } (this))).createKnob());
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this, 1.0);
    };
    $hxClasses["com.davidmaletz.controls.scroll.ScrollKnob"] = com_davidmaletz_controls_scroll_ScrollKnob;
    com_davidmaletz_controls_scroll_ScrollKnob.__name__ = ["com", "davidmaletz", "controls", "scroll", "ScrollKnob"];
    com_davidmaletz_controls_scroll_ScrollKnob.point = null;
    com_davidmaletz_controls_scroll_ScrollKnob.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_controls_scroll_ScrollKnob.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        getHeight: function() {
            return this._height;
        },
        setHeight: function(ht) {
            var ui;
            if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
            ui = com_davidmaletz_controls_scroll_Scrollbar.ui;
            ht = Math.max(ui.getMinKnobHeight(), ht);
            if (this._height != ht) {
                this._height = ht;
                if (this.stage != null) ui.setKnobHeight(this.getChildAt(0), ht);
            }
        },
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.checkRepeat));
            if (this._height > 1)((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).setKnobHeight(this.getChildAt(0), this._height);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.up));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.move));
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.modal));
            com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.modal));
            com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.modal));
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.checkRepeat));
        },
        checkRepeat: function(e) {
            if (this.pressed != null && isNaN(this.downY)) {
                this.repeat_ct--;
                if (this.repeat_ct <= 0) {
                    if (this.repeat_ct == 0) this.repeat_ct = 5;
                    else this.repeat_ct = 20;
                    this.updateBar();
                }
            }
        },
        updateBar: function() {
            var target = this.pressed.y - this._height * 0.5;
            var d = Math.abs(target - this.get_y());
            if (d > 20) {
                if (target > this.get_y()) target = this.get_y() + 20;
                else target = this.get_y() - 20;
            }
            this.bar.setKnobPos(target);
        },
        move: function(e) {
            if (!this.get_visible()) return;
            if (com_davidmaletz_controls_scroll_ScrollKnob.point == null) com_davidmaletz_controls_scroll_ScrollKnob.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_scroll_ScrollKnob.point.setTo(e.stageX, e.stageY);
            var p = this.bar.globalToLocal(com_davidmaletz_controls_scroll_ScrollKnob.point);
            if (this.pressed == null) {
                var h = p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                    $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                    return $r;
                } (this))).getWidth() + this.get_x() && p.y <= this._height + this.get_y();
                if (h != this.hovered) {
                    this.hovered = h;
                    this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(this.hovered ? 0.7 : 1.0), 10);
                }
                return;
            }
            e.stopImmediatePropagation();
            if (isNaN(this.downY)) this.pressed = p;
            else this.bar.setKnobPos(this.downY + p.y - this.pressed.y);
        },
        inBounds: function(p, fuzzy) {
            if (fuzzy == null) fuzzy = 0;
            return p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth() + this.get_x() + fuzzy && p.y <= this._height + this.get_y();
        },
        inScrollBounds: function(p, fuzzy) {
            if (fuzzy == null) fuzzy = 0;
            return p.x >= 0 && p.y >= 0 && p.x <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth() + fuzzy && p.y <= this.bar.list.getViewportHeight();
        },
        modal: function(e) {
            e.stopImmediatePropagation();
        },
        down: function(e) {
            if (!this.get_visible()) return;
            if (com_davidmaletz_controls_scroll_ScrollKnob.point == null) com_davidmaletz_controls_scroll_ScrollKnob.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_scroll_ScrollKnob.point.setTo(e.stageX, e.stageY);
            var p = this.bar.globalToLocal(com_davidmaletz_controls_scroll_ScrollKnob.point);
            if (p.x >= 0 && p.y >= 0 && p.x <= ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth() && p.y <= this.bar.list.getViewportHeight()) {
                this.pressed = p;
                if (p.x >= this.get_x() && p.y >= this.get_y() && p.x <= ((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                    $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                    return $r;
                } (this))).getWidth() + this.get_x() && p.y <= this._height + this.get_y()) this.downY = this.get_y();
                else {
                    this.downY = NaN;
                }
                this.repeat_ct = 0;
                this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(0.5), 10);
                e.stopImmediatePropagation();
                com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
                com_davidmaletz_controls_Controller.instance.addEventListener("press", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
                com_davidmaletz_controls_Controller.instance.addEventListener("release", $bind(this, this.modal), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            }
        },
        up: function(e) {
            if (!this.get_visible()) return;
            if (this.pressed != null) {
                this.pressed = null;
                this.lerp(new com_davidmaletz_lerp_DarkenKeyframe(1.0), 10);
                this.hovered = false;
                e.stopImmediatePropagation();
                com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.modal));
                com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.modal));
                com_davidmaletz_controls_Controller.instance.removeEventListener("release", $bind(this, this.modal));
            }
        },
        __class__: com_davidmaletz_controls_scroll_ScrollKnob
    });
    var com_davidmaletz_controls_scroll_ScrollList = function(container, renderer, rows, cols) {
        openfl_display_Sprite.call(this);
        this.rows = rows;
        this.cols = cols;
        this.renderer = renderer;
        this.list = new com_davidmaletz_controls_scroll_ListGrid(this.renderer.getWidth() * this.cols, this.renderer.getHeight(null) * this.rows, this, container, this);
        this.addChild(this.list);
        this.scrollbar = this.makeScrollbar();
        this.addChild(this.scrollbar);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.controls.scroll.ScrollList"] = com_davidmaletz_controls_scroll_ScrollList;
    com_davidmaletz_controls_scroll_ScrollList.__name__ = ["com", "davidmaletz", "controls", "scroll", "ScrollList"];
    com_davidmaletz_controls_scroll_ScrollList.preSwitch = function(clickables) {
        var c = clickables.selected;
        var p = null;
        if (c != null) {
            var pos = c.getPos();
            var x = pos.x + pos.width * 0.5;
            var y = pos.y + pos.height * 0.5;
            if (com_davidmaletz_controls_scroll_ScrollList.point == null) com_davidmaletz_controls_scroll_ScrollList.point = new openfl_geom_Point(x, y);
            else com_davidmaletz_controls_scroll_ScrollList.point.setTo(x, y);
            p = clickables.clickables.getParent(clickables.sel_x).localToGlobal(com_davidmaletz_controls_scroll_ScrollList.point);
        }
        return p;
    };
    com_davidmaletz_controls_scroll_ScrollList.postSwitch = function(clickables, p) {
        if (p != null) clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
    };
    com_davidmaletz_controls_scroll_ScrollList.point = null;
    com_davidmaletz_controls_scroll_ScrollList.__super__ = openfl_display_Sprite;
    com_davidmaletz_controls_scroll_ScrollList.prototype = $extend(openfl_display_Sprite.prototype, {
        makeScrollbar: function() {
            return new com_davidmaletz_controls_scroll_Scrollbar(this);
        },
        init: function(e) {
            this.destroy(e);
            openfl_Lib.current.stage.addEventListener("mouseWheel", $bind(this, this.wheel), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("mouseWheel", $bind(this, this.wheel));
        },
        getRenderer: function() {
            return this.renderer;
        },
        getRows: function() {
            return this.rows;
        },
        getCols: function() {
            return this.cols;
        },
        getList: function() {
            return this.list;
        },
        isCurrent: function(grid) {
            return this.list == grid;
        },
        switchList: function(grid) {
            if (this.list == grid) return;
            this.removeChild(this.list);
            this.list = grid;
            this.addChildAt(this.list, 0);
            this.list.set_y(0);
            this.scrollbar.update();
            var len = this.list.rows.length + 1;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.updateRowVisible(i);
            }
        },
        wheel: function(e) {
            if (com_davidmaletz_controls_scroll_ScrollList.point == null) com_davidmaletz_controls_scroll_ScrollList.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_controls_scroll_ScrollList.point.setTo(e.stageX, e.stageY);
            var p = this.globalToLocal(com_davidmaletz_controls_scroll_ScrollList.point);
            if (p.x < 0 || p.y < 0 || p.x >= this.renderer.getWidth() * this.cols + ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth() - 3 || p.y >= this.renderer.getHeight(null) * this.rows) return;
            var ht = this.renderer.getHeight(null) * this.rows;
            var sht = this.list.getHeight();
            if (ht >= sht) return;
            var s = -this.list.get_y() - com_fancyfish_faeng_common_Utils.sign(e.delta, null) * this.renderer.getHeight(null) * 0.5;
            if (s < 0) s = 0;
            ht = sht - ht;
            if (s > ht) s = ht;
            this.updateScroll(s);
            e.stopImmediatePropagation();
            e.preventDefault();
        },
        clear: function() {
            this.list.clear();
        },
        addItem: function(i) {
            var c = this.list.addItem(this.renderer, i, this.cols);
            c.set_visible(this.inView(this.list.curHeight, this.list.getHeight()));
            this.scrollbar.update();
            return c;
        },
        ensureVisible: function(bounds) {
            var sy = bounds.y + this.list.get_y();
            var ey = sy + bounds.height;
            var ht = this.renderer.getHeight(null) * this.rows;
            if (ey > ht) this.updateScroll(bounds.y + bounds.height - ht);
            else if (sy < 0) this.updateScroll(bounds.y);
        },
        inView: function(startY, endY) {
            var sy = -this.list.get_y();
            return startY - sy < this.renderer.getHeight(null) * this.rows && endY - sy > 0;
        },
        updateRowVisible: function(row) {
            var st = row * this.cols;
            var end = st + this.cols;
            if (end > this.list.get_numChildren()) end = this.list.get_numChildren();
            var v = this.inView(this.list.getRowY(row - 1), this.list.getRowY(row));
            var _g = st;
            while (_g < end) {
                var i = _g++;
                this.list.getChildAt(i).set_visible(v);
            }
        },
        updateScroll: function(y, updateBar) {
            if (updateBar == null) updateBar = true;
            y = Math.round(y);
            var cur = -this.list.get_y();
            if (cur == y) return;
            var ht = this.renderer.getHeight(null) * this.rows;
            this.list.set_y( - y);
            if (updateBar) this.scrollbar.update();
            if (cur < y) {
                var tmp = y;
                y = cur;
                cur = tmp;
            }
            var st = com_fancyfish_faeng_common_Utils.drawCDF(this.list.rows, y + 0.01, false);
            var end = this.list.yToRow(Math.min(y + ht, cur)) + 1;
            var _g = st;
            while (_g < end) {
                var i = _g++;
                this.updateRowVisible(i);
            }
            st = this.list.yToRow(Math.max(y + ht, cur));
            end = com_fancyfish_faeng_common_Utils.drawCDF(this.list.rows, cur + ht + 0.01, false) + 1;
            var _g1 = st;
            while (_g1 < end) {
                var i1 = _g1++;
                this.updateRowVisible(i1);
            }
        },
        yToRow: function(y) {
            return com_fancyfish_faeng_common_Utils.drawCDF(this.list.rows, y + 0.01, false);
        },
        getItemWidth: function() {
            return this.renderer.getWidth();
        },
        getAverageItemHeight: function() {
            return this.renderer.getHeight(null);
        },
        getViewportWidth: function() {
            return this.renderer.getWidth() * this.cols;
        },
        getViewportHeight: function() {
            return this.renderer.getHeight(null) * this.rows;
        },
        getScrollHeight: function() {
            return this.list.getHeight();
        },
        getScrollY: function() {
            return - this.list.get_y();
        },
        getWidth: function() {
            return this.renderer.getWidth() * this.cols + ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth() - 3;
        },
        getHeight: function() {
            return this.renderer.getHeight(null) * this.rows;
        },
        __class__: com_davidmaletz_controls_scroll_ScrollList
    });
    var com_davidmaletz_controls_scroll_ScrollWindow = function(container, factory, renderer, rows, cols, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        this.list = new com_davidmaletz_controls_scroll_ScrollList(container, renderer, rows, cols);
        this.list.set_x(4);
        this.list.set_y(4);
        com_davidmaletz_controls_ClickableWindow.call(this, container, this.makeDrawable(factory), true, true, true, halign, valign);
        this.addChild(this.list);
        var close = new com_davidmaletz_controls_CloseButton(this, this.getWidth(), 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
    };
    $hxClasses["com.davidmaletz.controls.scroll.ScrollWindow"] = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_controls_scroll_ScrollWindow.__name__ = ["com", "davidmaletz", "controls", "scroll", "ScrollWindow"];
    com_davidmaletz_controls_scroll_ScrollWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_controls_scroll_ScrollWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        makeDrawable: function(factory) {
            return factory.create(this.getWidth(), this.getHeight());
        },
        switchList: function(grid) {
            if (this.list.list == grid) return;
            var p = com_davidmaletz_controls_scroll_ScrollList.preSwitch(this.clickables);
            this.list.switchList(grid); (js_Boot.__cast(this.clickables.clickables, com_davidmaletz_controls_CompoundClickableColumns)).setColumn(0, grid.clickables);
            if (p != null) this.clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
        },
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.list.list.clickables], [this.list.get_y()]);
        },
        addItem: function(i) {
            return this.list.addItem(i);
        },
        getWidth: function() {
            return this.list.getWidth() + this.list.get_x() + 4;
        },
        getHeight: function() {
            return this.list.getHeight() + this.list.get_y() + 4;
        },
        __class__: com_davidmaletz_controls_scroll_ScrollWindow
    });
    var com_davidmaletz_controls_scroll_Scrollbar = function(list) {
        openfl_display_Sprite.call(this);
        this.list = list;
        this.set_x(list.renderer.getWidth() * list.cols);
        this.addChild(((function($this) {
            var $r;
            if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
            $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
            return $r;
        } (this))).createScrollbar(list.renderer.getHeight(null) * list.rows));
        this.knob = new com_davidmaletz_controls_scroll_ScrollKnob(this);
        this.addChild(this.knob); (((function($this) {
            var $r;
            if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
            $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
            return $r;
        } (this))).isAlwaysVisible() ? this.knob: this).set_visible(false);
    };
    $hxClasses["com.davidmaletz.controls.scroll.Scrollbar"] = com_davidmaletz_controls_scroll_Scrollbar;
    com_davidmaletz_controls_scroll_Scrollbar.__name__ = ["com", "davidmaletz", "controls", "scroll", "Scrollbar"];
    com_davidmaletz_controls_scroll_Scrollbar.ui = null;
    com_davidmaletz_controls_scroll_Scrollbar.getUI = function() {
        if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
        return com_davidmaletz_controls_scroll_Scrollbar.ui;
    };
    com_davidmaletz_controls_scroll_Scrollbar.__super__ = openfl_display_Sprite;
    com_davidmaletz_controls_scroll_Scrollbar.prototype = $extend(openfl_display_Sprite.prototype, {
        getV: function() {
            if (((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).isAlwaysVisible()) return this.knob;
            else return this;
        },
        update: function() {
            var ht = this.list.getViewportHeight();
            var sht = this.list.list.getHeight();
            var y = -this.list.list.get_y();
            if (ht >= sht) { (((function($this) {
                    var $r;
                    if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                    $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                    return $r;
                } (this))).isAlwaysVisible() ? this.knob: this).set_visible(false);
                return;
            } (((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).isAlwaysVisible() ? this.knob: this).set_visible(true);
            this.knob.setHeight(ht - (sht - ht));
            this.knob.set_y(Math.round(y * (ht - this.knob._height) / (sht - ht)));
        },
        setKnobPos: function(pos) {
            var ht = this.list.getViewportHeight();
            var sht = this.list.list.getHeight();
            if (ht >= sht) return;
            var e = ht - this.knob._height;
            if (pos < 0) pos = 0;
            if (pos > e) pos = e;
            this.knob.set_y(Math.round(pos));
            this.list.updateScroll(pos * (sht - ht) / e, false);
        },
        getWidth: function() {
            return ((function($this) {
                var $r;
                if (com_davidmaletz_controls_scroll_Scrollbar.ui == null) com_davidmaletz_controls_scroll_Scrollbar.ui = new com_davidmaletz_controls_scroll_DefaultScrollUI();
                $r = com_davidmaletz_controls_scroll_Scrollbar.ui;
                return $r;
            } (this))).getWidth();
        },
        getHeight: function() {
            return this.list.getViewportHeight();
        },
        __class__: com_davidmaletz_controls_scroll_Scrollbar
    });
    var com_davidmaletz_faengfl_DrawableFactory = function() {};
    $hxClasses["com.davidmaletz.faengfl.DrawableFactory"] = com_davidmaletz_faengfl_DrawableFactory;
    com_davidmaletz_faengfl_DrawableFactory.__name__ = ["com", "davidmaletz", "faengfl", "DrawableFactory"];
    com_davidmaletz_faengfl_DrawableFactory.prototype = {
        __class__: com_davidmaletz_faengfl_DrawableFactory
    };
    var com_davidmaletz_faengfl_AbstractDrawableFactory = function() {};
    $hxClasses["com.davidmaletz.faengfl.AbstractDrawableFactory"] = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_faengfl_AbstractDrawableFactory.__name__ = ["com", "davidmaletz", "faengfl", "AbstractDrawableFactory"];
    com_davidmaletz_faengfl_AbstractDrawableFactory.__interfaces__ = [AbstractClass, com_davidmaletz_faengfl_DrawableFactory];
    com_davidmaletz_faengfl_AbstractDrawableFactory.prototype = {
        makeDrawable: function(w, h) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        getHash: function(w, h) {
            return Math.round(h) * 4096 + Math.round(w);
        },
        create: function(w, h) {
            if (this.map == null) this.map = new haxe_ds_IntMap();
            var k = Math.round(h) * 4096 + Math.round(w);
            var d = this.map.h[k];
            if (d == null) {
                d = this.makeDrawable(w, h);
                this.map.h[k] = d;
            }
            return d;
        },
        __class__: com_davidmaletz_faengfl_AbstractDrawableFactory
    };
    var com_davidmaletz_faengfl_TileBitmap = function(bitmap, center) {
        this.bitmap = bitmap;
        this.sheet = new openfl_display_Tilesheet(bitmap);
        this.center = center;
    };
    $hxClasses["com.davidmaletz.faengfl.TileBitmap"] = com_davidmaletz_faengfl_TileBitmap;
    com_davidmaletz_faengfl_TileBitmap.__name__ = ["com", "davidmaletz", "faengfl", "TileBitmap"];
    com_davidmaletz_faengfl_TileBitmap.prototype = {
        addTileRect: function(r) {
            return this.sheet.addTileRect(r, this.center);
        },
        getTileRect: function(idx) {
            return this.sheet.__tileRects[idx];
        },
        __class__: com_davidmaletz_faengfl_TileBitmap
    };
    var com_davidmaletz_faengfl_AutoTileBitmap = function(bitmap, tileWidth, tileHeight, center) {
        com_davidmaletz_faengfl_TileBitmap.call(this, bitmap, center);
        this.tileWidth = tileWidth;
        this.tileHeight = tileHeight;
        var w = Math.floor(bitmap.width / tileWidth);
        var h = Math.floor(bitmap.height / tileHeight);
        var dx = bitmap.width - w * tileWidth;
        var _g = 0;
        while (_g < h) {
            var y = _g++;
            var _g1 = 0;
            while (_g1 < w) {
                var x = _g1++;
                this.addTileRect(new openfl_geom_Rectangle(x * tileWidth, y * tileHeight, tileWidth, tileHeight));
            }
            if (dx > 0) this.addTileRect(new openfl_geom_Rectangle(bitmap.width - dx, y * tileHeight, dx, tileHeight));
        }
        var dy = bitmap.height - h * tileHeight;
        if (dy > 0) {
            var _g2 = 0;
            while (_g2 < w) {
                var x1 = _g2++;
                this.addTileRect(new openfl_geom_Rectangle(x1 * tileWidth, bitmap.height - dy, tileWidth, dy));
            }
        }
    };
    $hxClasses["com.davidmaletz.faengfl.AutoTileBitmap"] = com_davidmaletz_faengfl_AutoTileBitmap;
    com_davidmaletz_faengfl_AutoTileBitmap.__name__ = ["com", "davidmaletz", "faengfl", "AutoTileBitmap"];
    com_davidmaletz_faengfl_AutoTileBitmap.bitmaps = null;
    com_davidmaletz_faengfl_AutoTileBitmap.get = function(id, tileWidth, tileHeight, center) {
        if (tileHeight == null) tileHeight = -1;
        if (tileHeight < 0) tileHeight = tileWidth;
        if (com_davidmaletz_faengfl_AutoTileBitmap.bitmaps == null) com_davidmaletz_faengfl_AutoTileBitmap.bitmaps = new haxe_ds_StringMap();
        var b = com_davidmaletz_faengfl_AutoTileBitmap.bitmaps.get(id);
        if (b == null) {
            b = new com_davidmaletz_faengfl_AutoTileBitmap(openfl_Assets.getBitmapData(id), tileWidth, tileHeight, center);
            com_davidmaletz_faengfl_AutoTileBitmap.bitmaps.set(id, b);
        }
        return b;
    };
    com_davidmaletz_faengfl_AutoTileBitmap.__super__ = com_davidmaletz_faengfl_TileBitmap;
    com_davidmaletz_faengfl_AutoTileBitmap.prototype = $extend(com_davidmaletz_faengfl_TileBitmap.prototype, {
        getIdx: function(x, y) {
            var w = Math.ceil(this.bitmap.width / this.tileWidth);
            return y * w + x;
        },
        __class__: com_davidmaletz_faengfl_AutoTileBitmap
    });
    var com_davidmaletz_faengfl_Drawable = function() {};
    $hxClasses["com.davidmaletz.faengfl.Drawable"] = com_davidmaletz_faengfl_Drawable;
    com_davidmaletz_faengfl_Drawable.__name__ = ["com", "davidmaletz", "faengfl", "Drawable"];
    com_davidmaletz_faengfl_Drawable.prototype = {
        __class__: com_davidmaletz_faengfl_Drawable
    };
    var com_davidmaletz_faengfl_BitmapDrawable = function(b, s) {
        if (s == null) s = 1;
        this.bmp = b;
        this._width = this.bmp.width;
        this._height = this.bmp.height;
        this.scale = s;
    };
    $hxClasses["com.davidmaletz.faengfl.BitmapDrawable"] = com_davidmaletz_faengfl_BitmapDrawable;
    com_davidmaletz_faengfl_BitmapDrawable.__name__ = ["com", "davidmaletz", "faengfl", "BitmapDrawable"];
    com_davidmaletz_faengfl_BitmapDrawable.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_faengfl_BitmapDrawable.prototype = {
        getWidth: function() {
            return this._width * this.scale;
        },
        getHeight: function() {
            return this._height * this.scale;
        },
        create: function(tx, ty) {
            var b = new openfl_display_Bitmap(this.bmp, 1, com_davidmaletz_faengfl_TextSprite.SMOOTH);
            b.set_x(tx);
            b.set_y(ty);
            b.set_scaleX(b.set_scaleY(this.scale));
            return b;
        },
        __class__: com_davidmaletz_faengfl_BitmapDrawable
    };
    var com_davidmaletz_faengfl_Button = function(press, release, b, key, controller_key) {
        if (controller_key == null) controller_key = -1;
        if (key == null) key = -1;
        this.touch = -1;
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.onPress = press;
        this.onRelease = release;
        this.key = key;
        this.controllerButton = controller_key;
        if (b != null) {
            this._width = b.getWidth();
            this._height = b.getHeight();
            var s = b.create(0, 0);
            if (s != null) this.addChild(s);
        }
    };
    $hxClasses["com.davidmaletz.faengfl.Button"] = com_davidmaletz_faengfl_Button;
    com_davidmaletz_faengfl_Button.__name__ = ["com", "davidmaletz", "faengfl", "Button"];
    com_davidmaletz_faengfl_Button.point = null;
    com_davidmaletz_faengfl_Button.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_faengfl_Button.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_down", $bind(this, this.mouse_down), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_up", $bind(this, this.mouse_up), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            if (this.key >= 0) {
                openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.key_down));
                openfl_Lib.current.stage.addEventListener("keyUp", $bind(this, this.key_up));
            }
            if (this.controllerButton != -1) {
                com_davidmaletz_faengfl_controls_Gamepad.instance.addEventListener("button_down", $bind(this, this.button_down));
                com_davidmaletz_faengfl_controls_Gamepad.instance.addEventListener("button_up", $bind(this, this.button_up));
            }
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_down", $bind(this, this.mouse_down));
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_up", $bind(this, this.mouse_up));
            if (this.key >= 0) {
                openfl_Lib.current.stage.removeEventListener("keyDown", $bind(this, this.key_down));
                openfl_Lib.current.stage.removeEventListener("keyUp", $bind(this, this.key_up));
            }
            if (this.controllerButton != -1) {
                com_davidmaletz_faengfl_controls_Gamepad.instance.removeEventListener("button_down", $bind(this, this.button_down));
                com_davidmaletz_faengfl_controls_Gamepad.instance.removeEventListener("button_up", $bind(this, this.button_up));
            }
        },
        inBounds: function(e) {
            if (com_davidmaletz_faengfl_Button.point == null) com_davidmaletz_faengfl_Button.point = new openfl_geom_Point(e.stageX, e.stageY);
            else com_davidmaletz_faengfl_Button.point.setTo(e.stageX, e.stageY);
            var p = this.globalToLocal(com_davidmaletz_faengfl_Button.point);
            return p.x >= 0 && p.y >= 0 && p.x < this._width && p.y < this._height;
        },
        mouse_down: function(e) {
            if (this.inBounds(e)) {
                this.touch = e.id;
                if (this.onPress != null) this.onPress();
                e.stopImmediatePropagation();
            }
        },
        action: function() {
            if (this.get_visible()) {
                if (com_davidmaletz_faengfl_Button.globalOnRelease != null) com_davidmaletz_faengfl_Button.globalOnRelease();
                if (this.onRelease != null) this.onRelease();
            }
        },
        mouse_up: function(e) {
            if (e.id == this.touch) {
                this.touch = -1;
                this.action();
                e.stopImmediatePropagation();
            }
        },
        key_down: function(e) {
            if (e.keyCode == this.key && this.onPress != null) this.onPress();
        },
        key_up: function(e) {
            if (e.keyCode == this.key) this.action();
        },
        button_down: function(e) {
            if (e.button == this.controllerButton && this.onPress != null) this.onPress();
        },
        button_up: function(e) {
            if (e.button == this.controllerButton) this.action();
        },
        __class__: com_davidmaletz_faengfl_Button
    });
    var com_davidmaletz_faengfl_ButtonFactory = function() {};
    $hxClasses["com.davidmaletz.faengfl.ButtonFactory"] = com_davidmaletz_faengfl_ButtonFactory;
    com_davidmaletz_faengfl_ButtonFactory.__name__ = ["com", "davidmaletz", "faengfl", "ButtonFactory"];
    com_davidmaletz_faengfl_ButtonFactory.prototype = {
        __class__: com_davidmaletz_faengfl_ButtonFactory
    };
    var com_davidmaletz_faengfl_CompoundDrawable = function() {
        this.drawables = [];
        this.points = [];
        this.width = 0;
        this.height = 0;
    };
    $hxClasses["com.davidmaletz.faengfl.CompoundDrawable"] = com_davidmaletz_faengfl_CompoundDrawable;
    com_davidmaletz_faengfl_CompoundDrawable.__name__ = ["com", "davidmaletz", "faengfl", "CompoundDrawable"];
    com_davidmaletz_faengfl_CompoundDrawable.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_faengfl_CompoundDrawable.prototype = {
        add: function(d, x, y) {
            this.drawables.push(d);
            this.points.push(new openfl_geom_Point(x, y));
            var w = d.getWidth() + x;
            var h = d.getHeight() + y;
            if (w > this.width) this.width = w;
            if (h > this.height) this.height = h;
        },
        getWidth: function() {
            return this.width;
        },
        getHeight: function() {
            return this.height;
        },
        create: function(tx, ty) {
            var s = new openfl_display_Sprite();
            var len = this.drawables.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var p = this.points[i];
                s.addChild(this.drawables[i].create(p.x, p.y));
            }
            s.set_x(tx);
            s.set_y(ty);
            return s;
        },
        __class__: com_davidmaletz_faengfl_CompoundDrawable
    };
    var com_davidmaletz_faengfl_Container = function() {};
    $hxClasses["com.davidmaletz.faengfl.Container"] = com_davidmaletz_faengfl_Container;
    com_davidmaletz_faengfl_Container.__name__ = ["com", "davidmaletz", "faengfl", "Container"];
    com_davidmaletz_faengfl_Container.prototype = {
        __class__: com_davidmaletz_faengfl_Container
    };
    var com_davidmaletz_faengfl_ContainerSprite = function(w, h) {
        openfl_display_Sprite.call(this);
        this._width = w;
        this._height = h;
    };
    $hxClasses["com.davidmaletz.faengfl.ContainerSprite"] = com_davidmaletz_faengfl_ContainerSprite;
    com_davidmaletz_faengfl_ContainerSprite.__name__ = ["com", "davidmaletz", "faengfl", "ContainerSprite"];
    com_davidmaletz_faengfl_ContainerSprite.__interfaces__ = [com_davidmaletz_faengfl_Container];
    com_davidmaletz_faengfl_ContainerSprite.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_ContainerSprite.prototype = $extend(openfl_display_Sprite.prototype, {
        getWidth: function() {
            return this._width;
        },
        getHeight: function() {
            return this._height;
        },
        addDisplay: function(d, layer, addFirst) {
            if (addFirst == null) addFirst = false;
            var i = this.get_numChildren();
            while (i <= layer) {
                this.addChild(new openfl_display_Sprite());
                i++;
            }
            var s;
            s = js_Boot.__cast(this.getChildAt(layer), openfl_display_Sprite);
            if (addFirst) s.addChildAt(d, 0);
            else s.addChild(d);
        },
        __class__: com_davidmaletz_faengfl_ContainerSprite
    });
    var com_davidmaletz_faengfl_DefaultButtonFactory = function(bg, hover) {
        this.bg = bg;
        this.hover = hover;
    };
    $hxClasses["com.davidmaletz.faengfl.DefaultButtonFactory"] = com_davidmaletz_faengfl_DefaultButtonFactory;
    com_davidmaletz_faengfl_DefaultButtonFactory.__name__ = ["com", "davidmaletz", "faengfl", "DefaultButtonFactory"];
    com_davidmaletz_faengfl_DefaultButtonFactory.__interfaces__ = [com_davidmaletz_faengfl_ButtonFactory];
    com_davidmaletz_faengfl_DefaultButtonFactory.prototype = {
        createBG: function(w, h) {
            return this.bg.create(w, h);
        },
        createHover: function(w, h) {
            return this.hover.create(w, h);
        },
        defaultHeight: function() {
            return 0;
        },
        __class__: com_davidmaletz_faengfl_DefaultButtonFactory
    };
    var com_davidmaletz_faengfl_EmptyDrawable = function(w, h) {
        this.w = w;
        this.h = h;
    };
    $hxClasses["com.davidmaletz.faengfl.EmptyDrawable"] = com_davidmaletz_faengfl_EmptyDrawable;
    com_davidmaletz_faengfl_EmptyDrawable.__name__ = ["com", "davidmaletz", "faengfl", "EmptyDrawable"];
    com_davidmaletz_faengfl_EmptyDrawable.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_faengfl_EmptyDrawable.prototype = {
        getWidth: function() {
            return this.w;
        },
        getHeight: function() {
            return this.h;
        },
        create: function(tx, ty) {
            return null;
        },
        __class__: com_davidmaletz_faengfl_EmptyDrawable
    };
    var com_davidmaletz_faengfl_EnterFrameHandler = function() {};
    $hxClasses["com.davidmaletz.faengfl.EnterFrameHandler"] = com_davidmaletz_faengfl_EnterFrameHandler;
    com_davidmaletz_faengfl_EnterFrameHandler.__name__ = ["com", "davidmaletz", "faengfl", "EnterFrameHandler"];
    com_davidmaletz_faengfl_EnterFrameHandler.prototype = {
        __class__: com_davidmaletz_faengfl_EnterFrameHandler
    };
    var com_davidmaletz_faengfl_EventHandler = function(path, xml, func, vars) {
        this.cur = xml.elements();
        this.onComplete = func;
        if (vars == null) vars = com_davidmaletz_faengfl_EventHandler.createVariables();
        this.vars = vars;
        this.path = path;
    };
    $hxClasses["com.davidmaletz.faengfl.EventHandler"] = com_davidmaletz_faengfl_EventHandler;
    com_davidmaletz_faengfl_EventHandler.__name__ = ["com", "davidmaletz", "faengfl", "EventHandler"];
    com_davidmaletz_faengfl_EventHandler.parser = null;
    com_davidmaletz_faengfl_EventHandler.interp = null;
    com_davidmaletz_faengfl_EventHandler.execute = function(str, vars) {
        if (str == null) return null;
        if (com_davidmaletz_faengfl_EventHandler.parser == null) {
            com_davidmaletz_faengfl_EventHandler.parser = new hscript_Parser();
            com_davidmaletz_faengfl_EventHandler.interp = new hscript_Interp(vars);
        } else com_davidmaletz_faengfl_EventHandler.interp.variables = vars;
        try {
            return com_davidmaletz_faengfl_EventHandler.interp.execute(com_davidmaletz_faengfl_EventHandler.parser.parseString(com_fancyfish_faeng_common_Lang.escape(str)));
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            haxe_Log.trace("Script Error: " + Std.string(e), {
                fileName: "EventHandler.hx",
                lineNumber: 14,
                className: "com.davidmaletz.faengfl.EventHandler",
                methodName: "execute"
            });
            haxe_Log.trace(str + haxe_CallStack.toString(haxe_CallStack.callStack()), {
                fileName: "EventHandler.hx",
                lineNumber: 14,
                className: "com.davidmaletz.faengfl.EventHandler",
                methodName: "execute"
            });
            return null;
        }
    };
    com_davidmaletz_faengfl_EventHandler.createVariables = function() {
        var v = new haxe_ds_StringMap();
        if (__map_reserved["null"] != null) v.setReserved("null", null);
        else v.h["null"] = null;
        if (__map_reserved["true"] != null) v.setReserved("true", true);
        else v.h["true"] = true;
        if (__map_reserved["false"] != null) v.setReserved("false", false);
        else v.h["false"] = false;
        v.set("Math", Math);
        if (__map_reserved.trace != null) v.setReserved("trace",
        function(e) {
            haxe_Log.trace(Std.string(e), {
                fileName: "hscript",
                lineNumber: 0
            });
        });
        else v.h["trace"] = function(e) {
            haxe_Log.trace(Std.string(e), {
                fileName: "hscript",
                lineNumber: 0
            });
        };
        v.set("Std", Std);
        v.set("Date", Date);
        v.set("remove", com_davidmaletz_faengfl_FaengFL.remove);
        if (com_davidmaletz_faengfl_EventHandler.additionalVars != null) com_davidmaletz_faengfl_EventHandler.additionalVars(v);
        return v;
    };
    com_davidmaletz_faengfl_EventHandler.parse = function(file, action_map, vars) {
        var xml = Xml.parse(openfl_Assets.getText(file)).firstElement();
        var i = file.lastIndexOf("/");
        var path;
        if (i == -1) path = "/";
        else path = file.substring(0, i + 1);
        var h = new com_davidmaletz_faengfl__$EventHandler_MapEventHandler(path, xml, action_map, vars);
        h.start();
    };
    com_davidmaletz_faengfl_EventHandler.prototype = {
        start: function() {
            this.handleNext();
        },
        enterChild: function(n) {
            if (this.cur != null) {
                if (this.stack == null) this.stack = [this.cur];
                this.stack.push(this.cur);
            }
            this.cur = n.elements();
        },
        conditionMet: function(cond) {
            return com_davidmaletz_faengfl_EventHandler.execute(cond, this.vars) == true;
        },
        handleGroup: function(g) {
            var children = [];
            var $it0 = g.elements();
            while ($it0.hasNext()) {
                var e = $it0.next();
                if (!e.exists("if") || this.conditionMet(e.get("if"))) children.push(e);
            }
            if (children.length == 0) return false;
            if (com_davidmaletz_faengfl_EventHandler.lastGroup == g) {
                com_davidmaletz_faengfl_EventHandler.lastSel++;
                if (com_davidmaletz_faengfl_EventHandler.lastSel >= children.length) com_davidmaletz_faengfl_EventHandler.lastSel = 0;
            } else {
                com_davidmaletz_faengfl_EventHandler.lastGroup = g;
                com_davidmaletz_faengfl_EventHandler.lastSel = 0;
            }
            return this.runNode(children[com_davidmaletz_faengfl_EventHandler.lastSel]);
        },
        choose: function(iter) {
            while (iter.hasNext()) {
                var e = iter.next();
                if (!e.exists("if") || this.conditionMet(e.get("if"))) return e;
            }
            return null;
        },
        handleChoose: function(n) {
            var e = this.choose(n.elements());
            if (e == null) return false;
            else return this.runNode(e);
        },
        handleNode: function(n) {
            var _g;
            if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
            _g = n.nodeName;
            switch (_g) {
            case "section":
                if (this.cur != null) {
                    if (this.stack == null) this.stack = [this.cur];
                    this.stack.push(this.cur);
                }
                this.cur = n.elements();
                break;
            case "action":
                com_davidmaletz_faengfl_EventHandler.execute(com_fancyfish_faeng_common_Lang.escape(((function($this) {
                    var $r;
                    if (n.nodeType != Xml.Document && n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + n.nodeType);
                    $r = n.children[0];
                    return $r;
                } (this))).get_nodeValue()), this.vars);
                break;
            case "include":
                this.enterChild(Xml.parse(openfl_Assets.getText(this.path + n.get("id"))).firstElement());
                break;
            case "choose":
                return this.handleChoose(n);
            case "group":
                return this.handleGroup(n);
            case "repeat":
                var count = com_davidmaletz_faengfl_EventHandler.execute(n.get("count"), this.vars);
                var _g1 = 0;
                while (_g1 < count) {
                    var i = _g1++;
                    if (this.cur != null) {
                        if (this.stack == null) this.stack = [this.cur];
                        this.stack.push(this.cur);
                    }
                    this.cur = n.elements();
                }
                break;
            case "function":
                var object = com_davidmaletz_faengfl_EventHandler.execute(n.get("object"), this.vars);
                var flags = Reflect.callMethod(object, Reflect.field(object, n.get("run")), [n, $bind(this, this.handleNext)]);
                if ((flags & 1) != 0) {
                    if (this.cur != null) {
                        if (this.stack == null) this.stack = [this.cur];
                        this.stack.push(this.cur);
                    }
                    this.cur = n.elements();
                }
                if ((flags & 2) != 0) return true;
                break;
            }
            return false;
        },
        executeNode: function(n) {
            if (!this.handleNode(n)) this.handleNext();
        },
        handleTransition: function(n, trans, func, fadeMusic) {
            return false;
        },
        fadeMusic: function(n) {
            return false;
        },
        runNode: function(n) {
            if (n.exists("if") && !this.conditionMet(n.get("if"))) return false;
            if (n.exists("with")) {
                if (this.handleTransition(n, n.get("with"), (function(f, n1) {
                    return function() {
                        f(n1);
                    };
                })($bind(this, this.executeNode), n), this.fadeMusic(n))) return true;
            }
            return this.handleNode(n);
        },
        handleNext: function() {
            if (this.cur != null) while (this.cur.hasNext()) if (this.runNode(this.cur.next())) return;
            if (this.stack != null) {
                this.cur = this.stack.pop();
                if (this.stack.length == 0) this.stack = null;
                this.handleNext();
            } else if (this.onComplete != null) this.onComplete();
        },
        peekNode: function(n, values) {
            var _g;
            if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
            _g = n.nodeName;
            switch (_g) {
            case "section":
                if (this.cur != null) {
                    if (this.stack == null) this.stack = [this.cur];
                    this.stack.push(this.cur);
                }
                this.cur = n.elements();
                return null;
            case "include":
                this.enterChild(Xml.parse(openfl_Assets.getText(this.path + n.get("id"))).firstElement());
                return null;
            case "choose":
                var e = this.choose(n.elements());
                if (e == null) return null;
                else return this.peekNode(e, values);
                break;
            case "group":
                var e1 = this.choose(n.elements());
                if (e1 == null) return null;
                else return this.peekNode(e1, values);
                break;
            case "repeat":
                if (this.cur != null) {
                    if (this.stack == null) this.stack = [this.cur];
                    this.stack.push(this.cur);
                }
                this.cur = n.elements();
                return null;
            default:
                if ((function($this) {
                    var $r;
                    var x; {
                        if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                        x = n.nodeName;
                    }
                    $r = HxOverrides.indexOf(values, x, 0);
                    return $r;
                } (this)) != -1) return n;
                else return null;
            }
        },
        getFirst: function(values) {
            if (this.cur != null) while (this.cur.hasNext()) {
                var n = this.cur.next();
                if (n.exists("if") && !this.conditionMet(n.get("if"))) continue;
                var e = this.peekNode(n, values);
                if (e != null) return e;
            }
            if (this.stack != null) {
                this.cur = this.stack.pop();
                if (this.stack.length == 0) this.stack = null;
                return this.getFirst(values);
            } else return null;
        },
        __class__: com_davidmaletz_faengfl_EventHandler
    };
    var com_davidmaletz_faengfl__$EventHandler_MapEventHandler = function(path, xml, map, vars) {
        com_davidmaletz_faengfl_EventHandler.call(this, path, xml, null, vars);
        this.action_map = map;
    };
    $hxClasses["com.davidmaletz.faengfl._EventHandler.MapEventHandler"] = com_davidmaletz_faengfl__$EventHandler_MapEventHandler;
    com_davidmaletz_faengfl__$EventHandler_MapEventHandler.__name__ = ["com", "davidmaletz", "faengfl", "_EventHandler", "MapEventHandler"];
    com_davidmaletz_faengfl__$EventHandler_MapEventHandler.__super__ = com_davidmaletz_faengfl_EventHandler;
    com_davidmaletz_faengfl__$EventHandler_MapEventHandler.prototype = $extend(com_davidmaletz_faengfl_EventHandler.prototype, {
        handleNode: function(n) {
            if ((function($this) {
                var $r;
                var key; {
                    if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                    key = n.nodeName;
                }
                $r = $this.action_map.exists(key);
                return $r;
            } (this))) { ((function($this) {
                    var $r;
                    var key1; {
                        if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                        key1 = n.nodeName;
                    }
                    $r = $this.action_map.get(key1);
                    return $r;
                } (this)))(n);
                return false;
            } else return com_davidmaletz_faengfl_EventHandler.prototype.handleNode.call(this, n);
        },
        __class__: com_davidmaletz_faengfl__$EventHandler_MapEventHandler
    });
    var com_davidmaletz_faengfl_FaengFL = function() {};
    $hxClasses["com.davidmaletz.faengfl.FaengFL"] = com_davidmaletz_faengfl_FaengFL;
    com_davidmaletz_faengfl_FaengFL.__name__ = ["com", "davidmaletz", "faengfl", "FaengFL"];
    com_davidmaletz_faengfl_FaengFL.removeAllChildren = function(s, from) {
        if (from == null) from = 0;
        while (s.get_numChildren() > from) s.removeChildAt(from);
    };
    com_davidmaletz_faengfl_FaengFL.init = function() {
        openfl_Lib.current.stage.addEventListener("enterFrame", com_davidmaletz_faengfl_FaengFL.enter_frame, false, 1000);
    };
    com_davidmaletz_faengfl_FaengFL.destroy = function() {
        openfl_Lib.current.stage.removeEventListener("enterFrame", com_davidmaletz_faengfl_FaengFL.enter_frame);
    };
    com_davidmaletz_faengfl_FaengFL.enter_frame = function(e) {
        var frames;
        var t = openfl_Lib.getTimer();
        if (com_davidmaletz_faengfl_FaengFL.lastTime < 0) {
            com_davidmaletz_faengfl_FaengFL.lastTime = t;
            frames = 1;
        } else {
            frames = Math.min(2, (t - com_davidmaletz_faengfl_FaengFL.lastTime) * 50 / 1000);
            com_davidmaletz_faengfl_FaengFL.lastTime = t;
        }
        com_davidmaletz_faengfl_FaengFL.frameTime = frames;
        if (com_davidmaletz_faengfl_FaengFL.speed_mod != 0 && com_davidmaletz_faengfl_Window.window_ct == 0) {
            frames *= com_davidmaletz_faengfl_FaengFL.speed_mod;
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) {
                var _g = 0;
                var _g1 = com_davidmaletz_faengfl_FaengFL.listeners;
                while (_g < _g1.length) {
                    var l = _g1[_g]; ++_g;
                    l.enter_frame(frames);
                }
            }
        }
    };
    com_davidmaletz_faengfl_FaengFL.addEnterFrame = function(e) {
        if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
        com_davidmaletz_faengfl_FaengFL.listeners.push(e);
    };
    com_davidmaletz_faengfl_FaengFL.removeEnterFrame = function(e) {
        if (com_davidmaletz_faengfl_FaengFL.listeners != null) return HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, e);
        else return false;
    };
    com_davidmaletz_faengfl_FaengFL.remove = function(d) {
        if (d.parent != null) d.parent.removeChild(d);
    };
    com_davidmaletz_faengfl_FaengFL.point = null;
    com_davidmaletz_faengfl_FaengFL.onScreen = function(d, bounds) {
        if (com_davidmaletz_faengfl_FaengFL.point == null) com_davidmaletz_faengfl_FaengFL.point = new openfl_geom_Point(bounds.x, bounds.y);
        else com_davidmaletz_faengfl_FaengFL.point.setTo(bounds.x, bounds.y);
        var p = d.localToGlobal(com_davidmaletz_faengfl_FaengFL.point);
        com_davidmaletz_faengfl_FaengFL.point.setTo(bounds.x + bounds.width, bounds.y + bounds.height);
        var e = d.localToGlobal(com_davidmaletz_faengfl_FaengFL.point);
        if (d.get_scaleX() < 0) {
            var tmp = p.x;
            p.x = e.x;
            e.x = tmp;
        }
        if (d.get_scaleY() < 0) {
            var tmp1 = p.y;
            p.y = e.y;
            e.y = tmp1;
        }
        var w = openfl_Lib.current.stage.stageWidth;
        var h = openfl_Lib.current.stage.stageHeight;
        return e.x > 0 && p.x < w && e.y > 0 && p.y < h;
    };
    var com_davidmaletz_faengfl_FormattedTextBase = function(width, multiline, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        this.default_color = 0;
        this.default_size = 16;
        openfl_display_Sprite.call(this);
        this.setStyle(width, multiline, align, word);
        this.default_font = com_fancyfish_faeng_text_FontManager.defaultFont;
        this.bold = this.getFont("bold");
        this.italic = this.getFont("italic");
    };
    $hxClasses["com.davidmaletz.faengfl.FormattedTextBase"] = com_davidmaletz_faengfl_FormattedTextBase;
    com_davidmaletz_faengfl_FormattedTextBase.__name__ = ["com", "davidmaletz", "faengfl", "FormattedTextBase"];
    com_davidmaletz_faengfl_FormattedTextBase.placeCharacters = function(chrs, font, text, placer, scale) {
        if (scale == null) scale = 1;
        var len = text.length;
        var prev = -1;
        scale = 1;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var id = HxOverrides.cca(text, i);
            var c = font.characters.h[id];
            if (id == 10) placer.newLine(font, scale);
            if (c != null) {
                var cp = placer.place(c, prev, scale, id);
                if (cp != null && (c.width > 0 && c.height > 0)) chrs.push(cp);
            }
            prev = id;
        }
    };
    com_davidmaletz_faengfl_FormattedTextBase.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_FormattedTextBase.prototype = $extend(openfl_display_Sprite.prototype, {
        setStyle: function(width, multiline, align, word) {
            if (word == null) word = true;
            if (align == null) align = 0;
            if (multiline) this.placer = new com_fancyfish_faeng_text_WrapCharacterPlacer(width, align, word);
            else this.placer = new com_fancyfish_faeng_text_CharacterPlacer(width, align);
        },
        getArray: function(map, fnt, color) {
            var cmap = map.h[fnt.__id__];
            if (cmap == null) {
                cmap = new haxe_ds_IntMap();
                map.set(fnt, cmap);
            }
            var ar = cmap.h[color];
            if (ar == null) {
                ar = [];
                cmap.h[color] = ar;
            }
            return ar;
        },
        addText: function(txt, f, map, size, color) {
            var fnt;
            fnt = (function($this) {
                var $r;
                if (f.value == null) f.value = f.getValue();
                $r = f.value;
                return $r;
            } (this));
            var scale = size / fnt.size;
            com_davidmaletz_faengfl_FormattedTextBase.placeCharacters(this.getArray(map, fnt, color), fnt, txt, this.placer, scale);
        },
        startCustomTag: function(code, data, map, insertText) {
            return false;
        },
        endCustomTag: function(code) {
            return false;
        },
        getFont: function(name) {
            var font = com_fancyfish_faeng_text_FontManager.font_map.get(name);
            if (font == null) font = this.default_font;
            return font;
        },
        parseFormattedText: function(str, map) {
            var font = this.default_font;
            var size = this.default_size;
            var color = this.default_color;
            var i = 0;
            var len = str.length;
            var cur = 0;
            var insertText = function(s) {
                str = s + str.substring(i);
                i = 0;
                len = str.length;
            };
            while (i < len) {
                var n = str.indexOf("[", i);
                if (n == -1) {
                    this.addText(str.substring(i), font, map, size, color);
                    break;
                }
                if (n != i) this.addText(str.substring(i, n), font, map, size, color);
                i = n + 1;
                n = str.indexOf("]", i);
                var code = str.substring(i, n);
                i = n + 1;
                if (HxOverrides.cca(code, 0) == 47) {
                    code = code.substring(1);
                    switch (code) {
                    case "color":
                        color = this.default_color;
                        break;
                    case "b":
                        font = this.default_font;
                        break;
                    case "i":
                        font = this.default_font;
                        break;
                    case "font":
                        font = this.default_font;
                        break;
                    case "size":
                        size = this.default_size;
                        break;
                    default:
                        this.endCustomTag(code);
                    }
                } else {
                    var id = code.indexOf("=");
                    var data = null;
                    if (id != -1) {
                        data = code.substring(id + 1);
                        code = code.substring(0, id);
                    }
                    switch (code) {
                    case "color":
                        if (data != null) color = Std.parseInt("0x" + data);
                        break;
                    case "b":
                        font = this.bold;
                        break;
                    case "i":
                        font = this.italic;
                        break;
                    case "font":
                        if (data != null) font = this.getFont(data);
                        break;
                    case "size":
                        if (data != null) size = Std.parseInt(data);
                        break;
                    default:
                        this.startCustomTag(code, data, map, insertText);
                    }
                }
            }
        },
        renderText: function(map) {},
        prepareMap: function(map) {},
        setText: function(txt) {
            this.placer.reset();
            var map = new haxe_ds_ObjectMap();
            this.prepareMap(map);
            this.parseFormattedText(txt, map);
            this.placer.finish();
            this.renderText(map);
        },
        __class__: com_davidmaletz_faengfl_FormattedTextBase
    });
    var com_davidmaletz_faengfl_FormattedText = function(width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        com_davidmaletz_faengfl_FormattedTextBase.call(this, width, multiline, align, word);
        this.text = new haxe_ds_ObjectMap();
        this.bounds = new com_fancyfish_faeng_display_Rectangle2D();
        if (txt != null) this.setText(txt);
    };
    $hxClasses["com.davidmaletz.faengfl.FormattedText"] = com_davidmaletz_faengfl_FormattedText;
    com_davidmaletz_faengfl_FormattedText.__name__ = ["com", "davidmaletz", "faengfl", "FormattedText"];
    com_davidmaletz_faengfl_FormattedText.__super__ = com_davidmaletz_faengfl_FormattedTextBase;
    com_davidmaletz_faengfl_FormattedText.prototype = $extend(com_davidmaletz_faengfl_FormattedTextBase.prototype, {
        renderIcons: function(c) {
            if (c.character.userData != null) {
                var i;
                i = js_Boot.__cast(c.character.userData(), openfl_display_DisplayObject);
                i.set_x(c.x);
                i.set_y(c.y);
                this.addChild(i);
                this.bounds.addRectangle(c.x, c.y, c.character.width, c.character.height);
                return false;
            } else return true;
        },
        renderText: function(map) {
            this.bounds.reset();
            var $it0 = map.keys();
            while ($it0.hasNext()) {
                var fnt = $it0.next();
                var cmap = map.h[fnt.__id__];
                var ctext = this.text.h[fnt.__id__];
                var $it1 = cmap.keys();
                while ($it1.hasNext()) {
                    var col = $it1.next();
                    var chars = cmap.h[col];
                    var text;
                    if (ctext == null) text = null;
                    else text = ctext.h[col];
                    if (chars.length == 0) {
                        if (text != null) {
                            this.removeChild(text);
                            ctext.remove(col);
                        }
                    } else {
                        chars = chars.filter($bind(this, this.renderIcons));
                        if (text != null) text.update(chars);
                        else {
                            text = new com_davidmaletz_faengfl_InnerText(chars, col);
                            if (ctext == null) {
                                ctext = new haxe_ds_IntMap();
                                this.text.set(fnt, ctext);
                            }
                            this.addChild(text);
                            ctext.h[col] = text;
                        }
                        this.bounds.addRect(text.bounds);
                    }
                }
            }
        },
        prepareMap: function(map) {
            var $it0 = this.text.keys();
            while ($it0.hasNext()) {
                var fnt = $it0.next();
                var m = new haxe_ds_IntMap();
                var $it1 = (function($this) {
                    var $r;
                    var this1 = $this.text.h[fnt.__id__];
                    $r = this1.keys();
                    return $r;
                } (this));
                while ($it1.hasNext()) {
                    var col = $it1.next();
                    m.h[col] = [];
                }
                map.set(fnt, m);
            }
        },
        __class__: com_davidmaletz_faengfl_FormattedText
    });
    var com_davidmaletz_faengfl_InnerText = function(chrs, col) {
        openfl_display_Sprite.call(this);
        com_davidmaletz_faengfl_TextSprite.setColor(this, col, null);
        this.bounds = new com_fancyfish_faeng_display_Rectangle2D();
        this.update(chrs);
    };
    $hxClasses["com.davidmaletz.faengfl.InnerText"] = com_davidmaletz_faengfl_InnerText;
    com_davidmaletz_faengfl_InnerText.__name__ = ["com", "davidmaletz", "faengfl", "InnerText"];
    com_davidmaletz_faengfl_InnerText.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_InnerText.prototype = $extend(openfl_display_Sprite.prototype, {
        update: function(chrs) {
            this.get_graphics().clear();
            com_davidmaletz_faengfl_TextSprite.drawCharacters(chrs, chrs.length, this.get_graphics(), 0, 0, null, this.bounds);
        },
        __class__: com_davidmaletz_faengfl_InnerText
    });
    var com_davidmaletz_faengfl_FramebufferSprite = function(w, h) {
        this.colorMatrix = null;
        com_davidmaletz_faengfl_ContainerSprite.call(this, w, h);
        this.projection = new openfl_geom_Matrix(2.0 / w, 0, 0, -2. / h, -1, 1);
    };
    $hxClasses["com.davidmaletz.faengfl.FramebufferSprite"] = com_davidmaletz_faengfl_FramebufferSprite;
    com_davidmaletz_faengfl_FramebufferSprite.__name__ = ["com", "davidmaletz", "faengfl", "FramebufferSprite"];
    com_davidmaletz_faengfl_FramebufferSprite.createShader = function(GL, source, type) {
        var shader = GL.createShader(type);
        GL.shaderSource(shader, source);
        GL.compileShader(shader);
        if (GL.getShaderParameter(shader, GL.COMPILE_STATUS) == 0) {
            haxe_Log.trace(GL.getShaderInfoLog(shader), {
                fileName: "FramebufferSprite.hx",
                lineNumber: 145,
                className: "com.davidmaletz.faengfl.FramebufferSprite",
                methodName: "createShader"
            });
            throw new js__$Boot_HaxeError("Shader Compile Error");
        }
        return shader;
    };
    com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix = null;
    com_davidmaletz_faengfl_FramebufferSprite.__super__ = com_davidmaletz_faengfl_ContainerSprite;
    com_davidmaletz_faengfl_FramebufferSprite.prototype = $extend(com_davidmaletz_faengfl_ContainerSprite.prototype, {
        setupFBO: function(GL, width, height) {
            this.framebuffer = GL.createFramebuffer();
            this.texture = GL.createTexture();
            GL.bindTexture(GL.TEXTURE_2D, this.texture);
            GL.texImage2D(GL.TEXTURE_2D, 0, GL.RGBA, width, height, 0, GL.RGBA, GL.UNSIGNED_BYTE, null);
            GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_S, GL.CLAMP_TO_EDGE);
            GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_WRAP_T, GL.CLAMP_TO_EDGE);
            GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MIN_FILTER, GL.NEAREST);
            GL.texParameteri(GL.TEXTURE_2D, GL.TEXTURE_MAG_FILTER, GL.NEAREST);
            GL.bindFramebuffer(GL.FRAMEBUFFER, this.framebuffer);
            GL.framebufferTexture2D(GL.FRAMEBUFFER, GL.COLOR_ATTACHMENT0, GL.TEXTURE_2D, this.texture, 0);
            var status = GL.checkFramebufferStatus(GL.FRAMEBUFFER);
            if (status != GL.FRAMEBUFFER_COMPLETE) haxe_Log.trace("Framebuffer error: " + status, {
                fileName: "FramebufferSprite.hx",
                lineNumber: 88,
                className: "com.davidmaletz.faengfl.FramebufferSprite",
                methodName: "setupFBO"
            });
            var vertices = [ - 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0];
            this.buffer = GL.createBuffer();
            GL.bindBuffer(GL.ARRAY_BUFFER, this.buffer);
            GL.bufferData(GL.ARRAY_BUFFER, (function($this) {
                var $r;
                var this1;
                if (vertices != null) this1 = new Float32Array(vertices);
                else this1 = null;
                $r = this1;
                return $r;
            } (this)), GL.STATIC_DRAW);
            GL.bindBuffer(GL.ARRAY_BUFFER, null);
        },
        createProgram: function(GL) {
            this.program = GL.createProgram();
            var vs = com_davidmaletz_faengfl_FramebufferSprite.createShader(GL, "precision mediump float; attribute vec4 vertex; varying vec2 texCoord; uniform mat3 transform; void main(){texCoord = vertex.xy*0.5+0.5; vec3 v = transform*vertex.xyw; gl_Position = vec4(v.xy, 0.0, 1.0);}", GL.VERTEX_SHADER);
            var fs = com_davidmaletz_faengfl_FramebufferSprite.createShader(GL, "precision mediump float; varying vec2 texCoord; uniform sampler2D texture; void main(){vec4 c = texture2D(texture, texCoord); gl_FragColor = vec4(c.rgb, 1.0);}", GL.FRAGMENT_SHADER);
            GL.attachShader(this.program, vs);
            GL.attachShader(this.program, fs);
            GL.linkProgram(this.program);
            if (GL.getProgramParameter(this.program, GL.LINK_STATUS) == 0) {
                haxe_Log.trace(GL.getProgramInfoLog(this.program), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 109,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createProgram"
                });
                haxe_Log.trace("VALIDATE_STATUS: " + Std.string(GL.getProgramParameter(this.program, GL.VALIDATE_STATUS)), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 110,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createProgram"
                });
                haxe_Log.trace("ERROR: " + GL.getError(), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 111,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createProgram"
                });
                throw new js__$Boot_HaxeError("Program Link Error");
            }
            GL.deleteShader(vs);
            GL.deleteShader(fs);
            GL.useProgram(this.program);
            this.vertexSlot = GL.getAttribLocation(this.program, "vertex");
            this.transformSlot = GL.getUniformLocation(this.program, "transform");
            GL.uniform1i(GL.getUniformLocation(this.program, "texture"), 0);
        },
        createColorProgram: function(GL) {
            this.color_program = GL.createProgram();
            var vs = com_davidmaletz_faengfl_FramebufferSprite.createShader(GL, "precision mediump float; attribute vec4 vertex; varying vec2 texCoord; uniform mat3 transform; void main(){texCoord = vertex.xy*0.5+0.5; vec3 v = transform*vertex.xyw; gl_Position = vec4(v.xy, 0.0, 1.0);}", GL.VERTEX_SHADER);
            var fs = com_davidmaletz_faengfl_FramebufferSprite.createShader(GL, "precision mediump float; varying vec2 texCoord; uniform sampler2D texture; uniform mat4 colorMatrix; void main(){vec4 c = texture2D(texture, texCoord); gl_FragColor = colorMatrix*vec4(c.rgb, 1.0);}", GL.FRAGMENT_SHADER);
            GL.attachShader(this.color_program, vs);
            GL.attachShader(this.color_program, fs);
            GL.linkProgram(this.color_program);
            if (GL.getProgramParameter(this.color_program, GL.LINK_STATUS) == 0) {
                haxe_Log.trace(GL.getProgramInfoLog(this.color_program), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 128,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createColorProgram"
                });
                haxe_Log.trace("VALIDATE_STATUS: " + Std.string(GL.getProgramParameter(this.color_program, GL.VALIDATE_STATUS)), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 129,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createColorProgram"
                });
                haxe_Log.trace("ERROR: " + GL.getError(), {
                    fileName: "FramebufferSprite.hx",
                    lineNumber: 130,
                    className: "com.davidmaletz.faengfl.FramebufferSprite",
                    methodName: "createColorProgram"
                });
                throw new js__$Boot_HaxeError("Program Link Error");
            }
            GL.deleteShader(vs);
            GL.deleteShader(fs);
            GL.useProgram(this.color_program);
            this.colorVertexSlot = GL.getAttribLocation(this.color_program, "vertex");
            this.colorTransformSlot = GL.getUniformLocation(this.color_program, "transform");
            GL.uniform1i(GL.getUniformLocation(this.color_program, "texture"), 0);
            this.colorMatrixSlot = GL.getUniformLocation(this.color_program, "colorMatrix");
        },
        __renderGL: function(renderSession) {
            if (this.stage == null || this.get_numChildren() == 0) return;
            renderSession.spriteBatch.flush();
            var GL = renderSession.gl;
            var old = renderSession.projectionMatrix.clone();
            var m = this.__getWorldTransform().clone().invert();
            m.concat(this.projection);
            renderSession.projectionMatrix.copyFrom(m);
            if (this.framebuffer == null) {
                var old_program1 = renderSession.shaderManager.currentShader.program;
                this.setupFBO(GL, Math.round(this._width), Math.round(this._height));
                GL.useProgram(old_program1);
            } else GL.bindFramebuffer(GL.FRAMEBUFFER, this.framebuffer);
            GL.viewport(0, 0, Math.round(this._width), Math.round(this._height));
            GL.clear(GL.COLOR_BUFFER_BIT);
            com_davidmaletz_faengfl_ContainerSprite.prototype.__renderGL.call(this, renderSession);
            renderSession.spriteBatch.flush();
            renderSession.projectionMatrix.copyFrom(old);
            GL.bindFramebuffer(GL.FRAMEBUFFER, null);
            var old_program = renderSession.shaderManager.currentShader.program;
            var transformSlot;
            var vertexSlot;
            if (this.colorMatrix == null) {
                if (this.program == null) this.createProgram(GL);
                GL.useProgram(this.program);
                transformSlot = this.transformSlot;
                vertexSlot = this.vertexSlot;
            } else {
                if (this.color_program == null) this.createColorProgram(GL);
                GL.useProgram(this.color_program);
                transformSlot = this.colorTransformSlot;
                vertexSlot = this.colorVertexSlot;
                if (com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix == null) com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix = lime_math__$Matrix4_Matrix4_$Impl_$.clone(this.colorMatrix);
                else lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom(com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix, this.colorMatrix);
                lime_math__$Matrix4_Matrix4_$Impl_$.transpose(com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix);
                GL.uniformMatrix4fv(this.colorMatrixSlot, false, com_davidmaletz_faengfl_FramebufferSprite.tmp_matrix);
            }
            GL.viewport(0, 0, this.stage.stageWidth, this.stage.stageHeight);
            var m1 = this.projection.clone().invert();
            m1.concat(this.__getWorldTransform());
            m1.concat(old);
            GL.uniformMatrix3fv(transformSlot, false, m1.toArray(true));
            GL.enableVertexAttribArray(vertexSlot);
            GL.activeTexture(GL.TEXTURE0);
            GL.bindTexture(GL.TEXTURE_2D, this.texture);
            GL.bindBuffer(GL.ARRAY_BUFFER, this.buffer);
            GL.vertexAttribPointer(vertexSlot, 2, GL.FLOAT, false, 0, 0);
            GL.drawArrays(GL.TRIANGLES, 0, 6);
            GL.bindBuffer(GL.ARRAY_BUFFER, null);
            GL.bindTexture(GL.TEXTURE_2D, null);
            GL.disableVertexAttribArray(vertexSlot);
            GL.useProgram(old_program);
        },
        __class__: com_davidmaletz_faengfl_FramebufferSprite
    });
    var com_davidmaletz_faengfl_LocationSound = function(c, d, sound, center, loops, scale) {
        if (scale == null) scale = 1;
        if (loops == null) loops = 0;
        this.complete = false;
        this.container = c;
        this.object = d;
        this.scale = scale;
        this.center = center;
        this.peak = com_davidmaletz_faengfl_SoundManager.getSoundVolume(sound);
        this.sound = sound;
        this.loops = loops;
        d.addEventListener("addedToStage", $bind(this, this.init));
        d.addEventListener("removedFromStage", $bind(this, this.destroy));
        this.volume = 0;
        if (d.stage != null) this.init(null);
    };
    $hxClasses["com.davidmaletz.faengfl.LocationSound"] = com_davidmaletz_faengfl_LocationSound;
    com_davidmaletz_faengfl_LocationSound.__name__ = ["com", "davidmaletz", "faengfl", "LocationSound"];
    com_davidmaletz_faengfl_LocationSound.prototype = {
        init: function(e) {
            if (this.complete) return;
            this.destroy(null);
            this.object.addEventListener("enterFrame", $bind(this, this.enter_frame));
            this.channel = com_davidmaletz_faengfl_SoundManager.playSFX(this.sound, this.loops, 0);
            if (this.channel == null) this.kill(e);
            else this.channel.addEventListener("soundComplete", $bind(this, this.kill));
        },
        destroy: function(e) {
            this.object.removeEventListener("enterFrame", $bind(this, this.enter_frame));
            if (this.channel != null) {
                this.channel.removeEventListener("soundComplete", $bind(this, this.kill));
                this.channel.stop();
                this.channel = null;
            }
        },
        kill: function(e) {
            this.complete = true;
            this.destroy(e);
            this.object.removeEventListener("addedToStage", $bind(this, this.init));
            this.object.removeEventListener("removedFromStage", $bind(this, this.destroy));
        },
        stop: function() {
            this.kill(null);
        },
        enter_frame: function(e) {
            if (this.channel == null) return;
            var t = this.channel.get_soundTransform();
            var p = this.container.globalToLocal(this.object.localToGlobal(this.center));
            var w = this.container.getWidth();
            var h = this.container.getHeight();
            var w2 = w * 0.5;
            var h2 = h * 0.5;
            var dx = (p.x - w2) / (w2 * this.scale);
            var dy = (p.y - h2) / (h2 * this.scale);
            var s = this.scale * 0.25;
            if (dx > 0) dx = Math.max(0, dx - s);
            else dx = Math.min(0, dx + s);
            if (dy > 0) dy = Math.max(0, dy - s);
            else dy = Math.min(0, dy + s);
            this.volume = this.volume * 0.8 + 0.2 * this.peak * Math.max(0, 1.0 - Math.sqrt(dx * dx + dy * dy));
            t.volume = com_davidmaletz_faengfl_SoundManager.getSFXVolume(this.volume);
            t.pan = (t.pan + Math.min(1, Math.max( - 1, dx))) * 0.5;
            this.channel.set_soundTransform(t);
        },
        __class__: com_davidmaletz_faengfl_LocationSound
    };
    var com_davidmaletz_faengfl_RevealText = function(c, width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        this.onComplete = null;
        this.lines = [];
        com_davidmaletz_faengfl_FormattedTextBase.call(this, width, multiline, align, word);
        this.bounds = null;
        this._mask = new openfl_display_Sprite();
        this.addChild(new openfl_display_Sprite());
        this.addChild(new com_davidmaletz_faengfl_ScissorSprite(1, 1, this._mask, c));
        var s = new openfl_display_Sprite();
        s.set_visible(false);
        this.addChild(s);
        this.addChild(this._mask);
        if (txt != null) this.setText(txt);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.faengfl.RevealText"] = com_davidmaletz_faengfl_RevealText;
    com_davidmaletz_faengfl_RevealText.__name__ = ["com", "davidmaletz", "faengfl", "RevealText"];
    com_davidmaletz_faengfl_RevealText.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_faengfl_RevealText.lineValue = function(l) {
        return l.bottom;
    };
    com_davidmaletz_faengfl_RevealText.getTextSpeed = function() {
        if (com_davidmaletz_faengfl_RevealText.TEXT_SPEED < 0.125) return 999999;
        else return com_davidmaletz_faengfl_RevealText.TEXT_SPEED;
    };
    com_davidmaletz_faengfl_RevealText.__super__ = com_davidmaletz_faengfl_FormattedTextBase;
    com_davidmaletz_faengfl_RevealText.prototype = $extend(com_davidmaletz_faengfl_FormattedTextBase.prototype, {
        startCustomTag: function(code, data, map, insertText) {
            if (code == "pause") {
                var line = Math.round(this.placer.getCurrentY() / this.placer.getLineHeight(this.default_font.get(), 1));
                if (this.pause == null) this.pause = new haxe_ds_IntMap();
                var ar = this.pause.h[line];
                if (ar == null) {
                    ar = new com_fancyfish_faeng_common_SortedArray(com_fancyfish_faeng_common_SortedArray.sortableValue);
                    this.pause.h[line] = ar;
                }
                ar.insert(new com_davidmaletz_faengfl__$RevealText_Pause(this.placer.tx, data));
                return true;
            } else return false;
        },
        setText: function(txt) {
            this.pause = null;
            com_davidmaletz_faengfl_FormattedTextBase.prototype.setText.call(this, txt);
        },
        init: function(e) {
            this.destroy(e);
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
        },
        destroy: function(e) {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
        },
        setStyle: function(width, multiline, align, word) {
            if (word == null) word = true;
            if (align == null) align = 0;
            if (multiline) this.placer = new com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer(this.lines, width, align, word);
            else this.placer = new com_fancyfish_faeng_text_CharacterPlacer(width, align);
        },
        renderCharacter: function(c, fnt, col) {
            this.lines[com_fancyfish_faeng_common_SortedArray.lower_bound(this.lines, c.y + c.character.height * c.scale * 0.5, com_davidmaletz_faengfl_RevealText.lineValue)].addCharacter(c, fnt, col);
        },
        renderText: function(map) {
            var _g = 0;
            var _g1 = this.lines;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                l.bounds.reset();
                l.map = new haxe_ds_ObjectMap();
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
            }
            this.bounds = null;
            var $it0 = map.keys();
            while ($it0.hasNext()) {
                var fnt = $it0.next();
                var cmap = map.h[fnt.__id__];
                var $it1 = cmap.keys();
                while ($it1.hasNext()) {
                    var col = $it1.next();
                    var chars = cmap.h[col];
                    var _g2 = 0;
                    while (_g2 < chars.length) {
                        var c = chars[_g2]; ++_g2;
                        this.renderCharacter(c, fnt, col);
                    }
                }
            }
            var _g3 = 0;
            var _g11 = this.lines;
            while (_g3 < _g11.length) {
                var l1 = _g11[_g3]; ++_g3;
                l1.finish(); (js_Boot.__cast(this.getChildAt(2), openfl_display_Sprite)).addChild(l1);
            }
        },
        textBounds: function() {
            if (this.bounds == null) {
                this.bounds = new com_fancyfish_faeng_display_Rectangle2D();
                this.bounds.reset();
                var _g = 0;
                var _g1 = this.lines;
                while (_g < _g1.length) {
                    var l = _g1[_g]; ++_g;
                    this.bounds.addRect(l.bounds);
                }
            }
            return this.bounds;
        },
        getHeight: function() {
            if (this.lines.length == 0) return 0;
            else return this.lines[this.lines.length - 1].bottom;
        },
        get: function(i) {
            return js_Boot.__cast(this.getChildAt(i), openfl_display_Sprite);
        },
        advanceReveal: function(frames) {
            var revealing;
            revealing = js_Boot.__cast(this.getChildAt(1), openfl_display_Sprite);
            var revealed;
            revealed = js_Boot.__cast(this.getChildAt(0), openfl_display_Sprite);
            var hidden;
            hidden = js_Boot.__cast(this.getChildAt(2), openfl_display_Sprite);
            while (frames > 0) {
                var line;
                if (revealing.get_numChildren() == 0) {
                    if (hidden.get_numChildren() == 0) {
                        var f = this.onComplete;
                        this.onComplete = null;
                        if (f != null) f();
                        return frames;
                    }
                    line = js_Boot.__cast(hidden.removeChildAt(0), com_davidmaletz_faengfl__$RevealText_Line);
                    revealing.addChild(line);
                    this._mask.set_x(line.bounds.x);
                    this._mask.set_y(line.bounds.y);
                    this._mask.set_scaleX(0);
                    this._mask.set_scaleY(line.bounds.height);
                } else line = js_Boot.__cast(revealing.getChildAt(0), com_davidmaletz_faengfl__$RevealText_Line);
                var max = line.bounds.width;
                var v = this._mask.get_scaleX() + frames;
                var ar;
                if (this.pause != null && ((function($this) {
                    var $r;
                    var key = revealed.get_numChildren();
                    $r = ar = $this.pause.h[key];
                    return $r;
                } (this))) != null) {
                    var p = ar.getByValue(this._mask.get_scaleX());
                    if (p != null && p.length > 0 && p.x < v) {
                        p.length -= v - p.x;
                        v = p.x;
                        if (p.length < 0) v -= p.length;
                    }
                }
                if (v > max) {
                    frames -= max - this._mask.get_scaleX();
                    revealed.addChild(line);
                } else {
                    this._mask.set_scaleX(v);
                    break;
                }
            }
            return 0;
        },
        enter_frame: function(frames) {
            this.advanceReveal(frames * (com_davidmaletz_faengfl_RevealText.TEXT_SPEED < 0.125 ? 999999 : com_davidmaletz_faengfl_RevealText.TEXT_SPEED));
        },
        __class__: com_davidmaletz_faengfl_RevealText
    });
    var com_davidmaletz_faengfl__$RevealText_Line = function(bot) {
        openfl_display_Sprite.call(this);
        this.bounds = new com_fancyfish_faeng_display_Rectangle2D();
        this.bottom = bot;
    };
    $hxClasses["com.davidmaletz.faengfl._RevealText.Line"] = com_davidmaletz_faengfl__$RevealText_Line;
    com_davidmaletz_faengfl__$RevealText_Line.__name__ = ["com", "davidmaletz", "faengfl", "_RevealText", "Line"];
    com_davidmaletz_faengfl__$RevealText_Line.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl__$RevealText_Line.prototype = $extend(openfl_display_Sprite.prototype, {
        start: function() {
            this.bounds.reset();
            this.map = new haxe_ds_ObjectMap();
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
        },
        addCharacter: function(c, fnt, col) {
            if (c.character.userData != null) {
                var i;
                i = js_Boot.__cast(c.character.userData(), openfl_display_DisplayObject);
                i.set_x(c.x);
                i.set_y(c.y);
                this.addChild(i);
                this.bounds.addRectangle(c.x, c.y, c.character.width, c.character.height);
                return;
            }
            var cmap = this.map.h[fnt.__id__];
            if (cmap == null) {
                cmap = new haxe_ds_IntMap();
                this.map.set(fnt, cmap);
            }
            var ar = cmap.h[col];
            if (ar == null) {
                ar = [];
                cmap.h[col] = ar;
            }
            ar.push(c);
        },
        finish: function() {
            var $it0 = this.map.keys();
            while ($it0.hasNext()) {
                var fnt = $it0.next();
                var cmap = this.map.h[fnt.__id__];
                var $it1 = cmap.keys();
                while ($it1.hasNext()) {
                    var col = $it1.next();
                    var chars = cmap.h[col];
                    if (chars.length > 0) {
                        var text = new com_davidmaletz_faengfl_InnerText(chars, col);
                        this.addChild(text);
                        this.bounds.addRect(text.bounds);
                    }
                }
            }
            this.map = null;
        },
        __class__: com_davidmaletz_faengfl__$RevealText_Line
    });
    var com_fancyfish_faeng_text_CharacterPlacer = function(w, align, s) {
        if (s == null) s = 0;
        if (align == null) align = 0;
        this.tx = 0;
        this.width = w;
        this.line = [];
        this.alignment = align;
        this.spacing = s;
    };
    $hxClasses["com.fancyfish.faeng.text.CharacterPlacer"] = com_fancyfish_faeng_text_CharacterPlacer;
    com_fancyfish_faeng_text_CharacterPlacer.__name__ = ["com", "fancyfish", "faeng", "text", "CharacterPlacer"];
    com_fancyfish_faeng_text_CharacterPlacer.getWidth = function(text, font, scale, st, end) {
        if (end == null) end = -1;
        if (st == null) st = 0;
        if (end == -1) end = text.length;
        var tx = 0;
        var prev = -1;
        var _g = st;
        while (_g < end) {
            var i = _g++;
            var id = HxOverrides.cca(text, i);
            var c = font.characters.h[id];
            if (c != null) tx += (c.xadvance + c.getKerning(prev)) * scale;
            prev = id;
        }
        return tx;
    };
    com_fancyfish_faeng_text_CharacterPlacer.getIndex = function(text, font, scale, x) {
        var tx = 0;
        var prev = -1;
        var len = text.length;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var add = 0;
            var id = HxOverrides.cca(text, i);
            var c = font.characters.h[id];
            if (c != null) add = (c.xadvance + c.getKerning(prev)) * scale;
            prev = id;
            if (x < tx + add * 0.5) return i;
            tx += add;
        }
        return len;
    };
    com_fancyfish_faeng_text_CharacterPlacer.prototype = {
        place: function(c, prev, scale, id) {
            var x = this.tx + (c.xoffset + c.getKerning(prev)) * scale;
            var y = c.yoffset * scale;
            this.tx += (c.xadvance + c.getKerning(prev) + this.spacing) * scale;
            var cp = new com_fancyfish_faeng_text_CharacterPos(c, x, y, scale, id);
            this.line.push(cp);
            return cp;
        },
        getCurrentX: function() {
            return this.tx;
        },
        getCurrentY: function() {
            return 0;
        },
        reset: function() {
            this.tx = 0;
            this.line = [];
        },
        finish: function() {
            this.finishLine();
        },
        newLine: function(font, scale) {},
        lineWidth: function() {
            if (this.line.length == 0) return 0;
            var c = this.line[this.line.length - 1];
            var prev;
            if (this.line.length > 1) prev = this.line[this.line.length - 2].character.id;
            else prev = -1;
            return c.x + c.character.getXAdvance(prev) * c.scale;
        },
        getOffsetX: function() {
            return Math.round((this.width - this.lineWidth()) * (this.alignment * 0.5));
        },
        getLineHeight: function(font, scale) {
            return font.lineHeight * scale;
        },
        finishLine: function() {
            var offX = Math.round((this.width - this.lineWidth()) * (this.alignment * 0.5));
            var height = 0;
            var _g = 0;
            var _g1 = this.line;
            while (_g < _g1.length) {
                var c = _g1[_g]; ++_g;
                var lineHeight = this.getLineHeight(c.character.font, c.scale);
                if (lineHeight > height) height = lineHeight;
                c.x += offX;
            }
            var _g2 = 0;
            var _g11 = this.line;
            while (_g2 < _g11.length) {
                var c1 = _g11[_g2]; ++_g2;
                c1.y += (height - this.getLineHeight(c1.character.font, c1.scale)) * c1.character.font.baseline;
            }
            return height;
        },
        __class__: com_fancyfish_faeng_text_CharacterPlacer
    };
    var com_fancyfish_faeng_text_WrapCharacterPlacer = function(w, align, word, line) {
        if (line == null) line = -1;
        if (word == null) word = true;
        if (align == null) align = 0;
        com_fancyfish_faeng_text_CharacterPlacer.call(this, w, align);
        this.ty = 0;
        this.wordWrap = word;
        this.lineHeight = line;
    };
    $hxClasses["com.fancyfish.faeng.text.WrapCharacterPlacer"] = com_fancyfish_faeng_text_WrapCharacterPlacer;
    com_fancyfish_faeng_text_WrapCharacterPlacer.__name__ = ["com", "fancyfish", "faeng", "text", "WrapCharacterPlacer"];
    com_fancyfish_faeng_text_WrapCharacterPlacer.__super__ = com_fancyfish_faeng_text_CharacterPlacer;
    com_fancyfish_faeng_text_WrapCharacterPlacer.prototype = $extend(com_fancyfish_faeng_text_CharacterPlacer.prototype, {
        wrapLine: function() {
            var len = this.line.length;
            var i = len - 1;
            var newline = [];
            if (len == 0) return newline;
            while (i >= 0) {
                var c = this.line[i];
                if (!c.character.isDisplayable()) break;
                i--;
            }
            if (i > 0) {
                var _g = i + 1;
                while (_g < len) {
                    var c1 = _g++;
                    newline.push(this.line[c1]);
                }
                var _g1 = i;
                while (_g1 < len) {
                    var c2 = _g1++;
                    this.line.pop();
                }
                i = this.line.length - 1;
                while (i >= 0) {
                    var c3 = this.line[i];
                    if (c3.character.isDisplayable()) break;
                    this.line.pop();
                    i--;
                }
            }
            return newline;
        },
        place: function(c, prev, scale, id) {
            var cp = com_fancyfish_faeng_text_CharacterPlacer.prototype.place.call(this, c, prev, scale, id);
            cp.y += this.ty;
            if (this.tx > this.width) {
                var newline;
                if (this.wordWrap) newline = this.wrapLine();
                else newline = [this.line.pop()];
                this.tx = 0;
                this.advanceLine();
                this.line = newline;
                var prev1 = -1;
                var _g = 0;
                var _g1 = this.line;
                while (_g < _g1.length) {
                    var c1 = _g1[_g]; ++_g;
                    c1.x = this.tx + c1.character.getXOffset(prev1) * c1.scale;
                    c1.y = this.ty + c1.character.yoffset * c1.scale;
                    this.tx += c1.character.getXAdvance(prev1) * c1.scale;
                    prev1 = c1.character.id;
                }
            }
            return cp;
        },
        getCurrentY: function() {
            return this.ty;
        },
        reset: function() {
            com_fancyfish_faeng_text_CharacterPlacer.prototype.reset.call(this);
            this.ty = 0;
        },
        advanceLine: function() {
            this.ty += this.finishLine();
        },
        finish: function() {
            this.advanceLine();
        },
        getLineHeight: function(font, scale) {
            if (this.lineHeight < 0) return com_fancyfish_faeng_text_CharacterPlacer.prototype.getLineHeight.call(this, font, scale);
            else return this.lineHeight;
        },
        newLine: function(font, scale) {
            this.tx = 0;
            this.ty += Math.max(this.getLineHeight(font, scale), this.finishLine());
            this.line = [];
        },
        curHeight: function() {
            return this.ty;
        },
        __class__: com_fancyfish_faeng_text_WrapCharacterPlacer
    });
    var com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer = function(l, w, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        this.lines = l;
        com_fancyfish_faeng_text_WrapCharacterPlacer.call(this, w, align, word);
    };
    $hxClasses["com.davidmaletz.faengfl._RevealText.LineCharacterPlacer"] = com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer;
    com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer.__name__ = ["com", "davidmaletz", "faengfl", "_RevealText", "LineCharacterPlacer"];
    com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer.__super__ = com_fancyfish_faeng_text_WrapCharacterPlacer;
    com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer.prototype = $extend(com_fancyfish_faeng_text_WrapCharacterPlacer.prototype, {
        reset: function() {
            var _g = 0;
            var _g1 = this.lines;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (l.parent != null) l.parent.removeChild(l);
            }
            this.lines.length = 0;
            com_fancyfish_faeng_text_WrapCharacterPlacer.prototype.reset.call(this);
        },
        advanceLine: function() {
            com_fancyfish_faeng_text_WrapCharacterPlacer.prototype.advanceLine.call(this);
            this.lines.push(new com_davidmaletz_faengfl__$RevealText_Line(this.ty));
        },
        newLine: function(font, scale) {
            com_fancyfish_faeng_text_WrapCharacterPlacer.prototype.newLine.call(this, font, scale);
            this.lines.push(new com_davidmaletz_faengfl__$RevealText_Line(this.ty));
        },
        __class__: com_davidmaletz_faengfl__$RevealText_LineCharacterPlacer
    });
    var com_davidmaletz_faengfl__$RevealText_Pause = function(x, len) {
        this.x = x;
        if (len == null) this.length = 1;
        else this.length = parseFloat(len);
        this.length *= 60;
    };
    $hxClasses["com.davidmaletz.faengfl._RevealText.Pause"] = com_davidmaletz_faengfl__$RevealText_Pause;
    com_davidmaletz_faengfl__$RevealText_Pause.__name__ = ["com", "davidmaletz", "faengfl", "_RevealText", "Pause"];
    com_davidmaletz_faengfl__$RevealText_Pause.prototype = {
        getSortValue: function() {
            return this.x;
        },
        __class__: com_davidmaletz_faengfl__$RevealText_Pause
    };
    var com_davidmaletz_faengfl_SolidDrawable = function(color, w, h, thickness, lineColor, a) {
        if (a == null) a = 1;
        if (lineColor == null) lineColor = 0;
        if (thickness == null) thickness = 0;
        this.color = color;
        this.w = w;
        this.h = h;
        this.thickness = thickness;
        this.lineColor = lineColor;
        this.alpha = a;
    };
    $hxClasses["com.davidmaletz.faengfl.SolidDrawable"] = com_davidmaletz_faengfl_SolidDrawable;
    com_davidmaletz_faengfl_SolidDrawable.__name__ = ["com", "davidmaletz", "faengfl", "SolidDrawable"];
    com_davidmaletz_faengfl_SolidDrawable.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_faengfl_SolidDrawable.prototype = {
        getWidth: function() {
            return this.w;
        },
        getHeight: function() {
            return this.h;
        },
        create: function(tx, ty) {
            var s = new openfl_display_Sprite();
            var g = s.get_graphics();
            if (this.thickness > 0) g.lineStyle(this.thickness, this.lineColor);
            g.beginFill(this.color);
            g.drawRect(0, 0, this.w, this.h);
            g.endFill();
            s.set_alpha(this.alpha);
            s.set_x(tx);
            s.set_y(ty);
            return s;
        },
        __class__: com_davidmaletz_faengfl_SolidDrawable
    };
    var com_davidmaletz_faengfl_SolidDrawableFactory = function(col, thickness, lineColor) {
        if (lineColor == null) lineColor = 0;
        if (thickness == null) thickness = 0;
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
        this.color = col;
        this.thickness = thickness;
        this.lineColor = lineColor;
    };
    $hxClasses["com.davidmaletz.faengfl.SolidDrawableFactory"] = com_davidmaletz_faengfl_SolidDrawableFactory;
    com_davidmaletz_faengfl_SolidDrawableFactory.__name__ = ["com", "davidmaletz", "faengfl", "SolidDrawableFactory"];
    com_davidmaletz_faengfl_SolidDrawableFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_faengfl_SolidDrawableFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            return new com_davidmaletz_faengfl_SolidDrawable(this.color, w, h, this.thickness, this.lineColor);
        },
        __class__: com_davidmaletz_faengfl_SolidDrawableFactory
    });
    var com_davidmaletz_faengfl_SoundManager = function() {};
    $hxClasses["com.davidmaletz.faengfl.SoundManager"] = com_davidmaletz_faengfl_SoundManager;
    com_davidmaletz_faengfl_SoundManager.__name__ = ["com", "davidmaletz", "faengfl", "SoundManager"];
    com_davidmaletz_faengfl_SoundManager.SFX_VOL = null;
    com_davidmaletz_faengfl_SoundManager.BGM_VOL = null;
    com_davidmaletz_faengfl_SoundManager.bgmc = null;
    com_davidmaletz_faengfl_SoundManager.cur_bgm = null;
    com_davidmaletz_faengfl_SoundManager.bgm_vol = null;
    com_davidmaletz_faengfl_SoundManager.getSound = function(name) {
        var s = "sound/" + name + ".ogg";
        if (openfl_Assets.exists(s)) return openfl_Assets.getSound(s);
        else return null;
    };
    com_davidmaletz_faengfl_SoundManager.getMusic = function(name) {
        var s = "sound/" + name + ".ogg";
        if (openfl_Assets.exists(s)) return openfl_Assets.getMusic(s);
        else return null;
    };
    com_davidmaletz_faengfl_SoundManager.settings = null;
    com_davidmaletz_faengfl_SoundManager.init = function(settings, func) {
        com_davidmaletz_faengfl_SoundManager.settings = settings;
        com_davidmaletz_faengfl_SoundManager.initSoundVolume();
        var d = Reflect.field(settings.data, "bgm_vol");
        if (d == null) com_davidmaletz_faengfl_SoundManager.BGM_VOL = 1;
        else com_davidmaletz_faengfl_SoundManager.BGM_VOL = d;
        d = Reflect.field(settings.data, "sfx_vol");
        if (d == null) com_davidmaletz_faengfl_SoundManager.SFX_VOL = 1;
        else com_davidmaletz_faengfl_SoundManager.SFX_VOL = d;
        func();
    };
    com_davidmaletz_faengfl_SoundManager.initSoundVolume = function() {
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.volume != null) action_map.setReserved("volume",
        function(v) {
            if (v.exists("name") && v.exists("value")) {
                var key = v.get("name");
                var value = Std.parseFloat(v.get("value")) / 100;
                com_davidmaletz_faengfl_SoundManager.sound_volume.set(key, value);
            }
        });
        else action_map.h["volume"] = function(v) {
            if (v.exists("name") && v.exists("value")) {
                var key = v.get("name");
                var value = Std.parseFloat(v.get("value")) / 100;
                com_davidmaletz_faengfl_SoundManager.sound_volume.set(key, value);
            }
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/volumes.xml", action_map);
    };
    com_davidmaletz_faengfl_SoundManager.getCachedSound = function(name) {
        var ret = com_davidmaletz_faengfl_SoundManager.sound_cache.get(name);
        if (ret == null) {
            ret = com_davidmaletz_faengfl_SoundManager.getSound(name);
            if (ret != null) com_davidmaletz_faengfl_SoundManager.sound_cache.set(name, ret);
        }
        return ret;
    };
    com_davidmaletz_faengfl_SoundManager.getCachedMusic = function(name) {
        var ret = com_davidmaletz_faengfl_SoundManager.music_cache.get(name);
        if (ret == null) {
            ret = com_davidmaletz_faengfl_SoundManager.getMusic(name);
            if (ret != null) com_davidmaletz_faengfl_SoundManager.music_cache.set(name, ret);
        }
        return ret;
    };
    com_davidmaletz_faengfl_SoundManager.getSoundVolume = function(name) {
        var ret = com_davidmaletz_faengfl_SoundManager.sound_volume.get(name);
        if (ret == null) ret = 1;
        return ret;
    };
    com_davidmaletz_faengfl_SoundManager.playBGM = function(name, vol, loops, onComplete) {
        if (loops == null) loops = 1073741823;
        if (vol == null) vol = 1;
        if (com_davidmaletz_faengfl_SoundManager.cur_bgm == name) return;
        if (name == null) {
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.stop();
            com_davidmaletz_faengfl_SoundManager.cur_bgm = null;
            return;
        }
        var s = com_davidmaletz_faengfl_SoundManager.getCachedMusic(name);
        if (s == null) {
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.stop();
            com_davidmaletz_faengfl_SoundManager.cur_bgm = null;
            return;
        }
        com_davidmaletz_faengfl_SoundManager.cur_bgm = name;
        var vol1 = com_davidmaletz_faengfl_SoundManager.getSoundVolume(name);
        if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.stop();
        com_davidmaletz_faengfl_SoundManager.bgm_vol = vol1;
        var v = com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.bgm_vol * vol1;
        com_davidmaletz_faengfl_SoundManager.bgmc = s.play(0, loops, new openfl_media_SoundTransform(v));
        if (onComplete != null) com_davidmaletz_faengfl_SoundManager.bgmc.addEventListener("soundComplete",
        function(e) {
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) {
                com_davidmaletz_faengfl_SoundManager.bgmc.stop();
                com_davidmaletz_faengfl_SoundManager.bgmc = null;
            }
            onComplete();
        });
    };
    com_davidmaletz_faengfl_SoundManager.getBGM = function() {
        return com_davidmaletz_faengfl_SoundManager.cur_bgm;
    };
    com_davidmaletz_faengfl_SoundManager.stopBGM = function() {
        if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.stop();
        com_davidmaletz_faengfl_SoundManager.cur_bgm = null;
    };
    com_davidmaletz_faengfl_SoundManager.setVolume = function(c, vol) {
        c.set_soundTransform(new openfl_media_SoundTransform(vol));
    };
    com_davidmaletz_faengfl_SoundManager.fadeBGM = function(f, stop) {
        if (stop == null) stop = true;
        if (f <= 0 && stop) {
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) {
                com_davidmaletz_faengfl_SoundManager.bgmc.stop();
                com_davidmaletz_faengfl_SoundManager.bgmc = null;
            }
        } else if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.set_soundTransform(new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.bgm_vol * f));
    };
    com_davidmaletz_faengfl_SoundManager.getSFXVolume = function(f) {
        return com_davidmaletz_faengfl_SoundManager.SFX_VOL * f * 0.5;
    };
    com_davidmaletz_faengfl_SoundManager.sound_count = null;
    com_davidmaletz_faengfl_SoundManager.getCount = function(name) {
        if (com_davidmaletz_faengfl_SoundManager.sound_count == null || !com_davidmaletz_faengfl_SoundManager.sound_count.exists(name)) return 1;
        else return com_davidmaletz_faengfl_SoundManager.sound_count.get(name);
    };
    com_davidmaletz_faengfl_SoundManager.playSFX = function(name, loops, v) {
        if (v == null) v = 1;
        if (loops == null) loops = 0;
        var s = com_davidmaletz_faengfl_SoundManager.getCachedSound(name);
        if (s == null) {
            var v1;
            if (com_davidmaletz_faengfl_SoundManager.sound_count == null || !com_davidmaletz_faengfl_SoundManager.sound_count.exists(name)) v1 = 1;
            else v1 = com_davidmaletz_faengfl_SoundManager.sound_count.get(name);
            s = com_davidmaletz_faengfl_SoundManager.getCachedSound(name + v1);
            if (s == null && v1 == 1) return null;
            if (s == null) {
                v1 = 1;
                s = com_davidmaletz_faengfl_SoundManager.getCachedSound(name + v1);
            }
            if (com_davidmaletz_faengfl_SoundManager.sound_count == null) com_davidmaletz_faengfl_SoundManager.sound_count = new haxe_ds_StringMap();
            com_davidmaletz_faengfl_SoundManager.sound_count.set(name, v1 + 1);
        }
        return s.play(0, loops, new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.getSFXVolume(v * com_davidmaletz_faengfl_SoundManager.getSoundVolume(name))));
    };
    com_davidmaletz_faengfl_SoundManager.playMusic = function(name, loops) {
        if (loops == null) loops = 0;
        var s = com_davidmaletz_faengfl_SoundManager.getCachedSound(name);
        if (s == null) return null;
        else return s.play(0, loops, new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.getSoundVolume(name)));
    };
    com_davidmaletz_faengfl_SoundManager.getSFXVol = function() {
        return com_davidmaletz_faengfl_SoundManager.SFX_VOL;
    };
    com_davidmaletz_faengfl_SoundManager.setSFXVol = function(v) {
        com_davidmaletz_faengfl_SoundManager.SFX_VOL = v;
        com_davidmaletz_faengfl_SoundManager.settings.data.sfx_vol = com_davidmaletz_faengfl_SoundManager.SFX_VOL;
    };
    com_davidmaletz_faengfl_SoundManager.getBGMVol = function() {
        return com_davidmaletz_faengfl_SoundManager.BGM_VOL;
    };
    com_davidmaletz_faengfl_SoundManager.setBGMVol = function(v) {
        com_davidmaletz_faengfl_SoundManager.BGM_VOL = v;
        if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.set_soundTransform(new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.bgm_vol));
        com_davidmaletz_faengfl_SoundManager.settings.data.bgm_vol = com_davidmaletz_faengfl_SoundManager.BGM_VOL;
    };
    var com_davidmaletz_faengfl_TextSprite = function(text, placer, color, size, font) {
        openfl_display_Sprite.call(this);
        this.text = text;
        this.placer = placer;
        this.scale = size;
        if (color != 16777215) com_davidmaletz_faengfl_TextSprite.setColor(this, color, null);
        if (font == null) font = com_fancyfish_faeng_text_FontManager.defaultFont;
        this.font = font;
        this.bounds = new com_fancyfish_faeng_display_Rectangle2D();
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.faengfl.TextSprite"] = com_davidmaletz_faengfl_TextSprite;
    com_davidmaletz_faengfl_TextSprite.__name__ = ["com", "davidmaletz", "faengfl", "TextSprite"];
    com_davidmaletz_faengfl_TextSprite.setColor = function(s, color, white) {
        if (white == null) white = 255.0;
        var c = s.get_transform().get_colorTransform();
        c.redMultiplier = (color >> 16 & 255) / white;
        c.greenMultiplier = (color >> 8 & 255) / white;
        c.blueMultiplier = (color & 255) / white;
        s.get_transform().set_colorTransform(c);
    };
    com_davidmaletz_faengfl_TextSprite.getChars = function(font, text, x, y, placer, specialChars) {
        var fr;
        if (font.userData != null) fr = font.userData;
        else {
            fr = new com_davidmaletz_faengfl_FontRenderer(font);
            font.userData = fr;
        }
        var len = text.length;
        var prev = -1;
        var ret = 0;
        com_davidmaletz_faengfl_TextSprite.char_ct = 0;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var id = HxOverrides.cca(text, i);
            var c;
            if (specialChars == null) c = null;
            else c = specialChars(id, null);
            if (c == null) c = font.characters.h[id];
            if (id == 10) placer.newLine(font, 1);
            if (c != null) {
                ret += c.xadvance + c.getKerning(prev) + placer.spacing;
                var cp = placer.place(c, prev, 1, i);
                if (cp != null) com_davidmaletz_faengfl_TextSprite.chars[com_davidmaletz_faengfl_TextSprite.char_ct++] = cp;
            }
            prev = id;
        }
        placer.finish();
        return ret;
    };
    com_davidmaletz_faengfl_TextSprite.drawText = function(font, g, text, x, y, placer, updateChars, specialChars, bounds) {
        var ret = com_davidmaletz_faengfl_TextSprite.getChars(font, text, x, y, placer, specialChars);
        if (updateChars != null) updateChars(com_davidmaletz_faengfl_TextSprite.chars, com_davidmaletz_faengfl_TextSprite.char_ct);
        com_davidmaletz_faengfl_TextSprite.drawCharacters(com_davidmaletz_faengfl_TextSprite.chars, com_davidmaletz_faengfl_TextSprite.char_ct, g, x, y, specialChars, bounds);
        return ret;
    };
    com_davidmaletz_faengfl_TextSprite.drawCharacters = function(chars, char_ct, g, x, y, specialChars, bounds) {
        if (bounds != null) {
            bounds.x = 100000;
            bounds.y = bounds.x;
            bounds.width = -bounds.x * 2;
            bounds.height = bounds.width;
        }
        com_davidmaletz_faengfl_TextSprite.ct = 0;
        var font = null;
        var fr = null;
        var _g = 0;
        while (_g < char_ct) {
            var i = _g++;
            var cp = chars[i];
            if (cp.character.isDisplayable() && cp.character.x >= 0) {
                if (bounds != null) bounds.addRect(new com_fancyfish_faeng_display_Rectangle2D(x + cp.x, y + cp.y, cp.character.width, cp.character.height));
                com_davidmaletz_faengfl_TextSprite.data[com_davidmaletz_faengfl_TextSprite.ct++] = Math.round(x + cp.x);
                com_davidmaletz_faengfl_TextSprite.data[com_davidmaletz_faengfl_TextSprite.ct++] = Math.round(y + cp.y);
                if (font == null) {
                    font = cp.character.font;
                    fr = font.userData;
                }
                var val = fr.map.h[cp.character.id];
                com_davidmaletz_faengfl_TextSprite.data[com_davidmaletz_faengfl_TextSprite.ct++] = val;
                if (specialChars != null) specialChars(val, cp);
            } else if (specialChars != null) specialChars( - 1, cp);
        }
        if (g != null && font != null) com_davidmaletz_faengfl_TextSprite.drawTiles(font, g, 0, com_davidmaletz_faengfl_TextSprite.ct);
    };
    com_davidmaletz_faengfl_TextSprite.getTilesLength = function() {
        return com_davidmaletz_faengfl_TextSprite.ct;
    };
    com_davidmaletz_faengfl_TextSprite.drawTiles = function(font, g, from, to) {
        var fr = font.userData;
        fr.tilesheet.drawTiles(g, com_davidmaletz_faengfl_TextSprite.data.slice(from, to), com_davidmaletz_faengfl_TextSprite.SMOOTH);
    };
    com_davidmaletz_faengfl_TextSprite.__super__ = openfl_display_Sprite;
    com_davidmaletz_faengfl_TextSprite.prototype = $extend(openfl_display_Sprite.prototype, {
        getText: function() {
            return this.text;
        },
        setText: function(txt) {
            if (this.text != txt) {
                this.text.removeEventListener("updated", $bind(this, this.handleEvent));
                this.text = txt;
                if (this.stage != null) {
                    this.text.addEventListener("updated", $bind(this, this.handleEvent));
                    this.draw();
                }
            }
        },
        init: function(e) {
            this.destroy(e);
            this.text.addEventListener("updated", $bind(this, this.handleEvent));
            this.draw();
        },
        destroy: function(e) {
            this.text.removeEventListener("updated", $bind(this, this.handleEvent));
        },
        handleEvent: function(e) {
            this.draw();
        },
        updateChars: function(chars, len) {},
        draw: function(specialChars) {
            this.get_graphics().clear();
            this.placer.reset();
            var font = this.font.get();
            if (font == null) return 0;
            var s = this.scale;
            var w = this.placer.width;
            this.placer.width /= s;
            var ret = com_davidmaletz_faengfl_TextSprite.drawText(font, this.get_graphics(), this.text.get(), 0, -Math.ceil((font.lineHeight - font.size) * 0.5), this.placer, $bind(this, this.updateChars), specialChars, this.bounds);
            this.set_scaleX(this.set_scaleY(s));
            this.placer.width = w;
            return ret * s;
        },
        setSize: function(s) {
            if (this.scale != s) {
                this.scale = s;
                this.draw();
            }
        },
        __class__: com_davidmaletz_faengfl_TextSprite
    });
    var com_davidmaletz_faengfl_FontRenderer = function(f, b) {
        if (b == null) b = openfl_Assets.getBitmapData(f.file);
        this.tilesheet = new openfl_display_Tilesheet(b);
        this.map = new haxe_ds_IntMap();
        var ct = 0;
        var $it0 = f.characters.iterator();
        while ($it0.hasNext()) {
            var c = $it0.next();
            if (c.width > 0 && c.height > 0) {
                this.tilesheet.addTileRect(new openfl_geom_Rectangle(c.x, c.y, c.width, c.height));
                this.map.set(c.id, ct++);
            }
        }
    };
    $hxClasses["com.davidmaletz.faengfl.FontRenderer"] = com_davidmaletz_faengfl_FontRenderer;
    com_davidmaletz_faengfl_FontRenderer.__name__ = ["com", "davidmaletz", "faengfl", "FontRenderer"];
    com_davidmaletz_faengfl_FontRenderer.prototype = {
        __class__: com_davidmaletz_faengfl_FontRenderer
    };
    var com_davidmaletz_faengfl_TileHandler = function() {
        this.data = [];
        this.ct = 0;
        this.last = null;
    };
    $hxClasses["com.davidmaletz.faengfl.TileHandler"] = com_davidmaletz_faengfl_TileHandler;
    com_davidmaletz_faengfl_TileHandler.__name__ = ["com", "davidmaletz", "faengfl", "TileHandler"];
    com_davidmaletz_faengfl_TileHandler.instance = null;
    com_davidmaletz_faengfl_TileHandler.getInstance = function() {
        if (com_davidmaletz_faengfl_TileHandler.instance == null) com_davidmaletz_faengfl_TileHandler.instance = new com_davidmaletz_faengfl_TileHandler();
        return com_davidmaletz_faengfl_TileHandler.instance;
    };
    com_davidmaletz_faengfl_TileHandler.prototype = {
        renderLast: function() {
            if (this.last == null || this.ct == 0) this.ct = 0;
            else {
                this.last.drawTiles(this.graphics, this.data.slice(0, this.ct), false, this.flags);
                this.last = null;
                this.ct = 0;
            }
        },
        start: function(g, flags) {
            if (flags == null) flags = 0;
            this.graphics = g;
            this.ct = 0;
            this.flags = flags;
        },
        addTile: function(sheet, x, y, idx, alpha, a, b, c, d) {
            if (d == null) d = 1;
            if (c == null) c = 0;
            if (b == null) b = 0;
            if (a == null) a = 1;
            if (alpha == null) alpha = 1;
            if (sheet.sheet != this.last) {
                if (this.last == null || this.ct == 0) this.ct = 0;
                else {
                    this.last.drawTiles(this.graphics, this.data.slice(0, this.ct), false, this.flags);
                    this.last = null;
                    this.ct = 0;
                }
                this.last = sheet.sheet;
            }
            this.data[this.ct++] = x;
            this.data[this.ct++] = y;
            this.data[this.ct++] = idx;
            if ((this.flags & 8) != 0) this.data[this.ct++] = alpha;
            if ((this.flags & 16) != 0) {
                this.data[this.ct++] = a;
                this.data[this.ct++] = b;
                this.data[this.ct++] = c;
                this.data[this.ct++] = d;
            }
        },
        finish: function() {
            if (this.last == null || this.ct == 0) this.ct = 0;
            else {
                this.last.drawTiles(this.graphics, this.data.slice(0, this.ct), false, this.flags);
                this.last = null;
                this.ct = 0;
            }
        },
        __class__: com_davidmaletz_faengfl_TileHandler
    };
    var com_davidmaletz_faengfl_TouchAdapter = function() {
        openfl_events_EventDispatcher.call(this);
        com_davidmaletz_faengfl_TouchAdapter.instance = this;
        openfl_Lib.current.stage.addEventListener("mouseDown", $bind(this, this.mouse_down));
        openfl_Lib.current.stage.addEventListener("mouseUp", $bind(this, this.mouse_up));
        openfl_Lib.current.stage.addEventListener("mouseMove", $bind(this, this.mouse_move));
    };
    $hxClasses["com.davidmaletz.faengfl.TouchAdapter"] = com_davidmaletz_faengfl_TouchAdapter;
    com_davidmaletz_faengfl_TouchAdapter.__name__ = ["com", "davidmaletz", "faengfl", "TouchAdapter"];
    com_davidmaletz_faengfl_TouchAdapter.instance = null;
    com_davidmaletz_faengfl_TouchAdapter.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_faengfl_TouchAdapter.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        addMouseListeners: function() {
            openfl_Lib.current.stage.addEventListener("mouseDown", $bind(this, this.mouse_down));
            openfl_Lib.current.stage.addEventListener("mouseUp", $bind(this, this.mouse_up));
            openfl_Lib.current.stage.addEventListener("mouseMove", $bind(this, this.mouse_move));
        },
        getModifiers: function(e) {
            var ret = 0;
            if (e.shiftKey) ret |= 1;
            if (e.ctrlKey) ret |= 2;
            if (e.altKey) ret |= 4;
            return ret;
        },
        mouse_down: function(e) {
            this.dispatchEvent(new com_davidmaletz_faengfl_events_TEvent("touch_down", 0, e.stageX, e.stageY, this.getModifiers(e)));
        },
        mouse_up: function(e) {
            this.dispatchEvent(new com_davidmaletz_faengfl_events_TEvent("touch_up", 0, e.stageX, e.stageY, this.getModifiers(e)));
        },
        mouse_move: function(e) {
            this.dispatchEvent(new com_davidmaletz_faengfl_events_TEvent("touch_move", 0, e.stageX, e.stageY, this.getModifiers(e)));
        },
        __class__: com_davidmaletz_faengfl_TouchAdapter
    });
    var com_davidmaletz_faengfl_UTFUtils = function() {};
    $hxClasses["com.davidmaletz.faengfl.UTFUtils"] = com_davidmaletz_faengfl_UTFUtils;
    com_davidmaletz_faengfl_UTFUtils.__name__ = ["com", "davidmaletz", "faengfl", "UTFUtils"];
    com_davidmaletz_faengfl_UTFUtils.writeUTF = function(b, v) {
        if (v == null) b.writeUInt16(65535);
        else {
            var bytes = haxe_io_Bytes.ofString(v);
            var len = bytes.length;
            b.writeUInt16(len);
            b.writeFullBytes(bytes, 0, len);
        }
    };
    com_davidmaletz_faengfl_UTFUtils.readUTF = function(b) {
        var len = b.readUInt16();
        if (len == 65535) return null;
        var bytes = haxe_io_Bytes.alloc(len);
        b.readFullBytes(bytes, 0, len);
        return bytes.toString();
    };
    var com_davidmaletz_faengfl_achievement_Achievements = function(settings) {
        openfl_events_EventDispatcher.call(this);
        this.map = new haxe_ds_StringMap();
        this.settings = settings;
        var data = Reflect.field(settings.data, "achievements");
        if (data != null) {
            var b = new haxe_io_BytesInput(data);
            this.read(b);
        }
        com_davidmaletz_faengfl_achievement_Achievements.instance = this;
    };
    $hxClasses["com.davidmaletz.faengfl.achievement.Achievements"] = com_davidmaletz_faengfl_achievement_Achievements;
    com_davidmaletz_faengfl_achievement_Achievements.__name__ = ["com", "davidmaletz", "faengfl", "achievement", "Achievements"];
    com_davidmaletz_faengfl_achievement_Achievements.instance = null;
    com_davidmaletz_faengfl_achievement_Achievements.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_faengfl_achievement_Achievements.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        isAchievement: function(a) {
            return true;
        },
        hasAchievement: function(a) {
            return this.map.exists(a);
        },
        gainAchievement: function(a) {
            if (!this.isAchievement(a) || this.map.exists(a)) return false;
            else {
                this.map.set(a, true);
                this.postAchievement(a);
                return true;
            }
        },
        postAchievement: function(a) {
            var b = new haxe_io_BytesOutput();
            this.write(b);
            b.flush();
            b.close();
            Reflect.setField(this.settings.data, "achievements", b.getBytes());
            this.settings.flush();
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("gain_achievement", a));
        },
        write: function(b) {
            var $it0 = this.map.keys();
            while ($it0.hasNext()) {
                var i = $it0.next();
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, i);
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
        },
        read: function(b) {
            while (true) {
                var a = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
                if (a == null) break;
                this.map.set(a, true);
            }
        },
        iterator: function() {
            return this.map.keys();
        },
        __class__: com_davidmaletz_faengfl_achievement_Achievements
    });
    var com_davidmaletz_faengfl_achievement_NGAchievements = function(settings, app_id, aes_key) {
        this.scoreboards = null;
        this.medals = null;
        com_davidmaletz_faengfl_achievement_Achievements.call(this, settings);
        this.ngio = new Newgrounds.io.core(app_id, aes_key);
        this.ngio.getValidSession(function() {});
        this.ngio.queueComponent("Medal.getList", {},
        $bind(this, this.onMedalsLoaded));
        this.ngio.queueComponent("ScoreBoard.getBoards", {},
        $bind(this, this.onScoreboardsLoaded));
        this.ngio.executeQueue();
    };
    $hxClasses["com.davidmaletz.faengfl.achievement.NGAchievements"] = com_davidmaletz_faengfl_achievement_NGAchievements;
    com_davidmaletz_faengfl_achievement_NGAchievements.__name__ = ["com", "davidmaletz", "faengfl", "achievement", "NGAchievements"];
    com_davidmaletz_faengfl_achievement_NGAchievements.__super__ = com_davidmaletz_faengfl_achievement_Achievements;
    com_davidmaletz_faengfl_achievement_NGAchievements.prototype = $extend(com_davidmaletz_faengfl_achievement_Achievements.prototype, {
        onMedalsLoaded: function(result) {
            if (result.success) {
                this.medals = result.medals;
                var $it0 = this.map.keys();
                while ($it0.hasNext()) {
                    var a = $it0.next();
                    this.processMedal(a, false);
                }
            }
        },
        onScoreboardsLoaded: function(result) {
            if (result.success) this.scoreboards = result.scoreboards;
        },
        postAchievement: function(a) {
            com_davidmaletz_faengfl_achievement_Achievements.prototype.postAchievement.call(this, a);
            if (this.medals != null) this.processMedal(a, true);
        },
        isMedal: function(medal, a) {
            return medal.name == a;
        },
        loadIcon: function(medal, onload) {},
        processMedal: function(a, show) {
            var len = this.medals.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var medal = this.medals[i];
                if (this.isMedal(medal, a)) {
                    if (this.ngio.user && !medal.unlocked) this.ngio.callComponent("Medal.unlock", {
                        id: medal.id
                    },
                    function(result) {});
                    if (show) this.loadIcon(a, (function(f, a1, a2) {
                        return function(a3) {
                            f(a1, a2, a3);
                        };
                    })($bind(this, this.showAchievement), medal.name, medal.description));
                    break;
                }
            }
        },
        showAchievement: function(name, desc, icon) {},
        submitScore: function(board, score) {
            if (!this.ngio.user) return;
            var len = this.scoreboards.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var scoreboard = this.scoreboards[i];
                if (scoreboard.name == board) {
                    this.ngio.callComponent("ScoreBoard.postScore", {
                        id: scoreboard.id,
                        value: score
                    });
                    break;
                }
            }
        },
        __class__: com_davidmaletz_faengfl_achievement_NGAchievements
    });
    var com_davidmaletz_faengfl_controls_Key = function() {};
    $hxClasses["com.davidmaletz.faengfl.controls.Key"] = com_davidmaletz_faengfl_controls_Key;
    com_davidmaletz_faengfl_controls_Key.__name__ = ["com", "davidmaletz", "faengfl", "controls", "Key"];
    com_davidmaletz_faengfl_controls_Key.prototype = {
        __class__: com_davidmaletz_faengfl_controls_Key
    };
    var com_davidmaletz_faengfl_controls_AbstractKey = function() {};
    $hxClasses["com.davidmaletz.faengfl.controls.AbstractKey"] = com_davidmaletz_faengfl_controls_AbstractKey;
    com_davidmaletz_faengfl_controls_AbstractKey.__name__ = ["com", "davidmaletz", "faengfl", "controls", "AbstractKey"];
    com_davidmaletz_faengfl_controls_AbstractKey.__interfaces__ = [com_davidmaletz_faengfl_controls_Key];
    com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap = null;
    com_davidmaletz_faengfl_controls_AbstractKey.drawKey = function(l, x, y, key_x, key_y, flip, rot) {
        if (rot == null) rot = 0;
        if (flip == null) flip = false;
        var tx;
        if (flip) tx = -1;
        else tx = 1;
        var ty = 1;
        var a;
        var b;
        var c;
        var d;
        if (rot == 0) {
            a = tx;
            b = 0;
            c = 0;
            d = ty;
        } else {
            var cos = Math.cos(rot);
            var sin = Math.sin(rot);
            a = cos * tx;
            b = -sin * tx;
            c = sin * ty;
            d = cos * ty;
        }
        l.addTile(com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap, x, y, com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.getIdx(key_x, key_y), 1, a, b, c, d);
    };
    com_davidmaletz_faengfl_controls_AbstractKey.createSprite = function(key, x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        var l = new com_davidmaletz_faengfl_TileLayer();
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
        l.get_graphics().clear();
        l.handler.start(l.get_graphics(), 16);
        key.draw(l, x, y);
        l.handler.finish();
        return l;
    };
    com_davidmaletz_faengfl_controls_AbstractKey.createKey = function(x, y, key_x, key_y, flip, rot) {
        if (rot == null) rot = 0;
        if (flip == null) flip = false;
        var l = new com_davidmaletz_faengfl_TileLayer();
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
        l.get_graphics().clear();
        l.handler.start(l.get_graphics(), 16);
        com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, key_x, key_y, flip, rot);
        l.handler.finish();
        return l;
    };
    com_davidmaletz_faengfl_controls_AbstractKey.prototype = {
        getKeyX: function() {
            return 0;
        },
        getKeyY: function() {
            return 0;
        },
        getKeyW: function() {
            return com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth;
        },
        getKeyH: function() {
            return com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight;
        },
        draw: function(l, x, y) {
            com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, this.getKeyX(), this.getKeyY());
        },
        getBounds: function() {
            return new openfl_geom_Rectangle(0, 0, com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth, com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight);
        },
        dispose: function() {},
        save: function(b) {},
        load: function(b) {},
        hashCode: function() {
            return 0;
        },
        equals: function(h) {
            return false;
        },
        __class__: com_davidmaletz_faengfl_controls_AbstractKey
    };
    var com_davidmaletz_faengfl_controls_AxisKey = function(a, positive) {
        com_davidmaletz_faengfl_controls_AbstractKey.call(this);
        this.setAxis(a, positive);
    };
    $hxClasses["com.davidmaletz.faengfl.controls.AxisKey"] = com_davidmaletz_faengfl_controls_AxisKey;
    com_davidmaletz_faengfl_controls_AxisKey.__name__ = ["com", "davidmaletz", "faengfl", "controls", "AxisKey"];
    com_davidmaletz_faengfl_controls_AxisKey.__super__ = com_davidmaletz_faengfl_controls_AbstractKey;
    com_davidmaletz_faengfl_controls_AxisKey.prototype = $extend(com_davidmaletz_faengfl_controls_AbstractKey.prototype, {
        setAxis: function(a, positive) {
            this.axis = a;
            this.dir = 0;
            this.key_x = 3;
            this.key_y = 0;
            switch (a) {
            case 0:
                this.key_x = 3;
                this.key_y = 2;
                if (positive) this.dir = 1;
                else this.dir = -1;
                break;
            case 1:
                this.key_x = 3;
                this.key_y = 2;
                if (positive) this.dir = 2;
                else this.dir = -2;
                break;
            case 2:
                this.key_x = 4;
                this.key_y = 2;
                if (positive) this.dir = 1;
                else this.dir = -1;
                break;
            case 3:
                this.key_x = 4;
                this.key_y = 2;
                if (positive) this.dir = 2;
                else this.dir = -2;
                break;
            case 4:
                this.key_x = 2;
                this.key_y = 3;
                break;
            case 5:
                this.key_x = 3;
                this.key_y = 3;
                break;
            }
        },
        draw: function(l, x, y) {
            com_davidmaletz_faengfl_controls_AbstractKey.prototype.draw.call(this, l, x, y);
            var u = 2;
            var v = 4;
            var _g = this.dir;
            switch (_g) {
            case 1:
                com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v);
                break;
            case - 1 : com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, Math.PI);
                break;
            case 2:
                com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, -0.5 * Math.PI);
                break;
            case - 2 : com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, 0.5 * Math.PI);
                break;
            }
        },
        getKeyX: function() {
            return this.key_x;
        },
        getKeyY: function() {
            return this.key_y;
        },
        save: function(b) {
            b.writeByte(this.axis << 1 | (this.dir >= 0 ? 1 : 0));
        },
        load: function(b) {
            var v = b.readByte();
            this.setAxis(v >> 1, (v & 1) != 0);
        },
        hashCode: function() {
            return this.axis + 100;
        },
        equals: function(h) {
            if (js_Boot.__instanceof(h, com_davidmaletz_faengfl_controls_AxisKey)) {
                var a;
                a = js_Boot.__cast(h, com_davidmaletz_faengfl_controls_AxisKey);
                return a.axis == this.axis && a.dir == this.dir;
            } else return false;
        },
        __class__: com_davidmaletz_faengfl_controls_AxisKey
    });
    var com_davidmaletz_faengfl_controls_ControlHandler = function(settings, listener, keyCount) {
        this.keyHandler = null;
        this.canChangeDevice = true;
        this.axis_dx = [];
        openfl_events_EventDispatcher.call(this);
        this.keys = [];
        var _g = 0;
        while (_g < keyCount) {
            var i = _g++;
            this.keys.push(false);
        }
        this.settings = settings;
        this.listener = listener;
        this.controls = [];
        var _g1 = 0;
        while (_g1 < 2) {
            var i1 = _g1++;
            this.controls.push(new com_davidmaletz_faengfl_controls_ControlSettings());
        }
        if (Object.prototype.hasOwnProperty.call(settings.data, "controls")) try {
            var b = new haxe_io_BytesInput(Reflect.field(settings.data, "controls"));
            var _g2 = 0;
            while (_g2 < 2) {
                var i2 = _g2++;
                this.controls[i2].load(b);
                listener.validateControls(i2, this.controls[i2]);
            }
            b.close();
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            listener.defaultKeyboard(this.controls[0]);
            listener.defaultGamepad(this.controls[1]);
        } else {
            listener.defaultKeyboard(this.controls[0]);
            listener.defaultGamepad(this.controls[1]);
        }
        this.device = 0;
    };
    $hxClasses["com.davidmaletz.faengfl.controls.ControlHandler"] = com_davidmaletz_faengfl_controls_ControlHandler;
    com_davidmaletz_faengfl_controls_ControlHandler.__name__ = ["com", "davidmaletz", "faengfl", "controls", "ControlHandler"];
    com_davidmaletz_faengfl_controls_ControlHandler.getDeviceNames = function() {
        return [com_fancyfish_faeng_common_Lang.getText("options", "keyboard"), com_fancyfish_faeng_common_Lang.getText("options", "controller")];
    };
    com_davidmaletz_faengfl_controls_ControlHandler.getDeviceIds = function() {
        return [0, 1];
    };
    com_davidmaletz_faengfl_controls_ControlHandler.keyboardKey = function(key) {
        return new com_davidmaletz_faengfl_controls_KeyboardKey(key);
    };
    com_davidmaletz_faengfl_controls_ControlHandler.mouseKey = function(button) {
        return new com_davidmaletz_faengfl_controls_MouseKey(button, false);
    };
    com_davidmaletz_faengfl_controls_ControlHandler.controllerButtonKey = function(button) {
        return new com_davidmaletz_faengfl_controls_ControllerKey(button);
    };
    com_davidmaletz_faengfl_controls_ControlHandler.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_faengfl_controls_ControlHandler.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        save: function() {
            var b = new haxe_io_BytesOutput();
            var _g = 0;
            while (_g < 2) {
                var i = _g++;
                this.controls[i].save(b);
            }
            b.flush();
            b.close();
            Reflect.setField(this.settings.data, "controls", b.getBytes());
            this.settings.flush();
        },
        isPressed: function(key) {
            return this.keys[key] || this.keys[key + 1];
        },
        onKeyDown: function(key) {
            if (this.setDevice(0, true)) this.handleDown(new com_davidmaletz_faengfl_controls_KeyboardKey(key));
        },
        onKeyUp: function(key) {
            if (this.setDevice(0)) this.handleUp(new com_davidmaletz_faengfl_controls_KeyboardKey(key));
        },
        onMouseDown: function(button) {
            if (this.setDevice(0, true)) this.handleDown(new com_davidmaletz_faengfl_controls_MouseKey(button, false));
        },
        onMouseUp: function(button) {
            if (this.setDevice(0)) this.handleUp(new com_davidmaletz_faengfl_controls_MouseKey(button, false));
        },
        onGamepadDown: function(dev, button) {
            if (this.setDevice(1, true, dev)) this.handleDown(new com_davidmaletz_faengfl_controls_ControllerKey(button));
        },
        onGamepadUp: function(dev, button) {
            if (this.setDevice(1, false, dev)) this.handleUp(new com_davidmaletz_faengfl_controls_ControllerKey(button));
        },
        onGamepadAxis: function(dev, axis, value) {
            if (!this.setDevice(1, true, dev)) return;
            var dx = Math.floor(value + 0.5);
            var i = dev << 4 | axis & 15;
            if (i >= this.axis_dx.length) {
                var len = i - this.axis_dx.length + 1;
                var _g = 0;
                while (_g < len) {
                    var j = _g++;
                    this.axis_dx.push(0);
                }
            }
            var old = this.axis_dx[i];
            if (dx == old) return;
            this.axis_dx[i] = dx;
            if (old < 0) this.handleUp(new com_davidmaletz_faengfl_controls_AxisKey(axis, false));
            else if (old > 0) this.handleUp(new com_davidmaletz_faengfl_controls_AxisKey(axis, true));
            if (dx < 0) this.handleDown(new com_davidmaletz_faengfl_controls_AxisKey(axis, false));
            else if (dx > 0) this.handleDown(new com_davidmaletz_faengfl_controls_AxisKey(axis, true));
        },
        setDevice: function(dev, down, controller) {
            if (controller == null) controller = -1;
            if (down == null) down = false;
            if (this.device != dev) {
                if (!this.canChangeDevice) {
                    if (this.keyHandler != null && this.keyHandler(null, down)) this.keyHandler = null;
                    else if (!down) this.listener.release("back", -1);
                    return false;
                }
                this.device = dev;
                var len = this.keys.length;
                var _g = 0;
                while (_g < len) {
                    var i = _g++;
                    this.keys[i] = false;
                }
                this.dispatchEvent(new openfl_events_Event("controls_changed"));
            }
            this.controllerId = controller;
            return true;
        },
        getControllerID: function() {
            return this.controllerId;
        },
        handleDown: function(key) {
            if (this.keyHandler != null) {
                if (this.keyHandler(key, true)) this.keyHandler = null;
                return;
            }
            var v = this.controls[this.device].key_map.get(key);
            var code = this.listener.getKeyCode(v);
            if (code != -1) this.keys[code] = true;
            this.listener.press(v, code);
        },
        handleUp: function(key) {
            if (this.keyHandler != null) {
                if (this.keyHandler(key, false)) this.keyHandler = null;
                return;
            }
            var v = this.controls[this.device].key_map.get(key);
            var code = this.listener.getKeyCode(v);
            if (code != -1) this.keys[code] = false;
            this.listener.release(v, code);
        },
        isKeyboard: function() {
            return this.device == 0;
        },
        getCurrentDevice: function() {
            return this.device;
        },
        setCurrentDevice: function(dev) {
            this.device = dev;
        },
        getControls: function(device) {
            return new com_davidmaletz_faengfl_controls_ControlSettings(this.controls[device].key_map);
        },
        copyControls: function(device, controls) {
            controls.key_map = this.controls[device].key_map.clone();
        },
        setControls: function(device, controls) {
            var old = this.device;
            this.listener.validateControls(device, controls);
            this.device = -2;
            this.controls[device] = controls;
            this.save();
            this.setDevice(old, false, this.controllerId);
        },
        getSettings: function(device) {
            return this.controls[device];
        },
        getKey: function(str) {
            return this.controls[this.device].key_map.getKey(str);
        },
        getValue: function(key) {
            return this.controls[this.device].key_map.get(key);
        },
        __class__: com_davidmaletz_faengfl_controls_ControlHandler
    });
    var com_davidmaletz_faengfl_controls_ControlSettings = function(initial) {
        if (initial == null) this.key_map = new com_fancyfish_faeng_common_HashMap();
        else this.key_map = initial.clone();
    };
    $hxClasses["com.davidmaletz.faengfl.controls.ControlSettings"] = com_davidmaletz_faengfl_controls_ControlSettings;
    com_davidmaletz_faengfl_controls_ControlSettings.__name__ = ["com", "davidmaletz", "faengfl", "controls", "ControlSettings"];
    com_davidmaletz_faengfl_controls_ControlSettings.prototype = {
        setKey: function(k, key) {
            var old = this.key_map.getKey(k);
            if (old != null) this.key_map.remove(old);
            this.key_map.set(key, k);
        },
        getKey: function(key) {
            return this.key_map.getKey(key);
        },
        getValue: function(key) {
            return this.key_map.get(key);
        },
        clone: function() {
            return new com_davidmaletz_faengfl_controls_ControlSettings(this.key_map);
        },
        set: function(c) {
            this.key_map = c.key_map.clone();
        },
        save: function(b) {
            var $it0 = this.key_map.iterator();
            while ($it0.hasNext()) {
                var e = $it0.next();
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, e.value);
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, Type.getClassName(Type.getClass(e.key)));
                e.key.save(b);
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, "");
        },
        load: function(b) {
            var first = true;
            while (true) {
                var k = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
                if (k.length == 0) {
                    if (first) throw new js__$Boot_HaxeError("Empty settings!");
                    break;
                }
                first = false;
                var key = Type.createEmptyInstance(Type.resolveClass(com_davidmaletz_faengfl_UTFUtils.readUTF(b)));
                key.load(b);
                this.key_map.set(key, k);
            }
        },
        __class__: com_davidmaletz_faengfl_controls_ControlSettings
    };
    var com_davidmaletz_faengfl_controls_ControllerKey = function(b) {
        com_davidmaletz_faengfl_controls_AbstractKey.call(this);
        this.setKey(b);
    };
    $hxClasses["com.davidmaletz.faengfl.controls.ControllerKey"] = com_davidmaletz_faengfl_controls_ControllerKey;
    com_davidmaletz_faengfl_controls_ControllerKey.__name__ = ["com", "davidmaletz", "faengfl", "controls", "ControllerKey"];
    com_davidmaletz_faengfl_controls_ControllerKey.__super__ = com_davidmaletz_faengfl_controls_AbstractKey;
    com_davidmaletz_faengfl_controls_ControllerKey.prototype = $extend(com_davidmaletz_faengfl_controls_AbstractKey.prototype, {
        setKey: function(b) {
            this.key = b;
            this.key_x = 3;
            this.key_y = 0;
            switch (b) {
            case 0:
                this.key_x = 0;
                this.key_y = 1;
                break;
            case 1:
                this.key_x = 1;
                this.key_y = 1;
                break;
            case 2:
                this.key_x = 2;
                this.key_y = 1;
                break;
            case 3:
                this.key_x = 3;
                this.key_y = 1;
                break;
            case 12:
                this.key_x = 4;
                this.key_y = 1;
                break;
            case 13:
                this.key_x = 0;
                this.key_y = 2;
                break;
            case 14:
                this.key_x = 1;
                this.key_y = 2;
                break;
            case 11:
                this.key_x = 2;
                this.key_y = 2;
                break;
            case 7:
                this.key_x = 3;
                this.key_y = 2;
                break;
            case 8:
                this.key_x = 4;
                this.key_y = 2;
                break;
            case 9:
                this.key_x = 0;
                this.key_y = 3;
                break;
            case 10:
                this.key_x = 1;
                this.key_y = 3;
                break;
            case 4:
                this.key_x = 4;
                this.key_y = 3;
                break;
            case 5:
                this.key_x = 0;
                this.key_y = 4;
                break;
            case 6:
                this.key_x = 1;
                this.key_y = 4;
                break;
            }
        },
        getKeyX: function() {
            return this.key_x;
        },
        getKeyY: function() {
            return this.key_y;
        },
        save: function(b) {
            b.writeByte(this.key);
        },
        load: function(b) {
            this.setKey(b.readByte());
        },
        hashCode: function() {
            return this.key;
        },
        equals: function(h) {
            return js_Boot.__instanceof(h, com_davidmaletz_faengfl_controls_ControllerKey) && (js_Boot.__cast(h, com_davidmaletz_faengfl_controls_ControllerKey)).key == this.key;
        },
        __class__: com_davidmaletz_faengfl_controls_ControllerKey
    });
    var com_davidmaletz_faengfl_controls_Gamepad = function() {
        this.rightY = 0.0;
        this.rightX = 0.0;
        this.leftY = 0.0;
        this.leftX = 0.0;
        openfl_events_EventDispatcher.call(this);
        com_davidmaletz_faengfl_controls_Gamepad.instance = this;
        lime_ui_Gamepad.onConnect.add($bind(this, this.onGamepadConnect));
        var $it0 = lime_ui_Gamepad.devices.iterator();
        while ($it0.hasNext()) {
            var g = $it0.next();
            this.onGamepadConnect(g);
        }
    };
    $hxClasses["com.davidmaletz.faengfl.controls.Gamepad"] = com_davidmaletz_faengfl_controls_Gamepad;
    com_davidmaletz_faengfl_controls_Gamepad.__name__ = ["com", "davidmaletz", "faengfl", "controls", "Gamepad"];
    com_davidmaletz_faengfl_controls_Gamepad.instance = null;
    com_davidmaletz_faengfl_controls_Gamepad.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_faengfl_controls_Gamepad.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        onButtonDown: function(g, button) {
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerButtonEvent("button_down", g.id, button));
        },
        onButtonUp: function(g, button) {
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerButtonEvent("button_up", g.id, button));
        },
        onAxisMove: function(g, axis, value) {
            if (this.last != g) {
                this.last = g;
                this.leftX = 0;
                this.leftY = 0;
                this.rightX = 0;
                this.rightY = 0;
            }
            if (value > 1) value = 1;
            var a = value;
            var b;
            var ax;
            switch (axis) {
            case 0:
                b = this.leftY;
                this.leftX = value;
                ax = 0;
                break;
            case 1:
                a = this.leftX;
                b = value;
                this.leftY = value;
                ax = 0;
                break;
            case 2:
                b = this.rightY;
                this.rightX = value;
                ax = 1;
                break;
            case 3:
                a = this.rightX;
                b = value;
                this.rightY = value;
                ax = 1;
                break;
            default:
                if (axis == 4) ax = 2;
                else ax = 3;
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerAxisEvent("axis_move", g.id, ax, value < com_davidmaletz_faengfl_controls_Gamepad.DEADZONE ? 0.0 : (value - com_davidmaletz_faengfl_controls_Gamepad.DEADZONE) / (1.0 - com_davidmaletz_faengfl_controls_Gamepad.DEADZONE), NaN));
                return;
            }
            var len = Math.sqrt(a * a + b * b);
            var scale;
            if (len < com_davidmaletz_faengfl_controls_Gamepad.DEADZONE) scale = 0;
            else scale = (len - com_davidmaletz_faengfl_controls_Gamepad.DEADZONE) / (1.0 - com_davidmaletz_faengfl_controls_Gamepad.DEADZONE) / len;
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ControllerAxisEvent("axis_move", g.id, ax, a * scale, b * scale));
        },
        onGamepadConnect: function(g) {
            g.onButtonDown.add((function(f, g1) {
                return function(a1) {
                    f(g1, a1);
                };
            })($bind(this, this.onButtonDown), g));
            g.onButtonUp.add((function(f1, g2) {
                return function(a11) {
                    f1(g2, a11);
                };
            })($bind(this, this.onButtonUp), g));
            g.onAxisMove.add((function(f2, g3) {
                return function(a12, a2) {
                    f2(g3, a12, a2);
                };
            })($bind(this, this.onAxisMove), g));
        },
        __class__: com_davidmaletz_faengfl_controls_Gamepad
    });
    var com_davidmaletz_faengfl_controls_KeyboardKey = function(key) {
        com_davidmaletz_faengfl_controls_AbstractKey.call(this);
        if (key > 0) this.setKey(key);
        else {
            this.key = -1;
            this.mutable = null;
        }
    };
    $hxClasses["com.davidmaletz.faengfl.controls.KeyboardKey"] = com_davidmaletz_faengfl_controls_KeyboardKey;
    com_davidmaletz_faengfl_controls_KeyboardKey.__name__ = ["com", "davidmaletz", "faengfl", "controls", "KeyboardKey"];
    com_davidmaletz_faengfl_controls_KeyboardKey.drawText = function(s, str, x, y, col) {
        if (col == null) col = 13487565;
        if (str == null) return;
        var w = com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth;
        var h = com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight;
        var text = new com_davidmaletz_faengfl_TextSprite(str, new com_fancyfish_faeng_text_CharacterPlacer(w, 1), col, 1);
        text.draw();
        var dy = (h - text.bounds.height * text.get_scaleY()) * 0.5 - 1;
        text.set_x(Math.round(x - w * 0.5));
        text.set_y(Math.round(y + dy - h * 0.5));
        s.addChild(text);
    };
    com_davidmaletz_faengfl_controls_KeyboardKey.getKeyName = function(key) {
        switch (key) {
        case 65:
            return "KEY_A";
        case 66:
            return "KEY_B";
        case 67:
            return "KEY_C";
        case 68:
            return "KEY_D";
        case 69:
            return "KEY_E";
        case 70:
            return "KEY_F";
        case 71:
            return "KEY_G";
        case 72:
            return "KEY_H";
        case 73:
            return "KEY_I";
        case 74:
            return "KEY_J";
        case 75:
            return "KEY_K";
        case 76:
            return "KEY_L";
        case 77:
            return "KEY_M";
        case 78:
            return "KEY_N";
        case 79:
            return "KEY_O";
        case 80:
            return "KEY_P";
        case 81:
            return "KEY_Q";
        case 82:
            return "KEY_R";
        case 83:
            return "KEY_S";
        case 84:
            return "KEY_T";
        case 85:
            return "KEY_U";
        case 86:
            return "KEY_V";
        case 87:
            return "KEY_W";
        case 88:
            return "KEY_X";
        case 89:
            return "KEY_Y";
        case 90:
            return "KEY_Z";
        case 49:
            return "KEY_1";
        case 50:
            return "KEY_2";
        case 51:
            return "KEY_3";
        case 52:
            return "KEY_4";
        case 53:
            return "KEY_5";
        case 54:
            return "KEY_6";
        case 55:
            return "KEY_7";
        case 56:
            return "KEY_8";
        case 57:
            return "KEY_9";
        case 48:
            return "KEY_0";
        case 13:
            return "ENTER";
        case 27:
            return "ESCAPE";
        case 8:
            return "BACKSPACE";
        case 9:
            return "TAB";
        case 32:
            return "SPACE";
        case 189:
            return "MINUS";
        case 187:
            return "EQUALS";
        case 219:
            return "LEFT_BRACKET";
        case 221:
            return "RIGHT_BRACKET";
        case 220:
            return "BACKSLASH";
        case 186:
            return "SEMICOLON";
        case 222:
            return "QUOTE";
        case 192:
            return "BACK_QUOTE";
        case 188:
            return "COMMA";
        case 190:
            return "PERIOD";
        case 191:
            return "SLASH";
        case 20:
            return "CAPS_LOCK";
        case 112:
            return "F1";
        case 113:
            return "F2";
        case 114:
            return "F3";
        case 115:
            return "F4";
        case 116:
            return "F5";
        case 117:
            return "F6";
        case 118:
            return "F7";
        case 119:
            return "F8";
        case 120:
            return "F9";
        case 121:
            return "F10";
        case 122:
            return "F11";
        case 123:
            return "F12";
        case 45:
            return "INSERT";
        case 36:
            return "HOME";
        case 33:
            return "PAGE_UP";
        case 46:
            return "DELETE";
        case 35:
            return "END";
        case 34:
            return "PAGE_DOWN";
        case 39:
            return "RIGHT";
        case 37:
            return "LEFT";
        case 40:
            return "DOWN";
        case 38:
            return "UP";
        case 144:
            return "NUM_LOCK";
        case 97:
            return "NUMPAD_1";
        case 98:
            return "NUMPAD_2";
        case 99:
            return "NUMPAD_3";
        case 100:
            return "NUMPAD_4";
        case 101:
            return "NUMPAD_5";
        case 102:
            return "NUMPAD_6";
        case 103:
            return "NUMPAD_7";
        case 104:
            return "NUMPAD_8";
        case 105:
            return "NUMPAD_9";
        case 96:
            return "NUMPAD_0";
        case 17:
            return "LCTRL";
        case 16:
            return "LSHIFT";
        case 18:
            return "LALT";
        default:
            return StringTools.hex(key, 2);
        }
    };
    com_davidmaletz_faengfl_controls_KeyboardKey.__super__ = com_davidmaletz_faengfl_controls_AbstractKey;
    com_davidmaletz_faengfl_controls_KeyboardKey.prototype = $extend(com_davidmaletz_faengfl_controls_AbstractKey.prototype, {
        setKey: function(key) {
            this.key = key;
            this.mutable = com_fancyfish_faeng_common_Lang.getKeyByName(com_davidmaletz_faengfl_controls_KeyboardKey.getKeyName(key));
        },
        getKeyX: function() {
            if (this.mutable == null) return 0;
            else return this.mutable.get().type + 1;
        },
        getKeyY: function() {
            return 0;
        },
        draw: function(l, x, y) {
            if (this.mutable == null) {
                com_davidmaletz_faengfl_controls_KeyboardKey.drawText(l, this.mutable.getText(), x, y);
                return;
            }
            var k = this.mutable.get();
            if (k.type >= 0) com_davidmaletz_faengfl_controls_AbstractKey.prototype.draw.call(this, l, x, y);
            com_davidmaletz_faengfl_controls_KeyboardKey.drawText(l, this.mutable.getText(), x, y);
            if (k.icon != null) {
                var u = 3;
                var v = 4;
                var _g = k.icon;
                switch (_g) {
                case "right_arrow":
                    com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, -0.5 * Math.PI);
                    break;
                case "left_arrow":
                    com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, 0.5 * Math.PI);
                    break;
                case "up_arrow":
                    com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v);
                    break;
                case "down_arrow":
                    com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, u, v, false, Math.PI);
                    break;
                }
            }
        },
        dispose: function() {},
        save: function(b) {
            b.writeInt16(this.key);
        },
        load: function(b) {
            this.setKey(b.readInt16());
        },
        hashCode: function() {
            return this.key;
        },
        equals: function(h) {
            return js_Boot.__instanceof(h, com_davidmaletz_faengfl_controls_KeyboardKey) && (js_Boot.__cast(h, com_davidmaletz_faengfl_controls_KeyboardKey)).key == this.key;
        },
        __class__: com_davidmaletz_faengfl_controls_KeyboardKey
    });
    var com_davidmaletz_faengfl_controls_MouseKey = function(b, flash) {
        com_davidmaletz_faengfl_controls_AbstractKey.call(this);
        this.button = b;
        if (flash) this.flash_ct = 0;
        else this.flash_ct = -1;
    };
    $hxClasses["com.davidmaletz.faengfl.controls.MouseKey"] = com_davidmaletz_faengfl_controls_MouseKey;
    com_davidmaletz_faengfl_controls_MouseKey.__name__ = ["com", "davidmaletz", "faengfl", "controls", "MouseKey"];
    com_davidmaletz_faengfl_controls_MouseKey.__super__ = com_davidmaletz_faengfl_controls_AbstractKey;
    com_davidmaletz_faengfl_controls_MouseKey.prototype = $extend(com_davidmaletz_faengfl_controls_AbstractKey.prototype, {
        getKeyX: function() {
            return 0;
        },
        getKeyY: function() {
            return 0;
        },
        drawButton: function(l, x, y) {
            com_davidmaletz_faengfl_controls_AbstractKey.drawKey(l, x, y, 4, this.button == 1 ? 4 : 0, this.button == 2);
        },
        draw: function(l, x, y) {
            com_davidmaletz_faengfl_controls_AbstractKey.prototype.draw.call(this, l, x, y);
            if (this.flash_ct >= 0) {
                this.flash_ct++;
                if (this.flash_ct <= 30) this.drawButton(l, x, y);
                else if (this.flash_ct >= 60) this.flash_ct = 0;
            } else this.drawButton(l, x, y);
        },
        save: function(b) {
            b.writeByte(this.button);
        },
        load: function(b) {
            this.button = b.readByte();
            this.flash_ct = -1;
        },
        hashCode: function() {
            return this.button;
        },
        equals: function(h) {
            return js_Boot.__instanceof(h, com_davidmaletz_faengfl_controls_MouseKey) && (js_Boot.__cast(h, com_davidmaletz_faengfl_controls_MouseKey)).button == this.button;
        },
        __class__: com_davidmaletz_faengfl_controls_MouseKey
    });
    var com_davidmaletz_faengfl_events_ControllerAxisEvent = function(type, id, a, x, y) {
        openfl_events_Event.call(this, type);
        this.id = id;
        this.axis = a;
        this.x = x;
        this.y = y;
    };
    $hxClasses["com.davidmaletz.faengfl.events.ControllerAxisEvent"] = com_davidmaletz_faengfl_events_ControllerAxisEvent;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.__name__ = ["com", "davidmaletz", "faengfl", "events", "ControllerAxisEvent"];
    com_davidmaletz_faengfl_events_ControllerAxisEvent.__super__ = openfl_events_Event;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_faengfl_events_ControllerAxisEvent
    });
    var com_davidmaletz_faengfl_events_ControllerButtonEvent = function(type, id, b) {
        openfl_events_Event.call(this, type);
        this.id = id;
        this.button = b;
    };
    $hxClasses["com.davidmaletz.faengfl.events.ControllerButtonEvent"] = com_davidmaletz_faengfl_events_ControllerButtonEvent;
    com_davidmaletz_faengfl_events_ControllerButtonEvent.__name__ = ["com", "davidmaletz", "faengfl", "events", "ControllerButtonEvent"];
    com_davidmaletz_faengfl_events_ControllerButtonEvent.__super__ = openfl_events_Event;
    com_davidmaletz_faengfl_events_ControllerButtonEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_faengfl_events_ControllerButtonEvent
    });
    var com_davidmaletz_faengfl_events_IntEvent = function(type, v) {
        openfl_events_Event.call(this, type);
        this.value = v;
    };
    $hxClasses["com.davidmaletz.faengfl.events.IntEvent"] = com_davidmaletz_faengfl_events_IntEvent;
    com_davidmaletz_faengfl_events_IntEvent.__name__ = ["com", "davidmaletz", "faengfl", "events", "IntEvent"];
    com_davidmaletz_faengfl_events_IntEvent.__super__ = openfl_events_Event;
    com_davidmaletz_faengfl_events_IntEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_faengfl_events_IntEvent
    });
    var com_davidmaletz_faengfl_events_ObjectEvent = function(type, v) {
        openfl_events_Event.call(this, type);
        this.value = v;
    };
    $hxClasses["com.davidmaletz.faengfl.events.ObjectEvent"] = com_davidmaletz_faengfl_events_ObjectEvent;
    com_davidmaletz_faengfl_events_ObjectEvent.__name__ = ["com", "davidmaletz", "faengfl", "events", "ObjectEvent"];
    com_davidmaletz_faengfl_events_ObjectEvent.__super__ = openfl_events_Event;
    com_davidmaletz_faengfl_events_ObjectEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_faengfl_events_ObjectEvent
    });
    var com_davidmaletz_faengfl_events_TEvent = function(type, id, x, y, m) {
        openfl_events_Event.call(this, type);
        this.id = id;
        this.stageX = x;
        this.stageY = y;
        this.modifiers = m;
    };
    $hxClasses["com.davidmaletz.faengfl.events.TEvent"] = com_davidmaletz_faengfl_events_TEvent;
    com_davidmaletz_faengfl_events_TEvent.__name__ = ["com", "davidmaletz", "faengfl", "events", "TEvent"];
    com_davidmaletz_faengfl_events_TEvent.__super__ = openfl_events_Event;
    com_davidmaletz_faengfl_events_TEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_faengfl_events_TEvent
    });
    var com_davidmaletz_lerp_Keyframe = function() {};
    $hxClasses["com.davidmaletz.lerp.Keyframe"] = com_davidmaletz_lerp_Keyframe;
    com_davidmaletz_lerp_Keyframe.__name__ = ["com", "davidmaletz", "lerp", "Keyframe"];
    com_davidmaletz_lerp_Keyframe.prototype = {
        __class__: com_davidmaletz_lerp_Keyframe
    };
    var com_davidmaletz_lerp_AlphaKeyframe = function(a) {
        if (a == null) a = 1;
        this.alpha = a;
    };
    $hxClasses["com.davidmaletz.lerp.AlphaKeyframe"] = com_davidmaletz_lerp_AlphaKeyframe;
    com_davidmaletz_lerp_AlphaKeyframe.__name__ = ["com", "davidmaletz", "lerp", "AlphaKeyframe"];
    com_davidmaletz_lerp_AlphaKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_AlphaKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_AlphaKeyframe);
            this.alpha = k.alpha;
        },
        setFromObject: function(d) {
            var a;
            a = js_Boot.__cast(d, openfl_display_Sprite);
            this.alpha = a.get_alpha();
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_AlphaKeyframe(this.alpha);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_AlphaKeyframe);
            return new com_davidmaletz_lerp_AlphaKeyframe(track.interp(this.alpha, k.alpha, f));
        },
        apply: function(d) {
            var a;
            a = js_Boot.__cast(d, openfl_display_Sprite);
            a.set_alpha(this.alpha);
        },
        save: function(xml) {
            if (this.alpha != 1) xml.set("alpha", Std.string(this.alpha));
        },
        load: function(xml) {
            if (xml.exists("alpha")) this.alpha = Std.parseFloat(xml.get("alpha"));
        },
        toString: function() {
            return "ALPHA " + this.frame + " " + this.alpha;
        },
        __class__: com_davidmaletz_lerp_AlphaKeyframe
    };
    var com_davidmaletz_lerp_BounceKeyframe = function(_y, dy, ct) {
        if (ct == null) ct = 0;
        if (dy == null) dy = 0;
        if (_y == null) _y = 0;
        this.y = _y;
        this.dy = dy;
        this.bounceCt = ct;
    };
    $hxClasses["com.davidmaletz.lerp.BounceKeyframe"] = com_davidmaletz_lerp_BounceKeyframe;
    com_davidmaletz_lerp_BounceKeyframe.__name__ = ["com", "davidmaletz", "lerp", "BounceKeyframe"];
    com_davidmaletz_lerp_BounceKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_BounceKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_BounceKeyframe);
            this.y = k.y;
            this.dy = k.dy;
            this.bounceCt = k.bounceCt;
        },
        setFromObject: function(a) {
            this.y = a.get_y();
            this.dy = 0;
            this.bounceCt = 0;
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_BounceKeyframe(this.y, this.dy, this.bounceCt);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_BounceKeyframe);
            return new com_davidmaletz_lerp_BounceKeyframe(track.interp(this.y, k.y, f), track.interp(k.dy, this.dy, f), track.interp(this.bounceCt, k.bounceCt, f));
        },
        apply: function(a) {
            var ty = this.y + this.dy * Math.abs(Math.cos(this.bounceCt));
            if (com_davidmaletz_lerp_PositionKeyframe.ROUND) a.set_y(Math.round(ty));
            else a.set_y(ty);
        },
        toString: function() {
            return "BOUNCE " + this.frame + " [" + this.y + "," + this.dy + "]";
        },
        save: function(xml) {
            throw new js__$Boot_HaxeError(Type.getClassName(js_Boot.getClass(this)) + " Not Serializable");
        },
        load: function(xml) {
            throw new js__$Boot_HaxeError(Type.getClassName(js_Boot.getClass(this)) + " Not Serializable");
        },
        __class__: com_davidmaletz_lerp_BounceKeyframe
    };
    var com_davidmaletz_lerp_DarkenKeyframe = function(a) {
        if (a == null) a = 1;
        this.darken = a;
    };
    $hxClasses["com.davidmaletz.lerp.DarkenKeyframe"] = com_davidmaletz_lerp_DarkenKeyframe;
    com_davidmaletz_lerp_DarkenKeyframe.__name__ = ["com", "davidmaletz", "lerp", "DarkenKeyframe"];
    com_davidmaletz_lerp_DarkenKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_DarkenKeyframe.setDarkness = function(s, d) {
        var a = s.get_transform().get_colorTransform();
        a.redMultiplier = a.greenMultiplier = a.blueMultiplier = d;
        s.get_transform().set_colorTransform(a);
    };
    com_davidmaletz_lerp_DarkenKeyframe.addDarkness = function(s, d) {
        var d1 = Math.max(0, s.get_transform().get_colorTransform().redMultiplier - d);
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(s, d1);
        return d1;
    };
    com_davidmaletz_lerp_DarkenKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_DarkenKeyframe);
            this.darken = k.darken;
        },
        setFromObject: function(a) {
            this.darken = a.get_transform().get_colorTransform().redMultiplier;
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_DarkenKeyframe(this.darken);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_DarkenKeyframe);
            return new com_davidmaletz_lerp_DarkenKeyframe(track.interp(this.darken, k.darken, f));
        },
        apply: function(a) {
            com_davidmaletz_lerp_DarkenKeyframe.setDarkness(a, this.darken);
        },
        save: function(xml) {
            if (this.darken != 1) xml.set("darken", Std.string(this.darken));
        },
        load: function(xml) {
            if (xml.exists("darken")) this.darken = Std.parseFloat(xml.get("darken"));
        },
        toString: function() {
            return "DARKEN " + this.frame + " " + this.darken;
        },
        __class__: com_davidmaletz_lerp_DarkenKeyframe
    };
    var com_davidmaletz_lerp_LerpSpriteFL = function() {
        com_davidmaletz_lerp_LerpSpriteBase.call(this);
    };
    $hxClasses["com.davidmaletz.lerp.LerpSpriteFL"] = com_davidmaletz_lerp_LerpSpriteFL;
    com_davidmaletz_lerp_LerpSpriteFL.__name__ = ["com", "davidmaletz", "lerp", "LerpSpriteFL"];
    com_davidmaletz_lerp_LerpSpriteFL.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_lerp_LerpSpriteFL.__super__ = com_davidmaletz_lerp_LerpSpriteBase;
    com_davidmaletz_lerp_LerpSpriteFL.prototype = $extend(com_davidmaletz_lerp_LerpSpriteBase.prototype, {
        init: function(e) {
            this.destroy(null);
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
        },
        destroy: function(e) {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
        },
        enter_frame: function(frames) {
            this.advanceFrame(frames);
        },
        __class__: com_davidmaletz_lerp_LerpSpriteFL
    });
    var com_davidmaletz_lerp_LerpTrack = function(cls) {
        this.keyframe_class = cls;
        this.frame = 0;
    };
    $hxClasses["com.davidmaletz.lerp.LerpTrack"] = com_davidmaletz_lerp_LerpTrack;
    com_davidmaletz_lerp_LerpTrack.__name__ = ["com", "davidmaletz", "lerp", "LerpTrack"];
    com_davidmaletz_lerp_LerpTrack.prototype = {
        getKeyframeClass: function() {
            return this.keyframe_class;
        },
        newKeyframe: function() {
            return Type.createEmptyInstance(this.keyframe_class);
        },
        setLerp: function(a, to, frames, onComplete) {
            this.from = Type.createEmptyInstance(this.keyframe_class);
            this.from.set(to);
            this.from.setFromObject(a);
            this.from.setFrame(0);
            this.frame = 0;
            this.to = to;
            to.setFrame(frames);
            if (this.complete != null) {
                openfl_Lib.current.stage.removeEventListener("enterFrame", this.complete);
                this.complete = null;
            }
            this.onComplete = onComplete;
        },
        doFire: function(f, e) {
            if (this.complete != null) {
                openfl_Lib.current.stage.removeEventListener("enterFrame", this.complete);
                this.complete = null;
                f();
            }
        },
        fireComplete: function() {
            var f = this.onComplete;
            this.onComplete = null;
            if (f != null) {
                this.complete = (function(f1, f2) {
                    return function(e) {
                        f1(f2, e);
                    };
                })($bind(this, this.doFire), f);
                openfl_Lib.current.stage.addEventListener("enterFrame", this.complete, false, 1000);
            }
        },
        clear: function() {
            this.from = null;
            this.to = null;
            this.frame = 0;
            this.fireComplete();
        },
        hasKeyframes: function() {
            return this.from != null && this.to != null;
        },
        getKeyframe: function(f) {
            var pf = this.from.getFrame();
            var nf = this.to.getFrame();
            if (f <= pf) return this.from;
            else if (f >= nf) return this.to;
            else return this.from.interp(this, this.to, (f - pf) / (nf - pf));
        },
        getTo: function() {
            return this.to;
        },
        getFrame: function() {
            return this.frame;
        },
        interp: function(a, b, f) {
            return a * (1 - f) + b * f;
        },
        advanceFrame: function(a, df) {
            if (this.from != null && this.to != null) {
                this.frame += df;
                var k = this.getKeyframe(this.frame);
                k.apply(a);
                if (k == this.to) {
                    this.from = null;
                    this.to = null;
                    this.frame = 0;
                    this.fireComplete();
                    return false;
                } else return true;
            } else return false;
        },
        nextFrame: function(a) {
            return this.advanceFrame(a, 1);
        },
        __class__: com_davidmaletz_lerp_LerpTrack
    };
    var com_davidmaletz_lerp_Tracks = function() {
        this.tracks = new haxe_ds_StringMap();
    };
    $hxClasses["com.davidmaletz.lerp.Tracks"] = com_davidmaletz_lerp_Tracks;
    com_davidmaletz_lerp_Tracks.__name__ = ["com", "davidmaletz", "lerp", "Tracks"];
    com_davidmaletz_lerp_Tracks.prototype = {
        hasTrack: function(cls) {
            var key = Type.getClassName(cls);
            return this.tracks.exists(key);
        },
        getTrack: function(cls) {
            var n = Type.getClassName(cls);
            var t = this.tracks.get(n);
            if (t == null) {
                t = this.createTrack(cls);
                this.tracks.set(n, t);
            }
            return t;
        },
        removeTrack: function(cls) {
            var key = Type.getClassName(cls);
            this.tracks.remove(key);
        },
        getTracks: function() {
            var ret = [];
            var $it0 = this.tracks.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                ret.push(Type.resolveClass(k));
            }
            return ret;
        },
        createTrack: function(cls) {
            return null;
        },
        __class__: com_davidmaletz_lerp_Tracks
    };
    var com_davidmaletz_lerp_LerpTracks = function() {
        com_davidmaletz_lerp_Tracks.call(this);
    };
    $hxClasses["com.davidmaletz.lerp.LerpTracks"] = com_davidmaletz_lerp_LerpTracks;
    com_davidmaletz_lerp_LerpTracks.__name__ = ["com", "davidmaletz", "lerp", "LerpTracks"];
    com_davidmaletz_lerp_LerpTracks.__super__ = com_davidmaletz_lerp_Tracks;
    com_davidmaletz_lerp_LerpTracks.prototype = $extend(com_davidmaletz_lerp_Tracks.prototype, {
        createTrack: function(cls) {
            return new com_davidmaletz_lerp_LerpTrack(cls);
        },
        advanceFrame: function(a, df) {
            var ret = false;
            var $it0 = this.tracks.iterator();
            while ($it0.hasNext()) {
                var track = $it0.next();
                if (track.advanceFrame(a, df)) ret = true;
            }
            return ret;
        },
        nextFrame: function(a) {
            return this.advanceFrame(a, 1);
        },
        __class__: com_davidmaletz_lerp_LerpTracks
    });
    var com_davidmaletz_lerp_PositionKeyframe = function(_x, _y) {
        if (_y == null) _y = 0;
        if (_x == null) _x = 0;
        this.x = _x;
        this.y = _y;
    };
    $hxClasses["com.davidmaletz.lerp.PositionKeyframe"] = com_davidmaletz_lerp_PositionKeyframe;
    com_davidmaletz_lerp_PositionKeyframe.__name__ = ["com", "davidmaletz", "lerp", "PositionKeyframe"];
    com_davidmaletz_lerp_PositionKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_PositionKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_PositionKeyframe);
            this.x = k.x;
            this.y = k.y;
        },
        setFromObject: function(a) {
            this.x = a.get_x();
            this.y = a.get_y();
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_PositionKeyframe(this.x, this.y);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_PositionKeyframe);
            return new com_davidmaletz_lerp_PositionKeyframe(track.interp(this.x, k.x, f), track.interp(this.y, k.y, f));
        },
        apply: function(a) {
            if (com_davidmaletz_lerp_PositionKeyframe.ROUND) {
                a.set_x(Math.round(this.x));
                a.set_y(Math.round(this.y));
            } else {
                a.set_x(this.x);
                a.set_y(this.y);
            }
        },
        save: function(xml) {
            if (this.x != 0) xml.set("x", Std.string(this.x));
            if (this.y != 0) xml.set("y", Std.string(this.y));
        },
        load: function(xml) {
            if (xml.exists("x")) this.x = Std.parseFloat(xml.get("x"));
            if (xml.exists("y")) this.y = Std.parseFloat(xml.get("y"));
        },
        toString: function() {
            return "POS " + this.frame + " [" + this.x + "," + this.y + "]";
        },
        __class__: com_davidmaletz_lerp_PositionKeyframe
    };
    var com_davidmaletz_lerp_ScaleKeyframe = function(_x, _y) {
        if (_y == null) _y = 1;
        if (_x == null) _x = 1;
        this.x = _x;
        this.y = _y;
    };
    $hxClasses["com.davidmaletz.lerp.ScaleKeyframe"] = com_davidmaletz_lerp_ScaleKeyframe;
    com_davidmaletz_lerp_ScaleKeyframe.__name__ = ["com", "davidmaletz", "lerp", "ScaleKeyframe"];
    com_davidmaletz_lerp_ScaleKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_ScaleKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_ScaleKeyframe);
            this.x = k.x;
            this.y = k.y;
        },
        setFromObject: function(a) {
            this.x = a.get_scaleX();
            this.y = a.get_scaleY();
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_ScaleKeyframe(this.x, this.y);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_ScaleKeyframe);
            return new com_davidmaletz_lerp_ScaleKeyframe(track.interp(this.x, k.x, f), track.interp(this.y, k.y, f));
        },
        apply: function(a) {
            a.set_scaleX(this.x);
            a.set_scaleY(this.y);
        },
        toString: function() {
            return "SCALE " + this.frame + " [" + this.x + "," + this.y + "]";
        },
        save: function(xml) {
            if (this.x != 1) xml.set("sx", Std.string(this.x));
            if (this.y != 1) xml.set("sy", Std.string(this.y));
        },
        load: function(xml) {
            if (xml.exists("sx")) this.x = Std.parseFloat(xml.get("sx"));
            if (xml.exists("sy")) this.y = Std.parseFloat(xml.get("sy"));
        },
        __class__: com_davidmaletz_lerp_ScaleKeyframe
    };
    var com_davidmaletz_lerp_YKeyframe = function(_y) {
        if (_y == null) _y = 0;
        this.y = _y;
    };
    $hxClasses["com.davidmaletz.lerp.YKeyframe"] = com_davidmaletz_lerp_YKeyframe;
    com_davidmaletz_lerp_YKeyframe.__name__ = ["com", "davidmaletz", "lerp", "YKeyframe"];
    com_davidmaletz_lerp_YKeyframe.__interfaces__ = [com_davidmaletz_lerp_Keyframe];
    com_davidmaletz_lerp_YKeyframe.prototype = {
        set: function(from) {
            var k;
            k = js_Boot.__cast(from, com_davidmaletz_lerp_YKeyframe);
            this.y = k.y;
        },
        setFromObject: function(a) {
            this.y = a.get_y();
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            this.frame = f;
        },
        shiftFrame: function(df) {
            this.frame += df;
        },
        setY: function(y) {
            this.y = y;
        },
        copy: function(frame) {
            var f = new com_davidmaletz_lerp_YKeyframe(this.y);
            f.frame = frame;
            return f;
        },
        interp: function(track, other, f) {
            var k;
            k = js_Boot.__cast(other, com_davidmaletz_lerp_YKeyframe);
            return new com_davidmaletz_lerp_YKeyframe(track.interp(this.y, k.y, f));
        },
        apply: function(a) {
            if (com_davidmaletz_lerp_PositionKeyframe.ROUND) a.set_y(Math.round(this.y));
            else a.set_y(this.y);
        },
        save: function(xml) {
            if (this.y != 0) xml.set("y", Std.string(this.y));
        },
        load: function(xml) {
            if (xml.exists("y")) this.y = Std.parseFloat(xml.get("y"));
        },
        toString: function() {
            return "Y " + this.frame + " " + this.y;
        },
        __class__: com_davidmaletz_lerp_YKeyframe
    };
    var com_davidmaletz_mining_LootHandler = function(xml) {
        this.loot = [];
        this.loot_cdf = [];
        var total = 0.0;
        var $it0 = xml.elementsNamed("loot");
        while ($it0.hasNext()) {
            var e = $it0.next();
            this.loot.push(com_davidmaletz_mining_item_Item.get(e.get("id")));
            if (e.exists("p")) total += Std.parseFloat(e.get("p"));
            else total += 1;
            this.loot_cdf.push(total);
        }
    };
    $hxClasses["com.davidmaletz.mining.LootHandler"] = com_davidmaletz_mining_LootHandler;
    com_davidmaletz_mining_LootHandler.__name__ = ["com", "davidmaletz", "mining", "LootHandler"];
    com_davidmaletz_mining_LootHandler.prototype = {
        getLoot: function() {
            if (this.loot.length == 0) return null;
            else if (this.loot.length == 1) return this.loot[0];
            else return this.loot[com_fancyfish_faeng_common_Utils.drawCDF(this.loot_cdf)];
        },
        __class__: com_davidmaletz_mining_LootHandler
    };
    var com_davidmaletz_mining_MyAchievements = function(settings) {
        this.medal_ids = new haxe_ds_StringMap();
        var _g = this;
        this.medal_ids.set("hut", 53304);
        this.medal_ids.set("boar", 53305);
        this.medal_ids.set("storehouse", 53306);
        this.medal_ids.set("farm", 53307);
        this.medal_ids.set("orchard", 53308);
        this.medal_ids.set("smelter", 53309);
        this.medal_ids.set("kitchen", 53310);
        this.medal_ids.set("backpack", 53311);
        this.medal_ids.set("workshop", 53312);
        this.medal_ids.set("wyrm", 53313);
        this.medal_ids.set("golem", 53314);
        this.medal_ids.set("diamond", 53315);
        this.medal_ids.set("market", 53316);
        this.medal_ids.set("bigpack", 53317);
        this.medal_ids.set("capture_wyrm", 53318);
        this.medal_ids.set("pen", 53319);
        this.medal_ids.set("pizza", 53320);
        this.medal_ids.set("dock", 53321);
        this.medal_ids.set("boat", 53322);
        this.medal_ids.set("lab", 53323);
        this.medal_ids.set("wyrm_pen", 53324);
        this.medal_ids.set("dragon", 53325);
        com_davidmaletz_faengfl_achievement_NGAchievements.call(this, settings, "46829:2jPahK3a", "c593Vw4hh3JgcmtPlT9T9g==");
        var action_map = new haxe_ds_StringMap();
        this.achievement_list = [];
        if (__map_reserved.tile != null) action_map.setReserved("tile",
        function(e) {
            var id = e.get("id");
            if (StringTools.startsWith(id, "achievement.")) _g.achievement_list.push(id.substring("achievement.".length));
        });
        else action_map.h["tile"] = function(e) {
            var id = e.get("id");
            if (StringTools.startsWith(id, "achievement.")) _g.achievement_list.push(id.substring("achievement.".length));
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/tile/tiles.xml", action_map);
    };
    $hxClasses["com.davidmaletz.mining.MyAchievements"] = com_davidmaletz_mining_MyAchievements;
    com_davidmaletz_mining_MyAchievements.__name__ = ["com", "davidmaletz", "mining", "MyAchievements"];
    com_davidmaletz_mining_MyAchievements.getAchievements = function() {
        var _this;
        _this = (js_Boot.__cast(com_davidmaletz_faengfl_achievement_Achievements.instance, com_davidmaletz_mining_MyAchievements)).achievement_list;
        return HxOverrides.iter(_this);
    };
    com_davidmaletz_mining_MyAchievements.__super__ = com_davidmaletz_faengfl_achievement_NGAchievements;
    com_davidmaletz_mining_MyAchievements.prototype = $extend(com_davidmaletz_faengfl_achievement_NGAchievements.prototype, {
        isMedal: function(medal, a) {
            return medal.id == this.medal_ids.get(a);
        },
        isAchievement: function(a) {
            return com_davidmaletz_tiles_Tile.get("achievement." + a) != null;
        },
        postAchievement: function(a) {
            com_davidmaletz_faengfl_SoundManager.playSFX("achievement");
            new com_davidmaletz_mining_ui_Achievement(a);
            com_davidmaletz_faengfl_achievement_NGAchievements.prototype.postAchievement.call(this, a);
        },
        __class__: com_davidmaletz_mining_MyAchievements
    });
    var com_davidmaletz_mining_MyController = function(settings) {
        com_davidmaletz_controls_Controller.call(this, settings, ["up", "down", "left", "right", "select"]);
    };
    $hxClasses["com.davidmaletz.mining.MyController"] = com_davidmaletz_mining_MyController;
    com_davidmaletz_mining_MyController.__name__ = ["com", "davidmaletz", "mining", "MyController"];
    com_davidmaletz_mining_MyController.__super__ = com_davidmaletz_controls_Controller;
    com_davidmaletz_mining_MyController.prototype = $extend(com_davidmaletz_controls_Controller.prototype, {
        defaultKeyboard: function(controls) {
            com_davidmaletz_controls_Controller.prototype.defaultKeyboard.call(this, controls);
            controls.setKey("inventory", new com_davidmaletz_faengfl_controls_KeyboardKey(73));
            controls.setKey("quest", new com_davidmaletz_faengfl_controls_KeyboardKey(81));
            controls.setKey("hotkey1", new com_davidmaletz_faengfl_controls_KeyboardKey(49));
            controls.setKey("hotkey2", new com_davidmaletz_faengfl_controls_KeyboardKey(50));
        },
        defaultGamepad: function(controls) {
            com_davidmaletz_controls_Controller.prototype.defaultGamepad.call(this, controls);
            controls.setKey("inventory", new com_davidmaletz_faengfl_controls_ControllerKey(2));
            controls.setKey("quest", new com_davidmaletz_faengfl_controls_ControllerKey(3));
            controls.setKey("hotkey1", new com_davidmaletz_faengfl_controls_ControllerKey(9));
            controls.setKey("hotkey2", new com_davidmaletz_faengfl_controls_ControllerKey(10));
        },
        validateControls: function(device, controls) {
            com_davidmaletz_controls_Controller.prototype.validateControls.call(this, device, controls);
            if (device == 0) {
                if (controls.key_map.getKey("hotkey1") == null) controls.setKey("hotkey1", new com_davidmaletz_faengfl_controls_KeyboardKey(49));
                if (controls.key_map.getKey("hotkey2") == null) controls.setKey("hotkey2", new com_davidmaletz_faengfl_controls_KeyboardKey(50));
            } else {
                if (controls.key_map.getKey("hotkey1") == null) controls.setKey("hotkey1", new com_davidmaletz_faengfl_controls_ControllerKey(9));
                if (controls.key_map.getKey("hotkey2") == null) controls.setKey("hotkey2", new com_davidmaletz_faengfl_controls_ControllerKey(10));
            }
        },
        __class__: com_davidmaletz_mining_MyController
    });
    var com_davidmaletz_mining_world_BaseObject = function(x, y) {
        openfl_events_EventDispatcher.call(this);
        this.area = null;
        this.tile_x = x;
        this.tile_y = y;
    };
    $hxClasses["com.davidmaletz.mining.world.BaseObject"] = com_davidmaletz_mining_world_BaseObject;
    com_davidmaletz_mining_world_BaseObject.__name__ = ["com", "davidmaletz", "mining", "world", "BaseObject"];
    com_davidmaletz_mining_world_BaseObject.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_world_BaseObject.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_world_BaseObject.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        createRenderer: function(area) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        getRenderer: function(area) {
            if (this.renderer == null) this.renderer = this.createRenderer(area);
            return this.renderer;
        },
        addedToArea: function() {},
        addToArea: function(area) {
            if (this.area != area) {
                if (this.area != null) this.removedFromArea(this.area);
                this.area = area;
                this.addedToArea();
            }
        },
        removedFromArea: function(area) {},
        removeFromArea: function(area) {
            if (area == this.area) {
                this.area = null;
                this.removedFromArea(area);
            }
        },
        changeTile: function(toX, toY) {},
        onInstantMove: function() {},
        setTile: function(x, y, instant) {
            if (instant == null) instant = false;
            if (this.tile_x != x || this.tile_y != y) {
                if (this.area != null) this.changeTile(x, y);
                var old_x = this.tile_x;
                var old_y = this.tile_y;
                this.tile_x = x;
                this.tile_y = y;
                if (!instant) this.dispatchEvent(new openfl_events_Event("move"));
                else if (this.renderer != null) {
                    this.renderer.finishTrack(com_davidmaletz_lerp_PositionKeyframe);
                    var _g = this.renderer;
                    _g.set_x(_g.get_x() + (this.tile_x - old_x) * com_davidmaletz_tiles_Tile.SIZE);
                    var _g1 = this.renderer;
                    _g1.set_y(_g1.get_y() + (this.tile_y - old_y) * com_davidmaletz_tiles_Tile.SIZE);
                    this.onInstantMove();
                }
                return true;
            } else return false;
        },
        __class__: com_davidmaletz_mining_world_BaseObject
    });
    var com_davidmaletz_mining_world_Object = function(info, x, y) {
        com_davidmaletz_mining_world_BaseObject.call(this, x, y);
        this.info = info;
        this.health = this.getMaxHealth();
    };
    $hxClasses["com.davidmaletz.mining.world.Object"] = com_davidmaletz_mining_world_Object;
    com_davidmaletz_mining_world_Object.__name__ = ["com", "davidmaletz", "mining", "world", "Object"];
    com_davidmaletz_mining_world_Object.point = null;
    com_davidmaletz_mining_world_Object.load = function(b, version) {
        var id = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
        if (id == null) return null;
        var o = (id == null ? null: (function($this) {
            var $r;
            if (com_davidmaletz_mining_world_ObjectInfo.info == null) com_davidmaletz_mining_world_ObjectInfo.loadInfo();
            $r = com_davidmaletz_mining_world_ObjectInfo.info.get(id);
            return $r;
        } (this))).create(b.readInt16(), b.readInt16());
        o.read(b, version);
        return o;
    };
    com_davidmaletz_mining_world_Object.writeNull = function(b) {
        com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
    };
    com_davidmaletz_mining_world_Object.__super__ = com_davidmaletz_mining_world_BaseObject;
    com_davidmaletz_mining_world_Object.prototype = $extend(com_davidmaletz_mining_world_BaseObject.prototype, {
        getId: function() {
            return this.info.id;
        },
        getBase: function() {
            var ret = Type.getClassName(Type.getClass(this.info));
            var i = ret.lastIndexOf(".");
            if (i != -1) ret = HxOverrides.substr(ret, i + 1, null);
            return ret.charAt(0).toLowerCase() + HxOverrides.substr(ret, 1, ret.length - 5);
        },
        getLoot: function() {
            return null;
        },
        isBack: function() {
            return false;
        },
        getHealthPercent: function() {
            return this.health / this.getMaxHealth();
        },
        getHealth: function() {
            return this.health;
        },
        getMaxHealth: function() {
            return this.info.health;
        },
        restoreHealth: function() {
            this.addHealth(this.getMaxHealth() - this.health);
        },
        onDeath: function(killer) {},
        addHealth: function(h) {
            h += this.health;
            var max = this.getMaxHealth();
            if (h > max) h = max;
            if (h != this.health) {
                this.health = h;
                this.dispatchEvent(new com_davidmaletz_mining_world_HealthEvent("change_health", null, h));
            }
        },
        oneHp: function() {
            return 1;
        },
        getPos: function(x, y) {
            if (this.renderer == null) return null;
            if (com_davidmaletz_mining_world_Object.point == null) com_davidmaletz_mining_world_Object.point = new openfl_geom_Point(x, y);
            else com_davidmaletz_mining_world_Object.point.setTo(x, y);
            return com_davidmaletz_faengfl_Application.instance.container.globalToLocal(this.renderer.localToGlobal(com_davidmaletz_mining_world_Object.point));
        },
        damageNotification: function(h, critical, attacker) {
            var p = this.getPos(0, 0);
            if (p == null) return;
            if (critical) new com_davidmaletz_mining_ui_Popup(p.x, p.y - com_davidmaletz_tiles_Tile.SIZE, -com_davidmaletz_tiles_Tile.SIZE, com_fancyfish_faeng_common_Lang.getText("common", "critical_hit"));
            if (h > 0 && attacker != null) new com_davidmaletz_mining_ui_Popup(p.x, p.y - com_davidmaletz_tiles_Tile.SIZE * 0.5, -com_davidmaletz_tiles_Tile.SIZE * 0.5, new com_fancyfish_faeng_common_mutable_Static(Std.string(Math.round(h / this.oneHp()))), 16777215, 0, 10, 10, 10, com_davidmaletz_mining_Main.damageFont);
        },
        showPopup: function(msg, dx, dy) {
            if (dy == null) dy = 0;
            if (dx == null) dx = 0;
            var p = this.getPos(dx, dy);
            if (p == null) return;
            new com_davidmaletz_mining_ui_Popup(p.x, p.y - com_davidmaletz_tiles_Tile.SIZE, -com_davidmaletz_tiles_Tile.SIZE, msg);
        },
        loseHealth: function(h, critical, attacker, equip) {
            if (attacker != null) com_davidmaletz_mining_Sounds.playSound(attacker, equip, this);
            if (critical && h == 0) h = this.oneHp();
            else if (critical) h *= 2;
            h = this.health - h;
            if (h < 0) h = 0;
            if (h != this.health) {
                this.damageNotification(this.health - h, critical, attacker);
                this.health = h;
                if (this.health == 0) this.onDeath(attacker);
                this.dispatchEvent(new com_davidmaletz_mining_world_HealthEvent("change_health", attacker, -h));
            }
        },
        isBlocking: function(asker, flags) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        canFlip: function() {
            return true;
        },
        getLayer: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        getAction: function(p) {
            return null;
        },
        onEnter: function(p) {},
        onExit: function(p) {},
        onOperate: function(p) {},
        changeTile: function(toX, toY) {
            this.area.objects[this.getLayer()].moveObject(this, toX, toY);
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.info.id);
            b.writeInt16(this.tile_x);
            b.writeInt16(this.tile_y);
            b.writeUInt16(this.health);
        },
        read: function(b, version) {
            this.health = b.readUInt16();
        },
        __class__: com_davidmaletz_mining_world_Object
    });
    var com_davidmaletz_mining_npc_Speakable = function() {};
    $hxClasses["com.davidmaletz.mining.npc.Speakable"] = com_davidmaletz_mining_npc_Speakable;
    com_davidmaletz_mining_npc_Speakable.__name__ = ["com", "davidmaletz", "mining", "npc", "Speakable"];
    com_davidmaletz_mining_npc_Speakable.prototype = {
        __class__: com_davidmaletz_mining_npc_Speakable
    };
    var com_davidmaletz_mining_Player = function(info, x, y) {
        this.hotkeys = [];
        this.staminaWarning = true;
        this.experience = 0;
        this.max_stamina = 0;
        this.max_health = 0;
        this.endurance = 0;
        this.speed = 0;
        this.offsetY = 0;
        com_davidmaletz_mining_world_Object.call(this, info, x, y);
        this.stamina = this.getMaxStamina();
        this.flags = new haxe_ds_StringMap();
        this.vars = new haxe_ds_StringMap();
        this.coins = 0;
        this.inventory = new com_davidmaletz_mining_item_Inventory();
        this.inventory.addEventListener("item_added", $bind(this, this.check_capacity));
        this.addEventListener("change_coins", $bind(this, this.checkQuestComplete));
        this.addEventListener("add_quest", $bind(this, this.checkQuestComplete));
        this.capacity = new com_fancyfish_faeng_common_mutable_Mutable();
        this.capacity.set((function($this) {
            var $r;
            if (com_davidmaletz_mining_Player.min_weight == null) {
                com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
                com_davidmaletz_mining_Player.min_weight.set(50);
            }
            $r = com_davidmaletz_mining_Player.min_weight.get();
            return $r;
        } (this)));
        this.equipment = new com_fancyfish_faeng_common_mutable_Mutable();
        this.equipment.set(null);
        this.equipment.addEventListener("updated", $bind(this, this.update_equipment));
        this.attack = new com_fancyfish_faeng_common_mutable_Mutable();
        this.attack.set(null);
        this.cut = new com_fancyfish_faeng_common_mutable_Mutable();
        this.cut.set(null);
        this.mine = new com_fancyfish_faeng_common_mutable_Mutable();
        this.mine.set(null);
        this.defense = new com_fancyfish_faeng_common_mutable_Mutable();
        this.defense.set(null);
        this.lightMod = new com_fancyfish_faeng_common_mutable_Mutable();
        this.lightMod.set(0);
        this.attackMod = new com_fancyfish_faeng_common_mutable_Mutable();
        this.attackMod.set(0);
        this.defenseMod = new com_fancyfish_faeng_common_mutable_Mutable();
        this.defenseMod.set(0);
        this.light = new com_fancyfish_faeng_common_mutable_Mutable();
        this.light.set(3);
        this.quests = [];
        this.completeQuests = new com_fancyfish_faeng_common_Dequeue();
        this.questMap = new haxe_ds_StringMap();
    };
    $hxClasses["com.davidmaletz.mining.Player"] = com_davidmaletz_mining_Player;
    com_davidmaletz_mining_Player.__name__ = ["com", "davidmaletz", "mining", "Player"];
    com_davidmaletz_mining_Player.__interfaces__ = [com_davidmaletz_mining_npc_Speakable];
    com_davidmaletz_mining_Player.min_weight = null;
    com_davidmaletz_mining_Player.getMinWeight = function() {
        if (com_davidmaletz_mining_Player.min_weight == null) {
            com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
            com_davidmaletz_mining_Player.min_weight.set(50);
        }
        return com_davidmaletz_mining_Player.min_weight.get();
    };
    com_davidmaletz_mining_Player.setMinWeight = function(w) {
        if (com_davidmaletz_mining_Player.min_weight == null) com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
        com_davidmaletz_mining_Player.min_weight.set(w);
    };
    com_davidmaletz_mining_Player.experienceToNextLevel = function(l) {
        return Math.floor(Math.pow(1.5, l + 1) * 40) - 40;
    };
    com_davidmaletz_mining_Player.__super__ = com_davidmaletz_mining_world_Object;
    com_davidmaletz_mining_Player.prototype = $extend(com_davidmaletz_mining_world_Object.prototype, {
        addSpeed: function(s) {
            s += this.speed;
            if (s > 4) s = 4;
            if (s != this.speed) {
                this.speed = s;
                return true;
            } else return false;
        },
        addEndurance: function(e) {
            e += this.endurance;
            if (e > 4) e = 4;
            if (e != this.endurance) {
                this.endurance = e;
                return true;
            } else return false;
        },
        addMaxHealth: function(m) {
            m += this.max_health;
            if (m > 50) m = 50;
            if (m != this.max_health) {
                var d = m - this.max_health;
                this.max_health = m;
                this.addHealth(d * this.oneHp());
                return true;
            } else return false;
        },
        addMaxStamina: function(m) {
            m += this.max_stamina;
            if (m > 100) m = 100;
            if (m != this.max_stamina) {
                var d = m - this.max_stamina;
                this.max_stamina = m;
                this.addStamina(d * this.oneHp());
                return true;
            } else return false;
        },
        getItemCount: function(item) {
            return this.inventory.getItemCount(item == null ? null: (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get(item);
                return $r;
            } (this)));
        },
        getInfo: function() {
            return this.info;
        },
        createRenderer: function(area) {
            var renderer = new com_davidmaletz_mining_renderer_PlayerRenderer(this, area);
            renderer.addEventListener("removedFromStage", $bind(this, this.stopSFX));
            return renderer;
        },
        getStaminaPercent: function() {
            return this.stamina / this.getMaxStamina();
        },
        getStamina: function() {
            return this.stamina;
        },
        getLevel: function() {
            return this.levelFromExperience(this.experience);
        },
        getMaxStamina: function() {
            var info = this.info;
            return (info.stamina + info.staminaPerLevel * this.levelFromExperience(this.experience) + this.max_stamina) * this.oneHp();
        },
        getMaxHealth: function() {
            return (this.info.health + this.info.healthPerLevel * this.levelFromExperience(this.experience) + this.max_health) * this.oneHp();
        },
        getSpeed: function() {
            var s = this.info.speed;
            var _g1 = 0;
            var _g = this.speed;
            while (_g1 < _g) {
                var i = _g1++;
                s -= Math.floor(s / 5);
            }
            return s;
        },
        advance: function(e) {
            if (! (js_Boot.__cast(this.renderer, com_davidmaletz_mining_renderer_PlayerRenderer)).incFrame(com_davidmaletz_faengfl_FaengFL.frameTime, null)) this.gameOver();
            else if (this.death_ct > 0) {
                this.death_ct--;
                if (this.death_ct == 0) {
                    var l = new com_davidmaletz_tiles_render_StaticPlayAnimation((function($this) {
                        var $r;
                        if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                        $r = com_davidmaletz_tiles_Tile.tiles.get("death");
                        return $r;
                    } (this)), "death", 15, false);
                    l.set_x( - com_davidmaletz_tiles_Tile.SIZE * 0.5);
                    l.set_y( - com_davidmaletz_tiles_Tile.SIZE * 1.5);
                    this.renderer.addChild(l);
                }
            }
        },
        tryAttack: function($with, projectile) {
            if (this.renderer != null)(js_Boot.__cast(this.renderer, com_davidmaletz_mining_renderer_PlayerRenderer)).tryAttack($with, projectile);
        },
        gameOver: function() {
            if (this.renderer != null) this.renderer.removeEventListener("enterFrame", $bind(this, this.advance));
            new com_davidmaletz_mining_ui_transition_EllipseFade(com_davidmaletz_mining_Main.gameOver, 60, true, 0, this.mine.get() == null ? 72. - com_davidmaletz_tiles_Tile.SIZE * 1.5 : 0);
        },
        onDeath: function(killer) {
            if (this.renderer != null) {
                com_davidmaletz_mining_Main.closeWindows();
                var r;
                r = js_Boot.__cast(this.renderer, com_davidmaletz_mining_renderer_PlayerRenderer);
                com_davidmaletz_faengfl_SoundManager.playSFX("death");
                r.setAnimation("player.death");
                r.equipment.set_visible(false);
                new com_davidmaletz_mining_ui_transition_Modal(r, null);
                r.addEventListener("enterFrame", $bind(this, this.advance));
                this.death_ct = 68;
            } else this.gameOver();
        },
        getDefense: function() {
            var m = this.defenseMod.get();
            var mod = 0;
            if (m > 0) {
                this.defenseMod.set(m - 1);
                mod++;
            }
            var d = this.defense.get();
            if (d == null) return mod;
            else return d.defense + mod;
        },
        oneHp: function() {
            return 10;
        },
        loseHealth: function(h, critical, attacker, equip) {
            if (attacker != null) {
                h -= this.getDefense() * this.oneHp();
                if (! (critical && h == 0) && h <= 0) {
                    if (this.renderer != null) new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, this.renderer, "blocked", new openfl_geom_Point());
                    this.showPopup(com_fancyfish_faeng_common_Lang.getText("common", "blocked"));
                    return;
                }
            }
            com_davidmaletz_mining_world_Object.prototype.loseHealth.call(this, h, critical, attacker, equip);
        },
        fullRestore: function() {
            this.addHealth(this.getMaxHealth() - this.health);
            this.addStamina(this.getMaxStamina() - this.stamina);
        },
        restoreStamina: function() {
            this.addStamina(this.getMaxStamina() - this.stamina);
        },
        update_weight: function(e) {
            var w;
            if (com_davidmaletz_mining_Player.min_weight == null) {
                com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
                com_davidmaletz_mining_Player.min_weight.set(50);
            }
            w = com_davidmaletz_mining_Player.min_weight.get();
            var $it0 = this.getEquipment();
            while ($it0.hasNext()) {
                var i = $it0.next();
                var wt;
                wt = (js_Boot.__cast(i.item, com_davidmaletz_mining_item_Equipment)).capacity;
                if (wt > w) w = wt;
            }
            this.capacity.set(w);
        },
        updateCapacity: function(eq, ct) {
            var w = this.capacity.get();
            if (ct == 0) {
                if (eq.capacity < w) return;
                this.update_weight(null);
            } else if (eq.capacity > w) this.capacity.set(eq.capacity);
        },
        updateAttack: function(eq, ct) {
            var best = this.attack.get();
            var atk;
            if (best == null) atk = 0;
            else atk = best.attack;
            if (ct == 0) {
                if (eq.attack < atk) return;
                best = null;
                atk = 0;
                var $it0 = this.getEquipment();
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    var e;
                    e = js_Boot.__cast(i.item, com_davidmaletz_mining_item_Equipment);
                    if (e.action == "equip" && e.attack > atk) {
                        atk = e.attack;
                        best = e;
                    }
                }
                this.attack.set(best);
            } else if (eq.action == "equip" && eq.attack > atk) this.attack.set(eq);
        },
        updateCut: function(eq, ct) {
            var best = this.cut.get();
            var c;
            if (best == null) c = 0;
            else c = best.cut;
            if (ct == 0) {
                if (eq.cut < c) return;
                best = null;
                c = 0;
                var $it0 = this.getEquipment();
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    var e;
                    e = js_Boot.__cast(i.item, com_davidmaletz_mining_item_Equipment);
                    if (e.cut > c) {
                        c = e.cut;
                        best = e;
                    }
                }
                this.cut.set(best);
            } else if (eq.cut > c) this.cut.set(eq);
        },
        updateMine: function(eq, ct) {
            var best = this.mine.get();
            var m;
            if (best == null) m = 0;
            else m = best.mine;
            if (ct == 0) {
                if (eq.mine < m) return;
                best = null;
                m = 0;
                var $it0 = this.getEquipment();
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    var e;
                    e = js_Boot.__cast(i.item, com_davidmaletz_mining_item_Equipment);
                    if (e.mine > m) {
                        m = e.mine;
                        best = e;
                    }
                }
                this.mine.set(best);
            } else if (eq.mine > m) this.mine.set(eq);
        },
        updateDefense: function(eq, ct) {
            var best = this.defense.get();
            var d;
            if (best == null) d = 0;
            else d = best.defense;
            if (ct == 0) {
                if (eq.defense < d) return;
                best = null;
                d = 0;
                var $it0 = this.getEquipment();
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    var e;
                    e = js_Boot.__cast(i.item, com_davidmaletz_mining_item_Equipment);
                    if (e.defense > d) {
                        d = e.defense;
                        best = e;
                    }
                }
                this.defense.set(best);
            } else if (eq.defense > d) this.defense.set(eq);
        },
        checkQuestComplete: function(e) {
            var $it0 = HxOverrides.iter(this.quests);
            while ($it0.hasNext()) {
                var q = $it0.next();
                if (q.canComplete != null && this.canCompleteQuest(q.id)) q.runCanCompleteEvent(this);
            }
        },
        check_capacity: function(e) {
            if (e.item.type == 2) {
                var eq;
                eq = js_Boot.__cast(e.item, com_davidmaletz_mining_item_Equipment);
                if (eq.capacity != 0) this.updateCapacity(eq, e.count);
                if (eq.attack != 0) this.updateAttack(eq, e.count);
                if (eq.cut != 0) this.updateCut(eq, e.count);
                if (eq.mine != 0) this.updateMine(eq, e.count);
                if (eq.defense != 0) this.updateDefense(eq, e.count);
            }
            this.checkQuestComplete(null);
        },
        addStamina: function(s) {
            s += this.stamina;
            var max = this.getMaxStamina();
            if (s > max) s = max;
            if (s != this.stamina) {
                this.stamina = s;
                this.staminaWarning = true;
                this.dispatchEvent(new openfl_events_Event("change_stamina"));
            }
        },
        loseStamina: function(s) {
            var d = this.inventory.weight - this.capacity.get();
            if (d > 0) s += d;
            s = this.stamina - s;
            if (s < 0) {
                this.loseHealth( - s, false, null, null);
                s = 0;
                if (this.staminaWarning) {
                    new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "stamina"), 16720418, -16777216, 20, 60, 20);
                    this.staminaWarning = false;
                }
            }
            if (s != this.stamina) {
                this.stamina = s;
                this.dispatchEvent(new openfl_events_Event("change_stamina"));
            }
        },
        addCoins: function(c) {
            c += this.coins;
            if (c > 9999) c = 9999;
            if (c < 0) c = 0;
            if (this.coins != c) {
                this.coins = c;
                this.dispatchEvent(new openfl_events_Event("change_coins"));
            }
        },
        levelUp: function(to) {
            var i = this.info;
            var l = this.levelFromExperience(this.experience);
            var d = to - l;
            new com_davidmaletz_mining_ui_LevelUpPopup(l, to, d * i.healthPerLevel, d * i.staminaPerLevel);
        },
        onLevelUp: function() {
            this.addHealth(this.getMaxHealth() - this.health);
            this.addStamina(this.getMaxStamina() - this.stamina);
        },
        getExpPercent: function() {
            var l = this.levelFromExperience(this.experience);
            var min = Math.floor(Math.pow(1.5, l - 1 + 1) * 40) - 40;
            return (this.experience - min) / (Math.floor(Math.pow(1.5, l + 1) * 40) - 40 - min);
        },
        addExp: function(e) {
            e += this.experience;
            var max = Math.floor(Math.pow(1.5, this.info.maxLevel + 1) * 40) - 40;
            if (e > max) e = max;
            if (e < 0) e = 0;
            if (this.experience != e) {
                var lu = e >= com_davidmaletz_mining_Player.experienceToNextLevel(this.levelFromExperience(this.experience));
                if (lu) this.levelUp(this.levelFromExperience(e));
                this.experience = e;
                if (lu) this.onLevelUp();
                this.dispatchEvent(new openfl_events_Event("add_exp"));
            }
        },
        addedToArea: function() {
            com_davidmaletz_mining_world_Object.prototype.addedToArea.call(this);
            this.onEnterTile(this.tile_x, this.tile_y);
            com_davidmaletz_mining_Player.min_weight.addEventListener("updated", $bind(this, this.update_weight));
        },
        removedFromArea: function(area) {
            com_davidmaletz_mining_world_Object.prototype.removedFromArea.call(this, area);
            this.onOverlap(null, null);
            var s = area.getStructure(this.tile_x, this.tile_y);
            if (s != null) s.onOut(this);
            com_davidmaletz_mining_Player.min_weight.removeEventListener("updated", $bind(this, this.update_weight));
        },
        onInstantMove: function() {
            if (this.renderer != null)(js_Boot.__cast(this.renderer, com_davidmaletz_mining_renderer_PlayerRenderer)).updateScroll(true);
        },
        changeTile: function(toX, toY) {
            com_davidmaletz_mining_world_Object.prototype.changeTile.call(this, toX, toY);
            this.onEnterTile(toX, toY);
            this.loseStamina(5 - this.endurance);
        },
        onSelect: function() {
            if (this.structure != null) this.structure.prepareOperate(this);
            else if (this.object != null) this.object.onOperate(this);
            else if (!this.inventory.getItems().hasNext()) this.addItem((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("magic_box");
                return $r;
            } (this)), 1);
        },
        onCancel: function() {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_Options(c, true), 1);
        },
        applyMod: function(item, ct) {
            if (ct == null) ct = 1;
            if (ct <= 0) return false;
            var ret = false;
            if (item.xml.exists("light")) {
                var v = Std.parseInt(item.xml.get("light"));
                if (v != 0) {
                    this.lightMod.set(this.lightMod.get() + v * ct);
                    ret = true;
                }
            }
            if (item.xml.exists("attack")) {
                var v1 = Std.parseInt(item.xml.get("attack"));
                if (v1 != 0) {
                    this.attackMod.set(this.attackMod.get() + v1 * ct);
                    ret = true;
                }
            }
            if (item.xml.exists("defense")) {
                var v2 = Std.parseInt(item.xml.get("defense"));
                if (v2 != 0) {
                    this.defenseMod.set(this.defenseMod.get() + v2 * ct);
                    ret = true;
                }
            }
            if (item.xml.exists("max_health") && this.addMaxHealth(Std.parseInt(item.xml.get("max_health")) * ct)) ret = true;
            if (item.xml.exists("max_stamina") && this.addMaxStamina(Std.parseInt(item.xml.get("max_stamina")) * ct)) ret = true;
            if (item.xml.exists("speed") && this.addSpeed(Std.parseInt(item.xml.get("speed")) * ct)) ret = true;
            if (item.xml.exists("endurance") && this.addEndurance(Std.parseInt(item.xml.get("endurance")) * ct)) ret = true;
            return ret;
        },
        drop: function(item, ct) {
            this.inventory.addItem(item, -ct);
            com_davidmaletz_faengfl_SoundManager.playSFX("drop");
        },
        eat: function(item, ct) {
            if (ct > 0 && this.inventory.getItemCount(item) >= ct) {
                var f;
                f = js_Boot.__cast(item, com_davidmaletz_mining_item_Food);
                var old_h = this.health;
                var old_s = this.stamina;
                var one = this.oneHp();
                if (f.health != 0) {
                    if (f.health > 0) this.addHealth(f.health * one * ct);
                    else this.loseHealth( - f.health * one * ct, false, null, null);
                }
                if (f.stamina != 0) {
                    if (f.stamina > 0) this.addStamina(f.stamina * one * ct);
                    else this.loseStamina( - f.stamina * one * ct);
                }
                if (this.applyMod(item, ct) || this.health != old_h || this.stamina != old_s) {
                    com_davidmaletz_faengfl_SoundManager.playSFX("eat");
                    this.inventory.addItem(item, -ct);
                    return true;
                } else {
                    var c = com_davidmaletz_faengfl_Application.instance.container;
                    c.addDisplay(new com_davidmaletz_mining_ui_Prompt(c, new com_fancyfish_faeng_common_mutable_Concat2(com_fancyfish_faeng_common_Lang.getText("warning", "no_effect"), com_fancyfish_faeng_common_Lang.getText("warning", "drop_instead"), "\n"), (function(f1, a1, ct1) {
                        return function() {
                            f1(a1, ct1);
                        };
                    })($bind(this, this.drop), item, ct)), 2);
                    return false;
                }
            } else return false;
        },
        setHotkey: function(i, item) {
            if (item != this.hotkeys[i]) {
                this.hotkeys[i] = item;
                this.dispatchEvent(new com_davidmaletz_faengfl_events_IntEvent("hotkey_changed", i));
            }
        },
        useHotkey: function(i) {
            var item = this.hotkeys[i];
            if (item != null && this.inventory.getItemCount(item) > 0) {
                if (item.type == 0) this.eat(item, 1);
                else if (item.action != null && item["use"](this)) this.inventory.addItem(item, -1);
            }
        },
        getHotkey: function(i) {
            return this.hotkeys[i];
        },
        getEquipment: function() {
            return this.inventory.getItems((function(f, a1) {
                return function(a2) {
                    return f(a1, a2);
                };
            })(com_davidmaletz_mining_item_Inventory.filterType, 2));
        },
        getLightRange: function() {
            var l = this.lightMod.get();
            var torch;
            if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
            torch = com_davidmaletz_mining_item_Item.items.get("torch");
            if (l <= 0 && this.inventory.getItemCount(torch) > 0) {
                if (torch["use"](this)) this.inventory.addItem(torch, -1);
                l = this.lightMod.get();
            }
            var mod = 0;
            if (l > 0) {
                this.lightMod.set(l - 1);
                mod++;
            }
            return this.light.get() + mod;
        },
        mineTile: function(tool, tile, x, y, item, mine_cost) {
            if (item != null) {
                if (this.renderer == null) this.addItem(item.item, item.count);
                else com_davidmaletz_mining_renderer_CollectLoot.collect(this, item, this.renderer.parent, com_davidmaletz_tiles_Tile.SIZE * x, (y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
            }
            mine_cost++;
            this.loseStamina(tool.stamina * this.oneHp() * mine_cost);
            this.addExp(mine_cost);
        },
        useEquipment: function(tool) {
            if (tool.xml.exists("projectile") && !this.inventory.addItem(com_davidmaletz_mining_item_Item.get(tool.xml.get("projectile")), -1)) return false;
            this.loseStamina(tool.stamina * this.oneHp());
            com_davidmaletz_mining_Sounds.playSound(this, tool, null);
            if (!tool.xml.exists("range")) this.showPopup(com_fancyfish_faeng_common_Lang.getText("common", "miss"), -com_davidmaletz_tiles_Tile.SIZE);
            return true;
        },
        addAttackExp: function(o, oldHealth) {
            var e = oldHealth - o.health;
            if (js_Boot.__instanceof(o, com_davidmaletz_mining_enemy_Enemy)) e *= (js_Boot.__cast(o, com_davidmaletz_mining_enemy_Enemy)).getInfo().defense + 1;
            if (e < 0) e = 1;
            if (e > 0) this.addExp(e);
        },
        attackObject: function(tool, o, critical) {
            if (tool.xml.exists("projectile") && !this.inventory.addItem(com_davidmaletz_mining_item_Item.get(tool.xml.get("projectile")), -1)) return false;
            this.loseStamina(tool.stamina * this.oneHp());
            var atk;
            if (js_Boot.__instanceof(o, com_davidmaletz_mining_world_Tree)) atk = tool.cut;
            else {
                atk = tool.attack;
                var m = this.attackMod.get();
                if (m > 0) {
                    this.attackMod.set(m - 1);
                    atk++;
                }
                var r = Math.pow(Math.random(), 5 / (this.levelFromExperience(this.experience) + 4));
                if (r > 0.9) critical = true;
                if (!critical && r < 0.2) {
                    o.showPopup(com_fancyfish_faeng_common_Lang.getText("common", "miss"));
                    com_davidmaletz_mining_Sounds.playSound(this, tool, null);
                    return true;
                }
            }
            var old = o.health;
            o.loseHealth(atk, critical, this, tool);
            this.addAttackExp(o, old);
            return true;
        },
        getMeleeWeapon: function(o) {
            var eq = this.equipment.get();
            if (eq != null && !eq.xml.exists("range")) return eq;
            if (js_Boot.__instanceof(o, com_davidmaletz_mining_world_Tree)) return this.cut.get();
            else return this.attack.get();
        },
        getActionObject: function(x, y) {
            var o = null;
            if (this.renderer != null) o = this.area.getObject(x - com_fancyfish_faeng_common_Utils.sign(this.renderer.get_scaleX(), null), y, this, 1);
            var o2 = this.area.getActionObject(this, x, y);
            if (o2 != null && (o == null || o2.getLayer() > o.getLayer())) o = o2;
            return o;
        },
        onEnterTile: function(x, y) {
            var eq = this.equipment.get();
            if (eq == null) this.onOverlap(this.area.getStructure(x, y), this.getActionObject(x, y));
            else this.onOverlap(null, null);
            var s1;
            if (this.tile_x == x && this.tile_y == y) s1 = null;
            else s1 = this.area.getStructure(this.tile_x, this.tile_y);
            var s2 = this.area.getStructure(x, y);
            if (s1 != s2) {
                if (s1 != null) s1.onOut(this);
                if (s2 != null) s2.onOver(this);
            }
        },
        update_equipment: function(e) {
            this.overlapChanged();
        },
        overlapChanged: function() {
            this.onEnterTile(this.tile_x, this.tile_y);
        },
        onOverlap: function(s, o) {
            if (o != null) s = null;
            if (o != this.object) {
                if (this.object != null) {
                    this.object.onExit(this);
                    this.object.removeEventListener("move", $bind(this, this.update_equipment));
                    this.object = null;
                }
                if (o != null) {
                    if (this.structure != null) {
                        this.structure.onExit(this);
                        this.structure = null;
                    }
                    this.object = o;
                    this.object.onEnter(this);
                    this.object.addEventListener("move", $bind(this, this.update_equipment));
                }
            }
            if (s != this.structure) {
                if (this.structure != null) {
                    this.structure.onExit(this);
                    this.structure = null;
                }
                if (s != null) {
                    if (this.object != null) {
                        this.object.onExit(this);
                        this.object.removeEventListener("move", $bind(this, this.update_equipment));
                        this.object = null;
                    }
                    this.structure = s;
                    s.onEnter(this);
                }
            }
        },
        addItem: function(item, count) {
            if (count == null) count = 1;
            var p = new com_davidmaletz_mining_ui_ItemPopup(item, count);
            this.inventory.addItem(item, count);
            com_davidmaletz_faengfl_SoundManager.playSFX("item");
            if (this.inventory.weight > this.capacity.get()) new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "weight"), 16720418);
            return p;
        },
        setQuest: function(q, complete) {
            if (this.questMap.exists(q.id)) {
                var c = this.questMap.get(q.id);
                if (c == complete) return null;
                if (c) this.completeQuests.remove(q);
                else HxOverrides.remove(this.quests, q);
            }
            this.questMap.set(q.id, complete);
            return q;
        },
        getQuestCount: function(incComplete) {
            return this.quests.length + (incComplete ? this.completeQuests.size() : 0);
        },
        getQuests: function() {
            return HxOverrides.iter(this.quests);
        },
        getCompleteQuests: function() {
            return new com_fancyfish_faeng_common__$Dequeue_DequeueIterator(this.completeQuests);
        },
        hasQuest: function(id) {
            return this.questMap.exists(id);
        },
        questComplete: function(id) {
            return this.questMap.get(id) == true;
        },
        canCompleteQuest: function(id) {
            if (this.questMap.get(id) != false) return false;
            var q;
            if (id == null) q = null;
            else {
                if (com_davidmaletz_mining_npc_Quest.quests == null) com_davidmaletz_mining_npc_Quest.loadQuests();
                q = com_davidmaletz_mining_npc_Quest.quests.get(id);
            }
            if (this.coins < q.coins) return false;
            var $it0 = HxOverrides.iter(q.requires);
            while ($it0.hasNext()) {
                var r = $it0.next();
                if (this.inventory.getItemCount(r.item) < r.count) return false;
            }
            return true;
        },
        addQuest: function(q) {
            q = this.setQuest(q, false);
            if (q != null) {
                this.quests.push(q);
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_quest", q));
            }
        },
        completeQuest: function(q) {
            if (!this.canCompleteQuest(q.id)) return false;
            if (q.achievement != null) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(q.achievement);
            q = this.setQuest(q, true);
            if (q != null) this.completeQuests.addFirst(q);
            this.addCoins( - q.coins);
            this.addExp(q.exp);
            var $it0 = HxOverrides.iter(q.requires);
            while ($it0.hasNext()) {
                var r = $it0.next();
                this.inventory.addItem(r.item, -r.count);
            }
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("complete_quest", q));
            return true;
        },
        levelFromExperience: function(e) {
            return Math.floor(Math.min(this.info.maxLevel, Math.max(0, Math.log((e + 0.99999 + 40) / 40) / Math.log(1.5))));
        },
        write: function(b) {
            com_davidmaletz_mining_world_Object.prototype.write.call(this, b);
            b.writeUInt16(this.stamina);
            this.inventory.write(b);
            b.writeUInt24(this.coins);
            var e = this.equipment.get();
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, e == null ? null: e.id);
            b.writeByte(this.quests.length);
            var _g = 0;
            var _g1 = this.quests;
            while (_g < _g1.length) {
                var q = _g1[_g]; ++_g;
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, q.id);
            }
            b.writeByte(this.completeQuests.size());
            var $it0 = new com_fancyfish_faeng_common__$Dequeue_DequeueIterator(this.completeQuests);
            while ($it0.hasNext()) {
                var q1 = $it0.next();
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, q1.id);
            }
            b.writeUInt16(this.lightMod.get());
            b.writeUInt16(this.attackMod.get());
            b.writeUInt16(this.defenseMod.get());
            b.writeByte(this.speed);
            b.writeByte(this.endurance);
            b.writeByte(this.max_health);
            b.writeByte(this.max_stamina);
            b.writeUInt24(this.experience);
            b.writeByte(this.hotkeys.length);
            var _g2 = 0;
            var _g11 = this.hotkeys;
            while (_g2 < _g11.length) {
                var k = _g11[_g2]; ++_g2;
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, k == null ? null: k.id);
            }
            var $it1 = this.flags.keys();
            while ($it1.hasNext()) {
                var f = $it1.next();
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, f);
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
            var $it2 = this.vars.keys();
            while ($it2.hasNext()) {
                var v = $it2.next();
                com_davidmaletz_faengfl_UTFUtils.writeUTF(b, v);
                b.writeInt32(this.vars.get(v));
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
        },
        read: function(b, version) {
            com_davidmaletz_mining_world_Object.prototype.read.call(this, b, version);
            this.stamina = b.readUInt16();
            this.inventory.read(b, version);
            this.coins = b.readUInt24();
            if (version >= 13) this.equipment.set(com_davidmaletz_mining_item_Item.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b)));
            this.quests.length = 0;
            this.completeQuests.clear();
            this.questMap = new haxe_ds_StringMap();
            var len = b.readByte() & 255;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.addQuest(com_davidmaletz_mining_npc_Quest.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b)));
            }
            var len1 = b.readByte() & 255;
            var _g1 = 0;
            while (_g1 < len1) {
                var i1 = _g1++;
                var q = this.setQuest(com_davidmaletz_mining_npc_Quest.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b)), true);
                if (q != null) this.completeQuests.addLast(q);
            }
            this.lightMod.set(b.readUInt16());
            this.attackMod.set(b.readUInt16());
            this.defenseMod.set(b.readUInt16());
            this.speed = b.readByte() & 255;
            if (version >= 12) {
                this.endurance = b.readByte() & 255;
                if (this.endurance > 4) this.endurance = 4;
                this.max_health = b.readByte() & 255;
                if (this.max_health > 50) this.max_health = 50;
                this.max_stamina = b.readByte() & 255;
                if (this.max_stamina > 100) this.max_stamina = 100;
            }
            if (this.speed > 4) this.speed = 4;
            this.experience = b.readUInt24();
            var len2 = b.readByte() & 255;
            this.hotkeys.length = 0;
            var _g2 = 0;
            while (_g2 < len2) {
                var i2 = _g2++;
                this.hotkeys[i2] = com_davidmaletz_mining_item_Item.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b));
            }
            var max = this.getMaxHealth();
            if (this.health > max) this.health = max;
            var max1 = this.getMaxStamina();
            if (this.stamina > max1) this.stamina = max1;
            if (version >= 15) {
                var f;
                while ((f = com_davidmaletz_faengfl_UTFUtils.readUTF(b)) != null) this.flags.set(f, true);
            }
            if (version >= 16) {
                var f1;
                while ((f1 = com_davidmaletz_faengfl_UTFUtils.readUTF(b)) != null) {
                    var value = b.readInt32();
                    this.vars.set(f1, value);
                }
            }
        },
        getFlag: function(flag) {
            return this.flags.exists(flag);
        },
        setFlag: function(flag, value) {
            if (value != this.flags.exists(flag)) {
                if (value) this.flags.set(flag, true);
                else this.flags.remove(flag);
                this.dispatchEvent(new openfl_events_Event("change_coins"));
            }
        },
        getVar: function(name) {
            if (this.vars.exists(name)) return this.vars.get(name);
            else return 0;
        },
        setVar: function(name, value) {
            if (value != (this.vars.exists(name) ? this.vars.get(name) : 0)) {
                this.vars.set(name, value);
                this.dispatchEvent(new openfl_events_Event("change_coins"));
            }
        },
        isBlocking: function(asker, flags) {
            return ! js_Boot.__instanceof(asker, com_davidmaletz_mining_Player);
        },
        getLayer: function() {
            return 5;
        },
        beginSpeak: function() {
            var sfx = this.info.talkSfx;
            if (sfx != null) this.playSFX(sfx);
        },
        endSpeak: function(closed) {
            this.stopSFX();
        },
        playSFX: function(id) {
            this.stopSFX();
            if (this.renderer != null && this.renderer.stage != null) this.channel = com_davidmaletz_faengfl_SoundManager.playSFX(id, 1073741823);
        },
        stopSFX: function(e) {
            if (this.channel != null) {
                this.channel.stop();
                this.channel = null;
            }
        },
        __class__: com_davidmaletz_mining_Player
    });
    var com_davidmaletz_mining_world_ObjectInfo = function(id, health) {
        this.id = id;
        this.health = health;
    };
    $hxClasses["com.davidmaletz.mining.world.ObjectInfo"] = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_world_ObjectInfo.__name__ = ["com", "davidmaletz", "mining", "world", "ObjectInfo"];
    com_davidmaletz_mining_world_ObjectInfo.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_world_ObjectInfo.make = function(id, tile_x, tile_y) {
        return (id == null ? null: (function($this) {
            var $r;
            if (com_davidmaletz_mining_world_ObjectInfo.info == null) com_davidmaletz_mining_world_ObjectInfo.loadInfo();
            $r = com_davidmaletz_mining_world_ObjectInfo.info.get(id);
            return $r;
        } (this))).create(tile_x, tile_y);
    };
    com_davidmaletz_mining_world_ObjectInfo.info = null;
    com_davidmaletz_mining_world_ObjectInfo.loadInfo = function() {
        com_davidmaletz_mining_world_ObjectInfo.info = new haxe_ds_StringMap();
        var $it0 = (function($this) {
            var $r;
            if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
            $r = com_davidmaletz_mining_item_Item.items.iterator();
            return $r;
        } (this));
        while ($it0.hasNext()) {
            var i = $it0.next();
            var value = new com_davidmaletz_mining_world_ItemObjectInfo(i);
            com_davidmaletz_mining_world_ObjectInfo.info.set(i.id, value);
        }
        var action_map = new haxe_ds_StringMap();
        action_map.set("tilesheet", com_davidmaletz_tiles_Tile.loadTilesheet);
        if (__map_reserved.player != null) action_map.setReserved("player",
        function(e) {
            var key = e.get("id");
            var value1 = new com_davidmaletz_mining_PlayerInfo(e);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key, value1);
        });
        else action_map.h["player"] = function(e) {
            var key = e.get("id");
            var value1 = new com_davidmaletz_mining_PlayerInfo(e);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key, value1);
        };
        if (__map_reserved.enemy != null) action_map.setReserved("enemy",
        function(e1) {
            var key1 = e1.get("id");
            var value2 = new com_davidmaletz_mining_enemy_EnemyInfo(e1);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key1, value2);
        });
        else action_map.h["enemy"] = function(e1) {
            var key1 = e1.get("id");
            var value2 = new com_davidmaletz_mining_enemy_EnemyInfo(e1);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key1, value2);
        };
        if (__map_reserved.tree != null) action_map.setReserved("tree",
        function(e2) {
            var key2 = e2.get("id");
            var value3 = new com_davidmaletz_mining_world_TreeInfo(e2);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key2, value3);
        });
        else action_map.h["tree"] = function(e2) {
            var key2 = e2.get("id");
            var value3 = new com_davidmaletz_mining_world_TreeInfo(e2);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key2, value3);
        };
        if (__map_reserved.bush != null) action_map.setReserved("bush",
        function(e3) {
            var key3 = e3.get("id");
            var value4 = new com_davidmaletz_mining_world_BushInfo(e3);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key3, value4);
        });
        else action_map.h["bush"] = function(e3) {
            var key3 = e3.get("id");
            var value4 = new com_davidmaletz_mining_world_BushInfo(e3);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key3, value4);
        };
        if (__map_reserved.npc != null) action_map.setReserved("npc",
        function(e4) {
            var key4 = e4.get("id");
            var value5 = new com_davidmaletz_mining_npc_NPCInfo(e4);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key4, value5);
        });
        else action_map.h["npc"] = function(e4) {
            var key4 = e4.get("id");
            var value5 = new com_davidmaletz_mining_npc_NPCInfo(e4);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key4, value5);
        };
        if (__map_reserved.trap != null) action_map.setReserved("trap",
        function(e5) {
            var key5 = e5.get("id");
            var value6 = new com_davidmaletz_mining_world_TrapInfo(e5);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key5, value6);
        });
        else action_map.h["trap"] = function(e5) {
            var key5 = e5.get("id");
            var value6 = new com_davidmaletz_mining_world_TrapInfo(e5);
            com_davidmaletz_mining_world_ObjectInfo.info.set(key5, value6);
        };
        if (__map_reserved.object != null) action_map.setReserved("object",
        function(e6) {
            var i1;
            var key6 = e6.get("id");
            i1 = com_davidmaletz_mining_world_ObjectInfo.info.get(key6);
            if (i1 != null) i1.loadAdditional(e6);
            else {
                var key7 = e6.get("id");
                var value7 = new com_davidmaletz_mining_world_BasicObjectInfo(e6);
                com_davidmaletz_mining_world_ObjectInfo.info.set(key7, value7);
            }
        });
        else action_map.h["object"] = function(e6) {
            var i1;
            var key6 = e6.get("id");
            i1 = com_davidmaletz_mining_world_ObjectInfo.info.get(key6);
            if (i1 != null) i1.loadAdditional(e6);
            else {
                var key7 = e6.get("id");
                var value7 = new com_davidmaletz_mining_world_BasicObjectInfo(e6);
                com_davidmaletz_mining_world_ObjectInfo.info.set(key7, value7);
            }
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/objects.xml", action_map);
    };
    com_davidmaletz_mining_world_ObjectInfo.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_world_ObjectInfo.info == null) com_davidmaletz_mining_world_ObjectInfo.loadInfo();
            return com_davidmaletz_mining_world_ObjectInfo.info.get(id);
        }
    };
    com_davidmaletz_mining_world_ObjectInfo.prototype = {
        create: function(tile_x, tile_y) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        loadAdditional: function(xml) {},
        __class__: com_davidmaletz_mining_world_ObjectInfo
    };
    var com_davidmaletz_mining_PlayerInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), Std.parseInt(xml.get("health")));
        this.tile = com_davidmaletz_tiles_Tile.get(xml.get("tile"));
        this.stamina = Std.parseInt(xml.get("stamina"));
        this.speed = Std.parseInt(xml.get("speed"));
        this.healthPerLevel = Std.parseInt(xml.get("healthPerLevel"));
        this.staminaPerLevel = Std.parseInt(xml.get("staminaPerLevel"));
        this.maxLevel = Std.parseInt(xml.get("maxLevel"));
        this.talkSfx = xml.get("talk_sfx");
    };
    $hxClasses["com.davidmaletz.mining.PlayerInfo"] = com_davidmaletz_mining_PlayerInfo;
    com_davidmaletz_mining_PlayerInfo.__name__ = ["com", "davidmaletz", "mining", "PlayerInfo"];
    com_davidmaletz_mining_PlayerInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_PlayerInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_Player(this, tile_x, tile_y);
        },
        __class__: com_davidmaletz_mining_PlayerInfo
    });
    var com_davidmaletz_mining_Sounds = function() {};
    $hxClasses["com.davidmaletz.mining.Sounds"] = com_davidmaletz_mining_Sounds;
    com_davidmaletz_mining_Sounds.__name__ = ["com", "davidmaletz", "mining", "Sounds"];
    com_davidmaletz_mining_Sounds.equipment = null;
    com_davidmaletz_mining_Sounds.objects = null;
    com_davidmaletz_mining_Sounds.getSound = function(attacker, equip, target) {
        if (com_davidmaletz_mining_Sounds.equipment == null) com_davidmaletz_mining_Sounds.load();
        if (equip != null) {
            var s = com_davidmaletz_mining_Sounds._getSound(com_davidmaletz_mining_Sounds.equipment, equip.id, null, target);
            if (s != null) return s;
        }
        if (attacker == null) return null;
        else return com_davidmaletz_mining_Sounds._getSound(com_davidmaletz_mining_Sounds.objects, attacker.info.id, attacker.getBase(), target);
    };
    com_davidmaletz_mining_Sounds.getDeath = function(object) {
        var g = com_davidmaletz_mining_Sounds.get(com_davidmaletz_mining_Sounds.objects, object.info.id, object.getBase());
        if (g == null) return null;
        else return g.getDeath(com_davidmaletz_mining_Sounds.objects.get(null));
    };
    com_davidmaletz_mining_Sounds.playSound = function(attacker, equip, target) {
        var s = com_davidmaletz_mining_Sounds.getSound(attacker, equip, target);
        var r = attacker.renderer;
        if (s == null || r == null) return null;
        else return new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, r, s, new openfl_geom_Point());
    };
    com_davidmaletz_mining_Sounds._getSound = function(map, id, base, target) {
        var g = com_davidmaletz_mining_Sounds.get(map, id, base);
        if (g == null) return null;
        else return g.getSound(target, com_davidmaletz_mining_Sounds.objects.get(null));
    };
    com_davidmaletz_mining_Sounds.get = function(map, id, base) {
        var ret;
        ret = id == null ? map._null: map.map.get(id);
        if (ret != null) return ret;
        while (true) {
            var i1 = id.lastIndexOf(".");
            if (i1 == -1) break;
            id = HxOverrides.substr(id, 0, i1);
            ret = id == null ? map._null: map.map.get(id);
            if (ret != null) return ret;
        }
        var i = id.lastIndexOf("_");
        if (i != -1) {
            ret = map.get(id.substring(i + 1));
            if (ret != null) return ret;
        }
        if (base != null) {
            ret = base == null ? map._null: map.map.get(base);
            if (ret != null) return ret;
        }
        return map._null;
    };
    com_davidmaletz_mining_Sounds.load = function() {
        com_davidmaletz_mining_Sounds.equipment = new com_davidmaletz_mining__$Sounds_NullMap();
        com_davidmaletz_mining_Sounds.objects = new com_davidmaletz_mining__$Sounds_NullMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.equipment != null) action_map.setReserved("equipment",
        function(e) {
            com_davidmaletz_mining_Sounds.equipment.set(e.get("id"), e.exists("equals") ? com_davidmaletz_mining_Sounds.equipment.get(e.get("equals")) : new com_davidmaletz_mining__$Sounds_SoundGroup(e));
        });
        else action_map.h["equipment"] = function(e) {
            com_davidmaletz_mining_Sounds.equipment.set(e.get("id"), e.exists("equals") ? com_davidmaletz_mining_Sounds.equipment.get(e.get("equals")) : new com_davidmaletz_mining__$Sounds_SoundGroup(e));
        };
        if (__map_reserved.object != null) action_map.setReserved("object",
        function(e1) {
            com_davidmaletz_mining_Sounds.objects.set(e1.get("id"), e1.exists("equals") ? com_davidmaletz_mining_Sounds.objects.get(e1.get("equals")) : new com_davidmaletz_mining__$Sounds_SoundGroup(e1));
        });
        else action_map.h["object"] = function(e1) {
            com_davidmaletz_mining_Sounds.objects.set(e1.get("id"), e1.exists("equals") ? com_davidmaletz_mining_Sounds.objects.get(e1.get("equals")) : new com_davidmaletz_mining__$Sounds_SoundGroup(e1));
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/sounds.xml", action_map);
    };
    var com_davidmaletz_mining__$Sounds_SoundGroup = function(xml) {
        this.map = new com_davidmaletz_mining__$Sounds_NullMap();
        var $it0 = xml.elementsNamed("sound");
        while ($it0.hasNext()) {
            var e = $it0.next();
            this.map.set(e.get("target"), e.get("id"));
        }
    };
    $hxClasses["com.davidmaletz.mining._Sounds.SoundGroup"] = com_davidmaletz_mining__$Sounds_SoundGroup;
    com_davidmaletz_mining__$Sounds_SoundGroup.__name__ = ["com", "davidmaletz", "mining", "_Sounds", "SoundGroup"];
    com_davidmaletz_mining__$Sounds_SoundGroup.prototype = {
        getSound: function(target, p) {
            var r;
            if (target == null) r = com_davidmaletz_mining_Sounds.get(this.map, "miss", null);
            else r = com_davidmaletz_mining_Sounds.get(this.map, target.getId(), target.getBase());
            if (r == null && p != null) return p.getSound(target, null);
            else return r;
        },
        getDeath: function(p) {
            var r = this.map.get("death");
            if (r == null && p != null) return p.getDeath(null);
            else return r;
        },
        __class__: com_davidmaletz_mining__$Sounds_SoundGroup
    };
    var com_davidmaletz_mining__$Sounds_NullMap = function() {
        this._null = null;
        this.map = new haxe_ds_StringMap();
    };
    $hxClasses["com.davidmaletz.mining._Sounds.NullMap"] = com_davidmaletz_mining__$Sounds_NullMap;
    com_davidmaletz_mining__$Sounds_NullMap.__name__ = ["com", "davidmaletz", "mining", "_Sounds", "NullMap"];
    com_davidmaletz_mining__$Sounds_NullMap.prototype = {
        set: function(key, value) {
            if (key == null) this._null = value;
            else this.map.set(key, value);
        },
        get: function(key) {
            if (key == null) return this._null;
            else return this.map.get(key);
        },
        __class__: com_davidmaletz_mining__$Sounds_NullMap
    };
    var com_davidmaletz_mining_effects_Rain = function(w, p, theta, vel, n_drops) {
        if (n_drops == null) n_drops = 500;
        if (vel == null) vel = 30;
        if (theta == null) theta = 0.4;
        if (p == null) p = 2;
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.world = w;
        this.drops = [];
        this.num_drops = n_drops;
        this.power = p;
        this.setAngle(theta, vel);
    };
    $hxClasses["com.davidmaletz.mining.effects.Rain"] = com_davidmaletz_mining_effects_Rain;
    com_davidmaletz_mining_effects_Rain.__name__ = ["com", "davidmaletz", "mining", "effects", "Rain"];
    com_davidmaletz_mining_effects_Rain.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_effects_Rain.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        setAngle: function(theta, vel) {
            this.velX = Math.sin(theta) * vel;
            this.velY = Math.cos(theta) * vel;
        },
        handleDrop: function(drop) {
            if (drop.y > 144) return false;
            var hitGround = drop.y + drop.velY > this.world.get_y();
            if (hitGround) {
                var s = (this.world.get_y() - drop.y) / drop.velY;
                drop.velY *= s;
                drop.velX *= s;
                var x = drop.x + drop.velX;
                var y = drop.y + drop.velY;
                this.get_graphics().moveTo(x, y);
                this.get_graphics().lineTo(x + drop.velX * 0.25, y - drop.velY * 0.25);
            }
            this.get_graphics().moveTo(drop.x, drop.y);
            this.get_graphics().lineTo(drop.x + drop.velX, drop.y + drop.velY);
            if (hitGround) return false;
            drop.x += drop.velX;
            drop.y += drop.velY;
            drop.velX += Math.random() * 0.5 - 0.25;
            return true;
        },
        handle_frame: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.handle_frame.call(this, e);
            if (this.world.get_y() <= 0) {
                this.get_graphics().clear();
                return;
            }
            var st = this.drops.length;
            var end = st + this.power;
            if (end > this.num_drops) end = this.num_drops;
            var minx = 0;
            var maxx = 256;
            if (this.velX > 0) minx -= 144 * (this.velX / this.velY);
            else maxx -= 144 * (this.velX / this.velY);
            var _g = st;
            while (_g < end) {
                var i = _g++;
                var drop = new com_davidmaletz_mining_effects__$Rain_Drop();
                drop.x = minx + Math.random() * (maxx - minx);
                drop.y = 0;
                drop.velX = this.velX * (Math.random() * 0.4 + 0.8);
                drop.velY = this.velY * (Math.random() * 0.4 + 0.8);
                var n1 = Math.random();
                drop.x -= drop.velX * n1;
                drop.y -= drop.velY * n1;
                this.drops.push(drop);
            }
            this.get_graphics().clear();
            this.get_graphics().lineStyle(1, 13421823, 0.6);
            var n = [];
            var _g1 = 0;
            var _g11 = this.drops;
            while (_g1 < _g11.length) {
                var d = _g11[_g1]; ++_g1;
                if (this.handleDrop(d)) n.push(d);
            }
            this.drops = n;
        },
        __class__: com_davidmaletz_mining_effects_Rain
    });
    var com_davidmaletz_mining_effects__$Rain_Drop = function() {};
    $hxClasses["com.davidmaletz.mining.effects._Rain.Drop"] = com_davidmaletz_mining_effects__$Rain_Drop;
    com_davidmaletz_mining_effects__$Rain_Drop.__name__ = ["com", "davidmaletz", "mining", "effects", "_Rain", "Drop"];
    com_davidmaletz_mining_effects__$Rain_Drop.prototype = {
        __class__: com_davidmaletz_mining_effects__$Rain_Drop
    };
    var com_davidmaletz_mining_effects_Scene = function(id) {
        var _g = this;
        this.id = id;
        var path = "data/scenes/" + id + "/";
        var sec = "scene." + id + ".";
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.tilesheet != null) action_map.setReserved("tilesheet",
        function(e) {
            com_davidmaletz_tiles_Tile.loadTilesheetPath(path + e.get("id"), e);
        });
        else action_map.h["tilesheet"] = function(e) {
            com_davidmaletz_tiles_Tile.loadTilesheetPath(path + e.get("id"), e);
        };
        if (__map_reserved.tile != null) action_map.setReserved("tile",
        function(e1) {
            com_davidmaletz_tiles_Tile.setTile(sec + e1.get("id"), path, e1);
        });
        else action_map.h["tile"] = function(e1) {
            com_davidmaletz_tiles_Tile.setTile(sec + e1.get("id"), path, e1);
        };
        if (__map_reserved.animation != null) action_map.setReserved("animation",
        function(e2) {
            com_davidmaletz_tiles_TileAnimation.setAnimation(sec + e2.get("id"), e2);
        });
        else action_map.h["animation"] = function(e2) {
            com_davidmaletz_tiles_TileAnimation.setAnimation(sec + e2.get("id"), e2);
        };
        this.layers = new haxe_ds_StringMap();
        this.map = new haxe_ds_StringMap();
        if (__map_reserved.layer != null) action_map.setReserved("layer",
        function(e3) {
            var l = _g.makeLayer(e3);
            if (l != null) {
                var key = e3.get("id");
                _g.layers.set(key, l);
            }
        });
        else action_map.h["layer"] = function(e3) {
            var l = _g.makeLayer(e3);
            if (l != null) {
                var key = e3.get("id");
                _g.layers.set(key, l);
            }
        };
        if (__map_reserved.show != null) action_map.setReserved("show",
        function(e4) {
            var key1 = e4.get("id");
            _g.map.set(key1, e4);
        });
        else action_map.h["show"] = function(e4) {
            var key1 = e4.get("id");
            _g.map.set(key1, e4);
        };
        com_davidmaletz_faengfl_EventHandler.parse(path + "scene.xml", action_map);
    };
    $hxClasses["com.davidmaletz.mining.effects.Scene"] = com_davidmaletz_mining_effects_Scene;
    com_davidmaletz_mining_effects_Scene.__name__ = ["com", "davidmaletz", "mining", "effects", "Scene"];
    com_davidmaletz_mining_effects_Scene.scenes = null;
    com_davidmaletz_mining_effects_Scene.get = function(id) {
        if (id == null || !openfl_Assets.exists("data/scenes/" + id + "/scene.xml")) return null;
        else {
            if (com_davidmaletz_mining_effects_Scene.scenes == null) com_davidmaletz_mining_effects_Scene.scenes = new haxe_ds_StringMap();
            var s = com_davidmaletz_mining_effects_Scene.scenes.get(id);
            if (s == null) {
                s = new com_davidmaletz_mining_effects_Scene(id);
                com_davidmaletz_mining_effects_Scene.scenes.set(id, s);
            }
            return s;
        }
    };
    com_davidmaletz_mining_effects_Scene.prototype = {
        makeLayer: function(n) {
            var path = "data/scenes/" + this.id + "/";
            var sec = "scene." + this.id + ".";
            var s = null;
            if (n.exists("image")) s = new openfl_display_Bitmap(openfl_Assets.getBitmapData(path + n.get("image")));
            else if (n.exists("tile")) {
                var t = com_davidmaletz_tiles_Tile.get(sec + n.get("tile"));
                if (t == null) t = com_davidmaletz_tiles_Tile.get(n.get("tile"));
                if (t == null) return null;
                if (n.exists("animation")) {
                    var anim = n.get("animation");
                    if (com_davidmaletz_tiles_TileAnimation.get(sec + anim) != null) anim = sec + anim;
                    if (n.exists("talk")) {
                        var talk = n.get("talk");
                        if (com_davidmaletz_tiles_TileAnimation.get(sec + talk) != null) talk = sec + talk;
                        s = new com_davidmaletz_mining_effects__$Scene_TalkLayer(n.get("id"), t, anim, talk, 10);
                    } else s = new com_davidmaletz_tiles_render_StaticPlayAnimation(t, anim, 10, true);
                } else s = com_davidmaletz_mining_item_Item._createIcon(t);
            }
            if (s == null) return null;
            if (n.exists("x")) s.set_x(Std.parseFloat(n.get("x")));
            if (n.exists("y")) s.set_y(Std.parseFloat(n.get("y")));
            return s;
        },
        getLayer: function(n) {
            if (n.exists("id")) {
                var id = n.get("id");
                var l = this.layers.get(id);
                if (l != null) return l;
                l = this.makeLayer(n);
                if (l != null) this.layers.set(id, l);
                return l;
            } else return this.makeLayer(n);
        },
        show: function(id, p, onComplete) {
            var xml = this.map.get(id);
            if (xml != null) new com_davidmaletz_mining_effects__$Scene_Show(p, this, xml, onComplete);
            else if (onComplete != null) onComplete(null);
        },
        __class__: com_davidmaletz_mining_effects_Scene
    };
    var com_davidmaletz_mining_effects__$Scene_Show = function(p, scene, xml, onComplete) {
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.scene = scene;
        if (xml.exists("sound")) this.channel = com_davidmaletz_faengfl_SoundManager.playSFX(xml.get("sound"), 1073741823);
        else this.channel = null;
        new com_davidmaletz_mining_effects__$Scene_SceneEventHandler(xml, p, this, (function(f, a1) {
            return function() {
                f(a1);
            };
        })(onComplete, this)).runAll();
        com_davidmaletz_faengfl_Application.instance.container.addDisplay(this, 2);
    };
    $hxClasses["com.davidmaletz.mining.effects._Scene.Show"] = com_davidmaletz_mining_effects__$Scene_Show;
    com_davidmaletz_mining_effects__$Scene_Show.__name__ = ["com", "davidmaletz", "mining", "effects", "_Scene", "Show"];
    com_davidmaletz_mining_effects__$Scene_Show.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_effects__$Scene_Show.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            com_davidmaletz_mining_Main.layersBelowVisible(2, false);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            if (e != null) {
                com_davidmaletz_mining_Main.layersBelowVisible(2, true);
                if (this.channel != null) {
                    this.channel.stop();
                    this.channel = null;
                }
            }
        },
        __class__: com_davidmaletz_mining_effects__$Scene_Show
    });
    var com_davidmaletz_mining_npc_NPCEventHandler = function(xml, p, o, func, v, ev) {
        com_davidmaletz_faengfl_EventHandler.call(this, "data/", xml, func, v);
        this.vars.set("player", p);
        this.vars.set("area", p.area);
        this.vars.set("mine", $bind(this, this.mine));
        this.vars.set("setTile", $bind(this, this.setTile));
        this.vars.set("getFlag", $bind(p, p.getFlag));
        this.vars.set("setFlag", $bind(p, p.setFlag));
        this.vars.set("getVar", $bind(p, p.getVar));
        this.vars.set("setVar", $bind(p, p.setVar));
        if (o != null) this.vars.set("this", o);
        this.player = p;
        this.events = ev;
    };
    $hxClasses["com.davidmaletz.mining.npc.NPCEventHandler"] = com_davidmaletz_mining_npc_NPCEventHandler;
    com_davidmaletz_mining_npc_NPCEventHandler.__name__ = ["com", "davidmaletz", "mining", "npc", "NPCEventHandler"];
    com_davidmaletz_mining_npc_NPCEventHandler.parseFrames = function(n) {
        if (n.exists("minutes")) return Std.parseFloat(n.get("minutes")) * 60 * 60;
        else if (n.exists("seconds")) return Std.parseFloat(n.get("seconds")) * 60;
        else if (n.exists("frames")) return Std.parseFloat(n.get("frames"));
        else return 0;
    };
    com_davidmaletz_mining_npc_NPCEventHandler.__super__ = com_davidmaletz_faengfl_EventHandler;
    com_davidmaletz_mining_npc_NPCEventHandler.prototype = $extend(com_davidmaletz_faengfl_EventHandler.prototype, {
        mine: function(x, y, light, tile) {
            if (light == null) light = 0;
            var area = this.player.area;
            var t;
            if (tile != null) t = area.addTileIndex(tile);
            else t = area.getTileId(x, y, 0);
            return area.mine(x, y, t, light);
        },
        setTile: function(x, y, tile) {
            var area = this.player.area;
            area.setTile(x, y, 0, area.addTileIndex(tile));
        },
        start: function() {
            var e = this.choose(this.cur);
            if (e != null) {
                this.cur = null;
                if (!this.runNode(e)) com_davidmaletz_faengfl_EventHandler.prototype.start.call(this);
            } else if (this.onComplete != null) this.onComplete();
        },
        runAll: function() {
            com_davidmaletz_faengfl_EventHandler.prototype.start.call(this);
        },
        showDialogue: function(xml, darken) {
            if (darken == null) darken = true;
            var c = com_davidmaletz_faengfl_Application.instance.container;
            var wnd = new com_davidmaletz_mining_ui_DialogueBox(c, com_fancyfish_faeng_common_Lang.getText(xml.get("section"), xml.get("id")).get(), $bind(this, this.handleNext), xml.exists("speaker") ? com_davidmaletz_faengfl_EventHandler.execute(xml.get("speaker"), this.vars) : null, darken);
            c.addDisplay(wnd, 2);
            return wnd;
        },
        selectChoice: function(wnd, xml) {
            if (this.cur != null) {
                if (this.stack == null) this.stack = [this.cur];
                this.stack.push(this.cur);
            }
            this.cur = xml.elements();
            if (wnd != null) wnd.close();
            else this.handleNext();
        },
        handleChoice: function(xml) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            var options = [];
            var functions = [];
            var wnd = null;
            var i = xml.elementsNamed("dialogue");
            if (i.hasNext()) wnd = this.showDialogue(i.next());
            var ypos;
            if (xml.exists("yalign")) ypos = Std.parseFloat(xml.get("yalign"));
            else ypos = 0.5;
            var $it0 = xml.elementsNamed("choice");
            while ($it0.hasNext()) {
                var n = $it0.next();
                options.push(n.get("id"));
                functions.push((function(f, a1, a2) {
                    return function() {
                        f(a1, a2);
                    };
                })($bind(this, this.selectChoice), wnd, n));
            }
            c.addDisplay(new com_davidmaletz_mining_ui_Choice(c, xml.get("section"), options, functions, 80, false, false, 0.5, ypos), 2);
        },
        addEvent: function(e) {
            if (this.events == null) this.events = [e];
            else this.events.push(e);
            e.eventList = this.events;
        },
        killEvents: function() {
            if (this.events == null) return;
            while (this.events.length > 0) {
                var e = this.events[0];
                e.kill();
            }
        },
        handleTransition: function(n, trans, func, fadeMusic) {
            switch (trans) {
            case "fade":
                new com_davidmaletz_mining_ui_transition_FadeOut(func, 60, fadeMusic);
                return true;
            }
            return com_davidmaletz_faengfl_EventHandler.prototype.handleTransition.call(this, n, trans, func, fadeMusic);
        },
        addTile: function(n, x, y) {
            if (this.player.area.renderer == null) return;
            var t = com_davidmaletz_tiles_Tile.get(n.get("id"));
            var s = null;
            if (n.exists("type")) {
                var cls = n.get("type").toLowerCase();
                cls = cls.charAt(0).toUpperCase() + HxOverrides.substr(cls, 1, null);
                var c = Type.resolveClass("com.davidmaletz.mining.world.types." + cls);
                if (c != null) {
                    s = Type.createInstance(c, [this.player.area, t, n]);
                    x += 0.5;
                    y += 0.5;
                }
            }
            if (s == null) {
                if (n.exists("animation")) s = new com_davidmaletz_tiles_render_PlayAnimation(t, n.get("animation"), 5, true);
                else s = com_davidmaletz_mining_item_Item._createIcon(t);
            }
            s.set_x(x * com_davidmaletz_tiles_Tile.SIZE);
            s.set_y(y * com_davidmaletz_tiles_Tile.SIZE);
            this.player.area.renderer.tiles.addChild(s);
        },
        handleNode: function(n) {
            var _g1 = this;
            var _g;
            if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
            _g = n.nodeName;
            switch (_g) {
            case "dialogue":
                this.showDialogue(n);
                return true;
            case "achievement":
                com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(n.get("id"));
                break;
            case "quest":
                if (n.exists("id")) {
                    if (n.get("ask") == "false") {
                        this.player.addQuest(com_davidmaletz_mining_npc_Quest.get(n.get("id")));
                        if (this.cur != null) {
                            if (this.stack == null) this.stack = [this.cur];
                            this.stack.push(this.cur);
                        }
                        this.cur = n.elements();
                    } else {
                        var c = com_davidmaletz_faengfl_Application.instance.container;
                        c.addDisplay(new com_davidmaletz_mining_ui_AcceptQuest(c, this.player, com_davidmaletz_mining_npc_Quest.get(n.get("id")), (function(f, n1) {
                            return function() {
                                f(n1);
                            };
                        })($bind(this, this.enterChild), n), $bind(this, this.handleNext)), 2);
                        return true;
                    }
                }
                break;
            case "complete":
                if (n.exists("quest")) this.player.completeQuest(com_davidmaletz_mining_npc_Quest.get(n.get("quest")));
                break;
            case "item":
                var p = this.player.addItem(com_davidmaletz_mining_item_Item.get(n.get("id")), n.exists("count") ? Std.parseInt(n.get("count")) : 1);
                if (n.get("modal") == "true") {
                    new com_davidmaletz_mining_ui_transition_Modal(p, $bind(this, this.handleNext));
                    return true;
                }
                break;
            case "structure":
                com_davidmaletz_mining_Main.closeWindows();
                com_davidmaletz_mining_structure_StructureInfo.get(n.get("id")).build(this.player.area, com_davidmaletz_faengfl_EventHandler.execute(n.get("x"), this.vars), n.exists("y") ? com_davidmaletz_faengfl_EventHandler.execute(n.get("y"), this.vars) : -1);
                break;
            case "object":
                var o = com_davidmaletz_mining_world_ObjectInfo.make(n.get("id"), com_davidmaletz_faengfl_EventHandler.execute(n.get("x"), this.vars), n.exists("y") ? com_davidmaletz_faengfl_EventHandler.execute(n.get("y"), this.vars) : -1);
                this.vars.set(n.get("id"), o);
                this.player.area.objects[o.getLayer()].addObject(o);
                if (n.get("mine") == "true") this.player.area.mine(o.tile_x, o.tile_y, this.player.area.getTileId(o.tile_x, o.tile_y, 0), 0);
                var r = o.renderer;
                if (r != null && n.exists("facing")) r.set_scaleX(n.get("facing") == "right" ? -1 : 1);
                break;
            case "remove":
                if (n.exists("object")) {
                    var o1;
                    o1 = js_Boot.__cast(com_davidmaletz_faengfl_EventHandler.execute(n.get("object"), this.vars), com_davidmaletz_mining_world_Object);
                    var modal = n.get("modal") == "true";
                    this.player.area.removeObject(o1, com_davidmaletz_faengfl_EventHandler.execute(n.get("killer"), this.vars), modal ? $bind(this, this.handleNext) : null);
                    if (modal) return true;
                }
                break;
            case "facing":
                var o2 = com_davidmaletz_faengfl_EventHandler.execute(n.get("object"), this.vars);
                var r1 = o2.renderer;
                if (r1 != null) r1.set_scaleX(n.get("dir") == "right" ? -1 : 1);
                break;
            case "tile":
                this.addTile(n, com_davidmaletz_faengfl_EventHandler.execute(n.get("x"), this.vars), n.exists("y") ? com_davidmaletz_faengfl_EventHandler.execute(n.get("y"), this.vars) : -1);
                break;
            case "move":
                var o3 = com_davidmaletz_faengfl_EventHandler.execute(n.get("object"), this.vars);
                if (!o3.setTile(com_davidmaletz_faengfl_EventHandler.execute(n.get("x"), this.vars), n.exists("y") ? com_davidmaletz_faengfl_EventHandler.execute(n.get("y"), this.vars) : -1, true) && o3 == this.player) this.player.overlapChanged();
                break;
            case "save":
                com_davidmaletz_mining_Main.save(this.player);
                break;
            case "storm":
                if (n.exists("start")) {
                    if (this.player.area.renderer != null) {
                        var power;
                        if (n.exists("power")) power = Std.parseInt(n.get("power"));
                        else power = 2;
                        var theta;
                        if (n.exists("theta")) theta = Std.parseFloat(n.get("theta"));
                        else theta = 0.4;
                        var velocity;
                        if (n.exists("velocity")) velocity = Std.parseFloat(n.get("velocity"));
                        else velocity = 30;
                        new com_davidmaletz_mining_effects_Storm(this.player.area.renderer, power, theta, velocity).start(Std.parseInt(n.get("start")), $bind(this, this.handleNext));
                        return true;
                    }
                } else if (com_davidmaletz_mining_effects_Storm.instance != null && n.exists("stop")) {
                    com_davidmaletz_mining_effects_Storm.instance.stop(Std.parseInt(n.get("stop")), $bind(this, this.handleNext));
                    return true;
                }
                break;
            case "event":
                if (n.exists("overweight")) this.addEvent(new com_davidmaletz_mining_npc_event_OverweightEvent(n, this.player, this.vars));
                else if (n.exists("canComplete")) this.addEvent(new com_davidmaletz_mining_npc_event_CanCompleteEvent(n, this.player, this.vars));
                else if (n.exists("onComplete")) this.addEvent(new com_davidmaletz_mining_npc_event_OnCompleteEvent(n, this.player, this.vars, com_davidmaletz_mining_npc_Quest.get(n.get("onComplete"))));
                else if (n.exists("onItem")) this.addEvent(new com_davidmaletz_mining_npc_event_OnItemEvent(n, this.player, this.vars, com_davidmaletz_mining_item_Item.get(n.get("onItem"))));
                break;
            case "killEvents":
                this.killEvents();
                break;
            case "mine":
                com_davidmaletz_mining_world_GenerateEventHandler.doMine(this.player.area, n);
                break;
            case "setTile":
                com_davidmaletz_mining_world_GenerateEventHandler.setTile(this.player.area, n);
                break;
            case "sound":
                if (n.exists("id")) com_davidmaletz_faengfl_SoundManager.playSFX(n.get("id"));
                break;
            case "music":
                if (n.exists("id")) com_davidmaletz_faengfl_SoundManager.playBGM(n.get("id"));
                else {
                    if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.stop();
                    com_davidmaletz_faengfl_SoundManager.cur_bgm = null;
                }
                break;
            case "runAreaLoad":
                if (this.player.area.renderer != null) com_davidmaletz_mining_world_Generate.runLoad(this.player.area.renderer, this.player);
                break;
            case "scene":
                var s = com_davidmaletz_mining_effects_Scene.get(n.get("id"));
                if (s != null) {
                    if (this.cur != null) {
                        if (this.stack == null) this.stack = [this.cur];
                        this.stack.push(this.cur);
                    }
                    this.cur = n.elements();
                    s.show(n.get("show"), this.player, (function(f1, n2) {
                        return function(d) {
                            f1(n2, d);
                        };
                    })($bind(this, this.completeScene), n));
                    return true;
                }
                break;
            case "wait":
                var f2 = Math.round(com_davidmaletz_mining_npc_NPCEventHandler.parseFrames(n));
                if (f2 > 0) {
                    new com_davidmaletz_mining_ui_transition_Wait(f2, $bind(this, this.handleNext));
                    return true;
                }
                break;
            case "lerp":
                var obj = com_davidmaletz_faengfl_EventHandler.execute(n.get("object"), this.vars);
                if (obj != null) {
                    var first = true;
                    var frames = com_davidmaletz_mining_npc_NPCEventHandler.parseFrames(n);
                    var o4;
                    if (js_Boot.__instanceof(obj, com_davidmaletz_mining_world_Object)) o4 = (js_Boot.__cast(obj, com_davidmaletz_mining_world_Object)).renderer;
                    else o4 = js_Boot.__cast(obj, com_davidmaletz_lerp_LerpSpriteBase);
                    if (o4 == null) return false;
                    var modal1 = new com_davidmaletz_mining_ui_transition_LerpModal(o4, null);
                    var func = function() {
                        modal1.kill(null);
                        _g1.handleNext();
                    };
                    if (n.exists("alpha")) {
                        o4.lerp(new com_davidmaletz_lerp_AlphaKeyframe(Std.parseFloat(n.get("alpha"))), Math.round(frames), first ? func: null);
                        first = false;
                    }
                    if (!first) return true;
                    else modal1.kill(null);
                }
                break;
            case "stop":
                return true;
            case "menu":
                this.handleChoice(n);
                return true;
            default:
                return com_davidmaletz_faengfl_EventHandler.prototype.handleNode.call(this, n);
            }
            return false;
        },
        peekNode: function(n, values) {
            if ((function($this) {
                var $r;
                if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                $r = n.nodeName;
                return $r;
            } (this)) == "runAreaLoad") {
                if (this.player.area != null) {
                    var xml = com_davidmaletz_mining_world_Generate.getLoad(this.player.area.spawner.id);
                    if (xml != null) {
                        if (this.cur != null) {
                            if (this.stack == null) this.stack = [this.cur];
                            this.stack.push(this.cur);
                        }
                        this.cur = xml.elements();
                    }
                }
                return null;
            } else return com_davidmaletz_faengfl_EventHandler.prototype.peekNode.call(this, n, values);
        },
        fadeMusic: function(n) {
            return (function($this) {
                var $r;
                if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                $r = n.nodeName;
                return $r;
            } (this)) != "scene" && this._fadeMusic(n);
        },
        _fadeMusic: function(n) {
            var npc = new com_davidmaletz_mining_npc_NPCEventHandler(n, this.player, this.vars.get("this"));
            if ((function($this) {
                var $r;
                if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                $r = n.nodeName;
                return $r;
            } (this)) == "choose" || (function($this) {
                var $r;
                if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
                $r = n.nodeName;
                return $r;
            } (this)) == "group") return npc.getFirst(["music"]) != null;
            else return npc.getAllFirst(["music"]) != null;
        },
        completeScene: function(n, d) {
            if (!n.exists("with") || !this.handleTransition(n, n.get("with"), (function(f, d1) {
                return function() {
                    f(d1);
                };
            })($bind(this, this._completeScene), d), this._fadeMusic(n))) this._completeScene(d);
        },
        _completeScene: function(d) {
            if (d != null) com_davidmaletz_faengfl_FaengFL.remove(d);
            this.handleNext();
        },
        getAllFirst: function(values) {
            return com_davidmaletz_faengfl_EventHandler.prototype.getFirst.call(this, values);
        },
        getFirst: function(values) {
            var e = this.choose(this.cur);
            if (e == null) return null;
            this.cur = null;
            e = this.peekNode(e, values);
            if (e != null) return e;
            else return com_davidmaletz_faengfl_EventHandler.prototype.getFirst.call(this, values);
        },
        __class__: com_davidmaletz_mining_npc_NPCEventHandler
    });
    var com_davidmaletz_mining_effects__$Scene_SceneEventHandler = function(xml, p, show, func) {
        com_davidmaletz_mining_npc_NPCEventHandler.call(this, xml, p, null, func);
        this.show = show;
    };
    $hxClasses["com.davidmaletz.mining.effects._Scene.SceneEventHandler"] = com_davidmaletz_mining_effects__$Scene_SceneEventHandler;
    com_davidmaletz_mining_effects__$Scene_SceneEventHandler.__name__ = ["com", "davidmaletz", "mining", "effects", "_Scene", "SceneEventHandler"];
    com_davidmaletz_mining_effects__$Scene_SceneEventHandler.__super__ = com_davidmaletz_mining_npc_NPCEventHandler;
    com_davidmaletz_mining_effects__$Scene_SceneEventHandler.prototype = $extend(com_davidmaletz_mining_npc_NPCEventHandler.prototype, {
        handleNode: function(n) {
            var _g;
            if (n.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + n.nodeType);
            _g = n.nodeName;
            switch (_g) {
            case "layer":
                var l = this.show.scene.getLayer(n);
                if (l != null) {
                    if (n.exists("id")) this.vars.set(n.get("id"), l);
                    l.set_alpha(1);
                    this.show.addChild(l);
                }
                break;
            default:
                return com_davidmaletz_mining_npc_NPCEventHandler.prototype.handleNode.call(this, n);
            }
            return false;
        },
        showDialogue: function(xml, darken) {
            if (darken == null) darken = true;
            return com_davidmaletz_mining_npc_NPCEventHandler.prototype.showDialogue.call(this, xml, false);
        },
        __class__: com_davidmaletz_mining_effects__$Scene_SceneEventHandler
    });
    var com_davidmaletz_tiles_render_TileAnimationRenderer = function(tile, fps) {
        this.append = null;
        this.anim = null;
        com_davidmaletz_lerp_LerpSpriteFL.call(this);
        this.tile = tile;
        this.deltaFrame = fps / 60;
    };
    $hxClasses["com.davidmaletz.tiles.render.TileAnimationRenderer"] = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_tiles_render_TileAnimationRenderer.__name__ = ["com", "davidmaletz", "tiles", "render", "TileAnimationRenderer"];
    com_davidmaletz_tiles_render_TileAnimationRenderer.__super__ = com_davidmaletz_lerp_LerpSpriteFL;
    com_davidmaletz_tiles_render_TileAnimationRenderer.prototype = $extend(com_davidmaletz_lerp_LerpSpriteFL.prototype, {
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            if (this.animation == anim_id) return;
            this.animation = anim_id;
            if (anim_id == null) this.anim = null;
            else {
                if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
                this.anim = com_davidmaletz_tiles_TileAnimation.anims.get(anim_id);
            }
            if (this.anim == null) {
                if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
                this.anim = com_davidmaletz_tiles_TileAnimation.anims.get("single");
            }
            if (this.anim_cache == null) this.anim_cache = new haxe_ds_StringMap();
            var s = this.anim_cache.get(anim_id);
            if (s == null) {
                s = new openfl_display_Sprite();
                var len1 = this.anim.frames.length;
                var _g = 0;
                while (_g < len1) {
                    var f = _g++;
                    var l = this.anim.createLayerForFrame(this.tile, f, offX, offY);
                    s.addChild(l);
                }
                if (this.anim.append != null) {
                    var r = new com_davidmaletz_tiles_render_TileAnimationRenderer(this.anim.append.tile, this.deltaFrame * 60);
                    r.setAnimation(this.anim.append.animation, offX, offY);
                    s.addChild(r);
                }
                this.addChildAt(s, 0);
                this.anim_cache.set(anim_id, s);
            }
            this.frame = 0;
            this.current = 0;
            if (this.anim_sprite != null) this.anim_sprite.set_visible(false);
            this.anim_sprite = s;
            this.anim_sprite.set_visible(true);
            var len = this.anim.frames.length;
            var _g1 = 0;
            while (_g1 < len) {
                var f1 = _g1++;
                this.anim_sprite.getChildAt(f1).set_visible(f1 == this.current);
            }
            if (this.anim.append != null) this.append = this.anim_sprite.getChildAt(this.anim_sprite.get_numChildren() - 1);
        },
        clear: function(anim_id) {
            if (this.animation == anim_id) this.animation = null;
            if (this.anim_cache != null) {
                var s = this.anim_cache.get(anim_id);
                if (s != null) {
                    if (s.parent == this) this.removeChild(s);
                    this.anim_cache.remove(anim_id);
                }
            }
        },
        getMaxFrame: function() {
            if (this.anim == null) return 0;
            else return this.anim.getMaxTime() / this.deltaFrame;
        },
        getAnimFrame: function() {
            return this.frame;
        },
        setFrame: function(f, loop) {
            if (loop == null) loop = false;
            if (this.anim_sprite == null) return false;
            if (this.append != null) this.append.setFrame(f, loop);
            var max;
            if (this.anim == null) max = 0;
            else max = this.anim.getMaxTime() / this.deltaFrame;
            if (loop) f = f - Math.floor(f / max) * max;
            else if (f > max) f = max;
            else if (f < 0) f = 0;
            if (f != this.frame) {
                this.frame = f;
                var c = com_fancyfish_faeng_common_Utils.drawCDF(this.anim.cdf, this.frame * this.deltaFrame, false);
                if (c != this.current) {
                    this.anim_sprite.getChildAt(this.current).set_visible(false);
                    this.current = c;
                    this.anim_sprite.getChildAt(this.current).set_visible(true);
                }
                return true;
            } else return false;
        },
        hideCurrent: function() {
            if (this.anim_sprite != null) this.anim_sprite.getChildAt(this.current).set_visible(false);
        },
        incFrame: function(df, loop) {
            if (loop == null) loop = false;
            return this.setFrame(this.frame + df, loop);
        },
        __class__: com_davidmaletz_tiles_render_TileAnimationRenderer
    });
    var com_davidmaletz_tiles_render_PlayAnimation = function(tile, anim, fps, loop, complete, offX, offY) {
        if (offY == null) offY = 0;
        if (offX == null) offX = 0;
        com_davidmaletz_tiles_render_TileAnimationRenderer.call(this, tile, fps);
        if (anim != null) {
            this.setAnimation(anim, offX, offY);
            this.loop = loop;
            this.onComplete = complete;
        }
    };
    $hxClasses["com.davidmaletz.tiles.render.PlayAnimation"] = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_tiles_render_PlayAnimation.__name__ = ["com", "davidmaletz", "tiles", "render", "PlayAnimation"];
    com_davidmaletz_tiles_render_PlayAnimation.removeOnComplete = function(d) {
        com_davidmaletz_faengfl_FaengFL.remove(d);
    };
    com_davidmaletz_tiles_render_PlayAnimation.__super__ = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_tiles_render_PlayAnimation.prototype = $extend(com_davidmaletz_tiles_render_TileAnimationRenderer.prototype, {
        playAnimation: function(anim, loop, complete, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            this.setAnimation(anim, offX, offY);
            this.loop = loop;
            this.onComplete = complete;
        },
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, frames);
            if (frames != 0 && !this.setFrame(this.frame + frames, this.loop) && this.onComplete != null) {
                var f = this.onComplete;
                this.onComplete = null;
                f(this);
            }
        },
        __class__: com_davidmaletz_tiles_render_PlayAnimation
    });
    var com_davidmaletz_tiles_render_StaticPlayAnimation = function(tile, anim, fps, loop, complete) {
        com_davidmaletz_tiles_render_PlayAnimation.call(this, tile, anim, fps, loop, complete);
    };
    $hxClasses["com.davidmaletz.tiles.render.StaticPlayAnimation"] = com_davidmaletz_tiles_render_StaticPlayAnimation;
    com_davidmaletz_tiles_render_StaticPlayAnimation.__name__ = ["com", "davidmaletz", "tiles", "render", "StaticPlayAnimation"];
    com_davidmaletz_tiles_render_StaticPlayAnimation.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_tiles_render_StaticPlayAnimation.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        init: function(e) {
            this.destroy(e);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame), false, PriorityManager.priority + 1);
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        handle_frame: function(e) {
            this.enter_frame(com_davidmaletz_faengfl_FaengFL.frameTime);
        },
        __class__: com_davidmaletz_tiles_render_StaticPlayAnimation
    });
    var com_davidmaletz_mining_effects__$Scene_TalkLayer = function(id, tile, idle, talk, fps) {
        com_davidmaletz_tiles_render_StaticPlayAnimation.call(this, tile, idle, fps, true);
        this.id = id;
        this.idle = idle;
        this.talk = talk;
    };
    $hxClasses["com.davidmaletz.mining.effects._Scene.TalkLayer"] = com_davidmaletz_mining_effects__$Scene_TalkLayer;
    com_davidmaletz_mining_effects__$Scene_TalkLayer.__name__ = ["com", "davidmaletz", "mining", "effects", "_Scene", "TalkLayer"];
    com_davidmaletz_mining_effects__$Scene_TalkLayer.__interfaces__ = [com_davidmaletz_mining_npc_Speakable];
    com_davidmaletz_mining_effects__$Scene_TalkLayer.__super__ = com_davidmaletz_tiles_render_StaticPlayAnimation;
    com_davidmaletz_mining_effects__$Scene_TalkLayer.prototype = $extend(com_davidmaletz_tiles_render_StaticPlayAnimation.prototype, {
        destroy: function(e) {
            com_davidmaletz_tiles_render_StaticPlayAnimation.prototype.destroy.call(this, e);
            this.stopSFX();
        },
        beginSpeak: function() {
            this.setAnimation(this.talk, 0, 0);
            this.loop = true;
            this.onComplete = null;
            var o = com_davidmaletz_mining_world_ObjectInfo.get(this.id);
            if (o != null && js_Boot.__instanceof(o, com_davidmaletz_mining_npc_NPCInfo)) {
                var sfx;
                sfx = (js_Boot.__cast(o, com_davidmaletz_mining_npc_NPCInfo)).talkSfx;
                if (sfx != null) this.playSFX(sfx);
            }
        },
        endSpeak: function(closed) {
            if (closed && this.animation == this.talk) {
                this.setAnimation(this.idle, 0, 0);
                this.loop = true;
                this.onComplete = null;
            }
            this.stopSFX();
        },
        playSFX: function(id) {
            this.stopSFX();
            if (this.stage != null) this.channel = com_davidmaletz_faengfl_SoundManager.playSFX(id, 1073741823);
        },
        stopSFX: function() {
            if (this.channel != null) {
                this.channel.stop();
                this.channel = null;
            }
        },
        __class__: com_davidmaletz_mining_effects__$Scene_TalkLayer
    });
    var com_davidmaletz_mining_effects_Storm = function(world, power, theta, velocity) {
        if (velocity == null) velocity = 30;
        if (theta == null) theta = 0.4;
        this.lightning = false;
        this.stormPower = 0;
        this.rain = new com_davidmaletz_mining_effects_Rain(world, power, theta, velocity);
        this.colorMatrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        this.rain.addEventListener("addedToStage", $bind(this, this.init));
        this.rain.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.effects.Storm"] = com_davidmaletz_mining_effects_Storm;
    com_davidmaletz_mining_effects_Storm.__name__ = ["com", "davidmaletz", "mining", "effects", "Storm"];
    com_davidmaletz_mining_effects_Storm.hasStorm = function() {
        return com_davidmaletz_mining_effects_Storm.instance != null;
    };
    com_davidmaletz_mining_effects_Storm.prototype = {
        init: function(e) {
            this.destroy(null);
            if (com_davidmaletz_mining_effects_Storm.instance != null) com_davidmaletz_mining_effects_Storm.instance.stop();
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame)); (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance.container, com_davidmaletz_faengfl_FramebufferSprite)).colorMatrix = this.colorMatrix;
            if (com_davidmaletz_mining_Player.min_weight == null) com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
            com_davidmaletz_mining_Player.min_weight.set(15);
            com_davidmaletz_mining_effects_Storm.instance = this;
        },
        destroy: function(e) {
            if (com_davidmaletz_mining_effects_Storm.instance == this) com_davidmaletz_mining_effects_Storm.instance = null;
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
            if (e != null) { (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance.container, com_davidmaletz_faengfl_FramebufferSprite)).colorMatrix = null;
                com_davidmaletz_mining_renderer_Parallax.setStorm(1);
                if (com_davidmaletz_mining_Player.min_weight == null) com_davidmaletz_mining_Player.min_weight = new com_fancyfish_faeng_common_mutable_Mutable();
                com_davidmaletz_mining_Player.min_weight.set(50);
            }
        },
        setLightning: function() {
            this.lightning_ct = Math.round((Math.random() * 0.5 + 0.5) * 500);
        },
        start: function(frames, onComplete) {
            if (frames == null) frames = 0;
            this.lightning_ct = Math.round((Math.random() * 0.5 + 0.5) * 500);
            if (frames == 0) {
                this.rain.set_alpha(1);
                com_davidmaletz_mining_renderer_Parallax.setStorm(0);
                this.rain.tracks = null;
                this.setStormColor(1);
                if (onComplete != null) onComplete();
            } else {
                this.rain.set_alpha(0);
                com_davidmaletz_mining_renderer_Parallax.setStorm(1);
                this.rain.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), frames, onComplete);
                this.setStormColor(0);
            }
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(this.rain, 0);
            com_davidmaletz_faengfl_SoundManager.playBGM("rain");
        },
        remove: function(onComplete) {
            if (onComplete != null) onComplete();
            if (this.rain.parent != null) this.rain.parent.removeChild(this.rain);
        },
        stop: function(frames, onComplete) {
            if (frames == null) frames = 0;
            if (frames == 0) this.remove(onComplete);
            else this.rain.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), frames, (function(f, a1) {
                return function() {
                    f(a1);
                };
            })($bind(this, this.remove), onComplete));
        },
        setStormColor: function(f) {
            var light = this.lightning_ct < 0 && Math.random() < 0.8;
            if (this.stormPower == f && this.lightning == light) return;
            this.stormPower = f;
            this.lightning = light;
            var sat = 1 - f * 0.5;
            var darken;
            if (this.lightning) darken = 1.5;
            else darken = 1 - f * 0.35;
            var lumR = 0.3086;
            var lumG = 0.6094;
            var lumB = 0.0820;
            var r = lumR * (1 - sat) * darken;
            var g = lumG * (1 - sat) * darken;
            var b = lumB * (1 - sat) * darken;
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 0, r + sat * darken);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 1, g);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 2, b);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 4, r);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 5, g + sat * darken);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 6, b);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 8, r);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 9, g);
            lime_math__$Matrix4_Matrix4_$Impl_$.set(this.colorMatrix, 10, b + sat * darken);
        },
        handle_frame: function(e) {
            if (this.rain.parent == null) return;
            if (this.lightning_ct >= 0) {
                this.lightning_ct--;
                if (this.lightning_ct < 0) {
                    com_davidmaletz_faengfl_SoundManager.playSFX("thunder");
                    this.lightning_ct = -20;
                }
            } else {
                this.lightning_ct++;
                if (this.lightning_ct == 0) this.lightning_ct = Math.round((Math.random() * 0.5 + 0.5) * 500);
            }
            this.setStormColor(this.rain.get_alpha());
            com_davidmaletz_mining_renderer_Parallax.setStorm(1 - this.rain.get_alpha());
        },
        __class__: com_davidmaletz_mining_effects_Storm
    };
    var com_davidmaletz_mining_world_TooltipObject = function(info, x, y) {
        com_davidmaletz_mining_world_Object.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.world.TooltipObject"] = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_world_TooltipObject.__name__ = ["com", "davidmaletz", "mining", "world", "TooltipObject"];
    com_davidmaletz_mining_world_TooltipObject.__super__ = com_davidmaletz_mining_world_Object;
    com_davidmaletz_mining_world_TooltipObject.prototype = $extend(com_davidmaletz_mining_world_Object.prototype, {
        onEnter: function(p) {
            var t = this.getAction(p);
            if (t != null) {
                this.tooltip = new com_davidmaletz_mining_ui_KeyTooltip("select", 128., 16, t);
                this.tooltip.set_alpha(0);
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(), 10);
            }
        },
        onExit: function(p) {
            if (this.tooltip != null) {
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, this.tooltip));
                this.tooltip = null;
            }
        },
        __class__: com_davidmaletz_mining_world_TooltipObject
    });
    var com_davidmaletz_mining_enemy_Enemy = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.enemy.Enemy"] = com_davidmaletz_mining_enemy_Enemy;
    com_davidmaletz_mining_enemy_Enemy.__name__ = ["com", "davidmaletz", "mining", "enemy", "Enemy"];
    com_davidmaletz_mining_enemy_Enemy.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_enemy_Enemy.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_enemy_EnemyRenderer(this);
        },
        getInfo: function() {
            return this.info;
        },
        isBack: function() {
            return true;
        },
        getLoot: function() {
            var i = this.info.loot.getLoot();
            if (i == null) return null;
            else return new com_davidmaletz_mining_item_ItemCt(i, 1);
        },
        onDeath: function(killer) {
            if (this.area != null) {
                this.area.objects[this.getLayer()].removeObject(this, killer, null);
                var xml = this.info.xml;
                if (xml.exists("kill_achievement")) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(xml.get("kill_achievement"));
            }
        },
        onCapture: function() {
            var i = this.info;
            var xml = i.xml;
            if (xml.exists("trap_achievement")) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(xml.get("trap_achievement"));
            return i.trapped;
        },
        getAction: function(p) {
            if (p.getMeleeWeapon(this) == null) return null;
            else return com_fancyfish_faeng_common_Lang.getText("object.tooltip", "enemy");
        },
        onOperate: function(p) {
            p.tryAttack(null, null);
        },
        isBlocking: function(asker, flags) {
            return (flags & 1) != 0 || !js_Boot.__instanceof(asker, com_davidmaletz_mining_Player);
        },
        getLayer: function() {
            return 3;
        },
        loseHealth: function(h, critical, attacker, equip) {
            if (attacker != null) {
                h -= this.info.defense;
                if (! (critical && h == 0) && h <= 0) {
                    if (this.renderer != null) new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, this.renderer, "blocked", new openfl_geom_Point());
                    this.showPopup(com_fancyfish_faeng_common_Lang.getText("common", "blocked"));
                    return;
                }
            }
            com_davidmaletz_mining_world_TooltipObject.prototype.loseHealth.call(this, h, critical, attacker, equip);
        },
        canEnter: function(x, y) {
            y++;
            var t = this.area.getTile(x, y, 0);
            return t != null && t.id != "empty" || this.area.getTile(x, y, 3) != null;
        },
        __class__: com_davidmaletz_mining_enemy_Enemy
    });
    var com_davidmaletz_mining_enemy_Boar = function(info, x, y) {
        com_davidmaletz_mining_enemy_Enemy.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.enemy.Boar"] = com_davidmaletz_mining_enemy_Boar;
    com_davidmaletz_mining_enemy_Boar.__name__ = ["com", "davidmaletz", "mining", "enemy", "Boar"];
    com_davidmaletz_mining_enemy_Boar.__super__ = com_davidmaletz_mining_enemy_Enemy;
    com_davidmaletz_mining_enemy_Boar.prototype = $extend(com_davidmaletz_mining_enemy_Enemy.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_enemy__$Boar_BoarRenderer(this);
        },
        __class__: com_davidmaletz_mining_enemy_Boar
    });
    var com_davidmaletz_mining_enemy_EnemyRenderer = function(e, fps) {
        if (fps == null) fps = 15;
        this.exists = false;
        var i = e.info;
        com_davidmaletz_tiles_render_PlayAnimation.call(this, com_davidmaletz_tiles_Tile.get(i.tile), i.tile + ".idle", fps, true);
        this.enemy = e;
        this.set_x((e.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((e.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
    };
    $hxClasses["com.davidmaletz.mining.enemy.EnemyRenderer"] = com_davidmaletz_mining_enemy_EnemyRenderer;
    com_davidmaletz_mining_enemy_EnemyRenderer.__name__ = ["com", "davidmaletz", "mining", "enemy", "EnemyRenderer"];
    com_davidmaletz_mining_enemy_EnemyRenderer.counts = null;
    com_davidmaletz_mining_enemy_EnemyRenderer.getLiveCount = function(id) {
        if (com_davidmaletz_mining_enemy_EnemyRenderer.counts == null || !com_davidmaletz_mining_enemy_EnemyRenderer.counts.exists(id)) return 0;
        else return com_davidmaletz_mining_enemy_EnemyRenderer.counts.get(id);
    };
    com_davidmaletz_mining_enemy_EnemyRenderer.incCount = function(id) {
        if (com_davidmaletz_mining_enemy_EnemyRenderer.counts == null) com_davidmaletz_mining_enemy_EnemyRenderer.counts = new haxe_ds_StringMap();
        if (!com_davidmaletz_mining_enemy_EnemyRenderer.counts.exists(id)) com_davidmaletz_mining_enemy_EnemyRenderer.counts.set(id, 1);
        else {
            var value = com_davidmaletz_mining_enemy_EnemyRenderer.counts.get(id) + 1;
            com_davidmaletz_mining_enemy_EnemyRenderer.counts.set(id, value);
        }
    };
    com_davidmaletz_mining_enemy_EnemyRenderer.decCount = function(id) {
        if (com_davidmaletz_mining_enemy_EnemyRenderer.counts != null && com_davidmaletz_mining_enemy_EnemyRenderer.counts.exists(id)) {
            var c = com_davidmaletz_mining_enemy_EnemyRenderer.counts.get(id) - 1;
            if (c <= 0) com_davidmaletz_mining_enemy_EnemyRenderer.counts.remove(id);
            else com_davidmaletz_mining_enemy_EnemyRenderer.counts.set(id, c);
        }
    };
    com_davidmaletz_mining_enemy_EnemyRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_enemy_EnemyRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.init.call(this, e);
            this.enemy.addEventListener("change_health", $bind(this, this.damage));
            this.enemy.addEventListener("move", $bind(this, this.move));
            if (!this.exists) {
                this.exists = true;
                com_davidmaletz_mining_enemy_EnemyRenderer.incCount(this.enemy.info.id);
            }
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.destroy.call(this, e);
            this.enemy.removeEventListener("change_health", $bind(this, this.damage));
            this.enemy.removeEventListener("move", $bind(this, this.move));
            if (this.exists) {
                this.exists = false;
                com_davidmaletz_mining_enemy_EnemyRenderer.decCount(this.enemy.info.id);
            }
        },
        attack: function(p) {
            var dx = p.tile_x - this.enemy.tile_x;
            if (dx != 0) this.set_scaleX(dx > 0 ? -1 : 1);
            this.setAnimation(this.enemy.info.tile + ".attack", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.playIdle);
            var critical;
            if (p.renderer != null) critical = p.renderer.get_scaleX() == this.get_scaleX();
            else critical = false;
            var r = Math.random();
            if (r > 0.9) critical = true;
            if (!critical && r < 0.1) {
                p.showPopup(com_fancyfish_faeng_common_Lang.getText("common", "miss"));
                com_davidmaletz_mining_Sounds.playSound(this.enemy, null, null);
            } else p.loseHealth(this.enemy.info.damage, critical, this.enemy, null);
        },
        _setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            com_davidmaletz_tiles_render_PlayAnimation.prototype.setAnimation.call(this, anim_id, offX, offY);
        },
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            com_davidmaletz_tiles_render_PlayAnimation.prototype.setAnimation.call(this, anim_id, -0.5, -0.5);
        },
        move: function(e) {
            this.setFrame(0);
            this.setAnimation(this.enemy.info.tile + ".walk", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.checkTrap);
            var x = (this.enemy.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE;
            var dx = x - this.get_x();
            if (dx != 0) this.set_scaleX(dx > 0 ? -1 : 1);
            this.lerp(new com_davidmaletz_lerp_PositionKeyframe(x, (this.enemy.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE), Math.floor(this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame));
        },
        checkTrap: function(p) {
            if (this.enemy.area == null) return;
            var trap = this.enemy.area.objects[4].getObject(this.enemy.tile_x, this.enemy.tile_y);
            if (trap != null)(js_Boot.__cast(trap, com_davidmaletz_mining_world_TrapObject)).activate(this.enemy);
            if (this.enemy.area != null && this.onComplete == null) this.playIdle(p);
        },
        damage: function(e) {
            this.setAnimation(this.enemy.info.tile + ".hit", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.playIdle);
        },
        playIdle: function(p) {
            this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
            this.loop = true;
            this.onComplete = null;
        },
        __class__: com_davidmaletz_mining_enemy_EnemyRenderer
    });
    var com_davidmaletz_mining_enemy__$Boar_BoarRenderer = function(e) {
        this.flip = false;
        com_davidmaletz_mining_enemy_EnemyRenderer.call(this, e);
        this.tiles = 0;
        this.range = Std.parseInt(e.info.xml.get("range"));
    };
    $hxClasses["com.davidmaletz.mining.enemy._Boar.BoarRenderer"] = com_davidmaletz_mining_enemy__$Boar_BoarRenderer;
    com_davidmaletz_mining_enemy__$Boar_BoarRenderer.__name__ = ["com", "davidmaletz", "mining", "enemy", "_Boar", "BoarRenderer"];
    com_davidmaletz_mining_enemy__$Boar_BoarRenderer.__super__ = com_davidmaletz_mining_enemy_EnemyRenderer;
    com_davidmaletz_mining_enemy__$Boar_BoarRenderer.prototype = $extend(com_davidmaletz_mining_enemy_EnemyRenderer.prototype, {
        handleLogic: function() {
            if (this.enemy.area == null) return false;
            var dx = -com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
            var o = this.enemy.area.getObject(this.enemy.tile_x, this.enemy.tile_y, this.enemy);
            if (o != null) {
                this.tiles = 1;
                this.flip = true;
                this.playIdle(this);
                return true;
            } else this.flip = false;
            var _g1 = 1;
            var _g = this.range;
            while (_g1 < _g) {
                var i = _g1++;
                var x = this.enemy.tile_x + i * dx;
                if (this.enemy.area.getTileId(x, this.enemy.tile_y, 0) != -1) return false;
                var o1 = this.enemy.area.getObject(x, this.enemy.tile_y, this.enemy);
                if (o1 != null) {
                    if (!js_Boot.__instanceof(o1, com_davidmaletz_mining_Player)) {
                        if (i == 1 && js_Boot.__instanceof(o1, com_davidmaletz_mining_enemy_Rat)) {
                            this.setAnimation(this.enemy.info.tile + ".attack", 0, 0);
                            this.loop = false;
                            this.onComplete = $bind(this, this.playIdle);
                            o1.loseHealth(this.enemy.info.damage, false, this.enemy, null);
                            return true;
                        } else return false;
                    }
                    this.tiles = this.range;
                    this.setAnimation(this.enemy.info.tile + ".roar", 0, 0);
                    this.loop = false;
                    this.onComplete = $bind(this, this.playIdle);
                    if (i < 2) this.setFrame((this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame) * 0.5);
                    return true;
                }
                if (!this.enemy.canEnter(x, this.enemy.tile_y)) return false;
            }
            return false;
        },
        playIdle: function(p) {
            if (this.tiles > 0 && this.enemy.area != null) {
                this.tiles--;
                var x = this.enemy.tile_x - com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
                var o = this.enemy.area.getObject(x, this.enemy.tile_y, this.enemy);
                if (o == null) {
                    if (this.enemy.area.getTileId(x, this.enemy.tile_y, 0) == -1 && this.enemy.canEnter(x, this.enemy.tile_y)) {
                        this.enemy.setTile(x, this.enemy.tile_y);
                        return;
                    }
                } else if (js_Boot.__instanceof(o, com_davidmaletz_mining_Player)) {
                    this.attack(o);
                    return;
                }
            }
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.playIdle.call(this, p);
            this.tiles = 0;
            if (this.flip && this.enemy.area != null) {
                this.flip = false;
                if (!Std["is"](this.enemy.area.getObject(this.enemy.tile_x - com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null), this.enemy.tile_y, this.enemy), com_davidmaletz_mining_Player)) this.set_scaleX( - this.get_scaleX());
            }
        },
        enter_frame: function(frames) {
            if (this.animation == this.enemy.info.tile + ".idle" && !this.handleLogic()) {
                if (this.frame + frames >= (this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame)) {
                    this.set_scaleX( - this.get_scaleX());
                    if (Math.random() < 0.25) {
                        this.tiles = this.range;
                        this.setAnimation(this.enemy.info.tile + ".roar", 0, 0);
                        this.loop = false;
                        this.onComplete = $bind(this, this.playIdle);
                    }
                }
            }
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.enter_frame.call(this, frames);
        },
        attack: function(p) {
            this.tiles = 0;
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.attack.call(this, p);
        },
        damage: function(e) {
            this.tiles = 0;
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.damage.call(this, e);
        },
        __class__: com_davidmaletz_mining_enemy__$Boar_BoarRenderer
    });
    var com_davidmaletz_mining_enemy_EnemyInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), Std.parseInt(xml.get("health")));
        this.tile = xml.get("tile");
        this.trapped = com_davidmaletz_mining_item_Item.get(xml.get("trapped"));
        this.damage = Std.parseInt(xml.get("damage")) * 10;
        if (xml.exists("defense")) this.defense = Std.parseInt(xml.get("defense"));
        else this.defense = 0;
        this.xml = xml;
        if (xml.exists("type")) {
            var cls = xml.get("type").toLowerCase();
            cls = cls.charAt(0).toUpperCase() + HxOverrides.substr(cls, 1, null);
            var c = Type.resolveClass("com.davidmaletz.mining.enemy." + cls);
            if (c != null) this.type = c;
        }
        this.loot = new com_davidmaletz_mining_LootHandler(xml);
    };
    $hxClasses["com.davidmaletz.mining.enemy.EnemyInfo"] = com_davidmaletz_mining_enemy_EnemyInfo;
    com_davidmaletz_mining_enemy_EnemyInfo.__name__ = ["com", "davidmaletz", "mining", "enemy", "EnemyInfo"];
    com_davidmaletz_mining_enemy_EnemyInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_enemy_EnemyInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        getLoot: function() {
            return this.loot.getLoot();
        },
        create: function(tile_x, tile_y) {
            if (this.type == null) return new com_davidmaletz_mining_enemy_Enemy(this, tile_x, tile_y);
            else return Type.createInstance(this.type, [this, tile_x, tile_y]);
        },
        __class__: com_davidmaletz_mining_enemy_EnemyInfo
    });
    var com_davidmaletz_mining_enemy_EnemySpawner = function(xml) {
        this.info = com_davidmaletz_mining_world_ObjectInfo.get(xml.get("id"));
        this.time = Std.parseFloat(xml.get("time"));
        this.count = Std.parseInt(xml.get("count"));
        this.fromX = Std.parseInt(xml.get("fromX"));
        this.toX = Std.parseInt(xml.get("toX")) + 1;
        this.fromY = Std.parseInt(xml.get("fromY"));
        this.toY = Std.parseInt(xml.get("toY")) + 1;
    };
    $hxClasses["com.davidmaletz.mining.enemy.EnemySpawner"] = com_davidmaletz_mining_enemy_EnemySpawner;
    com_davidmaletz_mining_enemy_EnemySpawner.__name__ = ["com", "davidmaletz", "mining", "enemy", "EnemySpawner"];
    com_davidmaletz_mining_enemy_EnemySpawner.point = null;
    com_davidmaletz_mining_enemy_EnemySpawner.prototype = {
        getSpawnTime: function() {
            return this.time;
        },
        isEnabled: function() {
            return com_davidmaletz_mining_enemy_EnemyRenderer.getLiveCount(this.info.id) < this.count;
        },
        canPlace: function(area, x, y) {
            if (area.hasObject(x, y)) return false;
            if (y == -1) {
                var _g = -1;
                while (_g < 2) {
                    var tx = _g++;
                    var s = area.getStructure(x + tx, y);
                    if (s != null) return false;
                }
                return true;
            } else return area.getTileId(x, y, 1) == -1;
        },
        spawn: function(area) {
            if (area.renderer == null) return;
            var w = openfl_Lib.current.stage.stageWidth;
            var h = openfl_Lib.current.stage.stageHeight;
            if (com_davidmaletz_mining_enemy_EnemySpawner.point == null) com_davidmaletz_mining_enemy_EnemySpawner.point = new openfl_geom_Point(0, 0);
            else com_davidmaletz_mining_enemy_EnemySpawner.point.setTo(0, 0);
            var topLeft = area.renderer.globalToLocal(com_davidmaletz_mining_enemy_EnemySpawner.point);
            topLeft.x -= com_davidmaletz_tiles_Tile.SIZE;
            topLeft.y -= com_davidmaletz_tiles_Tile.SIZE;
            com_davidmaletz_mining_enemy_EnemySpawner.point.setTo(w, h);
            var botRight = area.renderer.globalToLocal(com_davidmaletz_mining_enemy_EnemySpawner.point);
            botRight.x += com_davidmaletz_tiles_Tile.SIZE;
            botRight.y += com_davidmaletz_tiles_Tile.SIZE;
            var ar = [];
            var _g1 = this.fromY;
            var _g = this.toY;
            while (_g1 < _g) {
                var y = _g1++;
                var _g3 = this.fromX;
                var _g2 = this.toX;
                while (_g3 < _g2) {
                    var x = _g3++;
                    var tx = com_davidmaletz_tiles_Tile.SIZE * x;
                    var ty = com_davidmaletz_tiles_Tile.SIZE * y;
                    if ((tx < topLeft.x || tx > botRight.x || ty < topLeft.y || ty > botRight.y) && this.canPlace(area, x, y)) {
                        ar.push(x);
                        ar.push(y);
                    }
                }
            }
            var ct = ar.length >> 1;
            if (ct == 0) return;
            var i = Math.floor(Math.random() * ct) * 2;
            area.addObject(this.info.create(ar[i], ar[i + 1]));
        },
        __class__: com_davidmaletz_mining_enemy_EnemySpawner
    };
    var com_davidmaletz_mining_enemy_EnemySpawnerHandler = function(area, id) {
        this.area = area;
        this.counts = [];
        this.id = id;
        if (id == null) this.spawners = null;
        else {
            if (com_davidmaletz_mining_enemy_EnemySpawnerHandler.map == null) com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadSpawners();
            this.spawners = com_davidmaletz_mining_enemy_EnemySpawnerHandler.map.get(id);
        }
        var _g = 0;
        var _g1 = this.spawners;
        while (_g < _g1.length) {
            var e = _g1[_g]; ++_g;
            this.counts.push(e.time);
        }
    };
    $hxClasses["com.davidmaletz.mining.enemy.EnemySpawnerHandler"] = com_davidmaletz_mining_enemy_EnemySpawnerHandler;
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.__name__ = ["com", "davidmaletz", "mining", "enemy", "EnemySpawnerHandler"];
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.read = function(area, b) {
        var e = new com_davidmaletz_mining_enemy_EnemySpawnerHandler(area, com_davidmaletz_faengfl_UTFUtils.readUTF(b));
        var len = e.counts.length;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var max = e.spawners[i].time;
            try {
                e.counts[i] = haxe_io_FPHelper.i32ToFloat(b.readInt32());
                if (e.counts[i] > max) e.counts[i] = max;
            } catch(ex) {
                haxe_CallStack.lastException = ex;
                if (ex instanceof js__$Boot_HaxeError) ex = ex.val;
                e.counts[i] = max;
            }
        }
        return e;
    };
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.map = null;
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadArray = function(xml) {
        var ar = [];
        var $it0 = xml.elementsNamed("spawner");
        while ($it0.hasNext()) {
            var e = $it0.next();
            ar.push(com_davidmaletz_mining_enemy_EnemySpawnerHandler.makeSpawner(e));
        }
        return ar;
    };
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.makeSpawner = function(xml) {
        if (xml.exists("type")) {
            var cls = xml.get("type") + "Spawner";
            cls = cls.charAt(0).toUpperCase() + HxOverrides.substr(cls, 1, null);
            var c = Type.resolveClass("com.davidmaletz.mining.enemy." + cls);
            if (c != null) return Type.createInstance(c, [xml]);
        }
        return new com_davidmaletz_mining_enemy_EnemySpawner(xml);
    };
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadSpawners = function() {
        com_davidmaletz_mining_enemy_EnemySpawnerHandler.map = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.area != null) action_map.setReserved("area",
        function(e) {
            var key = e.get("id");
            var value = com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadArray(e);
            com_davidmaletz_mining_enemy_EnemySpawnerHandler.map.set(key, value);
        });
        else action_map.h["area"] = function(e) {
            var key = e.get("id");
            var value = com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadArray(e);
            com_davidmaletz_mining_enemy_EnemySpawnerHandler.map.set(key, value);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/areas.xml", action_map);
    };
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_enemy_EnemySpawnerHandler.map == null) com_davidmaletz_mining_enemy_EnemySpawnerHandler.loadSpawners();
            return com_davidmaletz_mining_enemy_EnemySpawnerHandler.map.get(id);
        }
    };
    com_davidmaletz_mining_enemy_EnemySpawnerHandler.prototype = {
        init: function() {
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
        },
        destroy: function() {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
        },
        enter_frame: function(frames) {
            var p;
            p = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player;
            if (p == null || p.attack.get() == null) return;
            var len = this.counts.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var e = this.spawners[i];
                if (com_davidmaletz_mining_enemy_EnemyRenderer.getLiveCount(e.info.id) < e.count) {
                    var c = this.counts[i];
                    c -= frames;
                    if (c < 0) {
                        c += e.time;
                        e.spawn(this.area);
                    }
                    this.counts[i] = c;
                }
            }
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.id);
            var len = this.counts.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                b.writeInt32(haxe_io_FPHelper.floatToI32(this.counts[i]));
            }
        },
        __class__: com_davidmaletz_mining_enemy_EnemySpawnerHandler
    };
    var com_davidmaletz_mining_enemy_Golem = function(info, x, y) {
        com_davidmaletz_mining_enemy_Enemy.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.enemy.Golem"] = com_davidmaletz_mining_enemy_Golem;
    com_davidmaletz_mining_enemy_Golem.__name__ = ["com", "davidmaletz", "mining", "enemy", "Golem"];
    com_davidmaletz_mining_enemy_Golem.__super__ = com_davidmaletz_mining_enemy_Enemy;
    com_davidmaletz_mining_enemy_Golem.prototype = $extend(com_davidmaletz_mining_enemy_Enemy.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_enemy__$Golem_GolemRenderer(this);
        },
        isBlocking: function(asker, flags) {
            if (this.area == null || this.area.getTileId(this.tile_x, this.tile_y, 0) != -1) return false;
            else return com_davidmaletz_mining_enemy_Enemy.prototype.isBlocking.call(this, asker, flags);
        },
        __class__: com_davidmaletz_mining_enemy_Golem
    });
    var com_davidmaletz_mining_enemy__$Golem_GolemRenderer = function(e) {
        this.recharge = false;
        com_davidmaletz_mining_enemy_EnemyRenderer.call(this, e);
    };
    $hxClasses["com.davidmaletz.mining.enemy._Golem.GolemRenderer"] = com_davidmaletz_mining_enemy__$Golem_GolemRenderer;
    com_davidmaletz_mining_enemy__$Golem_GolemRenderer.__name__ = ["com", "davidmaletz", "mining", "enemy", "_Golem", "GolemRenderer"];
    com_davidmaletz_mining_enemy__$Golem_GolemRenderer.__super__ = com_davidmaletz_mining_enemy_EnemyRenderer;
    com_davidmaletz_mining_enemy__$Golem_GolemRenderer.prototype = $extend(com_davidmaletz_mining_enemy_EnemyRenderer.prototype, {
        insertNode: function(queue, x, y, parent, visited) {
            var i = (y + 16384) * 32768 + (x + 16384);
            if (y <= 0 || this.enemy.area.getObject(x, y, this.enemy) != null || visited.h.hasOwnProperty(i)) return;
            visited.h[i] = true;
            if (this.enemy.area.getTileId(x, y, 0) == -1) queue.addLast(new com_fancyfish_faeng_common_Node(x, y, parent));
        },
        tryAttack: function(n, o, start) {
            if (o != null && js_Boot.__instanceof(o, com_davidmaletz_mining_Player)) {
                if (n.depth == 0) {
                    var dx = o.tile_x - this.enemy.tile_x;
                    if ((dx > 0 ? -1 : 1) != this.get_scaleX()) {
                        this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
                        this.loop = false;
                        this.onComplete = $bind(this, this.flip);
                    } else {
                        this.attack(o);
                        this.recharge = true;
                    }
                    return true;
                } else {
                    while (n.parent != start) n = n.parent;
                    this.enemy.setTile(n.x, n.y);
                    return true;
                }
            }
            return false;
        },
        flip: function(p) {
            this.set_scaleX( - this.get_scaleX());
            this.playIdle(p);
        },
        playIdle: function(p) {
            if (this.enemy.area == null) {
                this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
                return;
            }
            if (this.recharge) {
                this.recharge = false;
                this.setAnimation(this.enemy.info.tile + ".roar", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
                return;
            }
            var area = this.enemy.area;
            var x = this.enemy.tile_x;
            var y = this.enemy.tile_y;
            var queue = new com_fancyfish_faeng_common_Dequeue();
            var visited = new haxe_ds_IntMap();
            var start = new com_fancyfish_faeng_common_Node(x, y);
            visited.h[(y + 16384) * 32768 + (x + 16384)] = true;
            queue.array[queue.tail] = start;
            queue.tail = queue.tail + 1 & queue.array.length - 1;
            if (queue.head == queue.tail) queue.doubleCapacity();
            while (! (queue.head == queue.tail)) {
                var n = queue.removeFirst();
                if (n.depth > 10) break;
                if (this.tryAttack(n, area.getObject(n.x + 1, n.y, this.enemy), start) || this.tryAttack(n, area.getObject(n.x - 1, n.y, this.enemy), start)) return;
                this.insertNode(queue, n.x + 1, n.y, n, visited);
                this.insertNode(queue, n.x - 1, n.y, n, visited);
                this.insertNode(queue, n.x, n.y + 1, n, visited);
                this.insertNode(queue, n.x, n.y - 1, n, visited);
            }
            this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.playIdle);
        },
        init: function(e) {
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.init.call(this, e);
            this.set_visible(this.enemy.area != null && this.enemy.area.getTileId(this.enemy.tile_x, this.enemy.tile_y, 0) == -1);
            if (this.get_visible()) this.playIdle(this);
        },
        enter_frame: function(frames) {
            if (this.get_visible()) com_davidmaletz_mining_enemy_EnemyRenderer.prototype.enter_frame.call(this, frames);
            else if (this.enemy.area != null && this.enemy.area.getTileId(this.enemy.tile_x, this.enemy.tile_y, 0) == -1) {
                this.set_visible(true);
                this.setAnimation(this.enemy.info.tile + ".form", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
            }
        },
        __class__: com_davidmaletz_mining_enemy__$Golem_GolemRenderer
    });
    var com_davidmaletz_mining_enemy_Rat = function(info, x, y) {
        com_davidmaletz_mining_enemy_Enemy.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.enemy.Rat"] = com_davidmaletz_mining_enemy_Rat;
    com_davidmaletz_mining_enemy_Rat.__name__ = ["com", "davidmaletz", "mining", "enemy", "Rat"];
    com_davidmaletz_mining_enemy_Rat.__super__ = com_davidmaletz_mining_enemy_Enemy;
    com_davidmaletz_mining_enemy_Rat.prototype = $extend(com_davidmaletz_mining_enemy_Enemy.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_enemy__$Rat_RatRenderer(this);
        },
        __class__: com_davidmaletz_mining_enemy_Rat
    });
    var com_davidmaletz_mining_enemy__$Rat_RatRenderer = function(e) {
        this.canFlip = true;
        this.run = 0;
        com_davidmaletz_mining_enemy_EnemyRenderer.call(this, e);
    };
    $hxClasses["com.davidmaletz.mining.enemy._Rat.RatRenderer"] = com_davidmaletz_mining_enemy__$Rat_RatRenderer;
    com_davidmaletz_mining_enemy__$Rat_RatRenderer.__name__ = ["com", "davidmaletz", "mining", "enemy", "_Rat", "RatRenderer"];
    com_davidmaletz_mining_enemy__$Rat_RatRenderer.__super__ = com_davidmaletz_mining_enemy_EnemyRenderer;
    com_davidmaletz_mining_enemy__$Rat_RatRenderer.prototype = $extend(com_davidmaletz_mining_enemy_EnemyRenderer.prototype, {
        playIdle: function(p) {
            if (this.run > 0 && this.enemy.area != null) {
                this.run--;
                var x = this.enemy.tile_x - com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
                var o = this.enemy.area.getObject(x, this.enemy.tile_y, this.enemy);
                if (o == null && this.enemy.area.getTileId(x, this.enemy.tile_y, 0) == -1 && this.enemy.canEnter(x, this.enemy.tile_y)) this.enemy.setTile(x, this.enemy.tile_y);
                else {
                    this.run = 5;
                    this.set_scaleX( - this.get_scaleX());
                    this.setFrame(0);
                    this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
                    this.loop = false;
                    this.onComplete = $bind(this, this.playIdle);
                }
            } else {
                var r = Math.random();
                if (r < 0.3) {
                    this.run = 5;
                    this.setAnimation(this.enemy.info.tile + ".hit", 0, 0);
                    this.loop = false;
                    this.onComplete = $bind(this, this.playIdle);
                    return;
                } else if (r < 0.8) this.set_scaleX( - this.get_scaleX());
                this.setFrame(0);
                this.setAnimation(this.enemy.info.tile + ".idle", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
            }
        },
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            this._setAnimation(anim_id, -0.5, -0.2);
        },
        init: function(e) {
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.init.call(this, e);
            this.playIdle(this);
        },
        enter_frame: function(frames) {
            if (! (this.tracks != null) && this.enemy.area != null) {
                var dx = -com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
                var _g = 0;
                while (_g < 5) {
                    var i = _g++;
                    var x = this.enemy.tile_x + i * dx;
                    var o = this.enemy.area.getObject(x, this.enemy.tile_y, this.enemy);
                    if (o != null && (js_Boot.__instanceof(o, com_davidmaletz_mining_Player) || js_Boot.__instanceof(o, com_davidmaletz_mining_enemy_Boar))) {
                        this.run = 5;
                        if (this.canFlip) {
                            this.set_scaleX( - this.get_scaleX());
                            this.canFlip = false;
                        }
                        this.playIdle(this);
                        com_davidmaletz_mining_enemy_EnemyRenderer.prototype.enter_frame.call(this, frames);
                        return;
                    }
                }
            }
            this.canFlip = true;
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.enter_frame.call(this, frames);
        },
        __class__: com_davidmaletz_mining_enemy__$Rat_RatRenderer
    });
    var com_davidmaletz_mining_enemy_Wyrm = function(info, x, y) {
        com_davidmaletz_mining_enemy_Enemy.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.enemy.Wyrm"] = com_davidmaletz_mining_enemy_Wyrm;
    com_davidmaletz_mining_enemy_Wyrm.__name__ = ["com", "davidmaletz", "mining", "enemy", "Wyrm"];
    com_davidmaletz_mining_enemy_Wyrm.__super__ = com_davidmaletz_mining_enemy_Enemy;
    com_davidmaletz_mining_enemy_Wyrm.prototype = $extend(com_davidmaletz_mining_enemy_Enemy.prototype, {
        addedToArea: function() {
            var t = this.area.getTileId(this.tile_x, this.tile_y, 0);
            if (t >= 0) this.area.mine(this.tile_x, this.tile_y, t, 0);
        },
        createRenderer: function(area) {
            return new com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer(this, area);
        },
        __class__: com_davidmaletz_mining_enemy_Wyrm
    });
    var com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer = function(e, area) {
        this.recharge = false;
        this.dig_x = -2147483648;
        this.attack_ct = 6;
        com_davidmaletz_mining_enemy_EnemyRenderer.call(this, e);
        this.area = area;
    };
    $hxClasses["com.davidmaletz.mining.enemy._Wyrm.WyrmRenderer"] = com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer;
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.__name__ = ["com", "davidmaletz", "mining", "enemy", "_Wyrm", "WyrmRenderer"];
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.__super__ = com_davidmaletz_mining_enemy_EnemyRenderer;
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.prototype = $extend(com_davidmaletz_mining_enemy_EnemyRenderer.prototype, {
        canDig: function(area, x, y, t) {
            return area.tile_index.tiles.h[t].id == "dirt" && area.getTileId(x, y, 1) == -1;
        },
        tryMove: function(area, x, y) {
            if (area.getObject(x, y, this.enemy) != null) return false;
            var t = area.getTileId(x, y, 0);
            if (t == -1) {
                this.enemy.setTile(x, y);
                return true;
            } else if (area.tile_index.tiles.h[t].id == "dirt" && area.getTileId(x, y, 1) == -1) {
                this.setAnimation(this.enemy.info.tile + ".dig", 0, 0);
                this.loop = false;
                this.onComplete = null;
                this.dig_x = x;
                this.dig_y = y;
                return true;
            } else return false;
        },
        insertNode: function(queue, x, y, parent) {
            if (y <= 1 || this.area.area.getObject(x, y, this.enemy) != null) return;
            var t = this.area.area.getTileId(x, y, 0);
            if (t == -1) queue.insert(new com_fancyfish_faeng_common_Node(x, y, parent));
            else if (this.canDig(this.area.area, x, y, t)) {
                var n = new com_fancyfish_faeng_common_Node(x, y, parent);
                n.depth += 10;
                queue.insert(n);
            }
        },
        playIdle: function(p) {
            if (this.enemy.area == null) {
                com_davidmaletz_mining_enemy_EnemyRenderer.prototype.playIdle.call(this, p);
                return;
            }
            if (this.recharge) {
                this.recharge = false;
                this.setAnimation(this.enemy.info.tile + ".recharge", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
                return;
            }
            var area = this.area.area;
            var dx = -com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
            var x = this.enemy.tile_x;
            var y = this.enemy.tile_y;
            var queue = new com_fancyfish_faeng_common_Heap(com_fancyfish_faeng_common_Node.lessThan);
            var visited = new haxe_ds_IntMap();
            var start = new com_fancyfish_faeng_common_Node(x, y);
            queue.insert(start);
            while (! (queue.array.length == 0)) {
                var n = queue.remove();
                var i = (n.y + 16384) * 32768 + (n.x + 16384);
                if (visited.h.hasOwnProperty(i)) continue;
                visited.h[i] = true;
                if (n.depth > 30) break;
                var o = area.getObject(n.x + dx, n.y, this.enemy);
                if (o != null && js_Boot.__instanceof(o, com_davidmaletz_mining_Player)) {
                    if (n.depth == 0) {
                        this.attack_ct--;
                        if (this.attack_ct <= 0) {
                            this.attack_ct = 6;
                            this.set_scaleX( - this.get_scaleX());
                            this.playIdle(null);
                        } else {
                            this.attack(o);
                            this.recharge = true;
                        }
                        return;
                    } else {
                        while (n.parent != start) n = n.parent;
                        this.tryMove(area, n.x, n.y);
                        return;
                    }
                }
                this.insertNode(queue, n.x + dx, n.y, n);
                this.insertNode(queue, n.x, n.y + 1, n);
                this.insertNode(queue, n.x, n.y - 1, n);
            }
            var queue1 = new com_fancyfish_faeng_common_Heap(com_fancyfish_faeng_common_Node.lessThan);
            var visited1 = new haxe_ds_IntMap();
            queue1.insert(start);
            while (! (queue1.array.length == 0)) {
                var n1 = queue1.remove();
                var i1 = (n1.y + 16384) * 32768 + (n1.x + 16384);
                if (visited1.h.hasOwnProperty(i1)) continue;
                visited1.h[i1] = true;
                if (n1.depth > 100) break;
                if (n1.x != x) {
                    while (n1.parent != start) n1 = n1.parent;
                    this.tryMove(area, n1.x, n1.y);
                    return;
                }
                this.insertNode(queue1, n1.x + dx, n1.y, n1);
                var dy;
                if (Math.random() < 0.5) dy = 1;
                else dy = -1;
                this.insertNode(queue1, n1.x, n1.y + dy, n1);
                this.insertNode(queue1, n1.x, n1.y - dy, n1);
            }
            if (p == null) com_davidmaletz_mining_enemy_EnemyRenderer.prototype.playIdle.call(this, p);
            else {
                this.set_scaleX( - this.get_scaleX());
                this.playIdle(null);
            }
        },
        init: function(e) {
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.init.call(this, e);
            this.set_scaleX(Math.random() < 0.5 ? 1 : -1);
            this.playIdle(this);
        },
        enter_frame: function(frames) {
            com_davidmaletz_mining_enemy_EnemyRenderer.prototype.enter_frame.call(this, frames);
            if (this.dig_x != -2147483648) {
                var t = this.area.area.getTileId(this.dig_x, this.dig_y, 0);
                if (t < 0) {
                    this.dig_x = -2147483648;
                    this.playIdle(this);
                } else if (!this.area.incBrickBreak(this.dig_x, this.dig_y, frames)) {
                    this.area.area.mine(this.dig_x, this.dig_y, t, 0);
                    this.dig_x = -2147483648;
                    this.playIdle(this);
                }
            }
        },
        __class__: com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer
    });
    var com_davidmaletz_mining_item_Animal = function() {
        openfl_events_EventDispatcher.call(this);
        this.percent = 0;
        this.item = null;
    };
    $hxClasses["com.davidmaletz.mining.item.Animal"] = com_davidmaletz_mining_item_Animal;
    com_davidmaletz_mining_item_Animal.__name__ = ["com", "davidmaletz", "mining", "item", "Animal"];
    com_davidmaletz_mining_item_Animal.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_item_Animal.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_item_Animal.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        updateItem: function() {
            if (0 != this.percent) {
                this.percent = 0;
                this.dispatchEvent(new openfl_events_Event("update_percent"));
            }
        },
        feed: function(i, ct) {},
        setItem: function(i) {
            if (i != this.item) {
                this.item = i;
                this.updateItem();
                this.dispatchEvent(new openfl_events_Event("update_item"));
            }
        },
        getItem: function() {
            return this.item;
        },
        isEmpty: function() {
            return this.item == null;
        },
        getPercent: function() {
            return this.percent / 10000;
        },
        setPercent: function(p) {
            if (p != this.percent) {
                this.percent = p;
                this.dispatchEvent(new openfl_events_Event("update_percent"));
            }
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.item == null ? null: this.item.id);
            b.writeUInt16(this.percent);
        },
        read: function(b, version) {
            this.item = com_davidmaletz_mining_item_Item.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b));
            this.percent = b.readUInt16();
        },
        __class__: com_davidmaletz_mining_item_Animal
    });
    var com_davidmaletz_mining_item_Item = function(xml) {
        this.id = xml.get("id");
        this.type = com_davidmaletz_mining_item_Item.parseType(xml.get("type"));
        this.cost = Std.parseInt(xml.get("cost"));
        this.action = xml.get("action");
        this.xml = xml;
        this.weight = Std.parseInt(xml.get("weight"));
        this.tile = com_davidmaletz_tiles_Tile.get(xml.get("tile"));
        this.animation = com_davidmaletz_tiles_TileAnimation.get(xml.get("animation"));
    };
    $hxClasses["com.davidmaletz.mining.item.Item"] = com_davidmaletz_mining_item_Item;
    com_davidmaletz_mining_item_Item.__name__ = ["com", "davidmaletz", "mining", "item", "Item"];
    com_davidmaletz_mining_item_Item._createIcon = function(tile, offX, offY) {
        if (offY == null) offY = 0;
        if (offX == null) offX = 0;
        var l = new com_davidmaletz_faengfl_TileLayer();
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
        l.get_graphics().clear();
        l.handler.start(l.get_graphics(), 0);
        tile.render(0, l, 0, 0, offX, offY);
        l.handler.finish();
        return l;
    };
    com_davidmaletz_mining_item_Item.items = null;
    com_davidmaletz_mining_item_Item.create = function(xml) {
        var _g = xml.get("type");
        switch (_g) {
        case "equipment":
            return new com_davidmaletz_mining_item_Equipment(xml);
        case "food":
            return new com_davidmaletz_mining_item_Food(xml);
        default:
            return new com_davidmaletz_mining_item_Item(xml);
        }
    };
    com_davidmaletz_mining_item_Item.loadItems = function() {
        com_davidmaletz_mining_item_Item.items = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.icon != null) action_map.setReserved("icon",
        function(e) {
            com_davidmaletz_mining_item_Item.type_icons[com_davidmaletz_mining_item_Item.parseType(e.get("id"))] = com_davidmaletz_tiles_Tile.get(e.get("tile"));
        });
        else action_map.h["icon"] = function(e) {
            com_davidmaletz_mining_item_Item.type_icons[com_davidmaletz_mining_item_Item.parseType(e.get("id"))] = com_davidmaletz_tiles_Tile.get(e.get("tile"));
        };
        if (__map_reserved.item != null) action_map.setReserved("item",
        function(e1) {
            var key = e1.get("id");
            var value = com_davidmaletz_mining_item_Item.create(e1);
            com_davidmaletz_mining_item_Item.items.set(key, value);
        });
        else action_map.h["item"] = function(e1) {
            var key = e1.get("id");
            var value = com_davidmaletz_mining_item_Item.create(e1);
            com_davidmaletz_mining_item_Item.items.set(key, value);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/items.xml", action_map);
    };
    com_davidmaletz_mining_item_Item.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
            return com_davidmaletz_mining_item_Item.items.get(id);
        }
    };
    com_davidmaletz_mining_item_Item.getAll = function() {
        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
        return com_davidmaletz_mining_item_Item.items.iterator();
    };
    com_davidmaletz_mining_item_Item.parseType = function(str) {
        var ret = HxOverrides.indexOf(com_davidmaletz_mining_item_Item.type_names, str, 0);
        if (ret == -1) ret = 3;
        return ret;
    };
    com_davidmaletz_mining_item_Item.prototype = {
        getName: function() {
            return com_fancyfish_faeng_common_Lang.getText("item.names", this.id);
        },
        hasDescription: function() {
            return com_fancyfish_faeng_common_Lang.lang.hasText("item.descriptions", this.id);
        },
        getDescription: function() {
            return com_fancyfish_faeng_common_Lang.getText("item.descriptions", this.id);
        },
        createIcon: function() {
            if (this.animation == null) return com_davidmaletz_mining_item_Item._createIcon(this.tile);
            else return new com_davidmaletz_tiles_render_StaticPlayAnimation(this.tile, this.animation.id, 10, true);
        },
        getPlace: function() {
            return com_davidmaletz_mining_world_ObjectInfo.get(this.id);
        },
        placeTrap: function(area, trap, x, y) {
            if (area.objects[4].getObject(x, y) != null) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, com_fancyfish_faeng_common_Lang.getText("common", "trap_overlap").get()), 2);
                return false;
            } else {
                new com_davidmaletz_mining_ui_Popup(128., 72., 0, new com_fancyfish_faeng_common_mutable_Concat2(com_fancyfish_faeng_common_Lang.getText("item.names", this.id), com_fancyfish_faeng_common_Lang.getText("common", "placed"), " "));
                area.addObject(trap.create(x, y));
                return true;
            }
        },
        placeObject: function(area, object, x, y) {
            var s;
            if (y != -1) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, com_fancyfish_faeng_common_Lang.getText("warning", "place_surface").get()), 2);
            } else {
                var o = area.objects[1].getObject(x, y);
                if (o != null) {
                    var c1 = com_davidmaletz_faengfl_Application.instance.container;
                    c1.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c1, com_fancyfish_faeng_common_Lang.getText("warning", "place_overlap").get()), 2);
                } else {
                    new com_davidmaletz_mining_ui_Popup(128., 72., 0, new com_fancyfish_faeng_common_mutable_Concat2(com_fancyfish_faeng_common_Lang.getText("item.names", this.id), com_fancyfish_faeng_common_Lang.getText("common", "placed"), " "));
                    area.addObject(object.create(x, y));
                    return true;
                }
            }
            return false;
        },
        getActionLabel: function(p) {
            if (this.action == "equip" && p.equipment.get() == this) return "unequip";
            else return this.action;
        },
        'use': function(p, window) {
            var _g = this.action;
            switch (_g) {
            case "place":
                var place = this.getPlace();
                if (place == null) return false;
                else if (js_Boot.__instanceof(place, com_davidmaletz_mining_world_TrapInfo)) return this.placeTrap(p.area, place, p.tile_x, p.tile_y);
                else return this.placeObject(p.area, place, p.tile_x, p.tile_y);
                break;
            case "use":
                if (p.applyMod(this)) return true;
                else {
                    var c = com_davidmaletz_faengfl_Application.instance.container;
                    c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, com_fancyfish_faeng_common_Lang.getText("warning", "no_effect").get()), 2);
                    return false;
                }
                break;
            case "equip":
                p.equipment.set(p.equipment.get() == this ? null: this);
                if (window != null) window.close();
                return false;
            case "fire":
                var $with = com_davidmaletz_mining_item_Item.get(this.xml.get("with"));
                if ($with != null && p.inventory.getItemCount($with) > 0) p.tryAttack($with, this);
                else {
                    var s = com_fancyfish_faeng_common_Lang.getText("warning", "cannot_fire").get();
                    s = StringTools.replace(s, "{projectile}", com_fancyfish_faeng_common_Lang.getText("item.names", this.id).get());
                    s = StringTools.replace(s, "{weapon}", com_fancyfish_faeng_common_Lang.getText("item.names", $with.id).get());
                    var c1 = com_davidmaletz_faengfl_Application.instance.container;
                    c1.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c1, s), 2);
                }
                return false;
            case "magic_box":
                var func = function() {
                    var c2 = com_davidmaletz_faengfl_Application.instance.container;
                    var inv = new com_davidmaletz_mining_item_Inventory();
                    var $it0 = (function($this) {
                        var $r;
                        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                        $r = com_davidmaletz_mining_item_Item.items.iterator();
                        return $r;
                    } (this));
                    while ($it0.hasNext()) {
                        var i = $it0.next();
                        inv.addItem(i, 99);
                    }
                    var t = new com_davidmaletz_mining_ui_TransferInventory(p.inventory, inv, com_fancyfish_faeng_common_Lang.getText("common", "inventory"), com_fancyfish_faeng_common_Lang.getText("common", "storehouse"), c2, p.capacity);
                    t.allow_zero_weight = true;
                    c2.addDisplay(t, 1);
                };
                if (window != null) {
                    window.onClose = func;
                    window.close();
                } else func();
                return false;
            }
            return false;
        },
        addInfo: function(s, w, y) {
            com_davidmaletz_mining_ui_ItemRenderer.addItemCentered(s, this, w >> 1, y);
            return this.addDetails(s, w, y + 12);
        },
        addDetails: function(s, w, y) {
            if (com_fancyfish_faeng_common_Lang.lang.hasText("item.descriptions", this.id)) {
                var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("item.descriptions", this.id), new com_fancyfish_faeng_text_WrapCharacterPlacer(w - 8, 0, true, 10), 0, 1);
                t.set_x(4);
                t.set_y(y);
                s.addChild(t);
                t.draw();
                y += Math.round(t.bounds.height + 3);
            }
            if (this.weight > 0) {
                var t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "weight"), " " + Std.string(this.weight)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t1.set_x(4);
                t1.set_y(y);
                s.addChild(t1);
                y += 10;
            }
            return y;
        },
        __class__: com_davidmaletz_mining_item_Item
    };
    var com_davidmaletz_mining_item_Equipment = function(xml) {
        com_davidmaletz_mining_item_Item.call(this, xml);
        if (xml.exists("attack")) this.attack = Std.parseInt(xml.get("attack"));
        else this.attack = 0;
        if (xml.exists("cut")) this.cut = Std.parseInt(xml.get("cut"));
        else this.cut = 0;
        if (xml.exists("defense")) this.defense = Std.parseInt(xml.get("defense"));
        else this.defense = 0;
        if (xml.exists("range")) this.range = Std.parseInt(xml.get("range"));
        else this.range = 0;
        if (xml.exists("mine")) this.mine = Std.parseInt(xml.get("mine"));
        else this.mine = 0;
        if (xml.exists("stamina")) this.stamina = Std.parseInt(xml.get("stamina"));
        else this.stamina = 0;
        if (xml.exists("capacity")) this.capacity = Std.parseInt(xml.get("capacity"));
        else this.capacity = 0;
    };
    $hxClasses["com.davidmaletz.mining.item.Equipment"] = com_davidmaletz_mining_item_Equipment;
    com_davidmaletz_mining_item_Equipment.__name__ = ["com", "davidmaletz", "mining", "item", "Equipment"];
    com_davidmaletz_mining_item_Equipment.__super__ = com_davidmaletz_mining_item_Item;
    com_davidmaletz_mining_item_Equipment.prototype = $extend(com_davidmaletz_mining_item_Item.prototype, {
        addDetails: function(s, w, y) {
            if (this.attack > 0) {
                var t = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "attack"), " " + Std.string(this.attack)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t.set_x(4);
                t.set_y(y);
                s.addChild(t);
                y += 10;
            }
            if (this.range > 0) {
                var t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "range"), " " + Std.string(this.range)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t1.set_x(4);
                t1.set_y(y);
                s.addChild(t1);
                y += 10;
            }
            if (this.defense > 0) {
                var t2 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "defense"), " " + Std.string(this.defense)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t2.set_x(4);
                t2.set_y(y);
                s.addChild(t2);
                y += 10;
            }
            if (this.cut > 0) {
                var t3 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "cut"), " " + Std.string(this.cut)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t3.set_x(4);
                t3.set_y(y);
                s.addChild(t3);
                y += 10;
            }
            if (this.mine > 0) {
                var t4 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "mine"), " " + Std.string(this.mine)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t4.set_x(4);
                t4.set_y(y);
                s.addChild(t4);
                y += 10;
            }
            if (this.capacity > 0) {
                var t5 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "capacity"), " " + Std.string(this.capacity)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t5.set_x(4);
                t5.set_y(y);
                s.addChild(t5);
                y += 10;
            }
            if (this.stamina > 0) {
                var t6 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("stamina");
                    return $r;
                } (this)));
                t6.set_x(4);
                t6.set_y(y);
                s.addChild(t6);
                var t7 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "per_hit"), " " + Std.string(this.stamina)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t7.set_x(14);
                t7.set_y(y);
                s.addChild(t7);
                y += 10;
            }
            return com_davidmaletz_mining_item_Item.prototype.addDetails.call(this, s, w, y);
        },
        __class__: com_davidmaletz_mining_item_Equipment
    });
    var com_davidmaletz_mining_item_FarmInfo = function(xml) {
        this.id = xml.get("id");
        this.item = com_davidmaletz_mining_item_Item.get(xml.get("item"));
        if (xml.exists("min")) this.min = Std.parseInt(xml.get("min"));
        else this.min = 1;
        if (xml.exists("max")) this.max = Std.parseInt(xml.get("max"));
        else this.max = 1;
        if (xml.exists("time")) this.time = Std.parseInt(xml.get("time"));
        else this.time = 1;
    };
    $hxClasses["com.davidmaletz.mining.item.FarmInfo"] = com_davidmaletz_mining_item_FarmInfo;
    com_davidmaletz_mining_item_FarmInfo.__name__ = ["com", "davidmaletz", "mining", "item", "FarmInfo"];
    com_davidmaletz_mining_item_FarmInfo.info = null;
    com_davidmaletz_mining_item_FarmInfo.loadInfo = function() {
        com_davidmaletz_mining_item_FarmInfo.info = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.farmable != null) action_map.setReserved("farmable",
        function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_item_FarmInfo(e);
            com_davidmaletz_mining_item_FarmInfo.info.set(key, value);
        });
        else action_map.h["farmable"] = function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_item_FarmInfo(e);
            com_davidmaletz_mining_item_FarmInfo.info.set(key, value);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/farm.xml", action_map);
    };
    com_davidmaletz_mining_item_FarmInfo.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
            return com_davidmaletz_mining_item_FarmInfo.info.get(id);
        }
    };
    com_davidmaletz_mining_item_FarmInfo.prototype = {
        getCount: function() {
            return Math.floor((this.max + 1 - this.min) * Math.random()) + this.min;
        },
        __class__: com_davidmaletz_mining_item_FarmInfo
    };
    var com_davidmaletz_mining_item_FarmItem = function(f) {
        openfl_events_EventDispatcher.call(this);
        this.info = f;
        this.growth = this.info.time * 200;
    };
    $hxClasses["com.davidmaletz.mining.item.FarmItem"] = com_davidmaletz_mining_item_FarmItem;
    com_davidmaletz_mining_item_FarmItem.__name__ = ["com", "davidmaletz", "mining", "item", "FarmItem"];
    com_davidmaletz_mining_item_FarmItem.read = function(b, version) {
        var ret = new com_davidmaletz_mining_item_FarmItem(com_davidmaletz_mining_item_FarmInfo.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b)));
        ret.growth = b.readUInt16();
        return ret;
    };
    com_davidmaletz_mining_item_FarmItem.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_item_FarmItem.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getPercent: function() {
            return 1 - this.growth / (this.info.time * 200);
        },
        isComplete: function() {
            return this.growth == 0;
        },
        tick: function() {
            if (! (this.growth == 0)) {
                this.growth--;
                this.dispatchEvent(new openfl_events_Event("update_percent"));
            }
        },
        harvest: function() {
            if (this.growth == 0) {
                var ct = this.info.getCount();
                this.growth = this.info.time * 200;
                this.dispatchEvent(new openfl_events_Event("update_percent"));
                return ct;
            } else return 0;
        },
        collect: function(p) {
            var ct = this.harvest();
            if (ct <= 0) new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "growing"), 16720418);
            else p.addItem(this.info.item, ct);
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.info.id);
            b.writeUInt16(this.growth);
        },
        __class__: com_davidmaletz_mining_item_FarmItem
    });
    var com_davidmaletz_mining_item_Food = function(xml) {
        com_davidmaletz_mining_item_Item.call(this, xml);
        if (xml.exists("health")) this.health = Std.parseInt(xml.get("health"));
        else this.health = 0;
        if (xml.exists("stamina")) this.stamina = Std.parseInt(xml.get("stamina"));
        else this.stamina = 0;
    };
    $hxClasses["com.davidmaletz.mining.item.Food"] = com_davidmaletz_mining_item_Food;
    com_davidmaletz_mining_item_Food.__name__ = ["com", "davidmaletz", "mining", "item", "Food"];
    com_davidmaletz_mining_item_Food.__super__ = com_davidmaletz_mining_item_Item;
    com_davidmaletz_mining_item_Food.prototype = $extend(com_davidmaletz_mining_item_Item.prototype, {
        addDetails: function(s, w, y) {
            if (this.health != 0) {
                var t = com_davidmaletz_mining_item_Item._createIcon((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("health");
                    return $r;
                } (this)));
                t.set_x(4);
                t.set_y(y);
                s.addChild(t);
                var sym;
                if (this.health > 0) sym = "+";
                else sym = "";
                var m;
                if (this.health >= 100) m = new com_fancyfish_faeng_common_mutable_Static(sym + this.health);
                else m = new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "health"), " " + sym + Std.string(this.health));
                var t1 = new com_davidmaletz_faengfl_TextSprite(m, new com_fancyfish_faeng_text_CharacterPlacer(0), 7798784, 1);
                t1.set_x(14);
                t1.set_y(y);
                s.addChild(t1);
                y += 10;
            }
            if (this.stamina != 0) {
                var t2 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("stamina");
                    return $r;
                } (this)));
                t2.set_x(4);
                t2.set_y(y);
                s.addChild(t2);
                var sym1;
                if (this.stamina > 0) sym1 = "+";
                else sym1 = "";
                var m1;
                if (this.stamina >= 100) m1 = new com_fancyfish_faeng_common_mutable_Static(sym1 + this.stamina);
                else m1 = new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "stamina"), " " + sym1 + Std.string(this.stamina));
                var t3 = new com_davidmaletz_faengfl_TextSprite(m1, new com_fancyfish_faeng_text_CharacterPlacer(0), 26112, 1);
                t3.set_x(14);
                t3.set_y(y);
                s.addChild(t3);
                y += 10;
            }
            return com_davidmaletz_mining_item_Item.prototype.addDetails.call(this, s, w, y);
        },
        __class__: com_davidmaletz_mining_item_Food
    });
    var com_davidmaletz_mining_item_Inventory = function() {
        openfl_events_EventDispatcher.call(this);
        this.items = new haxe_ds_StringMap();
        this.weight = 0;
    };
    $hxClasses["com.davidmaletz.mining.item.Inventory"] = com_davidmaletz_mining_item_Inventory;
    com_davidmaletz_mining_item_Inventory.__name__ = ["com", "davidmaletz", "mining", "item", "Inventory"];
    com_davidmaletz_mining_item_Inventory.filterType = function(type, item) {
        return item.type == type;
    };
    com_davidmaletz_mining_item_Inventory.ascCost = function(a, b) {
        var av = (a.item.type << 16) + a.item.cost;
        var bv = (b.item.type << 16) + b.item.cost;
        return av - bv;
    };
    com_davidmaletz_mining_item_Inventory.descCost = function(a, b) {
        var av = (a.item.type << 16) - a.item.cost;
        var bv = (b.item.type << 16) - b.item.cost;
        return av - bv;
    };
    com_davidmaletz_mining_item_Inventory.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_item_Inventory.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        addItem: function(item, count) {
            var old = this.getItemCount(item);
            if (count + old < 0) count = -old;
            if (count != 0) {
                this.weight += item.weight * count;
                var c = count + old;
                if (c <= 0) this.items.remove(item.id);
                else this.items.set(item.id, c);
                this.dispatchEvent(new com_davidmaletz_mining_item_ItemEvent("item_added", this, item, c, c - old));
                return true;
            } else return false;
        },
        setItem: function(item, count) {
            this.addItem(item, count - this.getItemCount(item));
        },
        getItemCount: function(item) {
            var ret = this.items.get(item.id);
            if (ret == null) return 0;
            else return ret;
        },
        getItems: function(itemFilter, sort) {
            var i = new com_davidmaletz_mining_item__$Inventory_ItemIterator(this.items, itemFilter);
            if (sort == null) return i;
            var ar = [];
            while (i.hasNext()) {
                var item = i.next();
                ar.push(item);
            }
            ar.sort(sort);
            return HxOverrides.iter(ar);
        },
        getWeight: function() {
            return this.weight;
        },
        canCraft: function(r) {
            var $it0 = HxOverrides.iter(r.requires);
            while ($it0.hasNext()) {
                var req = $it0.next();
                if (this.getItemCount(req.item) < req.count) return false;
            }
            return true;
        },
        craft: function(r) {
            if (this.useIngredients(r)) {
                this.addItem(r.creates, 1);
                return true;
            } else return false;
        },
        useIngredients: function(r) {
            if (!this.canCraft(r)) return false;
            if (r.achievement != null) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(r.achievement);
            var $it0 = HxOverrides.iter(r.requires);
            while ($it0.hasNext()) {
                var req = $it0.next();
                this.addItem(req.item, -req.count);
            }
            return true;
        },
        addIngredients: function(r) {
            var $it0 = HxOverrides.iter(r.requires);
            while ($it0.hasNext()) {
                var req = $it0.next();
                this.addItem(req.item, req.count);
            }
        },
        write: function(b) {
            var $it0 = this.items.keys();
            while ($it0.hasNext()) {
                var i = $it0.next();
                var ct = this.items.get(i);
                if (ct > 0) {
                    com_davidmaletz_faengfl_UTFUtils.writeUTF(b, i);
                    b.writeUInt16(ct);
                }
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
        },
        clear: function() {
            var $it0 = this.items.keys();
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.setItem(i == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get(i);
                    return $r;
                } (this)), 0);
            }
        },
        read: function(b, version) {
            var $it0 = this.items.keys();
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.setItem(i == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get(i);
                    return $r;
                } (this)), 0);
            }
            while (true) {
                var item = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
                if (item == null) break;
                this.addItem(item == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get(item);
                    return $r;
                } (this)), b.readUInt16());
            }
        },
        __class__: com_davidmaletz_mining_item_Inventory
    });
    var com_davidmaletz_mining_item__$Inventory_ItemIterator = function(items, filter) {
        this.items = items;
        this.filter = filter;
        this.iterator = items.keys();
        this.current = this.getNext();
    };
    $hxClasses["com.davidmaletz.mining.item._Inventory.ItemIterator"] = com_davidmaletz_mining_item__$Inventory_ItemIterator;
    com_davidmaletz_mining_item__$Inventory_ItemIterator.__name__ = ["com", "davidmaletz", "mining", "item", "_Inventory", "ItemIterator"];
    com_davidmaletz_mining_item__$Inventory_ItemIterator.prototype = {
        hasNext: function() {
            return this.current != null;
        },
        next: function() {
            var ret = this.current;
            this.current = this.getNext();
            return ret;
        },
        getNext: function() {
            while (this.iterator.hasNext()) {
                var key = this.iterator.next();
                var i;
                if (key == null) i = null;
                else {
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    i = com_davidmaletz_mining_item_Item.items.get(key);
                }
                var ct = this.items.get(key);
                if (ct > 0 && (this.filter == null || this.filter(i))) return new com_davidmaletz_mining_item_ItemCt(i, ct);
            }
            return null;
        },
        __class__: com_davidmaletz_mining_item__$Inventory_ItemIterator
    };
    var com_davidmaletz_mining_item_ItemCt = function(i, ct) {
        this.item = i;
        this.count = ct;
    };
    $hxClasses["com.davidmaletz.mining.item.ItemCt"] = com_davidmaletz_mining_item_ItemCt;
    com_davidmaletz_mining_item_ItemCt.__name__ = ["com", "davidmaletz", "mining", "item", "ItemCt"];
    com_davidmaletz_mining_item_ItemCt.prototype = {
        __class__: com_davidmaletz_mining_item_ItemCt
    };
    var com_davidmaletz_mining_item_ItemEvent = function(type, p, i, ct, d) {
        openfl_events_Event.call(this, type);
        this.inventory = p;
        this.item = i;
        this.count = ct;
        this.delta = d;
    };
    $hxClasses["com.davidmaletz.mining.item.ItemEvent"] = com_davidmaletz_mining_item_ItemEvent;
    com_davidmaletz_mining_item_ItemEvent.__name__ = ["com", "davidmaletz", "mining", "item", "ItemEvent"];
    com_davidmaletz_mining_item_ItemEvent.__super__ = openfl_events_Event;
    com_davidmaletz_mining_item_ItemEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_mining_item_ItemEvent
    });
    var com_davidmaletz_mining_item_ItemData = function(p, i, ct) {
        com_davidmaletz_mining_item_ItemCt.call(this, i, ct);
        this.inventory = p;
    };
    $hxClasses["com.davidmaletz.mining.item.ItemData"] = com_davidmaletz_mining_item_ItemData;
    com_davidmaletz_mining_item_ItemData.__name__ = ["com", "davidmaletz", "mining", "item", "ItemData"];
    com_davidmaletz_mining_item_ItemData.__super__ = com_davidmaletz_mining_item_ItemCt;
    com_davidmaletz_mining_item_ItemData.prototype = $extend(com_davidmaletz_mining_item_ItemCt.prototype, {
        __class__: com_davidmaletz_mining_item_ItemData
    });
    var com_davidmaletz_mining_item_Recipe = function(xml) {
        this.id = xml.get("id");
        this.creates = com_davidmaletz_mining_item_Item.get(xml.get("creates"));
        this.type = xml.get("type");
        this.requires = [];
        if (xml.exists("fuel")) {
            this.fuel = Std.parseInt(xml.get("fuel"));
            this.creates = null;
        } else this.fuel = 0;
        this.achievement = xml.get("achievement");
        if (xml.exists("structure")) {
            this.structure = js_Boot.__cast(com_davidmaletz_mining_structure_StructureInfo.get(xml.get("structure")), com_davidmaletz_mining_structure_StructureInfo);
            this.creates = null;
        }
        var $it0 = xml.elementsNamed("item");
        while ($it0.hasNext()) {
            var e = $it0.next();
            var item = com_davidmaletz_mining_item_Item.get(e.get("id"));
            if (item != null) this.requires.push(new com_davidmaletz_mining_item_ItemCt(item, e.exists("count") ? Std.parseInt(e.get("count")) : 1));
        }
    };
    $hxClasses["com.davidmaletz.mining.item.Recipe"] = com_davidmaletz_mining_item_Recipe;
    com_davidmaletz_mining_item_Recipe.__name__ = ["com", "davidmaletz", "mining", "item", "Recipe"];
    com_davidmaletz_mining_item_Recipe.recipes = null;
    com_davidmaletz_mining_item_Recipe.recipe_types = null;
    com_davidmaletz_mining_item_Recipe.addRecipe = function(r) {
        com_davidmaletz_mining_item_Recipe.recipes.set(r.id, r);
        var ar = com_davidmaletz_mining_item_Recipe.recipe_types.get(r.type);
        if (ar == null) {
            ar = [r];
            com_davidmaletz_mining_item_Recipe.recipe_types.set(r.type, ar);
        } else ar.push(r);
    };
    com_davidmaletz_mining_item_Recipe.loadRecipes = function() {
        com_davidmaletz_mining_item_Recipe.recipes = new haxe_ds_StringMap();
        com_davidmaletz_mining_item_Recipe.recipe_types = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.recipe != null) action_map.setReserved("recipe",
        function(e) {
            com_davidmaletz_mining_item_Recipe.addRecipe(new com_davidmaletz_mining_item_Recipe(e));
        });
        else action_map.h["recipe"] = function(e) {
            com_davidmaletz_mining_item_Recipe.addRecipe(new com_davidmaletz_mining_item_Recipe(e));
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/crafting.xml", action_map);
    };
    com_davidmaletz_mining_item_Recipe.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_item_Recipe.recipes == null) com_davidmaletz_mining_item_Recipe.loadRecipes();
            return com_davidmaletz_mining_item_Recipe.recipes.get(id);
        }
    };
    com_davidmaletz_mining_item_Recipe.getByType = function(type) {
        if (type == null) return null;
        else {
            if (com_davidmaletz_mining_item_Recipe.recipe_types == null) com_davidmaletz_mining_item_Recipe.loadRecipes();
            var r = com_davidmaletz_mining_item_Recipe.recipe_types.get(type);
            if (r == null) return null;
            else return HxOverrides.iter(r);
        }
    };
    com_davidmaletz_mining_item_Recipe.prototype = {
        getRequirements: function() {
            return HxOverrides.iter(this.requires);
        },
        numRequirements: function() {
            return this.requires.length;
        },
        __class__: com_davidmaletz_mining_item_Recipe
    };
    var com_davidmaletz_mining_item_SmeltItem = function(r) {
        openfl_events_EventDispatcher.call(this);
        this.recipe = r;
        this.fuel = 125;
    };
    $hxClasses["com.davidmaletz.mining.item.SmeltItem"] = com_davidmaletz_mining_item_SmeltItem;
    com_davidmaletz_mining_item_SmeltItem.__name__ = ["com", "davidmaletz", "mining", "item", "SmeltItem"];
    com_davidmaletz_mining_item_SmeltItem.read = function(b, version) {
        var ret = new com_davidmaletz_mining_item_SmeltItem(com_davidmaletz_mining_item_Recipe.get(com_davidmaletz_faengfl_UTFUtils.readUTF(b)));
        ret.fuel = b.readUInt16();
        return ret;
    };
    com_davidmaletz_mining_item_SmeltItem.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_item_SmeltItem.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getPercent: function() {
            return 1 - this.fuel / 125;
        },
        isComplete: function() {
            return this.fuel == 0;
        },
        tick: function(smelter) {
            if (this.fuel == 0) throw new js__$Boot_HaxeError("Cannot smelt a complete action!");
            this.fuel--;
            this.dispatchEvent(new openfl_events_Event("update_percent"));
            if (this.fuel % 25 == 0) {
                smelter.useFuel();
                if (this.fuel == 0) smelter.onComplete(this);
            }
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.recipe.id);
            b.writeUInt16(this.fuel);
        },
        __class__: com_davidmaletz_mining_item_SmeltItem
    });
    var com_davidmaletz_mining_npc_NPCIdle = function() {};
    $hxClasses["com.davidmaletz.mining.npc.NPCIdle"] = com_davidmaletz_mining_npc_NPCIdle;
    com_davidmaletz_mining_npc_NPCIdle.__name__ = ["com", "davidmaletz", "mining", "npc", "NPCIdle"];
    com_davidmaletz_mining_npc_NPCIdle.prototype = {
        __class__: com_davidmaletz_mining_npc_NPCIdle
    };
    var com_davidmaletz_mining_npc_CollectWood = function(npc) {
        this.dir = 0;
        this.steps = 0;
        this.hasWood = false;
    };
    $hxClasses["com.davidmaletz.mining.npc.CollectWood"] = com_davidmaletz_mining_npc_CollectWood;
    com_davidmaletz_mining_npc_CollectWood.__name__ = ["com", "davidmaletz", "mining", "npc", "CollectWood"];
    com_davidmaletz_mining_npc_CollectWood.__interfaces__ = [com_davidmaletz_mining_npc_NPCIdle];
    com_davidmaletz_mining_npc_CollectWood.prototype = {
        init: function(npc) {},
        destroy: function() {
            this.storehouse = null;
        },
        playIdle: function(npc) {
            if (this.storehouse == null) this.storehouse = npc.npc.getStructure(com_davidmaletz_mining_structure_Storehouse);
            if (this.storehouse == null) return true;
            if (this.hasWood) {
                var dx = this.storehouse.tile_x + (Math.ceil(this.storehouse.info.width / com_davidmaletz_tiles_Tile.SIZE) >> 1) - npc.npc.tile_x;
                if (dx == 0) {
                    this.storehouse.inventory.addItem((function($this) {
                        var $r;
                        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                        $r = com_davidmaletz_mining_item_Item.items.get("wood");
                        return $r;
                    } (this)), 1);
                    this.storehouse.inventory.addItem(Math.random() < 0.25 ? (function($this) {
                        var $r;
                        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                        $r = com_davidmaletz_mining_item_Item.items.get("meat");
                        return $r;
                    } (this)) : (function($this) {
                        var $r;
                        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                        $r = com_davidmaletz_mining_item_Item.items.get("berries");
                        return $r;
                    } (this)), 1);
                    this.storehouse.openClose();
                    this.hasWood = false;
                    return this.playIdle(npc);
                } else if (dx > 0) {
                    npc.npc.setTile(npc.npc.tile_x + 1, npc.npc.tile_y);
                    return false;
                } else {
                    npc.npc.setTile(npc.npc.tile_x - 1, npc.npc.tile_y);
                    return false;
                }
            } else {
                if (this.steps <= 0) {
                    this.steps = 10;
                    if (Math.random() < 0.5) this.dir = -1;
                    else this.dir = 1;
                }
                this.steps--;
                var s = com_davidmaletz_tiles_Tile.SIZE;
                if (this.steps == 0 && com_davidmaletz_faengfl_FaengFL.onScreen(npc, new openfl_geom_Rectangle( - s * 0.5, -s * 0.5, s, s))) this.steps = 1;
                if (this.steps == 0 || !npc.npc.canEnter(npc.npc.tile_x + this.dir, npc.npc.tile_y)) {
                    this.hasWood = true;
                    return this.playIdle(npc);
                }
                npc.npc.setTile(npc.npc.tile_x + this.dir, npc.npc.tile_y);
                return false;
            }
            return true;
        },
        __class__: com_davidmaletz_mining_npc_CollectWood
    };
    var com_davidmaletz_mining_npc_MineOre = function(npc) {
        this.path = null;
        this.item = null;
    };
    $hxClasses["com.davidmaletz.mining.npc.MineOre"] = com_davidmaletz_mining_npc_MineOre;
    com_davidmaletz_mining_npc_MineOre.__name__ = ["com", "davidmaletz", "mining", "npc", "MineOre"];
    com_davidmaletz_mining_npc_MineOre.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler, com_davidmaletz_mining_npc_NPCIdle];
    com_davidmaletz_mining_npc_MineOre.prototype = {
        init: function(npc) {},
        destroy: function() {
            this.storehouse = null;
        },
        insertNode: function(npc, queue, x, y, parent) {
            if (y > 10 || !npc.npc.canEnter(x, y)) return;
            var t = npc.npc.area.getTile(x, y, 0);
            if (t != null && (function($this) {
                var $r;
                if (com_davidmaletz_mining_renderer_PlayerRenderer.dig_map == null) com_davidmaletz_mining_renderer_PlayerRenderer.loadDig();
                $r = com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.exists(t.id) ? com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.get(t.id) : 100;
                return $r;
            } (this)) > 0) return;
            var n = new com_fancyfish_faeng_common_Node(x, y, parent);
            if (t != null) n.depth += 3;
            queue.insert(n);
        },
        toPlayer: function(a, b) {
            return a.depth + com_fancyfish_faeng_common_Utils.abs(a.x - this.npc.npc.tile_x) + com_fancyfish_faeng_common_Utils.abs(a.y - this.npc.npc.tile_y) < b.depth + com_fancyfish_faeng_common_Utils.abs(b.x - this.npc.npc.tile_x) + com_fancyfish_faeng_common_Utils.abs(b.y - this.npc.npc.tile_y);
        },
        pathfind: function(npc, x, y) {
            var queue = new com_fancyfish_faeng_common_Heap($bind(this, this.toPlayer));
            var visited = new haxe_ds_IntMap();
            queue.insert(new com_fancyfish_faeng_common_Node(x, y));
            while (! (queue.array.length == 0)) {
                var n = queue.remove();
                var i = (n.y + 16384) * 32768 + (n.x + 16384);
                if (visited.h.hasOwnProperty(i)) continue;
                visited.h[i] = true;
                if (n.x == npc.npc.tile_x && n.y == npc.npc.tile_y) return n;
                this.insertNode(npc, queue, n.x + 1, n.y, n);
                this.insertNode(npc, queue, n.x - 1, n.y, n);
                this.insertNode(npc, queue, n.x, n.y + 1, n);
                this.insertNode(npc, queue, n.x, n.y - 1, n);
            }
            return null;
        },
        reverse: function(n) {
            var ret = new com_fancyfish_faeng_common_Node(n.x, n.y);
            while (n.parent != null) {
                n = n.parent;
                ret = new com_fancyfish_faeng_common_Node(n.x, n.y, ret);
            }
            return ret;
        },
        findOre: function(npc) {
            var queue = new com_fancyfish_faeng_common_Heap(com_fancyfish_faeng_common_Node.lessThan);
            var visited = new haxe_ds_IntMap();
            queue.insert(new com_fancyfish_faeng_common_Node(npc.npc.tile_x, npc.npc.tile_y));
            while (! (queue.array.length == 0)) {
                var n = queue.remove();
                var i = (n.y + 16384) * 32768 + (n.x + 16384);
                if (visited.h.hasOwnProperty(i)) continue;
                visited.h[i] = true;
                var t = npc.npc.area.getTile(n.x, n.y, 1);
                if (t != null) return this.reverse(n);
                this.insertNode(npc, queue, n.x + 1, n.y, n);
                this.insertNode(npc, queue, n.x - 1, n.y, n);
                this.insertNode(npc, queue, n.x, n.y + 1, n);
                this.insertNode(npc, queue, n.x, n.y - 1, n);
            }
            return null;
        },
        enter_frame: function(frames) {
            if (this.npc.npc.area == null || this.npc.npc.area.renderer == null) {
                if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
                else false;
                return;
            }
            var t = this.npc.npc.area.getTileId(this.px, this.py, 0);
            if (t == -1 || !this.npc.npc.area.renderer.incBrickBreak(this.px, this.py, frames)) {
                if (t != -1) this.item = this.npc.npc.area.mine(this.px, this.py, t, 0);
                if (this.item != null) this.path = null;
                if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
                else false;
                this.playIdle(this.npc);
            }
        },
        moveTo: function(npc, x, y) {
            if (npc.npc.area.getTileId(x, y, 0) == -1) {
                npc.npc.setTile(x, y);
                return true;
            }
            this.px = x;
            this.py = y;
            var dx = x - npc.npc.tile_x;
            if (dx != 0) npc.set_scaleX(dx > 0 ? -1 : 1);
            npc.npc.playLoop("mine");
            this.npc = npc;
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
            return false;
        },
        playIdle: function(npc) {
            if (this.item == null && this.path == null && npc.npc.tile_y >= 0 && !(com_davidmaletz_faengfl_Window.window_ct == 0 && !npc.quest_indicator.get_visible())) {
                this.moveTo(npc, npc.npc.tile_x, npc.npc.tile_y - 1);
                return false;
            }
            if (this.storehouse == null) this.storehouse = npc.npc.getStructure(com_davidmaletz_mining_structure_Storehouse);
            if (this.storehouse == null) return true;
            if (this.path != null && (this.path.x != npc.npc.tile_x || this.path.y != npc.npc.tile_y)) this.path = null;
            if (this.item != null) {
                if (this.path == null) {
                    this.path = this.pathfind(npc, this.storehouse.tile_x + (Math.ceil(this.storehouse.info.width / com_davidmaletz_tiles_Tile.SIZE) >> 1), this.storehouse.tile_y);
                    if (this.path == null) return true;
                }
                var p = this.path.parent;
                if (p == null) {
                    this.path = null;
                    this.storehouse.inventory.addItem(this.item.item, this.item.count);
                    this.storehouse.openClose();
                    this.item = null;
                    return this.playIdle(npc);
                } else if (this.moveTo(npc, p.x, p.y)) this.path = p;
                return false;
            } else {
                if (this.path == null) {
                    this.path = this.findOre(npc);
                    if (this.path == null) return true;
                }
                var p1 = this.path.parent;
                if (p1 == null) {
                    this.path = null;
                    return this.playIdle(npc);
                }
                if (this.moveTo(npc, p1.x, p1.y)) this.path = p1;
                return false;
            }
            return true;
        },
        __class__: com_davidmaletz_mining_npc_MineOre
    };
    var com_davidmaletz_mining_npc_NPC = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
        if (info.idle != null) this.idle = Type.createInstance(info.idle, [this]);
    };
    $hxClasses["com.davidmaletz.mining.npc.NPC"] = com_davidmaletz_mining_npc_NPC;
    com_davidmaletz_mining_npc_NPC.__name__ = ["com", "davidmaletz", "mining", "npc", "NPC"];
    com_davidmaletz_mining_npc_NPC.__interfaces__ = [com_davidmaletz_mining_npc_Speakable];
    com_davidmaletz_mining_npc_NPC.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_npc_NPC.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            var renderer = new com_davidmaletz_mining_npc_NPCRenderer(this);
            renderer.addEventListener("removedFromStage", $bind(this, this.stopSFX));
            return renderer;
        },
        getInfo: function() {
            return this.info;
        },
        getLayer: function() {
            return 2;
        },
        getAction: function(p) {
            var action = this.info.action;
            if (action == null) return null;
            else return com_fancyfish_faeng_common_Lang.getText("npc", action);
        },
        isBlocking: function(asker, flags) {
            return false;
        },
        onEnter: function(p) {
            com_davidmaletz_mining_world_TooltipObject.prototype.onEnter.call(this, p);
            if (this.renderer != null && p.renderer != null) {
                this.renderer.set_scaleX( - p.renderer.get_scaleX());
                this.playLoop("walk");
                this.renderer.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.tile_x + 0.75 * this.renderer.get_scaleX() + 0.5) * com_davidmaletz_tiles_Tile.SIZE, (this.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE), 10, (function(f, id) {
                    return function() {
                        f(id);
                    };
                })($bind(this, this.playAnimation), "idle"));
            }
        },
        onExit: function(p) {
            com_davidmaletz_mining_world_TooltipObject.prototype.onExit.call(this, p);
            if (this.renderer != null) {
                var r;
                r = js_Boot.__cast(this.renderer, com_davidmaletz_mining_npc_NPCRenderer);
                if (r.onComplete != $bind(r, r.playIdle) || r.animation != this.info.getAnim("walk")) {
                    this.playLoop("walk");
                    this.renderer.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE, (this.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE), 10, (function(f, id) {
                        return function() {
                            f(id);
                        };
                    })($bind(this, this.playAnimation), "idle"));
                }
            }
        },
        playAnimation: function(id) {
            if (this.renderer == null) return;
            var r;
            r = js_Boot.__cast(this.renderer, com_davidmaletz_mining_npc_NPCRenderer);
            r.playAnimation(this.info.getAnim(id), false, $bind(r, r.playIdle), null, null);
        },
        playLoop: function(id) {
            if (this.renderer == null) return;
            var r;
            r = js_Boot.__cast(this.renderer, com_davidmaletz_mining_npc_NPCRenderer);
            r.playAnimation(this.info.getAnim(id), true, null, null, null);
        },
        onOperate: function(p) {
            this.info.createAction(p, this).start();
        },
        beginSpeak: function() {
            this.playLoop("talk");
            var sfx = this.info.talkSfx;
            if (sfx != null) this.playSFX(sfx);
        },
        endSpeak: function(closed) {
            if (closed) this.playAnimation("idle");
            this.stopSFX();
        },
        playSFX: function(id) {
            this.stopSFX();
            if (this.renderer != null) this.sound = new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, this.renderer, id, new openfl_geom_Point(), 1073741823);
        },
        stopSFX: function(e) {
            if (this.sound != null) {
                this.sound.kill(null);
                this.sound = null;
            }
        },
        getStructure: function(cls) {
            if (this.area == null) return null;
            var $it0 = new com_fancyfish_faeng_common_CompoundIterator2(this.area.structures.iterator());
            while ($it0.hasNext()) {
                var s = $it0.next();
                if (js_Boot.__instanceof(s, cls)) return s;
            }
            return null;
        },
        canEnter: function(x, y) {
            y++;
            var t = this.area.getTile(x, y, 0);
            return t != null && t.id != "empty" || this.area.getTile(x, y, 3) != null;
        },
        __class__: com_davidmaletz_mining_npc_NPC
    });
    var com_davidmaletz_mining_npc_NPCInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), xml.exists("health") ? Std.parseInt(xml.get("health")) : 0);
        this.tile = xml.get("tile");
        this.action = xml.get("action");
        this.talkSfx = xml.get("talk_sfx");
        this.script = xml;
        if (xml.exists("type")) {
            var cls = xml.get("type");
            cls = cls.charAt(0).toUpperCase() + HxOverrides.substr(cls, 1, null);
            var c = Type.resolveClass("com.davidmaletz.mining.npc." + cls);
            if (c != null) this.type = c;
        }
        if (xml.exists("idle")) {
            var cls1 = xml.get("idle");
            cls1 = cls1.charAt(0).toUpperCase() + HxOverrides.substr(cls1, 1, null);
            var c1 = Type.resolveClass("com.davidmaletz.mining.npc." + cls1);
            if (c1 != null) this.idle = c1;
        }
    };
    $hxClasses["com.davidmaletz.mining.npc.NPCInfo"] = com_davidmaletz_mining_npc_NPCInfo;
    com_davidmaletz_mining_npc_NPCInfo.__name__ = ["com", "davidmaletz", "mining", "npc", "NPCInfo"];
    com_davidmaletz_mining_npc_NPCInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_npc_NPCInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        create: function(tile_x, tile_y) {
            if (this.type == null) return new com_davidmaletz_mining_npc_NPC(this, tile_x, tile_y);
            else return Type.createInstance(this.type, [this, tile_x, tile_y]);
        },
        createAction: function(p, o, onComplete, vars) {
            return new com_davidmaletz_mining_npc_NPCEventHandler(this.script, p, o, onComplete, vars);
        },
        getAnim: function(id) {
            var base;
            if (this.script.exists("animation")) base = this.script.get("animation") + ".";
            else base = "npc.";
            if (this.script.exists(id + "_anim")) return this.script.get(id + "_anim");
            else {
                var s = this.id + "." + id;
                if ((s == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
                    $r = com_davidmaletz_tiles_TileAnimation.anims.get(s);
                    return $r;
                } (this))) == null) return base + id;
                else return s;
            }
        },
        __class__: com_davidmaletz_mining_npc_NPCInfo
    });
    var com_davidmaletz_mining_npc_NPCRenderer = function(n) {
        var i = n.info;
        com_davidmaletz_tiles_render_PlayAnimation.call(this, com_davidmaletz_tiles_Tile.get(i.tile), i.getAnim("idle"), 10, true);
        this.npc = n;
        this.set_x((n.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((n.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.quest_indicator = new com_davidmaletz_lerp_LerpSpriteFL();
        this.quest_indicator.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/ui/quest.png")));
        this.quest_indicator.set_scaleX( - 1);
        this.quest_indicator.set_x(com_davidmaletz_tiles_Tile.SIZE * 0.25);
        this.quest_indicator.set_y( - com_davidmaletz_tiles_Tile.SIZE);
        this.quest_indicator.set_visible(false);
        this.addChild(this.quest_indicator);
        this.darken();
    };
    $hxClasses["com.davidmaletz.mining.npc.NPCRenderer"] = com_davidmaletz_mining_npc_NPCRenderer;
    com_davidmaletz_mining_npc_NPCRenderer.__name__ = ["com", "davidmaletz", "mining", "npc", "NPCRenderer"];
    com_davidmaletz_mining_npc_NPCRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_npc_NPCRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        darken: function() {
            this.quest_indicator.lerp(new com_davidmaletz_lerp_DarkenKeyframe(0.75), 20, $bind(this, this.brighten));
        },
        brighten: function() {
            this.quest_indicator.lerp(new com_davidmaletz_lerp_DarkenKeyframe(1), 20, $bind(this, this.darken));
        },
        init: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.init.call(this, e);
            this.npc.addEventListener("move", $bind(this, this.move));
            var p;
            p = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player;
            p.inventory.addEventListener("item_added", $bind(this, this.update));
            this.update();
            p.addEventListener("add_quest", $bind(this, this.update));
            p.addEventListener("change_coins", $bind(this, this.update));
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame), false, PriorityManager.priority + 1);
            if (this.npc.idle != null) {
                this.npc.idle.init(this);
                if (this.npc.tile_y < 0 && this.quest_indicator.get_visible() || this.npc.idle.playIdle(this)) {
                    this.setFrame(0);
                    this.playAnimation(this.npc.info.getAnim("idle"), false, $bind(this, this.playIdle), null, null);
                }
            }
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.destroy.call(this, e);
            this.npc.removeEventListener("move", $bind(this, this.move));
            if (this.npc.idle != null) this.npc.idle.destroy();
            var p;
            p = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player;
            p.inventory.removeEventListener("item_added", $bind(this, this.update));
            p.removeEventListener("add_quest", $bind(this, this.update));
            p.removeEventListener("change_coins", $bind(this, this.update));
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        hide: function() {
            this.quest_indicator.set_visible(false);
        },
        isIdle: function(inc_y) {
            if (inc_y == null) inc_y = true;
            return com_davidmaletz_faengfl_Window.window_ct == 0 && (inc_y && this.npc.tile_y >= 0 || !this.quest_indicator.get_visible());
        },
        update: function(e) {
            var vis = this.npc.info.createAction((js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player, this.npc).getFirst(["quest", "complete"]) != null;
            if (vis != this.quest_indicator.get_visible()) {
                if (this.quest_indicator.get_visible()) this.quest_indicator.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, $bind(this, this.hide));
                else {
                    this.quest_indicator.set_visible(true);
                    this.quest_indicator.set_alpha(0);
                }
            }
            if (vis && this.quest_indicator.get_alpha() != 1) this.quest_indicator.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
        },
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            com_davidmaletz_tiles_render_PlayAnimation.prototype.setAnimation.call(this, anim_id, -0.5, -0.5);
        },
        move: function(e) {
            this.setFrame(0);
            this.playAnimation(this.npc.info.getAnim("walk"), false, $bind(this, this.playIdle), null, null);
            var x = (this.npc.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE;
            var dx = x - this.get_x();
            if (dx != 0) this.set_scaleX(dx > 0 ? -1 : 1);
            this.lerp(new com_davidmaletz_lerp_PositionKeyframe(x, (this.npc.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE), Math.floor(this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame));
        },
        playIdle: function(p) {
            if (this.npc.idle == null || !(com_davidmaletz_faengfl_Window.window_ct == 0 && (this.npc.tile_y >= 0 || !this.quest_indicator.get_visible())) || this.npc.idle.playIdle(this)) {
                this.setFrame(0);
                this.playAnimation(this.npc.info.getAnim("idle"), false, $bind(this, this.playIdle), null, null);
            }
        },
        handle_frame: function(e) {
            if (this.animation == this.npc.info.getAnim("talk")) this.enter_frame(com_davidmaletz_faengfl_FaengFL.frameTime);
        },
        __class__: com_davidmaletz_mining_npc_NPCRenderer
    });
    var com_davidmaletz_mining_npc_Quest = function(xml) {
        this.id = xml.get("id");
        this.giver = xml.get("giver");
        this.requires = [];
        if (xml.exists("coins")) this.coins = Std.parseInt(xml.get("coins"));
        else this.coins = 0;
        if (xml.exists("exp")) this.exp = Std.parseInt(xml.get("exp"));
        else this.exp = 0;
        this.achievement = xml.get("achievement");
        var $it0 = xml.elementsNamed("item");
        while ($it0.hasNext()) {
            var e = $it0.next();
            var item = com_davidmaletz_mining_item_Item.get(e.get("id"));
            if (item != null) this.requires.push(new com_davidmaletz_mining_item_ItemCt(item, e.exists("count") ? Std.parseInt(e.get("count")) : 1));
        }
        if (xml.exists("recipe")) {
            var r = com_davidmaletz_mining_item_Recipe.get(xml.get("recipe"));
            var $it1 = HxOverrides.iter(r.requires);
            while ($it1.hasNext()) {
                var req = $it1.next();
                this.requires.push(req);
            }
        }
        var i = xml.elementsNamed("canComplete");
        if (i.hasNext()) this.canComplete = i.next();
        else this.canComplete = null;
    };
    $hxClasses["com.davidmaletz.mining.npc.Quest"] = com_davidmaletz_mining_npc_Quest;
    com_davidmaletz_mining_npc_Quest.__name__ = ["com", "davidmaletz", "mining", "npc", "Quest"];
    com_davidmaletz_mining_npc_Quest.quests = null;
    com_davidmaletz_mining_npc_Quest.loadQuests = function() {
        com_davidmaletz_mining_npc_Quest.quests = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.quest != null) action_map.setReserved("quest",
        function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_npc_Quest(e);
            com_davidmaletz_mining_npc_Quest.quests.set(key, value);
        });
        else action_map.h["quest"] = function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_npc_Quest(e);
            com_davidmaletz_mining_npc_Quest.quests.set(key, value);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/quests.xml", action_map);
    };
    com_davidmaletz_mining_npc_Quest.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_npc_Quest.quests == null) com_davidmaletz_mining_npc_Quest.loadQuests();
            return com_davidmaletz_mining_npc_Quest.quests.get(id);
        }
    };
    com_davidmaletz_mining_npc_Quest.prototype = {
        getRequirementById: function(id) {
            var _g = 0;
            var _g1 = this.requires;
            while (_g < _g1.length) {
                var r = _g1[_g]; ++_g;
                if (r.item.id == id) return r;
            }
            return null;
        },
        getRequirements: function() {
            return HxOverrides.iter(this.requires);
        },
        numRequirements: function() {
            return this.requires.length;
        },
        hasCanCompleteEvent: function() {
            return this.canComplete != null;
        },
        runCanCompleteEvent: function(p, onComplete) {
            new com_davidmaletz_mining_npc_NPCEventHandler(this.canComplete, p, this, onComplete).runAll();
        },
        __class__: com_davidmaletz_mining_npc_Quest
    };
    var com_davidmaletz_mining_npc_TendFarm = function(npc) {
        this.loc = null;
        this.hoe = 10;
    };
    $hxClasses["com.davidmaletz.mining.npc.TendFarm"] = com_davidmaletz_mining_npc_TendFarm;
    com_davidmaletz_mining_npc_TendFarm.__name__ = ["com", "davidmaletz", "mining", "npc", "TendFarm"];
    com_davidmaletz_mining_npc_TendFarm.__interfaces__ = [com_davidmaletz_mining_npc_NPCIdle];
    com_davidmaletz_mining_npc_TendFarm.prototype = {
        init: function(npc) {},
        destroy: function() {
            this.farm = null;
        },
        playIdle: function(npc) {
            if (this.farm == null) this.farm = npc.npc.getStructure(com_davidmaletz_mining_structure_Farm);
            if (this.farm == null) return true;
            if (this.hoe == 0) {
                var dx = this.farm.tile_x + (Math.ceil(this.farm.info.width / com_davidmaletz_tiles_Tile.SIZE) >> 1) - npc.npc.tile_x;
                if (dx == 0) {
                    this.farm.openClose();
                    this.hoe = 10;
                    var s = npc.npc.getStructure(com_davidmaletz_mining_structure_Storehouse);
                    if (s == null) return true;
                    var len = this.farm.items.length;
                    var _g = 0;
                    while (_g < len) {
                        var i = _g++;
                        var item = this.farm.items[i];
                        var ct = item.harvest();
                        if (ct > 0) {
                            s.inventory.addItem(item.info.item, ct);
                            break;
                        }
                    }
                    return true;
                } else if (dx > 0) {
                    npc.npc.setTile(npc.npc.tile_x + 1, npc.npc.tile_y);
                    return false;
                } else {
                    npc.npc.setTile(npc.npc.tile_x - 1, npc.npc.tile_y);
                    return false;
                }
            } else {
                if (this.loc == null) {
                    var upgrade = npc.npc.area.getStructure(this.farm.tile_x + 10, -1);
                    if (upgrade == null) return true;
                    this.loc = upgrade.tile_x + Math.floor(Math.ceil(upgrade.info.width / com_davidmaletz_tiles_Tile.SIZE) * Math.random());
                }
                var dx1 = this.loc - npc.npc.tile_x;
                if (dx1 == 0) {
                    this.hoe--;
                    this.loc = null;
                    npc.npc.playAnimation("hoe");
                    return false;
                } else if (dx1 > 0) {
                    npc.npc.setTile(npc.npc.tile_x + 1, npc.npc.tile_y);
                    return false;
                } else {
                    npc.npc.setTile(npc.npc.tile_x - 1, npc.npc.tile_y);
                    return false;
                }
            }
            return true;
        },
        __class__: com_davidmaletz_mining_npc_TendFarm
    };
    var com_davidmaletz_mining_npc_Trader = function(npc) {
        this.steps = 0;
    };
    $hxClasses["com.davidmaletz.mining.npc.Trader"] = com_davidmaletz_mining_npc_Trader;
    com_davidmaletz_mining_npc_Trader.__name__ = ["com", "davidmaletz", "mining", "npc", "Trader"];
    com_davidmaletz_mining_npc_Trader.__interfaces__ = [com_davidmaletz_mining_npc_NPCIdle];
    com_davidmaletz_mining_npc_Trader.prototype = {
        init: function(npc) {},
        destroy: function() {},
        playIdle: function(npc) {
            if (! (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player.hasQuest("market")) return true;
            var s = com_davidmaletz_tiles_Tile.SIZE;
            if (this.steps > 0) {
                this.steps--;
                if (npc.npc.canEnter(npc.npc.tile_x + 1, npc.npc.tile_y)) {
                    npc.npc.setTile(npc.npc.tile_x + 1, npc.npc.tile_y);
                    return false;
                }
                return true;
            } else if (npc.npc.canEnter(npc.npc.tile_x - 1, npc.npc.tile_y)) {
                npc.npc.setTile(npc.npc.tile_x - 1, npc.npc.tile_y);
                return false;
            } else this.steps = 10;
            return true;
        },
        __class__: com_davidmaletz_mining_npc_Trader
    };
    var com_davidmaletz_mining_npc_event_XmlEvent = function(xml, player, vars) {
        this.eventList = null;
        this.xml = xml;
        this.player = player;
        this.vars = vars;
    };
    $hxClasses["com.davidmaletz.mining.npc.event.XmlEvent"] = com_davidmaletz_mining_npc_event_XmlEvent;
    com_davidmaletz_mining_npc_event_XmlEvent.__name__ = ["com", "davidmaletz", "mining", "npc", "event", "XmlEvent"];
    com_davidmaletz_mining_npc_event_XmlEvent.prototype = {
        execute: function() {
            if (this.xml.get("once") == "true") this.kill();
            new com_davidmaletz_mining_npc_NPCEventHandler(this.xml, this.player, null, null, this.vars, this.eventList).runAll();
        },
        kill: function() {
            if (this.eventList != null) HxOverrides.remove(this.eventList, this);
        },
        __class__: com_davidmaletz_mining_npc_event_XmlEvent
    };
    var com_davidmaletz_mining_npc_event_CanCompleteEvent = function(xml, player, vars) {
        com_davidmaletz_mining_npc_event_XmlEvent.call(this, xml, player, vars);
        player.inventory.addEventListener("item_added", $bind(this, this.update));
        player.addEventListener("add_quest", $bind(this, this.update));
        player.addEventListener("change_coins", $bind(this, this.update));
        this.update(null);
    };
    $hxClasses["com.davidmaletz.mining.npc.event.CanCompleteEvent"] = com_davidmaletz_mining_npc_event_CanCompleteEvent;
    com_davidmaletz_mining_npc_event_CanCompleteEvent.__name__ = ["com", "davidmaletz", "mining", "npc", "event", "CanCompleteEvent"];
    com_davidmaletz_mining_npc_event_CanCompleteEvent.__super__ = com_davidmaletz_mining_npc_event_XmlEvent;
    com_davidmaletz_mining_npc_event_CanCompleteEvent.prototype = $extend(com_davidmaletz_mining_npc_event_XmlEvent.prototype, {
        update: function(e) {
            if (this.player.canCompleteQuest(this.xml.get("canComplete"))) this.execute();
        },
        kill: function() {
            this.player.inventory.removeEventListener("item_added", $bind(this, this.update));
            this.player.removeEventListener("add_quest", $bind(this, this.update));
            this.player.removeEventListener("change_coins", $bind(this, this.update));
            com_davidmaletz_mining_npc_event_XmlEvent.prototype.kill.call(this);
        },
        __class__: com_davidmaletz_mining_npc_event_CanCompleteEvent
    });
    var com_davidmaletz_mining_npc_event_OnCompleteEvent = function(xml, player, vars, quest) {
        com_davidmaletz_mining_npc_event_XmlEvent.call(this, xml, player, vars);
        player.addEventListener("complete_quest", $bind(this, this.update));
        this.quest = quest;
    };
    $hxClasses["com.davidmaletz.mining.npc.event.OnCompleteEvent"] = com_davidmaletz_mining_npc_event_OnCompleteEvent;
    com_davidmaletz_mining_npc_event_OnCompleteEvent.__name__ = ["com", "davidmaletz", "mining", "npc", "event", "OnCompleteEvent"];
    com_davidmaletz_mining_npc_event_OnCompleteEvent.__super__ = com_davidmaletz_mining_npc_event_XmlEvent;
    com_davidmaletz_mining_npc_event_OnCompleteEvent.prototype = $extend(com_davidmaletz_mining_npc_event_XmlEvent.prototype, {
        update: function(e) {
            if (e.value == this.quest) this.execute();
        },
        kill: function() {
            this.player.removeEventListener("complete_quest", $bind(this, this.update));
            com_davidmaletz_mining_npc_event_XmlEvent.prototype.kill.call(this);
        },
        __class__: com_davidmaletz_mining_npc_event_OnCompleteEvent
    });
    var com_davidmaletz_mining_npc_event_OnItemEvent = function(xml, player, vars, item) {
        com_davidmaletz_mining_npc_event_XmlEvent.call(this, xml, player, vars);
        player.inventory.addEventListener("item_added", $bind(this, this.update));
        this.item = item;
    };
    $hxClasses["com.davidmaletz.mining.npc.event.OnItemEvent"] = com_davidmaletz_mining_npc_event_OnItemEvent;
    com_davidmaletz_mining_npc_event_OnItemEvent.__name__ = ["com", "davidmaletz", "mining", "npc", "event", "OnItemEvent"];
    com_davidmaletz_mining_npc_event_OnItemEvent.__super__ = com_davidmaletz_mining_npc_event_XmlEvent;
    com_davidmaletz_mining_npc_event_OnItemEvent.prototype = $extend(com_davidmaletz_mining_npc_event_XmlEvent.prototype, {
        update: function(e) {
            if (e.item == this.item && e.delta > 0) this.execute();
        },
        kill: function() {
            this.player.inventory.removeEventListener("item_added", $bind(this, this.update));
            com_davidmaletz_mining_npc_event_XmlEvent.prototype.kill.call(this);
        },
        __class__: com_davidmaletz_mining_npc_event_OnItemEvent
    });
    var com_davidmaletz_mining_npc_event_OverweightEvent = function(xml, player, vars) {
        com_davidmaletz_mining_npc_event_XmlEvent.call(this, xml, player, vars);
        player.inventory.addEventListener("item_added", $bind(this, this.item_added));
        this.item_added(null);
    };
    $hxClasses["com.davidmaletz.mining.npc.event.OverweightEvent"] = com_davidmaletz_mining_npc_event_OverweightEvent;
    com_davidmaletz_mining_npc_event_OverweightEvent.__name__ = ["com", "davidmaletz", "mining", "npc", "event", "OverweightEvent"];
    com_davidmaletz_mining_npc_event_OverweightEvent.__super__ = com_davidmaletz_mining_npc_event_XmlEvent;
    com_davidmaletz_mining_npc_event_OverweightEvent.prototype = $extend(com_davidmaletz_mining_npc_event_XmlEvent.prototype, {
        item_added: function(e) {
            if (this.player.inventory.weight > this.player.capacity.get()) this.execute();
        },
        kill: function() {
            this.player.inventory.removeEventListener("item_added", $bind(this, this.item_added));
            com_davidmaletz_mining_npc_event_XmlEvent.prototype.kill.call(this);
        },
        __class__: com_davidmaletz_mining_npc_event_OverweightEvent
    });
    var com_davidmaletz_tiles_render_ChunkRenderer = function(map, cx, cy, l, neighbors) {
        this.dirty = false;
        com_davidmaletz_faengfl_TileLayer.call(this);
        this.map = map;
        this.chunk = map.floor.getChunk(cx, cy);
        this.layer = l;
        this.getNeighbors = neighbors;
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.tiles.render.ChunkRenderer"] = com_davidmaletz_tiles_render_ChunkRenderer;
    com_davidmaletz_tiles_render_ChunkRenderer.__name__ = ["com", "davidmaletz", "tiles", "render", "ChunkRenderer"];
    com_davidmaletz_tiles_render_ChunkRenderer.__super__ = com_davidmaletz_faengfl_TileLayer;
    com_davidmaletz_tiles_render_ChunkRenderer.prototype = $extend(com_davidmaletz_faengfl_TileLayer.prototype, {
        init: function(e) {
            this.destroy(null);
            this.map.addEventListener("chunk_update", $bind(this, this.chunk_update));
            this.addEventListener("enterFrame", $bind(this, this.checkDirty));
            this.update();
        },
        destroy: function(e) {
            this.map.removeEventListener("chunk_update", $bind(this, this.chunk_update));
            this.removeEventListener("enterFrame", $bind(this, this.checkDirty));
        },
        chunk_update: function(e) {
            if (!this.dirty && (e.chunk == null || e.chunk == this.chunk) && (this.layer == e.layer || this.layer == -1 || e.layer == -1)) this.dirty = true;
        },
        getWidth: function() {
            return 16 * com_davidmaletz_tiles_Tile.SIZE;
        },
        getHeight: function() {
            return 16 * com_davidmaletz_tiles_Tile.SIZE;
        },
        checkDirty: function(e) {
            if (this.dirty) this.update();
        },
        drawLayers: function(offsetX, offsetY) {
            if (offsetY == null) offsetY = 0;
            if (offsetX == null) offsetX = 0;
            var sx = this.chunk.x * 16;
            var sy = this.chunk.y * 16;
            if (this.layer < 0) {
                var _g = 0;
                while (_g < 16) {
                    var ty = _g++;
                    var _g1 = 0;
                    while (_g1 < 16) {
                        var tx = _g1++;
                        var _g2 = 0;
                        while (_g2 < 4) {
                            var l = _g2++;
                            var x = sx + tx;
                            var y = sy + ty;
                            var t = this.map.getTile(x, y, l);
                            if (t != null) t.render(this.getNeighbors == null ? 0 : this.getNeighbors(t, x, y, l, this.map), this, tx, ty, offsetX, offsetY);
                        }
                    }
                }
            } else {
                var _g3 = 0;
                while (_g3 < 16) {
                    var ty1 = _g3++;
                    var _g11 = 0;
                    while (_g11 < 16) {
                        var tx1 = _g11++;
                        var x1 = sx + tx1;
                        var y1 = sy + ty1;
                        var t1 = this.map.getTile(x1, y1, this.layer);
                        if (t1 != null) t1.render(this.getNeighbors == null ? 0 : this.getNeighbors(t1, x1, y1, this.layer, this.map), this, tx1, ty1, offsetX, offsetY);
                    }
                }
            }
        },
        update: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.get_graphics().clear();
            this.handler.start(this.get_graphics(), 0);
            this.drawLayers();
            this.handler.finish();
            this.dirty = false;
        },
        __class__: com_davidmaletz_tiles_render_ChunkRenderer
    });
    var com_davidmaletz_mining_renderer_AnimatedChunk = function(map, cx, cy, l, neighbors, anim) {
        com_davidmaletz_tiles_render_ChunkRenderer.call(this, map, cx, cy, l, neighbors);
        this.animation = anim;
        var frames = this.animation.frames.length;
        this.current = 0;
        this.frame = 0;
        var _g = 0;
        while (_g < frames) {
            var f = _g++;
            var s = new openfl_display_Sprite();
            s.set_visible(f == this.current);
            this.addChild(s);
        }
    };
    $hxClasses["com.davidmaletz.mining.renderer.AnimatedChunk"] = com_davidmaletz_mining_renderer_AnimatedChunk;
    com_davidmaletz_mining_renderer_AnimatedChunk.__name__ = ["com", "davidmaletz", "mining", "renderer", "AnimatedChunk"];
    com_davidmaletz_mining_renderer_AnimatedChunk.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_renderer_AnimatedChunk.__super__ = com_davidmaletz_tiles_render_ChunkRenderer;
    com_davidmaletz_mining_renderer_AnimatedChunk.prototype = $extend(com_davidmaletz_tiles_render_ChunkRenderer.prototype, {
        update: function() {
            var frames = this.animation.frames.length;
            var _g = 0;
            while (_g < frames) {
                var f = _g++;
                var s;
                s = js_Boot.__cast(this.getChildAt(f), openfl_display_Sprite);
                var frame = this.animation.frames[f];
                s.get_graphics().clear();
                if (frame.visible) {
                    this.handler.start(s.get_graphics(), null);
                    this.drawLayers(frame.x, frame.y);
                    this.handler.finish();
                }
            }
            this.dirty = false;
        },
        init: function(e) {
            com_davidmaletz_tiles_render_ChunkRenderer.prototype.init.call(this, e);
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_ChunkRenderer.prototype.destroy.call(this, e);
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
        },
        enter_frame: function(frames) {
            this.setFrame(this.frame + frames);
        },
        getMaxFrame: function() {
            return this.animation.getMaxTime() / 0.16666666666666666;
        },
        getFrame: function() {
            return this.frame;
        },
        setFrame: function(f) {
            f = com_fancyfish_faeng_common_Utils.mod(f, this.animation.getMaxTime() / 0.16666666666666666);
            if (f != this.frame) {
                this.frame = f;
                var c = com_fancyfish_faeng_common_Utils.drawCDF(this.animation.cdf, this.frame * 0.16666666666666666, false);
                if (c != this.current) {
                    this.getChildAt(this.current).set_visible(false);
                    this.current = c;
                    this.getChildAt(this.current).set_visible(true);
                }
            }
        },
        __class__: com_davidmaletz_mining_renderer_AnimatedChunk
    });
    var com_davidmaletz_tiles_render_FloorRenderer = function(m, l, neighbors) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.map = m;
        this.layer = l;
        this.chunks = new haxe_ds_IntMap();
        this.getNeighbors = null;
    };
    $hxClasses["com.davidmaletz.tiles.render.FloorRenderer"] = com_davidmaletz_tiles_render_FloorRenderer;
    com_davidmaletz_tiles_render_FloorRenderer.__name__ = ["com", "davidmaletz", "tiles", "render", "FloorRenderer"];
    com_davidmaletz_tiles_render_FloorRenderer.point = null;
    com_davidmaletz_tiles_render_FloorRenderer.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_tiles_render_FloorRenderer.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.map.addEventListener("chunk_update", $bind(this, this.chunk_update));
            this.addEventListener("enterFrame", $bind(this, this.enter_frame));
            this.enter_frame(null);
        },
        destroy: function(e) {
            this.map.removeEventListener("chunk_update", $bind(this, this.chunk_update));
            this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        chunk_update: function(e) {
            if (e.chunk == null) return;
            var cx = e.chunk.x;
            var cy = e.chunk.y;
            var s = 16 * com_davidmaletz_tiles_Tile.SIZE;
            var stX = Math.floor(this.bounds.x / s);
            var endX = Math.floor((this.bounds.x + this.bounds.width) / s) + 1;
            var stY = Math.floor(this.bounds.y / s);
            var endY = Math.floor((this.bounds.y + this.bounds.height) / s) + 1;
            if (cx >= stX && cy >= stY && cx < endX && cy < endY) this.showChunk(cx, cy);
        },
        createChunk: function(cx, cy) {
            return new com_davidmaletz_tiles_render_ChunkRenderer(this.map, cx, cy, this.layer, this.getNeighbors);
        },
        showChunk: function(cx, cy) {
            var i = (cy + 16384) * 32768 + (cx + 16384);
            if (!this.chunks.h.hasOwnProperty(i) && this.map.floor.chunks.h.hasOwnProperty((cy + 16384) * 32768 + (cx + 16384))) {
                var c = this.createChunk(cx, cy);
                var s = 16 * com_davidmaletz_tiles_Tile.SIZE;
                c.set_x(cx * s);
                c.set_y(cy * s);
                this.chunks.h[i] = c;
                this.addChild(c);
            }
        },
        setView: function(x, y, w, h) {
            if (this.bounds == null) this.bounds = new openfl_geom_Rectangle(x, y, w, h);
            else {
                if (this.bounds.x == x && this.bounds.y == y && this.bounds.width == w && this.bounds.height == h) return;
                this.bounds.setTo(x, y, w, h);
            }
            var s = 16 * com_davidmaletz_tiles_Tile.SIZE;
            var stX = Math.floor(x / s);
            var endX = Math.floor((x + w) / s) + 1;
            var stY = Math.floor(y / s);
            var endY = Math.floor((y + h) / s) + 1;
            var $it0 = this.chunks.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                var c = this.chunks.h[k];
                var chunk = Reflect.field(c, "chunk");
                var x1 = chunk.x;
                var y1 = chunk.y;
                if (x1 < stX || y1 < stY || x1 >= endX || y1 >= endY) {
                    this.chunks.remove(k);
                    this.removeChild(c);
                }
            }
            var _g = stY;
            while (_g < endY) {
                var ty = _g++;
                var _g1 = stX;
                while (_g1 < endX) {
                    var tx = _g1++;
                    this.showChunk(tx, ty);
                }
            }
        },
        enter_frame: function(e) {
            if (this.parent == null) return;
            if (com_davidmaletz_tiles_render_FloorRenderer.point == null) com_davidmaletz_tiles_render_FloorRenderer.point = new openfl_geom_Point();
            var w = openfl_Lib.current.stage.stageWidth;
            var h = openfl_Lib.current.stage.stageHeight;
            com_davidmaletz_tiles_render_FloorRenderer.point.setTo(0, 0);
            var p = this.globalToLocal(com_davidmaletz_tiles_render_FloorRenderer.point);
            var x = p.x;
            var y = p.y;
            com_davidmaletz_tiles_render_FloorRenderer.point.setTo(w, h);
            var p1 = this.globalToLocal(com_davidmaletz_tiles_render_FloorRenderer.point);
            this.setView(x, y, p1.x - x, p1.y - y);
        },
        __class__: com_davidmaletz_tiles_render_FloorRenderer
    });
    var com_davidmaletz_mining_renderer_AnimatedFloorRenderer = function(m, l, anim, neighbors) {
        com_davidmaletz_tiles_render_FloorRenderer.call(this, m, l, neighbors);
        this.animation = anim;
    };
    $hxClasses["com.davidmaletz.mining.renderer.AnimatedFloorRenderer"] = com_davidmaletz_mining_renderer_AnimatedFloorRenderer;
    com_davidmaletz_mining_renderer_AnimatedFloorRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "AnimatedFloorRenderer"];
    com_davidmaletz_mining_renderer_AnimatedFloorRenderer.__super__ = com_davidmaletz_tiles_render_FloorRenderer;
    com_davidmaletz_mining_renderer_AnimatedFloorRenderer.prototype = $extend(com_davidmaletz_tiles_render_FloorRenderer.prototype, {
        createChunk: function(cx, cy) {
            return new com_davidmaletz_mining_renderer_AnimatedChunk(this.map, cx, cy, this.layer, this.getNeighbors, this.animation);
        },
        __class__: com_davidmaletz_mining_renderer_AnimatedFloorRenderer
    });
    var com_davidmaletz_mining_renderer_AreaRenderer = function(area) {
        this.break_map = new haxe_ds_IntMap();
        com_davidmaletz_lerp_LerpSpriteFL.call(this);
        this.area = area;
        this.back = new openfl_display_Sprite();
        var f = new com_davidmaletz_tiles_render_FloorRenderer(area, 3);
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(f, 0.5);
        this.addChild(f);
        this.addChild(new com_davidmaletz_tiles_render_FloorRenderer(area, 0));
        this.addChild(new com_davidmaletz_mining_renderer_AnimatedFloorRenderer(area, 1, (function($this) {
            var $r;
            if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
            $r = com_davidmaletz_tiles_TileAnimation.anims.get("ore");
            return $r;
        } (this))));
        this.structures = new openfl_display_Sprite();
        this.addChild(this.structures);
        var i = 0;
        var $it0 = HxOverrides.iter(area.objects);
        while ($it0.hasNext()) {
            var l = $it0.next();
            this.addChild(new com_davidmaletz_mining_renderer_ObjectLayerRenderer(this, l, -1));
            if (this.tiles == null) {
                this.tiles = new openfl_display_Sprite();
                this.addChild(this.tiles);
            }
        }
        this.addChild(new com_davidmaletz_mining_renderer_ProjectilesRenderer(this));
        this.over_objects = new openfl_display_Sprite();
        this.addChild(this.over_objects);
        this.addChild(new com_davidmaletz_mining_renderer_LightFloorRenderer(area, 2));
    };
    $hxClasses["com.davidmaletz.mining.renderer.AreaRenderer"] = com_davidmaletz_mining_renderer_AreaRenderer;
    com_davidmaletz_mining_renderer_AreaRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "AreaRenderer"];
    com_davidmaletz_mining_renderer_AreaRenderer.__super__ = com_davidmaletz_lerp_LerpSpriteFL;
    com_davidmaletz_mining_renderer_AreaRenderer.prototype = $extend(com_davidmaletz_lerp_LerpSpriteFL.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSpriteFL.prototype.init.call(this, e);
            this.area.addEventListener("add_structure", $bind(this, this.add_structure));
            this.area.addEventListener("rem_structure", $bind(this, this.rem_structure));
            this.updateStructures();
            this.area.init(this);
            this.addEventListener("enterFrame", $bind(this, this.enterFrame));
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSpriteFL.prototype.destroy.call(this, e);
            this.area.removeEventListener("add_structure", $bind(this, this.add_structure));
            this.area.removeEventListener("rem_structure", $bind(this, this.rem_structure));
            this.area.destroy();
            this.removeEventListener("enterFrame", $bind(this, this.enterFrame));
        },
        enterFrame: function(e) {
            this.back.set_x(this.get_x());
            this.back.set_y(this.get_y());
        },
        updateStructures: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this.structures);
            var $it0 = new com_fancyfish_faeng_common_CompoundIterator2(this.area.structures.iterator());
            while ($it0.hasNext()) {
                var s = $it0.next(); (s.isBack() ? this.back: this.structures).addChild(s.getRenderer());
            }
        },
        add_structure: function(e) {
            this.addStructure(e.value);
        },
        rem_structure: function(e) {
            var r = (js_Boot.__cast(e.value, com_davidmaletz_mining_structure_Structure)).getRenderer();
            if (r != null && r.parent == this.structures) this.structures.removeChild(r);
        },
        addStructure: function(structure) { (structure.isBack() ? this.back: this.structures).addChild(structure.getRenderer());
        },
        getIdx: function(x, y) {
            return (y + 16384) * 32768 + (x + 16384);
        },
        incBrickBreak: function(x, y, frames) {
            var idx = (y + 16384) * 32768 + (x + 16384);
            var b = this.break_map.h[idx];
            if (b == null) {
                b = new com_davidmaletz_mining_renderer_BreakBrick(x, y);
                this.addChild(b);
                this.break_map.h[idx] = b;
            }
            if (!b.setFrame(b.frame + frames, false)) {
                this.break_map.remove(idx);
                if (b.parent == this) this.removeChild(b);
                var p = new com_davidmaletz_tiles_render_PlayAnimation((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("smoke");
                    return $r;
                } (this)), "smoke", 10, false, com_davidmaletz_tiles_render_PlayAnimation.removeOnComplete);
                p.set_x(x * com_davidmaletz_tiles_Tile.SIZE);
                p.set_y(y * com_davidmaletz_tiles_Tile.SIZE);
                p.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 90);
                p.lerp(new com_davidmaletz_lerp_PositionKeyframe(p.get_x(), p.get_y() - 10), 90);
                this.addChild(p);
                return false;
            } else return true;
        },
        removeBreak: function(b) {
            this.break_map.remove((b.tile_y + 16384) * 32768 + (b.tile_x + 16384));
            if (b.parent == this) this.removeChild(b);
        },
        getTile: function(x, y, layer) {
            return this.area.getTile(x, y, layer);
        },
        getTileId: function(x, y, layer) {
            return this.area.getTileId(x, y, layer);
        },
        __class__: com_davidmaletz_mining_renderer_AreaRenderer
    });
    var com_davidmaletz_mining_renderer_BreakBrick = function(x, y) {
        com_davidmaletz_tiles_render_TileAnimationRenderer.call(this, (function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("crack");
            return $r;
        } (this)), 20);
        this.setAnimation("crack");
        this.tile_x = x;
        this.tile_y = y;
        this.set_x(x * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y(y * com_davidmaletz_tiles_Tile.SIZE);
    };
    $hxClasses["com.davidmaletz.mining.renderer.BreakBrick"] = com_davidmaletz_mining_renderer_BreakBrick;
    com_davidmaletz_mining_renderer_BreakBrick.__name__ = ["com", "davidmaletz", "mining", "renderer", "BreakBrick"];
    com_davidmaletz_mining_renderer_BreakBrick.__super__ = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_mining_renderer_BreakBrick.prototype = $extend(com_davidmaletz_tiles_render_TileAnimationRenderer.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.init.call(this, e);
            this.previous = this.frame;
        },
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, frames);
            if (this.frame == this.previous && !this.setFrame(this.frame + -frames, false) && this.frame <= 0)(js_Boot.__cast(this.parent, com_davidmaletz_mining_renderer_AreaRenderer)).removeBreak(this);
            this.previous = this.frame;
        },
        __class__: com_davidmaletz_mining_renderer_BreakBrick
    });
    var com_davidmaletz_mining_renderer_CollectLoot = function(p, loot, c, onComplete) {
        this.player = p;
        this.container = c;
        this.loot = loot;
        this.onComplete = onComplete;
    };
    $hxClasses["com.davidmaletz.mining.renderer.CollectLoot"] = com_davidmaletz_mining_renderer_CollectLoot;
    com_davidmaletz_mining_renderer_CollectLoot.__name__ = ["com", "davidmaletz", "mining", "renderer", "CollectLoot"];
    com_davidmaletz_mining_renderer_CollectLoot.kill = function(p, o, r, blood, onComplete) {
        if (blood == null) blood = true;
        var loot = null;
        if (js_Boot.__instanceof(p, com_davidmaletz_mining_Player)) {
            loot = o.getLoot(); (js_Boot.__cast(p, com_davidmaletz_mining_Player)).overlapChanged();
        }
        var container = r.parent;
        var l = new com_davidmaletz_mining_renderer_CollectLoot(p, loot, container, onComplete);
        r.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, (function(f, d) {
            return function() {
                f(d);
            };
        })(com_davidmaletz_faengfl_FaengFL.remove, r));
        var sound = com_davidmaletz_mining_Sounds.getDeath(o);
        if (sound != null) {
            var sfx = new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, container, sound, new openfl_geom_Point(r.get_x(), r.get_y()));
        }
        if (blood) {
            var p1 = new com_davidmaletz_tiles_render_PlayAnimation((function($this) {
                var $r;
                if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                $r = com_davidmaletz_tiles_Tile.tiles.get("blood");
                return $r;
            } (this)), "blood", 10, false, $bind(l, l.collectItem));
            p1.set_x(r.get_x() - com_davidmaletz_tiles_Tile.SIZE * 0.5);
            p1.set_y(r.get_y());
            container.addChild(p1);
        } else if (loot != null && js_Boot.__instanceof(p, com_davidmaletz_mining_Player)) l.collectLoot(r.get_x() - com_davidmaletz_tiles_Tile.SIZE * 0.5, r.get_y());
    };
    com_davidmaletz_mining_renderer_CollectLoot.collect = function(p, loot, c, x, y, height) {
        if (height == null) height = 0;
        new com_davidmaletz_mining_renderer_CollectLoot(p, loot, c).collectLoot(x, y, height);
    };
    com_davidmaletz_mining_renderer_CollectLoot.prototype = {
        collectItem: function(p) {
            com_davidmaletz_faengfl_FaengFL.remove(p);
            if (this.loot != null) this.collectLoot(p.get_x(), p.get_y());
        },
        collectLoot: function(x, y, height) {
            if (height == null) height = 0;
            var len = this.loot.count;
            var _g = 0;
            while (_g < len) {
                var ct = _g++;
                var i;
                var anim = com_davidmaletz_tiles_TileAnimation.get(this.loot.item.id);
                if (anim == null) {
                    i = new com_davidmaletz_lerp_LerpSpriteFL();
                    i.addChild(this.loot.item.createIcon());
                } else i = new com_davidmaletz_tiles_render_PlayAnimation(this.loot.item.tile, this.loot.item.id, 10, false);
                i.set_alpha(0);
                i.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 5);
                i.set_x(x);
                i.set_y(y);
                var v = Math.sqrt(ct + 1);
                i.lerp(new com_davidmaletz_lerp_BounceKeyframe(i.get_y(), -com_davidmaletz_tiles_Tile.SIZE * 0.25 - (ct + height) * com_davidmaletz_tiles_Tile.SIZE, Math.PI * 1.5), Math.round(30 * v), ct == len - 1 ? (function(f, p) {
                    return function() {
                        f(p);
                    };
                })($bind(this, this.hideAndCollect), i) : (function(f1, p1) {
                    return function() {
                        f1(p1);
                    };
                })($bind(this, this.hide), i));
                this.container.addChild(i);
            }
        },
        hideAndCollect: function(p) {
            this.hide(p, false); (js_Boot.__cast(this.player, com_davidmaletz_mining_Player)).addItem(this.loot.item, this.loot.count).onComplete = this.onComplete;
        },
        hide: function(p, runComplete) {
            if (runComplete == null) runComplete = true;
            var _g = this;
            p.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 5,
            function() {
                if (runComplete && _g.onComplete != null) _g.onComplete();
                com_davidmaletz_faengfl_FaengFL.remove(p);
            });
        },
        __class__: com_davidmaletz_mining_renderer_CollectLoot
    };
    var com_davidmaletz_mining_renderer_LightChunk = function(map, cx, cy, l) {
        com_davidmaletz_tiles_render_ChunkRenderer.call(this, map, cx, cy, l, null);
        this.cur = null;
    };
    $hxClasses["com.davidmaletz.mining.renderer.LightChunk"] = com_davidmaletz_mining_renderer_LightChunk;
    com_davidmaletz_mining_renderer_LightChunk.__name__ = ["com", "davidmaletz", "mining", "renderer", "LightChunk"];
    com_davidmaletz_mining_renderer_LightChunk.bitmap = null;
    com_davidmaletz_mining_renderer_LightChunk.__super__ = com_davidmaletz_tiles_render_ChunkRenderer;
    com_davidmaletz_mining_renderer_LightChunk.prototype = $extend(com_davidmaletz_tiles_render_ChunkRenderer.prototype, {
        draw: function(black, c) {
            c.get_graphics().clear();
            this.handler.start(c.get_graphics(), black ? 0 : 8);
            var sx = this.chunk.x * 16;
            var sy = this.chunk.y * 16;
            var _g = 0;
            while (_g < 16) {
                var ty = _g++;
                var _g1 = 0;
                while (_g1 < 16) {
                    var tx = _g1++;
                    var x = sx + tx;
                    var y = sy + ty;
                    var t = this.map.getTileId(x, y, this.layer) + 1;
                    if (black && t != 255) t = 0;
                    if (t != 0) this.handler.addTile(com_davidmaletz_mining_renderer_LightChunk.bitmap, tx * com_davidmaletz_tiles_Tile.SIZE, ty * com_davidmaletz_tiles_Tile.SIZE, com_davidmaletz_mining_renderer_LightChunk.bitmap.getIdx(0, 0), t / 255, null, null, null, null);
                }
            }
            this.handler.finish();
        },
        update: function() {
            if (com_davidmaletz_mining_renderer_LightChunk.bitmap == null) com_davidmaletz_mining_renderer_LightChunk.bitmap = com_davidmaletz_faengfl_AutoTileBitmap.get("data/tile/tiles.png", com_davidmaletz_tiles_Tile.SIZE);
            this.draw(false, this);
            if (this.cur != null) {
                var old = this.cur;
                old.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 15, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, old));
                this.addChild(old);
            }
            this.cur = new com_davidmaletz_lerp_LerpSpriteFL();
            this.draw(true, this.cur);
            this.dirty = false;
        },
        __class__: com_davidmaletz_mining_renderer_LightChunk
    });
    var com_davidmaletz_mining_renderer_LightFloorRenderer = function(m, l) {
        com_davidmaletz_tiles_render_FloorRenderer.call(this, m, l);
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this, 0);
    };
    $hxClasses["com.davidmaletz.mining.renderer.LightFloorRenderer"] = com_davidmaletz_mining_renderer_LightFloorRenderer;
    com_davidmaletz_mining_renderer_LightFloorRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "LightFloorRenderer"];
    com_davidmaletz_mining_renderer_LightFloorRenderer.__super__ = com_davidmaletz_tiles_render_FloorRenderer;
    com_davidmaletz_mining_renderer_LightFloorRenderer.prototype = $extend(com_davidmaletz_tiles_render_FloorRenderer.prototype, {
        createChunk: function(cx, cy) {
            return new com_davidmaletz_mining_renderer_LightChunk(this.map, cx, cy, this.layer);
        },
        __class__: com_davidmaletz_mining_renderer_LightFloorRenderer
    });
    var com_davidmaletz_mining_renderer_ObjectLayerRenderer = function(area, layer, front) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.area = area;
        this.layer = layer;
        this.front = front;
    };
    $hxClasses["com.davidmaletz.mining.renderer.ObjectLayerRenderer"] = com_davidmaletz_mining_renderer_ObjectLayerRenderer;
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "ObjectLayerRenderer"];
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.layer.addEventListener("add_object", $bind(this, this.add_object));
            this.layer.addEventListener("rem_object", $bind(this, this.rem_object));
            this.updateObjects();
        },
        destroy: function(e) {
            this.layer.removeEventListener("add_object", $bind(this, this.add_object));
            this.layer.removeEventListener("rem_object", $bind(this, this.rem_object));
        },
        updateObjects: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            var $it0 = this.layer.getObjects();
            while ($it0.hasNext()) {
                var o = $it0.next();
                this.addObject(o);
            }
        },
        add_object: function(e) {
            this.addObject(e.value);
        },
        kill: function(p, o, r, onComplete) {
            com_davidmaletz_mining_renderer_CollectLoot.kill(p, o, r, o.health <= 0, onComplete);
        },
        rem_object: function(e) {
            var o;
            o = js_Boot.__cast(e.value, com_davidmaletz_mining_world_Object);
            var r;
            if (o.renderer == null) o.renderer = o.createRenderer(this.area);
            r = o.renderer;
            if (r.parent == this) {
                if (e.killer == null) this.removeChild(r);
                else {
                    r.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10, (function(f, p, o1, r1, a1) {
                        return function() {
                            f(p, o1, r1, a1);
                        };
                    })($bind(this, this.kill), e.killer, o, r, e.onComplete));
                    return;
                }
            }
            if (e.onComplete != null) e.onComplete();
        },
        addObject: function(object) {
            if (this.front == -1) {
                var r;
                if (object.renderer == null) object.renderer = object.createRenderer(this.area);
                r = object.renderer;
                if (object.isBack()) this.addChildAt(r, 0);
                else this.addChild(r);
            } else if (this.front == 0 == object.isBack()) this.addChild((function($this) {
                var $r;
                if (object.renderer == null) object.renderer = object.createRenderer($this.area);
                $r = object.renderer;
                return $r;
            } (this)));
        },
        __class__: com_davidmaletz_mining_renderer_ObjectLayerRenderer
    });
    var com_davidmaletz_mining_renderer_Parallax = function(area) {
        openfl_display_Sprite.call(this);
        com_davidmaletz_mining_renderer_Parallax.instance = this;
        var b = com_davidmaletz_faengfl_AutoTileBitmap.get("data/bg.png", 256, 80);
        var p = new com_davidmaletz_mining_renderer_ParallaxLayer(area, b, [1, 2], 0);
        var g = p.get_graphics();
        g.beginFill(4426398);
        g.drawRect(0, b.tileHeight, 256, 144 - b.tileHeight);
        g.endFill();
        this.addChild(p);
        var p1 = new com_davidmaletz_tiles_render_StaticPlayAnimation((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("sun");
            return $r;
        } (this)), "sun", 5, true);
        p1.set_x(200);
        p1.set_y(11);
        com_davidmaletz_mining_renderer_Parallax.sun = p1;
        this.addChild(p1);
        var c = new com_davidmaletz_mining_renderer__$Parallax_Clouds();
        c.set_x( - p1.get_x());
        c.set_y( - p1.get_y());
        p1.addChild(c);
        var p2 = new com_davidmaletz_mining_renderer_ParallaxLayer(area, b, [0, 4, 1, 4], 0.0625);
        p2.addTiles(b, [0, 5, 1, 5], -22);
        this.addChild(p2);
        var p3 = new com_davidmaletz_mining_renderer_ParallaxLayer(area, b, [0, 3, 1, 3], 0.125);
        this.addChild(p3);
        this.addChild(new com_davidmaletz_mining_renderer_ParallaxLayer(area, b, [1, 0, 0, 1, 1, 1, 0, 2], 0.25));
        this.addChild(new com_davidmaletz_mining_renderer_ParallaxLayer(area, b, [0, 0], 0.5));
        this.addChild(area.back);
        this.addChild(new com_davidmaletz_mining_renderer_WaterRenderer(area));
        this.addChild(new com_davidmaletz_mining_renderer_Waves(area));
    };
    $hxClasses["com.davidmaletz.mining.renderer.Parallax"] = com_davidmaletz_mining_renderer_Parallax;
    com_davidmaletz_mining_renderer_Parallax.__name__ = ["com", "davidmaletz", "mining", "renderer", "Parallax"];
    com_davidmaletz_mining_renderer_Parallax.sun = null;
    com_davidmaletz_mining_renderer_Parallax.instance = null;
    com_davidmaletz_mining_renderer_Parallax.setStorm = function(p) {
        com_davidmaletz_mining_renderer_Parallax.sun.set_alpha(p);
    };
    com_davidmaletz_mining_renderer_Parallax.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_renderer_Parallax.prototype = $extend(openfl_display_Sprite.prototype, {
        __class__: com_davidmaletz_mining_renderer_Parallax
    });
    var com_davidmaletz_mining_renderer_ParallaxLayer = function(area, b, ar, p) {
        openfl_display_Sprite.call(this);
        this.area = area;
        this.percent = p;
        if (ar != null) {
            this._width = b.tileWidth * (ar.length >> 1);
            this._height = b.tileHeight;
            var l = new com_davidmaletz_faengfl_TileLayer();
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
            l.get_graphics().clear();
            l.handler.start(l.get_graphics(), 0);
            this.addChild(l);
            this.addTiles(b, ar);
            if (p == 0) l.handler.finish();
        }
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.renderer.ParallaxLayer"] = com_davidmaletz_mining_renderer_ParallaxLayer;
    com_davidmaletz_mining_renderer_ParallaxLayer.__name__ = ["com", "davidmaletz", "mining", "renderer", "ParallaxLayer"];
    com_davidmaletz_mining_renderer_ParallaxLayer.point = null;
    com_davidmaletz_mining_renderer_ParallaxLayer.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_renderer_ParallaxLayer.prototype = $extend(openfl_display_Sprite.prototype, {
        addTiles: function(b, ar, offY) {
            if (offY == null) offY = 0;
            if (this.percent != 0) offY += 6;
            var l;
            l = js_Boot.__cast(this.getChildAt(0), com_davidmaletz_faengfl_TileLayer);
            var len = ar.length >> 1;
            var idx = 0;
            var off = (1 - len) * b.tileWidth;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                idx = b.getIdx(ar[2 * i], ar[2 * i + 1]);
                l.handler.addTile(b, off + i * b.tileWidth, offY, idx, 1, 1, 0, 0, 1);
            }
            if (this.percent > 0) l.handler.addTile(b, off - b.tileWidth, offY, idx, 1, 1, 0, 0, 1);
        },
        init: function(e) {
            this.destroy(e);
            this.addEventListener("enterFrame", this.percent == 0 ? $bind(this, this.check_frame) : $bind(this, this.enter_frame), false, -1);
            if (this.percent > 0 && e != null)(js_Boot.__cast(this.getChildAt(0), com_davidmaletz_faengfl_TileLayer)).finish();
        },
        destroy: function(e) {
            this.removeEventListener("enterFrame", this.percent == 0 ? $bind(this, this.check_frame) : $bind(this, this.enter_frame));
        },
        check_frame: function(e) {
            this.set_visible(this.area.get_y() >= -com_davidmaletz_tiles_Tile.SIZE);
        },
        enter_frame: function(e) {
            if (this.percent == 1) this.set_visible(this.area.get_y() >= -com_davidmaletz_tiles_Tile.SIZE * 80);
            else this.set_visible(this.area.get_y() >= -com_davidmaletz_tiles_Tile.SIZE);
            if (!this.get_visible()) return;
            if (com_davidmaletz_mining_renderer_ParallaxLayer.point == null) com_davidmaletz_mining_renderer_ParallaxLayer.point = new openfl_geom_Point();
            this.set_x(Math.round(this.area.get_x() * this.percent));
            var p = this.percent;
            if (p != 1) {
                if (p != 0 && this.area.get_y() > this._height) p = 1;
                this.set_y(Math.round((this.area.get_y() - this._height) * p));
            }
            var w = openfl_Lib.current.stage.stageWidth;
            com_davidmaletz_mining_renderer_ParallaxLayer.point.setTo((js_Boot.__cast(com_davidmaletz_faengfl_Application.instance.container, openfl_display_DisplayObject)).get_x(), 0);
            var p1 = this.globalToLocal(com_davidmaletz_mining_renderer_ParallaxLayer.point);
            this.getChildAt(0).set_x(Math.ceil(p1.x / this._width) * this._width);
        },
        __class__: com_davidmaletz_mining_renderer_ParallaxLayer
    });
    var com_davidmaletz_mining_renderer__$Parallax_Clouds = function() {
        this.kind = 1;
        this.frames = 10;
        openfl_display_Sprite.call(this);
        this.set_alpha(0.95);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.renderer._Parallax.Clouds"] = com_davidmaletz_mining_renderer__$Parallax_Clouds;
    com_davidmaletz_mining_renderer__$Parallax_Clouds.__name__ = ["com", "davidmaletz", "mining", "renderer", "_Parallax", "Clouds"];
    com_davidmaletz_mining_renderer__$Parallax_Clouds.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_renderer__$Parallax_Clouds.prototype = $extend(openfl_display_Sprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.addEventListener("enterFrame", $bind(this, this.enter_frame), false, -1);
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            var _g = 0;
            while (_g < 3) {
                var i = _g++;
                this.addCloud().set_x(Math.floor(i * 256 / 2.5));
            }
        },
        destroy: function(e) {
            this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        addCloud: function() {
            var cloud = com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("cloud" + this.kind));
            this.kind++;
            if (this.kind > 3) this.kind = 1;
            cloud.set_x(256);
            cloud.set_y(Math.round(Math.random() * 40));
            this.addChild(cloud);
            return cloud;
        },
        handleCloud: function(cloud) {
            var _g = cloud;
            var _g1 = _g.get_x();
            _g.set_x(_g1 - 1);
            _g1;
            return cloud.get_x() + 53 > 0;
        },
        enter_frame: function(e) {
            var st = this.get_numChildren();
            var _g = st;
            while (_g < 3) {
                var i = _g++;
                this.addCloud();
            }
            this.frames--;
            if (this.frames <= 0) {
                this.frames = 10;
                var _g1 = 0;
                while (_g1 < 3) {
                    var i1 = _g1++;
                    if (!this.handleCloud(this.getChildAt(2 - i1))) this.removeChildAt(2 - i1);
                }
            }
        },
        __class__: com_davidmaletz_mining_renderer__$Parallax_Clouds
    });
    var com_davidmaletz_mining_renderer_PlayerRenderer = function(p, area) {
        this.isMining = false;
        this.onComplete = null;
        this.z_attack = 0;
        this.resetCt = 0;
        this.attacking = false;
        this.hotkey = [];
        com_davidmaletz_tiles_render_TileAnimationRenderer.call(this, p.info.tile, 15);
        this.player = p;
        this.area = area;
        this.set_x((p.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((p.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE + this.player.offsetY);
        this.equipment = new com_davidmaletz_tiles_render_TileAnimationRenderer(null, 15);
        this.equipment.set_visible(false);
        this.attacking = false;
        this.addChild(this.equipment);
        this.setAnimation("player.idle");
    };
    $hxClasses["com.davidmaletz.mining.renderer.PlayerRenderer"] = com_davidmaletz_mining_renderer_PlayerRenderer;
    com_davidmaletz_mining_renderer_PlayerRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "PlayerRenderer"];
    com_davidmaletz_mining_renderer_PlayerRenderer.nothing = function() {};
    com_davidmaletz_mining_renderer_PlayerRenderer.dig_map = null;
    com_davidmaletz_mining_renderer_PlayerRenderer.ore_map = null;
    com_davidmaletz_mining_renderer_PlayerRenderer.loadDig = function() {
        com_davidmaletz_mining_renderer_PlayerRenderer.dig_map = new haxe_ds_StringMap();
        com_davidmaletz_mining_renderer_PlayerRenderer.ore_map = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.tile != null) action_map.setReserved("tile",
        function(e) {
            var key = e.get("id");
            var value = Std.parseInt(e.get("cost"));
            com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.set(key, value);
        });
        else action_map.h["tile"] = function(e) {
            var key = e.get("id");
            var value = Std.parseInt(e.get("cost"));
            com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.set(key, value);
        };
        if (__map_reserved.ore != null) action_map.setReserved("ore",
        function(e1) {
            var key1 = e1.get("id");
            var value1 = e1.get("achievement");
            com_davidmaletz_mining_renderer_PlayerRenderer.ore_map.set(key1, value1);
        });
        else action_map.h["ore"] = function(e1) {
            var key1 = e1.get("id");
            var value1 = e1.get("achievement");
            com_davidmaletz_mining_renderer_PlayerRenderer.ore_map.set(key1, value1);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/dig.xml", action_map);
    };
    com_davidmaletz_mining_renderer_PlayerRenderer.getMineCost = function(t) {
        if (com_davidmaletz_mining_renderer_PlayerRenderer.dig_map == null) com_davidmaletz_mining_renderer_PlayerRenderer.loadDig();
        if (com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.exists(t.id)) return com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.get(t.id);
        else return 100;
    };
    com_davidmaletz_mining_renderer_PlayerRenderer.__super__ = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_mining_renderer_PlayerRenderer.prototype = $extend(com_davidmaletz_tiles_render_TileAnimationRenderer.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.init.call(this, e);
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.onKey));
            var c = com_davidmaletz_faengfl_Application.instance.container;
            this.player.addEventListener("change_health", $bind(this, this.damage));
            if (this.health == null) this.health = new com_davidmaletz_mining_ui_HealthBar(this.player, c);
            c.addDisplay(this.health, 1);
            if (this.stamina == null) this.stamina = new com_davidmaletz_mining_ui_StaminaBar(this.player, c);
            c.addDisplay(this.stamina, 1);
            if (this.coins == null) this.coins = new com_davidmaletz_mining_ui_Coins(this.player, c);
            c.addDisplay(this.coins, 2);
            if (this.light == null) this.light = new com_davidmaletz_mining_ui_Mod(((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("torch");
                return $r;
            } (this))).createIcon(), this.player.lightMod, c, 0);
            c.addDisplay(this.light, 1);
            if (this.attack == null) this.attack = new com_davidmaletz_mining_ui_Mod(((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("iron_sword");
                return $r;
            } (this))).createIcon(), this.player.attackMod, c, 1);
            c.addDisplay(this.attack, 1);
            if (this.defense == null) this.defense = new com_davidmaletz_mining_ui_Mod(((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("iron_armor");
                return $r;
            } (this))).createIcon(), this.player.defenseMod, c, 2);
            c.addDisplay(this.defense, 1);
            if (this.projectiles == null) this.projectiles = new com_davidmaletz_mining_ui_Projectiles(this.player, c, 3);
            c.addDisplay(this.projectiles, 1);
            if (this.inventory == null) this.inventory = new com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton(this, "inventory.png", $bind(this, this.showInventory), "inventory", 1);
            if (this.questlog == null) this.questlog = new com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton(this.player, "questlog.png", $bind(this, this.showQuestlog), "quest", 0);
            c.addDisplay(this.inventory, 1);
            c.addDisplay(this.questlog, 1);
            var _g = 0;
            while (_g < 2) {
                var i = _g++;
                var h = this.hotkey[i];
                if (h == null) h = this.hotkey[i] = new com_davidmaletz_mining_renderer_Hotkey(this.player, i);
                c.addDisplay(h, 1);
            }
            this.updateScroll(true);
            this.player.equipment.addEventListener("updated", $bind(this, this.change_equipment));
            this.change_equipment(null);
        },
        kill: function() {
            com_davidmaletz_faengfl_SoundManager.playSFX("death");
            this.setAnimation("player.death");
            this.equipment.set_visible(false);
        },
        updateScroll: function(instant) {
            this.area.set_x(128. - this.get_x());
            var ty;
            if (this.player.mine.get() == null) ty = 144 - this.get_y() - com_davidmaletz_tiles_Tile.SIZE * 1.5;
            else ty = 72. - this.get_y();
            if (instant) this.area.set_y(ty);
            else {
                var track = this.area.hasTrack(com_davidmaletz_lerp_YKeyframe);
                if (!track && Math.abs(ty - this.area.get_y()) < com_davidmaletz_tiles_Tile.SIZE) this.area.set_y(ty);
                else if (track)(js_Boot.__cast(this.area.tracks.getTrack(com_davidmaletz_lerp_YKeyframe).getTo(), com_davidmaletz_lerp_YKeyframe)).setY(ty);
                else this.area.lerp(new com_davidmaletz_lerp_YKeyframe(ty), 40);
            }
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.destroy.call(this, e);
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.onKey));
            this.player.removeEventListener("change_health", $bind(this, this.damage));
            if (this.health != null && this.health.parent != null) this.health.parent.removeChild(this.health);
            if (this.stamina != null && this.stamina.parent != null) this.stamina.parent.removeChild(this.stamina);
            if (this.coins != null && this.coins.parent != null) this.coins.parent.removeChild(this.coins);
            if (this.light != null && this.light.parent != null) this.light.parent.removeChild(this.light);
            if (this.attack != null && this.attack.parent != null) this.attack.parent.removeChild(this.attack);
            if (this.defense != null && this.defense.parent != null) this.defense.parent.removeChild(this.defense);
            if (this.projectiles != null && this.projectiles.parent != null) this.projectiles.parent.removeChild(this.projectiles);
            if (this.inventory != null && this.inventory.parent != null) this.inventory.parent.removeChild(this.inventory);
            if (this.questlog != null && this.questlog.parent != null) this.questlog.parent.removeChild(this.questlog);
            var _g = 0;
            var _g1 = this.hotkey;
            while (_g < _g1.length) {
                var h = _g1[_g]; ++_g;
                if (h != null && h.parent != null) h.parent.removeChild(h);
            }
            this.player.equipment.removeEventListener("updated", $bind(this, this.change_equipment));
        },
        damage: function(e) {
            if (e.delta >= 0) return;
            if (e.attacker != null) {
                this.set_scaleX(e.attacker.tile_x > this.player.tile_x ? -1 : 1);
                this.setAnimation("player.hit");
                this.onComplete = $bind(this, this.playIdle);
            } else {
                com_davidmaletz_faengfl_TextSprite.setColor(this, 16737894, null);
                this.resetCt = 10;
            }
        },
        showInventory: function() {
            if (this.get_visible()) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_WeightInventoryWindow(this.player, c), 1);
            }
        },
        showQuestlog: function() {
            if (this.get_visible()) {
                if (this.questlog != null) this.questlog.setQuests(0);
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_QuestLog(this.player, c), 1);
            }
        },
        onKey: function(e) {
            var _g = e.key;
            switch (_g) {
            case "inventory":
                this.showInventory();
                if (this.get_visible()) com_davidmaletz_faengfl_SoundManager.playSFX("select");
                break;
            case "quest":
                this.showQuestlog();
                if (this.get_visible()) com_davidmaletz_faengfl_SoundManager.playSFX("select");
                break;
            case "select":
                if (this.get_visible() && this.z_attack == 0) {
                    this.z_attack = 2;
                    if (this.player.equipment.get() == null) this.player.onSelect();
                    else this.tryAttack(null, null);
                }
                break;
            case "cancel":
                this.player.onCancel();
                com_davidmaletz_faengfl_SoundManager.playSFX("cancel");
                break;
            case "hotkey1":
                if (this.get_visible()) this.player.useHotkey(0);
                break;
            case "hotkey2":
                if (this.get_visible()) this.player.useHotkey(1);
                break;
            }
        },
        canEnter: function(x, y) {
            y++;
            return this.area.area.getTile(x, y, 0) != null || this.area.area.getTile(x, y, 3) != null;
        },
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            if (this.animation == anim_id) return;
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.setAnimation.call(this, anim_id, -0.5, -0.5);
            if (this.isMining) this.isMining = false;
            else {
                this.attacking = false;
                if (this.player.equipment.get() == null) this.equipment.set_visible(false);
                else this.updateEquipment();
            }
        },
        mine: function(tool) {
            var hide = false;
            if (!StringTools.startsWith(this.animation, "player.mine")) {
                var v = Math.floor((1 - this.player.getStaminaPercent()) * 3);
                if (v > 2) v = 2;
                this.setAnimation("player.mine" + (v > 0 ? Std.string(v + 1) : ""));
                hide = true;
            }
            this.attacking = true;
            this.equipment.tile = com_davidmaletz_tiles_Tile.get(tool.id);
            this.equipment.setAnimation("equipment." + tool.id, -0.5, -0.5);
            this.equipment.setFrame(this.frame);
            if (this.player.equipment.get() == null) {
                if (hide) this.equipment.hideCurrent();
                this.equipment.set_visible(true);
            }
        },
        change_equipment: function(e) {
            this.updateEquipment();
            var eq = this.player.equipment.get();
            if (this.tooltip != null) {
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, this.tooltip));
                this.tooltip = null;
            }
            if (eq != null) {
                var v = com_fancyfish_faeng_common_Lang.getText("common", eq.xml.exists("range") ? "ranged_equip": "melee_equip");
                var m = new haxe_ds_StringMap();
                var value = com_fancyfish_faeng_common_Lang.getText("item.names", eq.id);
                if (__map_reserved["{item}"] != null) m.setReserved("{item}", value);
                else m.h["{item}"] = value;
                var t = new com_fancyfish_faeng_common_mutable_MutableTemplate(v, m);
                this.tooltip = new com_davidmaletz_mining_ui_KeyTooltip("select", 128., 16, t);
                this.tooltip.set_alpha(0);
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(), 10);
            }
        },
        updateEquipment: function() {
            var eq = this.player.equipment.get();
            if (eq == null) {
                this.equipment.set_visible(this.attacking);
                return;
            }
            if (this.eqwalk == null) this.eqwalk = new com_davidmaletz_tiles_render_FrameRenderer(null, null);
            var t = com_davidmaletz_tiles_Tile.get(eq.id);
            this.equipment.set_visible(true);
            if (this.eqwalk.tile != t) {
                this.eqwalk.tile = t;
                var anim = com_davidmaletz_tiles_TileAnimation.get("equipment." + eq.id);
                this.eqwalk.frame = anim.frames[anim.frames.length - 1];
                this.equipment.clear("equipment.walk");
            }
            this.equipment.tile = this.eqwalk;
            this.equipment.setAnimation("equipment.walk", -0.5, -0.5);
        },
        doAttack: function(weap, o) {
            var r;
            if (o.renderer == null) o.renderer = o.createRenderer(this.area);
            r = o.renderer;
            var crit = o.canFlip() && r.get_scaleX() == this.get_scaleX();
            if (crit) r.set_scaleX( - this.get_scaleX());
            if (this.player.attackObject(weap, o, crit)) {
                this.mine(weap);
                this.onComplete = com_davidmaletz_mining_renderer_PlayerRenderer.nothing;
            }
        },
        playIdle: function() {
            this.setAnimation("player.idle");
        },
        move: function(dx, dy, frames, flags, weap) {
            if (flags == null) flags = 0;
            if (this.onComplete != null) return;
            var tx = this.player.tile_x + dx;
            var ty = this.player.tile_y + dy;
            if (!this.canEnter(tx, ty)) {
                this.setAnimation("player.idle");
                return;
            }
            if (dx < 0) this.set_scaleX(1);
            else if (dx > 0) this.set_scaleX( - 1);
            var o = this.area.area.getObject(tx, ty, this.player, flags);
            var t = this.area.area.getTileId(tx, ty, 0);
            if (o == null && flags != 0) {
                o = this.area.area.getObject(this.player.tile_x, this.player.tile_y, this.player, flags);
                if (o != null) {
                    var _x = this.player.tile_x + com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
                    if (this.area.area.getTileId(_x, this.player.tile_y, 0) == -1) this.player.setTile(_x, this.player.tile_y);
                    else return;
                }
            }
            if (o != null) {
                if (weap == null || weap.xml.exists("range")) weap = this.player.getMeleeWeapon(o);
                if (weap == null || dy != 0) {
                    this.setAnimation("player.idle");
                    return;
                }
                var px = (this.player.tile_x + 0.5 - 0.25 * this.get_scaleX()) * com_davidmaletz_tiles_Tile.SIZE;
                var py = (this.player.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE + this.player.offsetY;
                if (px != this.get_x() || py != this.get_y()) {
                    if (this.player.health > 0) this.setAnimation("player.walk" + (this.player.inventory.weight > this.player.capacity.get() ? ".heavy": ""));
                    this.lerp(new com_davidmaletz_lerp_PositionKeyframe(px, py), this.player.getSpeed() >> 1, (function(f, dx1, dy1, a1, a2) {
                        return function() {
                            f(dx1, dy1, a1, a2);
                        };
                    })($bind(this, this.move), dx, dy, 0, flags));
                } else this.doAttack(weap, o);
                return;
            } else if (flags != 0) return;
            if (t >= 0) {
                var tool = this.player.mine.get();
                if (tool == null) {
                    this.setAnimation("player.idle");
                    return;
                }
                var tile = this.area.area.tile_index.tiles.h[t];
                if (tile != null && !StringTools.startsWith(this.animation, "player.mine")) com_davidmaletz_mining_Sounds.playSound(this.player, tool, tile);
                this.mine(tool);
                var mine_cost;
                if (com_davidmaletz_mining_renderer_PlayerRenderer.dig_map == null) com_davidmaletz_mining_renderer_PlayerRenderer.loadDig();
                if (com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.exists(tile.id)) mine_cost = com_davidmaletz_mining_renderer_PlayerRenderer.dig_map.get(tile.id);
                else mine_cost = 100;
                var mining_speed = tool.mine - mine_cost;
                if (mining_speed < 1 || this.area.incBrickBreak(tx, ty, frames * mining_speed)) return;
                this.isMining = true;
                var item = this.area.area.mine(tx, ty, t, this.player.getLightRange());
                if (item != null) {
                    if (com_davidmaletz_mining_renderer_PlayerRenderer.ore_map == null) com_davidmaletz_mining_renderer_PlayerRenderer.loadDig();
                    if (com_davidmaletz_mining_renderer_PlayerRenderer.ore_map.exists(item.item.id)) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(com_davidmaletz_mining_renderer_PlayerRenderer.ore_map.get(item.item.id));
                }
                this.player.mineTile(tool, tile, tx, ty, item, mine_cost);
                if (this.area.area.getObject(tx, ty, this.player, flags) != null) return;
            }
            this.player.setTile(tx, ty);
            if (t < 0 && ty >= 0) this.area.area.lightTiles(tx, ty, 3);
            if (this.player.health > 0) this.setAnimation("player.walk" + (this.player.inventory.weight > this.player.capacity.get() ? ".heavy": ""));
            this.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.player.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE, (this.player.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE + this.player.offsetY), this.player.getSpeed());
        },
        getActionObject: function() {
            var o = this.area.area.getObject(this.player.tile_x, this.player.tile_y, this.player, 1);
            var p = this.player.object;
            if (o != null && p != null && o.getLayer() < p.getLayer()) return null;
            else return o;
        },
        tryAttack: function($with, projectile) {
            if (!this.get_visible() || this.tracks != null || this.onComplete != null) return;
            this._attack($with, 0, projectile);
        },
        _attack: function(weap, frames, projectile) {
            if (weap == null) {
                var eq = this.player.equipment.get();
                if (eq != null) weap = eq;
            }
            var dx = -com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
            var o;
            var e;
            if (((o = this.area.area.getObject(this.player.tile_x + dx, this.player.tile_y, this.player, 1)) != null || (o = this.getActionObject()) != null) && (o.canFlip() || weap == null || !weap.xml.exists("range"))) {
                this.move(dx, 0, frames, 1, weap);
                this.z_attack = 1;
            } else if (weap == null) this.setAnimation("player.idle");
            else if (this.player.useEquipment(weap)) {
                this.mine(weap);
                this.onComplete = com_davidmaletz_mining_renderer_PlayerRenderer.nothing;
                if (projectile == null && weap.xml.exists("projectile")) projectile = com_davidmaletz_mining_item_Item.get(weap.xml.get("projectile"));
                if (weap.xml.exists("range") && projectile != null) {
                    var delay;
                    if (weap.xml.exists("delay")) delay = Math.round(Std.parseFloat(weap.xml.get("delay")) / this.deltaFrame);
                    else delay = 0;
                    this.area.area.addProjectile(new com_davidmaletz_mining_world_Projectile(projectile, Std.parseInt(weap.xml.get("range")), this.player.tile_x, this.player.tile_y, this.get_scaleX() > 0, delay));
                }
            }
        },
        enter_frame: function(frames) {
            if (!this.get_visible()) return;
            if (this.resetCt > 0) {
                this.resetCt -= frames;
                if (this.resetCt <= 0) com_davidmaletz_faengfl_TextSprite.setColor(this, 16777215, null);
            }
            var f = frames;
            if (this.tracks != null) {
                var rem = 0.0;
                var k = this.tracks.getTrack(com_davidmaletz_lerp_PositionKeyframe).getTo();
                if (k != null) rem = k.getFrame() - this.tracks.getTrack(com_davidmaletz_lerp_PositionKeyframe).getFrame();
                com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, Math.min(frames, rem));
                frames -= rem;
                if (this.tracks != null) frames = 0;
            }
            if (this.onComplete == null && frames > 0 && com_davidmaletz_faengfl_Window.window_ct == 0) {
                if (this.z_attack != 2 && com_davidmaletz_controls_Controller.instance.handler.isPressed(8)) this._attack(null, frames);
                else {
                    var o = this.area.area.getObject(this.player.tile_x - com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null), this.player.tile_y, this.player, 1);
                    if (o != null && o != this.player.object) this.player.overlapChanged();
                    this.z_attack = 0;
                    var left = com_davidmaletz_controls_Controller.instance.handler.isPressed(4);
                    var right = com_davidmaletz_controls_Controller.instance.handler.isPressed(6);
                    var up = com_davidmaletz_controls_Controller.instance.handler.isPressed(0);
                    var down = com_davidmaletz_controls_Controller.instance.handler.isPressed(2);
                    if ((left || right) && left != right) this.move(left ? -1 : 1, 0, frames);
                    else if ((up || down) && up != down) this.move(0, up ? -1 : 1, frames);
                    else this.setAnimation("player.idle");
                }
                com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, frames);
            }
            if (!this.setFrame(this.frame + f, this.onComplete == null)) {
                this.setFrame(0);
                var f1 = this.onComplete;
                this.onComplete = null;
                f1();
            }
            this.equipment.set_x(0);
            if (this.attacking) this.equipment.incFrame(f, null);
            else if (this.equipment.get_visible()) {
                if (this.animation == "player.walk.heavy") this.equipment.set_x( - 1);
                this.equipment.setFrame(StringTools.startsWith(this.animation, "player.walk") ? this.frame: 0);
            }
            this.updateScroll(false);
        },
        playWalk: function() {
            if (this.player.health > 0) this.setAnimation("player.walk" + (this.player.inventory.weight > this.player.capacity.get() ? ".heavy": ""));
        },
        updateWeight: function() {
            if (StringTools.startsWith(this.animation, "player.walk")) {
                var f = this.frame;
                if (this.player.health > 0) this.setAnimation("player.walk" + (this.player.inventory.weight > this.player.capacity.get() ? ".heavy": ""));
                this.setFrame(f);
            }
        },
        __class__: com_davidmaletz_mining_renderer_PlayerRenderer
    });
    var com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton = function(icon, onClick, key, yalign) {
        com_davidmaletz_faengfl_Button.call(this, null, onClick, icon == null ? null: new com_davidmaletz_faengfl_BitmapDrawable(openfl_Assets.getBitmapData("data/ui/" + icon)));
        var c = com_davidmaletz_faengfl_Application.instance.container;
        this.set_x(c.getWidth() - 32);
        this.set_y(Math.round((c.getHeight() - 32) * yalign));
        if (this.get_numChildren() > 0) {
            var s = this.getChildAt(0);
            s.set_x(15);
            s.set_y(yalign == 1 ? 15 : 1);
        }
        this._width = 32;
        this._height = 32;
        this.addChildAt(new com_davidmaletz_controls_KeyRenderer(key, 16, 16), 0);
        this.set_alpha(0.75);
    };
    $hxClasses["com.davidmaletz.mining.renderer._PlayerRenderer.PlayerButton"] = com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton;
    com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.__name__ = ["com", "davidmaletz", "mining", "renderer", "_PlayerRenderer", "PlayerButton"];
    com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.__super__ = com_davidmaletz_faengfl_Button;
    com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype = $extend(com_davidmaletz_faengfl_Button.prototype, {
        init: function(e) {
            com_davidmaletz_faengfl_Button.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.mouse_move), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            com_davidmaletz_faengfl_Button.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.mouse_move));
        },
        mouse_up: function(e) {
            if (e.id == this.touch) {
                this.set_alpha(0.75);
                com_davidmaletz_faengfl_Button.prototype.mouse_up.call(this, e);
            }
        },
        mouse_move: function(e) {
            if (this.inBounds(e)) this.set_alpha(1);
            else this.set_alpha(0.75);
        },
        __class__: com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton
    });
    var com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton = function(p, icon, onClick, key, yalign) {
        this.flashing = 0;
        com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.call(this, icon, onClick, key, yalign);
        this.player = p;
        this.progress = new com_davidmaletz_controls_ProgressBar(25, 2, 16776960, this.getPercent(), false);
        this.progress.set_x(30);
        this.progress.set_y(32);
        this.progress.set_rotation( - 90);
        this.addChild(this.progress);
        var _g = this.getChildAt(1);
        _g.set_x(_g.get_x() - 1);
    };
    $hxClasses["com.davidmaletz.mining.renderer._PlayerRenderer.InventoryButton"] = com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton;
    com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton.__name__ = ["com", "davidmaletz", "mining", "renderer", "_PlayerRenderer", "InventoryButton"];
    com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton.__super__ = com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton;
    com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton.prototype = $extend(com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype, {
        init: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.init.call(this, e);
            this.player.player.inventory.addEventListener("item_added", $bind(this, this.update_percent));
            this.player.player.capacity.addEventListener("updated", $bind(this, this.update_percent));
            this.update_percent(null);
        },
        destroy: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.destroy.call(this, e);
            this.player.player.inventory.removeEventListener("item_added", $bind(this, this.update_percent));
            this.player.player.capacity.removeEventListener("updated", $bind(this, this.update_percent));
        },
        getPercent: function() {
            var p = this.player.player.inventory.weight / this.player.player.capacity.get();
            if (p > 1) {
                p = 1;
                if (this.flashing == 0) {
                    this.flashing = 30;
                    this.player.updateWeight();
                }
            } else if (this.flashing != 0) {
                this.flashing = 0;
                this.player.updateWeight();
            }
            return p;
        },
        update_percent: function(e) {
            this.progress.setProgress(this.getPercent(), 5);
        },
        handle_frame: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.handle_frame.call(this, e);
            if (this.flashing > 0) {
                this.flashing--;
                if (this.flashing == 0) {
                    this.flashing = 30;
                    var c = this.progress.get_transform().get_colorTransform();
                    if (c.greenMultiplier == 1) c.greenMultiplier = 0.5;
                    else c.greenMultiplier = 1;
                    this.progress.get_transform().set_colorTransform(c);
                }
            } else {
                var c1 = this.progress.get_transform().get_colorTransform();
                c1.greenMultiplier = 1;
                this.progress.get_transform().set_colorTransform(c1);
            }
        },
        __class__: com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton
    });
    var com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton = function(p, icon, onClick, key, yalign) {
        com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.call(this, icon, onClick, key, yalign);
        this.player = p;
        this.unread_quests = 0;
        this.indicator = new com_davidmaletz_lerp_LerpSprite();
        var g = this.indicator.get_graphics();
        g.beginFill(7798784);
        g.drawRect(0, 0, 10, 10);
        g.endFill();
        this.mutable = new com_fancyfish_faeng_common_mutable_Mutable();
        this.mutable.set("");
        this.indicator.addChild(new com_davidmaletz_faengfl_TextSprite(this.mutable, new com_fancyfish_faeng_text_CharacterPlacer(10, 1), 16777215, 1));
        this.indicator.set_x(22);
        this.indicator.set_y(22);
        this.indicator.set_visible(false);
        this.indicator.set_alpha(0);
        this.addChild(this.indicator);
    };
    $hxClasses["com.davidmaletz.mining.renderer._PlayerRenderer.QuestButton"] = com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton;
    com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton.__name__ = ["com", "davidmaletz", "mining", "renderer", "_PlayerRenderer", "QuestButton"];
    com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton.__super__ = com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton;
    com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton.prototype = $extend(com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype, {
        init: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.init.call(this, e);
            this.player.addEventListener("add_quest", $bind(this, this.add_quest));
        },
        destroy: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.destroy.call(this, e);
            this.player.removeEventListener("add_quest", $bind(this, this.add_quest));
        },
        add_quest: function(e) {
            this.setQuests(this.unread_quests + 1);
        },
        setQuests: function(q) {
            if (this.unread_quests == q) return;
            this.unread_quests = q;
            if (this.indicator.get_visible()) this.indicator.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 20, $bind(this, this.update));
            else if (this.unread_quests > 0) {
                this.indicator.set_visible(true);
                this.indicator.set_alpha(0);
                this.update();
            }
        },
        update: function() {
            if (this.unread_quests > 0) {
                this.mutable.set(Std.string(this.unread_quests));
                this.indicator.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 20);
            } else this.indicator.set_visible(false);
        },
        __class__: com_davidmaletz_mining_renderer__$PlayerRenderer_QuestButton
    });
    var com_davidmaletz_mining_renderer_Hotkey = function(p, key, onClick, showCount) {
        if (showCount == null) showCount = true;
        if (onClick == null) onClick = (function(f, i) {
            return function() {
                f(i);
            };
        })($bind(p, p.useHotkey), key);
        com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.call(this, null, onClick, "hotkey" + (key + 1), 1);
        this.player = p;
        this.hotkey = key;
        this.set_x(136 + key * 44);
        this.icon = new openfl_display_Sprite();
        this.icon.set_x(16);
        this.icon.set_y(22);
        this.addChild(this.icon);
        if (showCount) {
            this.count = new com_fancyfish_faeng_common_mutable_Mutable();
            this.count.set("");
            var t = new com_davidmaletz_faengfl_TextSprite(this.count, new com_fancyfish_faeng_text_CharacterPlacer(0), 16777215, 1);
            t.set_x(34);
            t.set_y(22);
            this.addChild(t);
            var g = this.icon.get_graphics();
            g.beginFill(0, 0.7);
            g.drawRect(16, 0, 15, 10);
            g.endFill();
            this.set_visible(false);
        }
    };
    $hxClasses["com.davidmaletz.mining.renderer.Hotkey"] = com_davidmaletz_mining_renderer_Hotkey;
    com_davidmaletz_mining_renderer_Hotkey.__name__ = ["com", "davidmaletz", "mining", "renderer", "Hotkey"];
    com_davidmaletz_mining_renderer_Hotkey.__super__ = com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton;
    com_davidmaletz_mining_renderer_Hotkey.prototype = $extend(com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype, {
        init: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.init.call(this, e);
            this.player.addEventListener("hotkey_changed", $bind(this, this.hotkey_changed));
            if (this.count != null) this.player.inventory.addEventListener("item_added", $bind(this, this.add_item));
            this.hotkey_changed(null);
        },
        destroy: function(e) {
            com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.prototype.destroy.call(this, e);
            this.player.removeEventListener("hotkey_changed", $bind(this, this.hotkey_changed));
            if (this.count != null) this.player.inventory.removeEventListener("item_added", $bind(this, this.add_item));
        },
        hotkey_changed: function(e) {
            if (e != null && e.value != this.hotkey) return;
            var item = this.player.hotkeys[this.hotkey];
            if (this.count != null) {
                if (item == null) {
                    this.set_visible(false);
                    return;
                } else this.set_visible(true);
                this.count.set(Std.string(this.player.getItemCount(item.id)));
            }
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this.icon);
            if (item != null) this.icon.addChild(item.createIcon());
        },
        add_item: function(e) {
            if (e.item != this.player.hotkeys[this.hotkey]) return;
            this.count.set(e.count == null ? "null": "" + e.count);
        },
        __class__: com_davidmaletz_mining_renderer_Hotkey
    });
    var com_davidmaletz_mining_renderer_ProjectilesRenderer = function(area) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.area = area;
    };
    $hxClasses["com.davidmaletz.mining.renderer.ProjectilesRenderer"] = com_davidmaletz_mining_renderer_ProjectilesRenderer;
    com_davidmaletz_mining_renderer_ProjectilesRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "ProjectilesRenderer"];
    com_davidmaletz_mining_renderer_ProjectilesRenderer.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_renderer_ProjectilesRenderer.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.area.area.addEventListener("add_projectile", $bind(this, this.add_projectile));
            this.area.area.addEventListener("rem_projectile", $bind(this, this.rem_projectile));
            this.updateProjectiles();
        },
        destroy: function(e) {
            this.area.area.removeEventListener("add_projectile", $bind(this, this.add_projectile));
            this.area.area.removeEventListener("rem_projectile", $bind(this, this.rem_projectile));
        },
        updateProjectiles: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            var $it0 = HxOverrides.iter(this.area.area.projectiles);
            while ($it0.hasNext()) {
                var p = $it0.next();
                this.addChild((function($this) {
                    var $r;
                    if (p.renderer == null) p.renderer = p.createRenderer($this.area);
                    $r = p.renderer;
                    return $r;
                } (this)));
            }
        },
        add_projectile: function(e) {
            this.addProjectile(e.value);
        },
        rem_projectile: function(e) {
            var p;
            p = js_Boot.__cast(e.value, com_davidmaletz_mining_world_Projectile);
            var r;
            if (p.renderer == null) p.renderer = p.createRenderer(this.area);
            r = p.renderer;
            r.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 5, (function(f, d) {
                return function() {
                    f(d);
                };
            })(com_davidmaletz_faengfl_FaengFL.remove, r));
        },
        addProjectile: function(p) {
            this.addChild((function($this) {
                var $r;
                if (p.renderer == null) p.renderer = p.createRenderer($this.area);
                $r = p.renderer;
                return $r;
            } (this)));
        },
        __class__: com_davidmaletz_mining_renderer_ProjectilesRenderer
    });
    var com_davidmaletz_mining_renderer_SmelterRenderer = function(smelter) {
        com_davidmaletz_tiles_render_PlayAnimation.call(this, smelter.info, smelter.getAnimation(), 10, true);
        this.smelter = smelter;
    };
    $hxClasses["com.davidmaletz.mining.renderer.SmelterRenderer"] = com_davidmaletz_mining_renderer_SmelterRenderer;
    com_davidmaletz_mining_renderer_SmelterRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "SmelterRenderer"];
    com_davidmaletz_mining_renderer_SmelterRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_renderer_SmelterRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.init.call(this, e);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame), false, PriorityManager.priority + 1);
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.destroy.call(this, e);
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        handle_frame: function(e) {
            this.smelter.handleTick();
        },
        __class__: com_davidmaletz_mining_renderer_SmelterRenderer
    });
    var com_davidmaletz_mining_renderer_TreeRenderer = function(t) {
        this.animate = false;
        com_davidmaletz_tiles_render_TileAnimationRenderer.call(this, t.info, 15);
        this.tree = t;
        this.setAnimation(this.tree.info.id + ".grow");
        this.setFrame(this.tree.growth);
        this.set_x((t.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((t.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        if (com_davidmaletz_mining_renderer_TreeRenderer.bounds == null) com_davidmaletz_mining_renderer_TreeRenderer.bounds = new openfl_geom_Rectangle( - 100, -100, 200, 100 + com_davidmaletz_tiles_Tile.SIZE);
    };
    $hxClasses["com.davidmaletz.mining.renderer.TreeRenderer"] = com_davidmaletz_mining_renderer_TreeRenderer;
    com_davidmaletz_mining_renderer_TreeRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "TreeRenderer"];
    com_davidmaletz_mining_renderer_TreeRenderer.bounds = null;
    com_davidmaletz_mining_renderer_TreeRenderer.__super__ = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_mining_renderer_TreeRenderer.prototype = $extend(com_davidmaletz_tiles_render_TileAnimationRenderer.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.init.call(this, e);
            this.tree.addEventListener("change_health", $bind(this, this.damage));
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.destroy.call(this, e);
            this.tree.removeEventListener("change_health", $bind(this, this.damage));
        },
        damage: function(e) {
            if (this.tree.health <= 0) {
                if (e.attacker != null && js_Boot.__instanceof(e.attacker, com_davidmaletz_mining_Player)) {
                    var info;
                    info = js_Boot.__cast(this.tree.info, com_davidmaletz_mining_world_TreeInfo);
                    var p;
                    p = js_Boot.__cast(e.attacker, com_davidmaletz_mining_Player);
                    var loot = info.handler.getLoot();
                    if (this.tree.isGrown() && loot != null) {
                        var dx = 0;
                        if (p.renderer != null) if (p.renderer.get_scaleX() > 0) dx = -1;
                        else dx = 1;
                        com_davidmaletz_mining_renderer_CollectLoot.collect(p, new com_davidmaletz_mining_item_ItemCt(loot, 1), this.parent, this.get_x() - com_davidmaletz_tiles_Tile.SIZE * (dx + 0.5), this.get_y(), 3);
                    }
                    var t = new com_davidmaletz_tiles_render_TileAnimationRenderer(info, 15);
                    t.setAnimation(this.animation);
                    t.setFrame(this.frame);
                    this.parent.addChild(t);
                    t.set_x(this.get_x());
                    t.set_y(this.get_y());
                    com_davidmaletz_mining_renderer_CollectLoot.kill(p, this.tree, t, false);
                }
                this.setAnimation(this.tree.info.id + ".grow");
                this.tree.setGrowth(0);
                this.animate = false;
                this.setFrame(this.tree.growth);
            } else if (this.tree.isGrown()) {
                this.animate = true;
                this.setAnimation(this.tree.info.id + ".hit");
                this.setFrame(0);
            }
        },
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, frames);
            if (this.animate) {
                if (!this.setFrame(this.frame + frames, false)) {
                    this.animate = false;
                    this.setAnimation(this.tree.info.id + ".grow");
                    this.setFrame(this.tree.growth);
                }
            } else if (this.animation == this.tree.info.id + ".grow" && !com_davidmaletz_faengfl_FaengFL.onScreen(this, com_davidmaletz_mining_renderer_TreeRenderer.bounds)) {
                this.setFrame(this.frame + frames * this.tree.info.speed, false);
                this.tree.setGrowth(this.frame);
            }
        },
        __class__: com_davidmaletz_mining_renderer_TreeRenderer
    });
    var com_davidmaletz_mining_renderer_WaterRenderer = function(area) {
        com_davidmaletz_mining_renderer_ParallaxLayer.call(this, area, null, null, 1);
        var water = new openfl_display_Sprite();
        var b = openfl_Assets.getBitmapData("data/tile/water.png");
        var g = water.get_graphics();
        g.beginFill(735834);
        g.drawRect( - 256, b.height, 512, 144);
        g.endFill();
        var s = new openfl_display_Sprite();
        g = s.get_graphics();
        g.beginBitmapFill(b, null, true);
        g.drawRect( - 256, 0, 512, b.height);
        g.endFill();
        water.addChild(s);
        water.set_y(12);
        this.addChild(water);
        this._width = 256;
        this._height = b.height;
    };
    $hxClasses["com.davidmaletz.mining.renderer.WaterRenderer"] = com_davidmaletz_mining_renderer_WaterRenderer;
    com_davidmaletz_mining_renderer_WaterRenderer.__name__ = ["com", "davidmaletz", "mining", "renderer", "WaterRenderer"];
    com_davidmaletz_mining_renderer_WaterRenderer.__super__ = com_davidmaletz_mining_renderer_ParallaxLayer;
    com_davidmaletz_mining_renderer_WaterRenderer.prototype = $extend(com_davidmaletz_mining_renderer_ParallaxLayer.prototype, {
        init: function(e) {
            com_davidmaletz_mining_renderer_ParallaxLayer.prototype.init.call(this, null);
        },
        enter_frame: function(e) {
            com_davidmaletz_mining_renderer_ParallaxLayer.prototype.enter_frame.call(this, e);
            this.set_y(Math.max(this.area.get_y(), -this._height));
        },
        __class__: com_davidmaletz_mining_renderer_WaterRenderer
    });
    var com_davidmaletz_mining_renderer_Waves = function(area) {
        com_davidmaletz_mining_renderer_ParallaxLayer.call(this, area, null, null, 1);
        com_davidmaletz_mining_renderer_Waves.instance = this;
        if (com_davidmaletz_mining_renderer_Waves.img == null) {
            var b = openfl_Assets.getBitmapData("data/tile/waves.png");
            com_davidmaletz_mining_renderer_Waves.move = b.width;
            com_davidmaletz_mining_renderer_Waves.img = new openfl_display_BitmapData(1024 + com_davidmaletz_mining_renderer_Waves.move, b.height, true, 0);
            var r = new openfl_geom_Rectangle(0, 0, b.width, b.height);
            var x = 0;
            while (x < com_davidmaletz_mining_renderer_Waves.img.width) {
                com_davidmaletz_mining_renderer_Waves.img.copyPixels(b, r, new openfl_geom_Point(x));
                x += b.width;
            }
        }
        this.waves = new openfl_display_Bitmap(com_davidmaletz_mining_renderer_Waves.img);
        this.waves.set_y(12 - com_davidmaletz_mining_renderer_Waves.img.height);
        var s = new openfl_display_Sprite();
        s.addChild(this.waves);
        this.addChild(s);
        this._width = 768;
        this._height = 0;
        this._x = 0;
    };
    $hxClasses["com.davidmaletz.mining.renderer.Waves"] = com_davidmaletz_mining_renderer_Waves;
    com_davidmaletz_mining_renderer_Waves.__name__ = ["com", "davidmaletz", "mining", "renderer", "Waves"];
    com_davidmaletz_mining_renderer_Waves.instance = null;
    com_davidmaletz_mining_renderer_Waves.move = null;
    com_davidmaletz_mining_renderer_Waves.img = null;
    com_davidmaletz_mining_renderer_Waves.getWaveHeight = function(x) {
        return 4.0 - Math.abs(com_fancyfish_faeng_common_Utils.mod(com_davidmaletz_mining_renderer_Waves.instance.get_x() + com_davidmaletz_mining_renderer_Waves.instance.waves.get_x() - x, 48) - 24) / 6;
    };
    com_davidmaletz_mining_renderer_Waves.__super__ = com_davidmaletz_mining_renderer_ParallaxLayer;
    com_davidmaletz_mining_renderer_Waves.prototype = $extend(com_davidmaletz_mining_renderer_ParallaxLayer.prototype, {
        init: function(e) {
            com_davidmaletz_mining_renderer_ParallaxLayer.prototype.init.call(this, null);
        },
        enter_frame: function(e) {
            if (this.area.get_y() < -this.waves.get_y() - com_davidmaletz_tiles_Tile.SIZE) {
                this.set_visible(false);
                return;
            } else this.set_visible(true);
            com_davidmaletz_mining_renderer_ParallaxLayer.prototype.enter_frame.call(this, e);
            this.set_y(this.area.get_y());
            this._x += 0.25;
            if (this._x > com_davidmaletz_mining_renderer_Waves.move) this._x -= com_davidmaletz_mining_renderer_Waves.move;
            this.waves.set_x(Math.round(this._x) - 768 - com_davidmaletz_mining_renderer_Waves.move);
        },
        __class__: com_davidmaletz_mining_renderer_Waves
    });
    var com_davidmaletz_mining_structure_Structure = function(info, x, y) {
        openfl_events_EventDispatcher.call(this);
        this.info = info;
        this.tile_x = x;
        this.tile_y = y;
    };
    $hxClasses["com.davidmaletz.mining.structure.Structure"] = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Structure.__name__ = ["com", "davidmaletz", "mining", "structure", "Structure"];
    com_davidmaletz_mining_structure_Structure.load = function(b, version, addStructure) {
        var id = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
        if (id == null) return false; (id == null ? null: (function($this) {
            var $r;
            if (com_davidmaletz_mining_structure_StructureInfo.structures == null) com_davidmaletz_mining_structure_StructureInfo.loadStructures();
            $r = com_davidmaletz_mining_structure_StructureInfo.structures.get(id);
            return $r;
        } (this))).load(b, version, b.readInt16(), version >= 12 ? b.readInt16() : -1, addStructure, null);
        return true;
    };
    com_davidmaletz_mining_structure_Structure.writeNull = function(b) {
        com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
    };
    com_davidmaletz_mining_structure_Structure.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_structure_Structure.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getSortValue: function() {
            return this.tile_x + Math.ceil(this.info.width / com_davidmaletz_tiles_Tile.SIZE) - 1;
        },
        addedToArea: function(area, built) {},
        onOver: function(p) {},
        onOut: function(p) {},
        onEnter: function(p) {
            var t = this.getTooltip();
            if (t != null) {
                this.tooltip = new com_davidmaletz_mining_ui_KeyTooltip("select", 128., 16, t);
                this.tooltip.set_alpha(0);
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(), 10);
            }
            if (com_davidmaletz_tiles_TileAnimation.get(this.info.getAnim("opening")) != null) this.playAnimation("opening");
            this.runEvent("enter", p);
        },
        onExit: function(p) {
            if (this.tooltip != null) {
                this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, this.tooltip));
                this.tooltip = null;
            }
            if (com_davidmaletz_tiles_TileAnimation.get(this.info.getAnim("closing")) != null) this.playAnimation("closing");
            this.runEvent("exit", p);
        },
        playSFX: function(id, loops) {
            if (loops == null) loops = 1073741823;
            this.stopSFX(null);
            if (this.renderer != null) this.sound = new com_davidmaletz_faengfl_LocationSound(com_davidmaletz_faengfl_Application.instance.container, this.renderer, id, new openfl_geom_Point(this.info.width * 0.5, this.info.height * 0.5), loops);
        },
        stopSFX: function(e) {
            if (this.sound != null) {
                this.sound.kill(null);
                this.sound = null;
            }
        },
        playIdle: function(p) {
            this.loopAnimation("idle");
        },
        loopAnimation: function(anim) {
            var r = this.getRenderer();
            if (js_Boot.__instanceof(r, com_davidmaletz_tiles_render_PlayAnimation))(js_Boot.__cast(r, com_davidmaletz_tiles_render_PlayAnimation)).playAnimation(this.info.getAnim(anim), true, null, null, null);
        },
        openClose: function() {
            var _g = this;
            var r = this.getRenderer();
            if (js_Boot.__instanceof(r, com_davidmaletz_tiles_render_PlayAnimation)) {
                var p;
                p = js_Boot.__cast(r, com_davidmaletz_tiles_render_PlayAnimation);
                var anim = this.info.getAnim("opening");
                if (p.animation != anim) {
                    p.setAnimation(anim, 0, 0);
                    p.loop = false;
                    p.onComplete = function(p1) {
                        _g.playAnimation("closing");
                    };
                }
            }
        },
        playAnimation: function(anim, onComplete) {
            var r = this.getRenderer();
            if (js_Boot.__instanceof(r, com_davidmaletz_tiles_render_PlayAnimation))(js_Boot.__cast(r, com_davidmaletz_tiles_render_PlayAnimation)).playAnimation(this.info.getAnim(anim), false, onComplete, null, null);
        },
        prepareOperate: function(p) {
            this.runEvent("operate", p, (function(f, p1) {
                return function() {
                    f(p1);
                };
            })($bind(this, this.onOperate), p));
        },
        onOperate: function(p) {},
        getTooltip: function() {
            var i = this.info.id;
            var len = i.length;
            var c = HxOverrides.cca(i, len - 1);
            if (c >= 48 && c < 58) i = i.substring(0, len - 1);
            if (com_fancyfish_faeng_common_Lang.lang.hasText("structure.tooltip", i)) return com_fancyfish_faeng_common_Lang.getText("structure.tooltip", i);
            else return null;
        },
        createRenderer: function() {
            return new com_davidmaletz_tiles_render_PlayAnimation(this.info, this.info.getAnim("idle"), 10, true);
        },
        getRenderer: function() {
            if (this.renderer == null) {
                this.renderer = this.createRenderer();
                this.renderer.set_x(this.tile_x * com_davidmaletz_tiles_Tile.SIZE + (Math.ceil(this.info.width / com_davidmaletz_tiles_Tile.SIZE) * com_davidmaletz_tiles_Tile.SIZE - this.info.width >> 1));
                this.renderer.set_y((this.tile_y + 1) * com_davidmaletz_tiles_Tile.SIZE + this.info.offsetY - this.info.height);
                this.renderer.addEventListener("removedFromStage", $bind(this, this.stopSFX));
                if (this.info.xml.get("flip") == "true") this.renderer.set_scaleX( - 1);
            }
            return this.renderer;
        },
        isBack: function() {
            return false;
        },
        getTileWidth: function() {
            return Math.ceil(this.info.width / com_davidmaletz_tiles_Tile.SIZE);
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.info.id);
            b.writeInt16(this.tile_x);
            b.writeInt16(this.tile_y);
        },
        read: function(b, version, parent) {},
        runEvent: function(event, p, onComplete) {
            var e = this.info.xml.elementsNamed(event);
            if (e.hasNext()) new com_davidmaletz_mining_npc_NPCEventHandler(e.next(), p, this, onComplete).runAll();
            else if (onComplete != null) onComplete();
        },
        __class__: com_davidmaletz_mining_structure_Structure
    });
    var com_davidmaletz_mining_structure_Boat = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.structure.Boat"] = com_davidmaletz_mining_structure_Boat;
    com_davidmaletz_mining_structure_Boat.__name__ = ["com", "davidmaletz", "mining", "structure", "Boat"];
    com_davidmaletz_mining_structure_Boat.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Boat.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        addedToArea: function(area, built) {
            this.area = area;
        },
        onOver: function(p) {
            p.offsetY = -5;
        },
        onOut: function(p) {
            p.offsetY = 0;
        },
        sail: function(p) {
            var r = p.renderer;
            if (r != null) r.set_visible(false);
            this.onExit(p);
            if (this.renderer != null)(js_Boot.__cast(this.renderer, com_davidmaletz_tiles_render_PlayAnimation)).playAnimation("boat.sail", true, null, null, null);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_Credits(c), 1);
        },
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            com_davidmaletz_mining_Main.save(p);
            new com_davidmaletz_mining_ui_transition_FadeOut((function(f, p1) {
                return function() {
                    f(p1);
                };
            })($bind(this, this.sail), p), 30, false);
        },
        isBack: function() {
            return true;
        },
        createRenderer: function() {
            return new com_davidmaletz_mining_structure__$Boat_BoatRenderer(this);
        },
        __class__: com_davidmaletz_mining_structure_Boat
    });
    var com_davidmaletz_mining_structure__$Boat_BoatRenderer = function(b) {
        this.boat = b;
        com_davidmaletz_tiles_render_PlayAnimation.call(this, this.boat.info, "boat.empty", 15, true);
    };
    $hxClasses["com.davidmaletz.mining.structure._Boat.BoatRenderer"] = com_davidmaletz_mining_structure__$Boat_BoatRenderer;
    com_davidmaletz_mining_structure__$Boat_BoatRenderer.__name__ = ["com", "davidmaletz", "mining", "structure", "_Boat", "BoatRenderer"];
    com_davidmaletz_mining_structure__$Boat_BoatRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_structure__$Boat_BoatRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.init.call(this, e);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.handle_frame), false, PriorityManager.priority + 1);
            this.handle_frame(null);
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.destroy.call(this, e);
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
            if (this.animation == "boat.sail") this.set_x(Math.round(this.get_x() - frames));
        },
        handle_frame: function(e) {
            if (this.boat.area == null || this.boat.area.renderer == null) return;
            if (this.animation == "boat.sail") this.boat.area.renderer.set_x(128. - this.get_x() + this.boat.info.width * 0.5);
            if (this.parent != null) this.set_y( - Math.round(com_davidmaletz_mining_renderer_Waves.getWaveHeight(this.get_x() + this.parent.get_x() + this.boat.info.width * 0.5) + 31));
        },
        __class__: com_davidmaletz_mining_structure__$Boat_BoatRenderer
    });
    var com_davidmaletz_mining_structure_Buildable = function() {};
    $hxClasses["com.davidmaletz.mining.structure.Buildable"] = com_davidmaletz_mining_structure_Buildable;
    com_davidmaletz_mining_structure_Buildable.__name__ = ["com", "davidmaletz", "mining", "structure", "Buildable"];
    com_davidmaletz_mining_structure_Buildable.prototype = {
        __class__: com_davidmaletz_mining_structure_Buildable
    };
    var com_davidmaletz_mining_structure_CompoundStructure = function(xml) {
        this.ids = [];
        this.offsets = [];
        var $it0 = xml.elementsNamed("structure");
        while ($it0.hasNext()) {
            var e = $it0.next();
            this.ids.push(e.get("id"));
            this.offsets.push(Std.parseInt(e.get("x")));
        }
    };
    $hxClasses["com.davidmaletz.mining.structure.CompoundStructure"] = com_davidmaletz_mining_structure_CompoundStructure;
    com_davidmaletz_mining_structure_CompoundStructure.__name__ = ["com", "davidmaletz", "mining", "structure", "CompoundStructure"];
    com_davidmaletz_mining_structure_CompoundStructure.__interfaces__ = [com_davidmaletz_mining_structure_Buildable];
    com_davidmaletz_mining_structure_CompoundStructure.prototype = {
        build: function(area, tile_x, tile_y) {
            var len = this.ids.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                com_davidmaletz_mining_structure_StructureInfo.get(this.ids[i]).build(area, tile_x + this.offsets[i], tile_y);
            }
        },
        load: function(b, version, tile_x, tile_y, addStructure, parent) {
            var len = this.ids.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                com_davidmaletz_mining_structure_StructureInfo.get(this.ids[i]).load(i == 0 ? b: null, version, tile_x + this.offsets[i], tile_y, addStructure, this);
            }
        },
        __class__: com_davidmaletz_mining_structure_CompoundStructure
    };
    var com_davidmaletz_mining_structure_Crafting = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.structure.Crafting"] = com_davidmaletz_mining_structure_Crafting;
    com_davidmaletz_mining_structure_Crafting.__name__ = ["com", "davidmaletz", "mining", "structure", "Crafting"];
    com_davidmaletz_mining_structure_Crafting.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Crafting.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_CraftingWindow(this.info.getRecipes(), com_fancyfish_faeng_common_Lang.getText("common", this.info.id), p.inventory, c, (function(f, a1, p1) {
                return function() {
                    f(a1, p1);
                };
            })($bind(this, this.runEvent), "craft", p)), 1);
        },
        __class__: com_davidmaletz_mining_structure_Crafting
    });
    var com_davidmaletz_mining_structure_Dock = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.structure.Dock"] = com_davidmaletz_mining_structure_Dock;
    com_davidmaletz_mining_structure_Dock.__name__ = ["com", "davidmaletz", "mining", "structure", "Dock"];
    com_davidmaletz_mining_structure_Dock.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Dock.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        addedToArea: function(area, built) {
            this.area = area;
            if (built) {
                var empty = area.addTileIndex("empty");
                var _g = 0;
                while (_g < 4) {
                    var y = _g++;
                    var _g1 = 0;
                    while (_g1 < 4) {
                        var x = _g1++;
                        area.setTile(this.tile_x + x, y, 0, empty);
                    }
                }
            }
        },
        onOver: function(p) {
            p.offsetY = -5;
        },
        onOut: function(p) {
            p.offsetY = 0;
        },
        createRenderer: function() {
            var ret = com_davidmaletz_mining_structure_Structure.prototype.createRenderer.call(this);
            ret.addEventListener("addedToStage", (function(f, a1) {
                return function(e) {
                    f(a1, e);
                };
            })($bind(this, this.add_top), this.area));
            ret.addEventListener("removedFromStage", $bind(this, this.remove_top));
            return ret;
        },
        add_top: function(area, e) {
            var b = openfl_Assets.getBitmapData("data/tile/dock_front.png");
            if (this.top == null) this.top = new openfl_display_Bitmap(b);
            this.top.set_x(this.tile_x * com_davidmaletz_tiles_Tile.SIZE + (Math.ceil(this.info.width / com_davidmaletz_tiles_Tile.SIZE) * com_davidmaletz_tiles_Tile.SIZE - this.info.width >> 1) + 4);
            this.top.set_y(4 - b.height);
            area.renderer.over_objects.addChild(this.top);
        },
        remove_top: function(e) {
            if (this.top != null) com_davidmaletz_faengfl_FaengFL.remove(this.top);
        },
        __class__: com_davidmaletz_mining_structure_Dock
    });
    var com_davidmaletz_mining_structure_Dockhouse = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.structure.Dockhouse"] = com_davidmaletz_mining_structure_Dockhouse;
    com_davidmaletz_mining_structure_Dockhouse.__name__ = ["com", "davidmaletz", "mining", "structure", "Dockhouse"];
    com_davidmaletz_mining_structure_Dockhouse.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Dockhouse.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            if (! (p.questMap.get("boat") == true)) p.addQuest((function($this) {
                var $r;
                if (com_davidmaletz_mining_npc_Quest.quests == null) com_davidmaletz_mining_npc_Quest.loadQuests();
                $r = com_davidmaletz_mining_npc_Quest.quests.get("boat");
                return $r;
            } (this)));
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_DockWindow(this.info.getRecipes(), com_fancyfish_faeng_common_Lang.getText("common", "dockhouse"), p, c), 1);
        },
        __class__: com_davidmaletz_mining_structure_Dockhouse
    });
    var com_davidmaletz_mining_structure_Farm = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
        this.items = [];
        this.upgrades = new com_fancyfish_faeng_common_mutable_Mutable();
        this.upgrades.set(0);
        this.max_upgrades = Std.parseInt(info.xml.get("upgrades"));
    };
    $hxClasses["com.davidmaletz.mining.structure.Farm"] = com_davidmaletz_mining_structure_Farm;
    com_davidmaletz_mining_structure_Farm.__name__ = ["com", "davidmaletz", "mining", "structure", "Farm"];
    com_davidmaletz_mining_structure_Farm.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Farm.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        getMaxUpgrades: function() {
            return this.max_upgrades;
        },
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_FarmWindow(p, this, c), 1);
        },
        addUpgrade: function(u) {
            if (u.info.id != "pen") this.upgrades.set(this.upgrades.get() + 1);
        },
        buildUpgrade: function(area, s) {
            var x = this.tile_x + 9;
            while (true) {
                x++;
                if (area.getStructure(x, -1) == null) {
                    area.addStructure(s, x, this.tile_y);
                    break;
                }
            }
        },
        getFirstUpgrade: function(area) {
            return area.getStructure(this.tile_x + 10, -1);
        },
        handleTick: function() {
            var _g = 0;
            var _g1 = this.items;
            while (_g < _g1.length) {
                var i = _g1[_g]; ++_g;
                if (! (i.growth == 0)) {
                    i.growth--;
                    i.dispatchEvent(new openfl_events_Event("update_percent"));
                }
            }
        },
        getItemCount: function() {
            return this.items.length;
        },
        getItem: function(i) {
            return this.items[i];
        },
        addItem: function(i) {
            this.items.push(i);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_item", i));
        },
        removeItem: function(i) {
            if (HxOverrides.remove(this.items, i)) {
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("rem_item", i));
                return true;
            } else return false;
        },
        iterator: function() {
            return HxOverrides.iter(this.items);
        },
        createRenderer: function() {
            return new com_davidmaletz_mining_structure_FarmRenderer(this);
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Structure.prototype.write.call(this, b);
            var len = this.items.length;
            b.writeByte(len);
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.items[i].write(b);
            }
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Structure.prototype.read.call(this, b, version, parent);
            var len = b.readByte() & 255;
            this.items.length = 0;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.items.push(com_davidmaletz_mining_item_FarmItem.read(b, version));
            }
        },
        canUpgrade: function() {
            return this.upgrades.get() < this.max_upgrades;
        },
        __class__: com_davidmaletz_mining_structure_Farm
    });
    var com_davidmaletz_mining_structure_FarmRenderer = function(farm) {
        com_davidmaletz_tiles_render_PlayAnimation.call(this, farm.info, farm.info.getAnim("idle"), 10, true);
        this.farm = farm;
    };
    $hxClasses["com.davidmaletz.mining.structure.FarmRenderer"] = com_davidmaletz_mining_structure_FarmRenderer;
    com_davidmaletz_mining_structure_FarmRenderer.__name__ = ["com", "davidmaletz", "mining", "structure", "FarmRenderer"];
    com_davidmaletz_mining_structure_FarmRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_structure_FarmRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
            if (frames > 0) this.farm.handleTick();
        },
        __class__: com_davidmaletz_mining_structure_FarmRenderer
    });
    var com_davidmaletz_mining_structure_FarmUpgrade = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
        this.item_start = -1;
        if (info.xml.get("attachFarm") == "false") {
            this.items = [];
            var $it0 = this.getItems();
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.items.push(new com_davidmaletz_mining_item_FarmItem(i == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                    $r = com_davidmaletz_mining_item_FarmInfo.info.get(i);
                    return $r;
                } (this))));
            }
        } else this.items = null;
    };
    $hxClasses["com.davidmaletz.mining.structure.FarmUpgrade"] = com_davidmaletz_mining_structure_FarmUpgrade;
    com_davidmaletz_mining_structure_FarmUpgrade.__name__ = ["com", "davidmaletz", "mining", "structure", "FarmUpgrade"];
    com_davidmaletz_mining_structure_FarmUpgrade.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_FarmUpgrade.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        getItems: function() {
            var ar = [];
            var $it0 = this.info.xml.elementsNamed("farmable");
            while ($it0.hasNext()) {
                var e = $it0.next();
                ar.push(e.get("id"));
            }
            return HxOverrides.iter(ar);
        },
        addedToArea: function(area, built) {
            if (this.info.xml.get("attachFarm") != "false") {
                var $it0 = new com_fancyfish_faeng_common_CompoundIterator2(area.structures.iterator());
                while ($it0.hasNext()) {
                    var s = $it0.next();
                    if (s.info.id == "farm") {
                        this.farm = js_Boot.__cast(s, com_davidmaletz_mining_structure_Farm);
                        break;
                    }
                }
                if (built) {
                    this.item_start = this.farm.items.length;
                    var $it1 = this.getItems();
                    while ($it1.hasNext()) {
                        var i = $it1.next();
                        var item = new com_davidmaletz_mining_item_FarmItem(i == null ? null: (function($this) {
                            var $r;
                            if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                            $r = com_davidmaletz_mining_item_FarmInfo.info.get(i);
                            return $r;
                        } (this)));
                        this.farm.addItem(item);
                    }
                }
                this.farm.addUpgrade(this);
            }
        },
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            if (this.items != null) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_FarmItemWindow(p, this, c), 1);
            }
        },
        handleTick: function() {
            if (this.items != null) {
                var _g = 0;
                var _g1 = this.items;
                while (_g < _g1.length) {
                    var i = _g1[_g]; ++_g;
                    if (! (i.growth == 0)) {
                        i.growth--;
                        i.dispatchEvent(new openfl_events_Event("update_percent"));
                    }
                }
            }
        },
        getItem: function(i) {
            if (this.items == null) return this.farm.items[this.item_start + i];
            else return this.items[i];
        },
        createRenderer: function() {
            return new com_davidmaletz_mining_structure_FarmUpgradeRenderer(this);
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Structure.prototype.write.call(this, b);
            if (this.items != null) {
                var len = this.items.length;
                b.writeByte(len);
                var _g = 0;
                while (_g < len) {
                    var i = _g++;
                    this.items[i].write(b);
                }
            } else b.writeByte(this.item_start);
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Structure.prototype.read.call(this, b, version, parent);
            if (this.items != null) {
                var len = b.readByte() & 255;
                this.items.length = 0;
                var _g = 0;
                while (_g < len) {
                    var i = _g++;
                    this.items.push(com_davidmaletz_mining_item_FarmItem.read(b, version));
                }
            } else this.item_start = b.readByte() & 255;
        },
        iterator: function() {
            return HxOverrides.iter(this.items);
        },
        __class__: com_davidmaletz_mining_structure_FarmUpgrade
    });
    var com_davidmaletz_mining_structure_FarmUpgradeRenderer = function(upgrade) {
        com_davidmaletz_tiles_render_PlayAnimation.call(this, upgrade.info, null, 10, true);
        this.upgrade = upgrade;
    };
    $hxClasses["com.davidmaletz.mining.structure.FarmUpgradeRenderer"] = com_davidmaletz_mining_structure_FarmUpgradeRenderer;
    com_davidmaletz_mining_structure_FarmUpgradeRenderer.__name__ = ["com", "davidmaletz", "mining", "structure", "FarmUpgradeRenderer"];
    com_davidmaletz_mining_structure_FarmUpgradeRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_structure_FarmUpgradeRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        init: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.init.call(this, e);
            this.upgrade.getItem(0).addEventListener("update_percent", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.destroy.call(this, e);
            this.upgrade.getItem(0).removeEventListener("update_percent", $bind(this, this.update));
        },
        updateFrame: function(p) {
            this.playAnimation(this.upgrade.info.getAnim("grow"), false, null, null, null);
            this.setFrame(this.upgrade.getItem(0).getPercent() * (this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame));
        },
        update: function(e) {
            var p = this.upgrade.getItem(0).getPercent();
            var idle = this.upgrade.info.getAnim("idle");
            if (p == 1) {
                this.setAnimation(idle, 0, 0);
                this.loop = true;
                this.onComplete = null;
            } else if (p == 0 && this.animation == idle) {
                var harvest = this.upgrade.info.getAnim("harvest");
                if ((harvest == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
                    $r = com_davidmaletz_tiles_TileAnimation.anims.get(harvest);
                    return $r;
                } (this))) != null) {
                    this.setAnimation(harvest, 0, 0);
                    this.loop = false;
                    this.onComplete = $bind(this, this.updateFrame);
                } else this.updateFrame(null);
            } else if (this.onComplete == null) this.updateFrame(null);
        },
        enter_frame: function(frames) {
            if (this.animation != this.upgrade.info.getAnim("grow")) com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
            if (frames > 0) this.upgrade.handleTick();
        },
        __class__: com_davidmaletz_mining_structure_FarmUpgradeRenderer
    });
    var com_davidmaletz_mining_structure_Smelter = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
        this.queue = [];
        this.fuel = 0;
        this.current = 0;
    };
    $hxClasses["com.davidmaletz.mining.structure.Smelter"] = com_davidmaletz_mining_structure_Smelter;
    com_davidmaletz_mining_structure_Smelter.__name__ = ["com", "davidmaletz", "mining", "structure", "Smelter"];
    com_davidmaletz_mining_structure_Smelter.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Smelter.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        isSmelting: function() {
            return this.fuel > 0 && this.current < this.queue.length && !(this.queue[this.current].fuel == 0);
        },
        getAnimation: function() {
            if (this.fuel > 0 && this.current < this.queue.length && !(this.queue[this.current].fuel == 0)) return "smelter.on";
            else return "smelter.off";
        },
        useFuel: function() {
            this.fuel--;
            this.dispatchEvent(new openfl_events_Event("update_fuel"));
        },
        addFuel: function(f) {
            f += this.fuel;
            if (f > 60) f = 60;
            if (f != this.fuel) {
                this.fuel = f;
                this.dispatchEvent(new openfl_events_Event("update_fuel"));
                if (this.renderer != null) this.updateAnim();
            }
        },
        getFuelPercent: function() {
            return this.fuel / 60;
        },
        onComplete: function(s) {
            this.current++;
            if (this.renderer != null) { (js_Boot.__cast(this.renderer, com_davidmaletz_tiles_render_PlayAnimation)).playAnimation("smelter.smelt", false, $bind(this, this.next), null, null);
                this.playSFX("smelter", 1);
            }
        },
        handleTick: function() {
            if (this.fuel > 0 && this.current < this.queue.length && !(this.queue[this.current].fuel == 0)) {
                this.queue[this.current].tick(this);
                if (this.renderer != null && !(this.fuel > 0 && this.current < this.queue.length && !(this.queue[this.current].fuel == 0))) this.updateAnim();
            }
        },
        addItem: function(i) {
            this.queue.push(i);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_item", i));
            if (this.renderer != null) this.updateAnim();
        },
        removeItem: function(i) {
            if (HxOverrides.remove(this.queue, i)) {
                this.current = 0;
                while (this.current < this.queue.length && this.queue[this.current].fuel == 0) this.current++;
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("rem_item", i));
                if (this.renderer != null) this.updateAnim();
                return true;
            } else return false;
        },
        iterator: function() {
            return HxOverrides.iter(this.queue);
        },
        next: function(p) {
            this.updateAnim();
        },
        updateAnim: function() {
            var p;
            p = js_Boot.__cast(this.renderer, com_davidmaletz_tiles_render_PlayAnimation);
            if (p.onComplete == null) p.playAnimation(this.getAnimation(), true, null, null, null);
        },
        getLabel: function() {
            return com_fancyfish_faeng_common_Lang.getText("common", "smelter");
        },
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_SmeltWindow(p, this.getLabel(), this, c), 1);
        },
        createRenderer: function() {
            return new com_davidmaletz_mining_renderer_SmelterRenderer(this);
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Structure.prototype.write.call(this, b);
            var len = this.queue.length;
            b.writeByte(len);
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.queue[i].write(b);
            }
            b.writeByte(this.current);
            b.writeUInt16(this.fuel);
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Structure.prototype.read.call(this, b, version, parent);
            var len = b.readByte() & 255;
            this.queue.length = 0;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.queue.push(com_davidmaletz_mining_item_SmeltItem.read(b, version));
            }
            this.current = b.readByte() & 255;
            this.fuel = b.readUInt16();
        },
        __class__: com_davidmaletz_mining_structure_Smelter
    });
    var com_davidmaletz_mining_structure_Kitchen = function(info, x, y) {
        com_davidmaletz_mining_structure_Smelter.call(this, info, x, y);
        this.playerEntered = false;
    };
    $hxClasses["com.davidmaletz.mining.structure.Kitchen"] = com_davidmaletz_mining_structure_Kitchen;
    com_davidmaletz_mining_structure_Kitchen.__name__ = ["com", "davidmaletz", "mining", "structure", "Kitchen"];
    com_davidmaletz_mining_structure_Kitchen.__super__ = com_davidmaletz_mining_structure_Smelter;
    com_davidmaletz_mining_structure_Kitchen.prototype = $extend(com_davidmaletz_mining_structure_Smelter.prototype, {
        onComplete: function(s) {
            this.current++;
        },
        onEnter: function(p) {
            com_davidmaletz_mining_structure_Smelter.prototype.onEnter.call(this, p);
            this.playerEntered = true;
            this.updateAnim();
        },
        onExit: function(p) {
            com_davidmaletz_mining_structure_Smelter.prototype.onExit.call(this, p);
            this.playerEntered = false;
            this.updateAnim();
        },
        getLabel: function() {
            return com_fancyfish_faeng_common_Lang.getText("common", "kitchen");
        },
        getAnimation: function() {
            var st = this.info.xml.get("animation");
            var open;
            if (this.info.xml.get("openable") == "true") {
                if (this.playerEntered) open = ".open";
                else open = ".close";
            } else open = "";
            if (this.fuel > 0 && this.current < this.queue.length && !(this.queue[this.current].fuel == 0)) return st + open + ".on";
            else return st + open + ".off";
        },
        __class__: com_davidmaletz_mining_structure_Kitchen
    });
    var com_davidmaletz_mining_structure_Market = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
        this.inventory = new com_davidmaletz_mining_item_Inventory();
        this.restock();
    };
    $hxClasses["com.davidmaletz.mining.structure.Market"] = com_davidmaletz_mining_structure_Market;
    com_davidmaletz_mining_structure_Market.__name__ = ["com", "davidmaletz", "mining", "structure", "Market"];
    com_davidmaletz_mining_structure_Market.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Market.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        addItem: function(e) {
            var min = Std.parseInt(e.get("min"));
            var max = Std.parseInt(e.get("max"));
            var ct;
            if (max - min >= 5) ct = Math.round(Math.random() * (max - min) / 5) * 5 + min;
            else ct = Math.round(Math.random() * (max - min)) + min;
            if (ct > 0) this.inventory.addItem(com_davidmaletz_mining_item_Item.get(e.get("id")), ct);
        },
        restock: function() {
            this.restock_message = false;
            this.restock_ct = Std.parseInt(this.info.xml.get("restock"));
            this.inventory.clear();
            var $it0 = this.info.xml.elementsNamed("item");
            while ($it0.hasNext()) {
                var e = $it0.next();
                if (!e.exists("if")) this.addItem(e);
            }
            var $it1 = this.info.xml.elementsNamed("select");
            while ($it1.hasNext()) {
                var select = $it1.next();
                var count = Std.parseInt(select.get("count"));
                var ar = [];
                var $it2 = select.elementsNamed("item");
                while ($it2.hasNext()) {
                    var e1 = $it2.next();
                    ar.push(e1);
                }
                com_fancyfish_faeng_common_Utils.shuffle(ar, Math.random);
                if (count > ar.length) count = ar.length;
                var _g = 0;
                while (_g < count) {
                    var i = _g++;
                    this.addItem(ar[i]);
                }
            }
        },
        restockTick: function() {
            this.restock_ct--;
            if (this.restock_ct <= 0) this.restock();
        },
        createRenderer: function() {
            return new com_davidmaletz_mining_structure__$Market_MarketRenderer(this);
        },
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            var vars = null;
            var map = new haxe_ds_StringMap();
            var $it0 = this.info.xml.elementsNamed("item");
            while ($it0.hasNext()) {
                var e = $it0.next();
                if (e.exists("if")) {
                    if (vars == null) {
                        vars = com_davidmaletz_faengfl_EventHandler.createVariables();
                        vars.set("player", p);
                    }
                    this.inventory.setItem(com_davidmaletz_mining_item_Item.get(e.get("id")), com_davidmaletz_faengfl_EventHandler.execute(e.get("if"), vars) == true ? Std.parseInt(e.get("max")) : 0);
                }
                if (e.exists("achievement")) {
                    var key = e.get("id");
                    var value = e.get("achievement");
                    if (__map_reserved[key] != null) map.setReserved(key, value);
                    else map.h[key] = value;
                }
            }
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_StoreWindow(p, this.inventory, c, map), 1);
            if (!this.restock_message && this.restock_ct < 1000) {
                this.restock_message = true;
                c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, com_fancyfish_faeng_common_Lang.getText("market", "restock").get()), 2);
            }
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Structure.prototype.write.call(this, b);
            this.inventory.write(b);
            b.writeUInt16(this.restock_ct);
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Structure.prototype.read.call(this, b, version, parent);
            if (parent == null) this.inventory.read(b, version);
            else new com_davidmaletz_mining_item_Inventory().read(b, version);
            this.restock_ct = b.readUInt16();
        },
        __class__: com_davidmaletz_mining_structure_Market
    });
    var com_davidmaletz_mining_structure__$Market_MarketRenderer = function(market) {
        com_davidmaletz_tiles_render_PlayAnimation.call(this, market.info, market.info.getAnim("idle"), 10, true);
        this.market = market;
        this.speech_frames = 200 * (Math.random() + 1);
        this.bounds = new openfl_geom_Rectangle(0, 0, market.info.width, market.info.height);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.structure._Market.MarketRenderer"] = com_davidmaletz_mining_structure__$Market_MarketRenderer;
    com_davidmaletz_mining_structure__$Market_MarketRenderer.__name__ = ["com", "davidmaletz", "mining", "structure", "_Market", "MarketRenderer"];
    com_davidmaletz_mining_structure__$Market_MarketRenderer.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_structure__$Market_MarketRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_structure__$Market_MarketRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        enter_frame: function(frames) {
            if (frames > 0) this.market.restockTick();
            com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
            this.speech_frames -= frames;
            if (this.speech_frames < 0) {
                this.speech_frames += 200;
                var ar = [];
                var $it0 = this.market.inventory.getItems();
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    ar.push(i);
                }
                this.addChild(new com_davidmaletz_mining_structure__$Market_Speech(ar[Math.floor(Math.random() * ar.length)].item));
            }
        },
        __class__: com_davidmaletz_mining_structure__$Market_MarketRenderer
    });
    var com_davidmaletz_mining_structure__$Market_Speech = function(item) {
        com_davidmaletz_lerp_LerpSpriteFL.call(this);
        this.addChild(new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/ui/speech.png")));
        var i = item.createIcon();
        i.set_x(3);
        i.set_y(3);
        this.addChild(i);
        this.set_alpha(0);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 30, $bind(this, this.next));
        this.set_x(16);
    };
    $hxClasses["com.davidmaletz.mining.structure._Market.Speech"] = com_davidmaletz_mining_structure__$Market_Speech;
    com_davidmaletz_mining_structure__$Market_Speech.__name__ = ["com", "davidmaletz", "mining", "structure", "_Market", "Speech"];
    com_davidmaletz_mining_structure__$Market_Speech.__super__ = com_davidmaletz_lerp_LerpSpriteFL;
    com_davidmaletz_mining_structure__$Market_Speech.prototype = $extend(com_davidmaletz_lerp_LerpSpriteFL.prototype, {
        next: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 30, $bind(this, this.hide));
        },
        hide: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 30, $bind(this, this.remove));
        },
        remove: function() {
            if (this.parent != null) this.parent.removeChild(this);
        },
        __class__: com_davidmaletz_mining_structure__$Market_Speech
    });
    var com_davidmaletz_mining_structure_Pen = function(info, x, y) {
        com_davidmaletz_mining_structure_FarmUpgrade.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.structure.Pen"] = com_davidmaletz_mining_structure_Pen;
    com_davidmaletz_mining_structure_Pen.__name__ = ["com", "davidmaletz", "mining", "structure", "Pen"];
    com_davidmaletz_mining_structure_Pen.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_structure_Pen.__super__ = com_davidmaletz_mining_structure_FarmUpgrade;
    com_davidmaletz_mining_structure_Pen.prototype = $extend(com_davidmaletz_mining_structure_FarmUpgrade.prototype, {
        createRenderer: function() {
            var offsetX;
            if (this.info.xml.exists("offsetX")) offsetX = Std.parseFloat(this.info.xml.get("offsetX"));
            else offsetX = 0;
            var i = com_davidmaletz_mining_item_Item.get(this.info.xml.get("animal"));
            var s = new openfl_display_Sprite();
            var pen = com_davidmaletz_mining_structure_FarmUpgrade.prototype.createRenderer.call(this);
            var _g = pen;
            _g.set_x(_g.get_x() + offsetX);
            s.addChild(pen);
            var h = this.info.height - 2;
            var p = new com_davidmaletz_mining_structure_AnimalRenderer(i.tile, i.animation);
            p.set_x(offsetX + 12);
            p.set_y(h);
            s.addChild(p);
            var p1 = new com_davidmaletz_mining_structure_AnimalRenderer(i.tile, i.animation);
            p1.set_x(offsetX + 39);
            p1.set_y(h);
            s.addChild(p1);
            var b = new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/tile/pen_fence.png"));
            b.set_x(pen.get_x());
            b.set_y(this.info.height - b.get_height());
            s.addChild(b);
            s.addEventListener("addedToStage", $bind(this, this.init));
            s.addEventListener("removedFromStage", $bind(this, this.destroy));
            return s;
        },
        getAnimals: function() {
            return new com_fancyfish_faeng_common_NullIterator();
        },
        canHouse: function(animal) {
            return false;
        },
        canFeed: function(animal, food) {
            return false;
        },
        init: function(e) {
            this.destroy(null);
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this);
        },
        destroy: function(e) {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
        },
        enter_frame: function(frames) {
            if (frames > 0) this.handleTick();
        },
        __class__: com_davidmaletz_mining_structure_Pen
    });
    var com_davidmaletz_mining_structure_AnimalRenderer = function(tile, anim, doFlip) {
        if (doFlip == null) doFlip = true;
        this.FLIP_CT = 200;
        com_davidmaletz_tiles_render_PlayAnimation.call(this, tile, anim == null ? "single": anim.id, 10, true);
        if (doFlip) this.flip = this.FLIP_CT * Math.random();
        else {
            this.flip = Infinity;
        }
    };
    $hxClasses["com.davidmaletz.mining.structure.AnimalRenderer"] = com_davidmaletz_mining_structure_AnimalRenderer;
    com_davidmaletz_mining_structure_AnimalRenderer.__name__ = ["com", "davidmaletz", "mining", "structure", "AnimalRenderer"];
    com_davidmaletz_mining_structure_AnimalRenderer.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_structure_AnimalRenderer.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            com_davidmaletz_tiles_render_PlayAnimation.prototype.setAnimation.call(this, anim_id, -0.5, -0.8);
        },
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
            this.flip -= frames;
            if (this.flip < 0) {
                this.flip += this.FLIP_CT;
                this.set_scaleX( - this.get_scaleX());
            }
        },
        __class__: com_davidmaletz_mining_structure_AnimalRenderer
    });
    var com_davidmaletz_mining_structure_Storehouse = function(info, x, y) {
        com_davidmaletz_mining_structure_Structure.call(this, info, x, y);
        this.inventory = new com_davidmaletz_mining_item_Inventory();
    };
    $hxClasses["com.davidmaletz.mining.structure.Storehouse"] = com_davidmaletz_mining_structure_Storehouse;
    com_davidmaletz_mining_structure_Storehouse.__name__ = ["com", "davidmaletz", "mining", "structure", "Storehouse"];
    com_davidmaletz_mining_structure_Storehouse.costFilter = function(maxCost, item) {
        return item.cost <= maxCost;
    };
    com_davidmaletz_mining_structure_Storehouse.__super__ = com_davidmaletz_mining_structure_Structure;
    com_davidmaletz_mining_structure_Storehouse.prototype = $extend(com_davidmaletz_mining_structure_Structure.prototype, {
        onOperate: function(p) {
            com_davidmaletz_mining_structure_Structure.prototype.onOperate.call(this, p);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_TransferInventory(p.inventory, this.inventory, com_fancyfish_faeng_common_Lang.getText("common", "inventory"), com_fancyfish_faeng_common_Lang.getText("common", "storehouse"), c, p.capacity), 1);
        },
        stealItem: function(xml, onComplete) {
            var maxCost;
            if (xml.exists("maxCost")) maxCost = Std.parseInt(xml.get("maxCost"));
            else maxCost = 99999;
            var iter = this.inventory.getItems((function(f, a1) {
                return function(a2) {
                    return f(a1, a2);
                };
            })(com_davidmaletz_mining_structure_Storehouse.costFilter, maxCost));
            if (!iter.hasNext()) return 0;
            var item = iter.next().item;
            this.inventory.addItem(item, -1);
            var c = com_davidmaletz_faengfl_Application.instance.container;
            var wnd = new com_davidmaletz_mining_ui_DialogueBox(c, StringTools.replace(com_fancyfish_faeng_common_Lang.getText("trader", "steal").get(), "{item}", item.id), onComplete);
            c.addDisplay(wnd, 2);
            return 3;
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Structure.prototype.write.call(this, b);
            this.inventory.write(b);
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Structure.prototype.read.call(this, b, version, parent);
            this.inventory.read(b, version);
        },
        __class__: com_davidmaletz_mining_structure_Storehouse
    });
    var com_davidmaletz_mining_structure_StructureInfo = function(xml) {
        this.id = xml.get("id");
        this.width = Std.parseInt(xml.get("width"));
        this.height = Std.parseInt(xml.get("height"));
        this.bitmap = com_davidmaletz_faengfl_AutoTileBitmap.get("data/tile/" + xml.get("image"), this.width, this.height);
        if (xml.exists("y")) this.y = Std.parseInt(xml.get("y"));
        else this.y = 0;
        if (xml.exists("offsetY")) this.offsetY = Std.parseInt(xml.get("offsetY"));
        else this.offsetY = 0;
        if (xml.exists("type")) {
            var cls = xml.get("type");
            cls = cls.charAt(0).toUpperCase() + HxOverrides.substr(cls, 1, null);
            var c = Type.resolveClass("com.davidmaletz.mining.structure." + cls);
            if (c != null) this.type = c;
        }
        this.xml = xml;
    };
    $hxClasses["com.davidmaletz.mining.structure.StructureInfo"] = com_davidmaletz_mining_structure_StructureInfo;
    com_davidmaletz_mining_structure_StructureInfo.__name__ = ["com", "davidmaletz", "mining", "structure", "StructureInfo"];
    com_davidmaletz_mining_structure_StructureInfo.__interfaces__ = [com_davidmaletz_mining_structure_Buildable];
    com_davidmaletz_mining_structure_StructureInfo.structures = null;
    com_davidmaletz_mining_structure_StructureInfo.loadStructures = function() {
        com_davidmaletz_mining_structure_StructureInfo.structures = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.structure != null) action_map.setReserved("structure",
        function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_structure_StructureInfo(e);
            com_davidmaletz_mining_structure_StructureInfo.structures.set(key, value);
        });
        else action_map.h["structure"] = function(e) {
            var key = e.get("id");
            var value = new com_davidmaletz_mining_structure_StructureInfo(e);
            com_davidmaletz_mining_structure_StructureInfo.structures.set(key, value);
        };
        if (__map_reserved.compound != null) action_map.setReserved("compound",
        function(e1) {
            var key1 = e1.get("id");
            var value1 = new com_davidmaletz_mining_structure_CompoundStructure(e1);
            com_davidmaletz_mining_structure_StructureInfo.structures.set(key1, value1);
        });
        else action_map.h["compound"] = function(e1) {
            var key1 = e1.get("id");
            var value1 = new com_davidmaletz_mining_structure_CompoundStructure(e1);
            com_davidmaletz_mining_structure_StructureInfo.structures.set(key1, value1);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/structures.xml", action_map);
    };
    com_davidmaletz_mining_structure_StructureInfo.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_mining_structure_StructureInfo.structures == null) com_davidmaletz_mining_structure_StructureInfo.loadStructures();
            return com_davidmaletz_mining_structure_StructureInfo.structures.get(id);
        }
    };
    com_davidmaletz_mining_structure_StructureInfo.prototype = {
        getRecipes: function() {
            var ar = [];
            var $it0 = this.xml.elementsNamed("recipe");
            while ($it0.hasNext()) {
                var e = $it0.next();
                ar.push(com_davidmaletz_mining_item_Recipe.getByType(e.get("type")));
            }
            return new com_fancyfish_faeng_common_CompoundIterator(HxOverrides.iter(ar));
        },
        create: function(tile_x, tile_y) {
            if (this.type == null) return new com_davidmaletz_mining_structure_Structure(this, tile_x, tile_y);
            else return Type.createInstance(this.type, [this, tile_x, tile_y]);
        },
        build: function(area, tile_x, tile_y) {
            area.addStructure(this, tile_x, tile_y);
        },
        load: function(b, version, tile_x, tile_y, addStructure, parent) {
            var s = this.create(tile_x, tile_y);
            if (b != null) s.read(b, version, parent);
            addStructure(s);
        },
        render: function(neighbors, layer, x, y, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            layer.addTile(this.bitmap, x, y, this.bitmap.getIdx(offX, offY + this.y), null, null, null, null, null);
        },
        getTileWidth: function(offX, offY) {
            return this.width;
        },
        getTileHeight: function(offX, offY) {
            return this.height;
        },
        getAnim: function(id) {
            var base;
            if (this.xml.exists("animation")) base = this.xml.get("animation") + ".";
            else base = this.id + ".";
            if (this.xml.exists(id + "_anim")) return this.xml.get(id + "_anim");
            else return base + id;
        },
        __class__: com_davidmaletz_mining_structure_StructureInfo
    };
    var com_davidmaletz_mining_structure_WyrmPen = function(info, x, y) {
        com_davidmaletz_mining_structure_Pen.call(this, info, x, y);
        this.wyrms = [];
        var _g = 0;
        while (_g < 2) {
            var i = _g++;
            var w = new com_davidmaletz_mining_structure_Wyrm(this);
            this.wyrms.push(w);
            var i1;
            if (w.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("wyrm");
                return $r;
            } (this))) {
                if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                i1 = com_davidmaletz_mining_item_FarmInfo.info.get("dragonblood");
            } else i1 = null;
            if (i1 != null) {
                w.farmItem = new com_davidmaletz_mining_item_FarmItem(i1);
                this.items.push(w.farmItem);
            }
        }
    };
    $hxClasses["com.davidmaletz.mining.structure.WyrmPen"] = com_davidmaletz_mining_structure_WyrmPen;
    com_davidmaletz_mining_structure_WyrmPen.__name__ = ["com", "davidmaletz", "mining", "structure", "WyrmPen"];
    com_davidmaletz_mining_structure_WyrmPen.__super__ = com_davidmaletz_mining_structure_Pen;
    com_davidmaletz_mining_structure_WyrmPen.prototype = $extend(com_davidmaletz_mining_structure_Pen.prototype, {
        handleTick: function() {
            com_davidmaletz_mining_structure_Pen.prototype.handleTick.call(this);
            var _g = 0;
            var _g1 = this.wyrms;
            while (_g < _g1.length) {
                var w = _g1[_g]; ++_g;
                w.handleTick();
            }
        },
        createRenderer: function() {
            var s = new openfl_display_Sprite();
            var pen = new com_davidmaletz_mining_structure_FarmUpgradeRenderer(this);
            var h = this.info.height - 2;
            var p = this.wyrms[0].getRenderer();
            p.set_x(12);
            p.set_y(h - 3);
            s.addChild(p);
            var p1 = this.wyrms[1].getRenderer();
            p1.set_x(30);
            p1.set_y(h - 3);
            s.addChild(p1);
            s.addChild(pen);
            return s;
        },
        getWyrm: function(i) {
            return this.wyrms[i];
        },
        onOperate: function(p) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_PenWindow(p, this, c), 1);
        },
        write: function(b) {
            com_davidmaletz_mining_structure_Pen.prototype.write.call(this, b);
            var _g = 0;
            var _g1 = this.wyrms;
            while (_g < _g1.length) {
                var w = _g1[_g]; ++_g;
                w.write(b);
            }
        },
        read: function(b, version, parent) {
            com_davidmaletz_mining_structure_Pen.prototype.read.call(this, b, version, parent);
            var i = 0;
            var _g = 0;
            var _g1 = this.wyrms;
            while (_g < _g1.length) {
                var w = _g1[_g]; ++_g;
                if (version >= 17) w.read(b, version);
                if ((w.item == (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get("wyrm");
                    return $r;
                } (this)) ? (function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                    $r = com_davidmaletz_mining_item_FarmInfo.info.get("dragonblood");
                    return $r;
                } (this)) : null) != null && i < this.items.length) w.farmItem = this.items[i++];
                else if (version >= 17) w.farmItem = null;
                else this.items.push(w.farmItem);
            }
        },
        update: function(w) {
            if (w.farmItem != null) {
                if (HxOverrides.remove(this.items, w.farmItem)) this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("rem_item", w.farmItem));
                w.farmItem = null;
            }
            var item;
            if (w.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("wyrm");
                return $r;
            } (this))) {
                if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                item = com_davidmaletz_mining_item_FarmInfo.info.get("dragonblood");
            } else item = null;
            if (item != null) {
                w.farmItem = new com_davidmaletz_mining_item_FarmItem(item);
                if (this.wyrms[0] == w) this.items.splice(0, 0, w.farmItem);
                else this.items.push(w.farmItem);
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_item", w.farmItem));
            }
        },
        getAnimals: function() {
            return HxOverrides.iter(this.wyrms);
        },
        canHouse: function(animal) {
            return animal.id == "wyrm" || animal.id == "cocoon" || animal.id == "dragon";
        },
        canFeed: function(animal, food) {
            return (animal.id == "wyrm" || animal.id == "dragon") && food.id == "steak";
        },
        __class__: com_davidmaletz_mining_structure_WyrmPen
    });
    var com_davidmaletz_mining_structure_Wyrm = function(pen) {
        com_davidmaletz_mining_item_Animal.call(this);
        this.pen = pen;
        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
        this.item = com_davidmaletz_mining_item_Item.items.get("wyrm");
    };
    $hxClasses["com.davidmaletz.mining.structure.Wyrm"] = com_davidmaletz_mining_structure_Wyrm;
    com_davidmaletz_mining_structure_Wyrm.__name__ = ["com", "davidmaletz", "mining", "structure", "Wyrm"];
    com_davidmaletz_mining_structure_Wyrm.__super__ = com_davidmaletz_mining_item_Animal;
    com_davidmaletz_mining_structure_Wyrm.prototype = $extend(com_davidmaletz_mining_item_Animal.prototype, {
        getFarmInfo: function() {
            if (this.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("wyrm");
                return $r;
            } (this))) {
                if (com_davidmaletz_mining_item_FarmInfo.info == null) com_davidmaletz_mining_item_FarmInfo.loadInfo();
                return com_davidmaletz_mining_item_FarmInfo.info.get("dragonblood");
            } else return null;
        },
        updateRenderer: function() {
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this.renderer);
            if (this.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("dragon");
                return $r;
            } (this))) {
                var p = new com_davidmaletz_tiles_render_PlayAnimation((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("dragon");
                    return $r;
                } (this)), "dragon.fire", 12, true, null, -0.75);
                p.set_y( - this.pen.info.height - 3);
                if (this.pen.wyrms[0] != this) p.set_scaleX( - 1);
                this.renderer.addChild(p);
            } else {
                var item = this.item;
                if (item != null) this.renderer.addChild(new com_davidmaletz_mining_structure_AnimalRenderer(item.tile, item.animation, item.id != "cocoon"));
            }
        },
        feed: function(i, ct) {
            if (this.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("wyrm");
                return $r;
            } (this)) && i == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("steak");
                return $r;
            } (this))) {
                var p = this.percent + 2500 * ct;
                if (p >= 10000) this.setItem((function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get("cocoon");
                    return $r;
                } (this)));
                else if (p != this.percent) {
                    this.percent = p;
                    this.dispatchEvent(new openfl_events_Event("update_percent"));
                }
            }
        },
        handleTick: function() {
            if (this.item == (function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("cocoon");
                return $r;
            } (this))) {
                if (this.percent >= 10000) {
                    this.setItem((function($this) {
                        var $r;
                        if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                        $r = com_davidmaletz_mining_item_Item.items.get("dragon");
                        return $r;
                    } (this)));
                    com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement("dragon");
                } else this.setPercent(this.percent + 2);
            }
        },
        getRenderer: function() {
            if (this.renderer == null) {
                this.renderer = new openfl_display_Sprite();
                this.updateRenderer();
            }
            return this.renderer;
        },
        updateItem: function() {
            com_davidmaletz_mining_item_Animal.prototype.updateItem.call(this);
            this.pen.update(this);
            if (this.renderer != null) this.updateRenderer();
        },
        __class__: com_davidmaletz_mining_structure_Wyrm
    });
    var com_davidmaletz_mining_ui_AcceptQuest = function(c, p, q, onAccept, onClose) {
        com_davidmaletz_controls_ClickableWindow.call(this, c, com_davidmaletz_mining_Main.window_factory.create(114, 112 + com_davidmaletz_faengfl_Application.button_factory.defaultHeight()));
        this.player = p;
        this.quest = q;
        this.onClose = onClose;
        this.onAccept = onAccept;
        var q1 = new com_davidmaletz_mining_ui_QuestInfo(this.player);
        q1.set_x(4);
        q1.set_y(4);
        q1.setQuest(this.quest, 106, com_fancyfish_faeng_common_Lang.getText("quests", "new"), 5570560);
        this.addChild(q1);
        var y = 108;
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(4, y, com_fancyfish_faeng_common_Lang.getText("common", "accept"), $bind(this, this.accept)));
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(70, y, com_fancyfish_faeng_common_Lang.getText("common", "reject"), $bind(this, this.close)));
    };
    $hxClasses["com.davidmaletz.mining.ui.AcceptQuest"] = com_davidmaletz_mining_ui_AcceptQuest;
    com_davidmaletz_mining_ui_AcceptQuest.__name__ = ["com", "davidmaletz", "mining", "ui", "AcceptQuest"];
    com_davidmaletz_mining_ui_AcceptQuest.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_AcceptQuest.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        accept: function() {
            this.player.addQuest(this.quest);
            if (this.onAccept != null) this.onAccept();
            this.close();
        },
        __class__: com_davidmaletz_mining_ui_AcceptQuest
    });
    var com_davidmaletz_mining_ui_Achievement = function(id) {
        com_davidmaletz_lerp_LerpSprite.call(this);
        var b = openfl_Assets.getBitmapData("data/ui/achievement_bg.png");
        this.get_graphics().beginBitmapFill(b);
        this.get_graphics().drawRect(0, 0, 180, b.height);
        this.get_graphics().endFill();
        com_davidmaletz_mining_ui_Achievement.addDetails(id, this, 4, 4, 16777215, new com_davidmaletz_mining_ui__$Achievement_AchievementIcon(id));
        this.set_scaleX(0.5);
        this.set_scaleY(0.5);
        this.set_alpha(0);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 20, $bind(this, this.hold)); (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).fullRes.addDisplay(this, 0);
    };
    $hxClasses["com.davidmaletz.mining.ui.Achievement"] = com_davidmaletz_mining_ui_Achievement;
    com_davidmaletz_mining_ui_Achievement.__name__ = ["com", "davidmaletz", "mining", "ui", "Achievement"];
    com_davidmaletz_mining_ui_Achievement.createIcon = function(id, gold) {
        return com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("achievement." + id), gold ? 4 : 0);
    };
    com_davidmaletz_mining_ui_Achievement.addDetails = function(id, s, x, y, col, icon) {
        icon.set_x(x);
        icon.set_y(y);
        s.addChild(icon);
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("achievement.names", id), new com_fancyfish_faeng_text_CharacterPlacer(0), col, 2);
        t.set_x(x + 4 + 34);
        t.set_y(y);
        s.addChild(t);
        var t1 = new com_davidmaletz_mining_ui_MyFormattedText(0, false);
        t1.default_color = col;
        t1.setText(com_fancyfish_faeng_common_Lang.getText("achievement.descriptions", id).get());
        t1.set_x(x + 4 + 34);
        t1.set_y(y + 18);
        s.addChild(t1);
    };
    com_davidmaletz_mining_ui_Achievement.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_ui_Achievement.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        hold: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 120, $bind(this, this.fade_out));
        },
        fade_out: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 20, (function(f, d) {
                return function() {
                    f(d);
                };
            })(com_davidmaletz_faengfl_FaengFL.remove, this));
        },
        __class__: com_davidmaletz_mining_ui_Achievement
    });
    var com_davidmaletz_mining_ui__$Achievement_AchievementIcon = function(id) {
        openfl_display_Sprite.call(this);
        this.normal = com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("achievement." + id), 0);
        this.addChild(this.normal);
        this.gold = com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("achievement." + id), 4);
        this.gold.set_visible(false);
        this.addChild(this.gold);
        this.flash = new com_davidmaletz_tiles_render_StaticPlayAnimation((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("achievement_flash");
            return $r;
        } (this)), "single", 10, false);
        this.flash.set_alpha(0);
        this.flash.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 30, $bind(this, this.fade_out));
        this.addChild(this.flash);
    };
    $hxClasses["com.davidmaletz.mining.ui._Achievement.AchievementIcon"] = com_davidmaletz_mining_ui__$Achievement_AchievementIcon;
    com_davidmaletz_mining_ui__$Achievement_AchievementIcon.__name__ = ["com", "davidmaletz", "mining", "ui", "_Achievement", "AchievementIcon"];
    com_davidmaletz_mining_ui__$Achievement_AchievementIcon.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui__$Achievement_AchievementIcon.prototype = $extend(openfl_display_Sprite.prototype, {
        fade_out: function() {
            this.normal.set_visible(false);
            this.gold.set_visible(true);
            this.flash.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 30, $bind(this, this.anim));
        },
        anim: function() {
            this.flash.set_alpha(1);
            this.flash.playAnimation("achievement_flash", false, null, null, null);
        },
        __class__: com_davidmaletz_mining_ui__$Achievement_AchievementIcon
    });
    var com_davidmaletz_mining_ui_AchievementInfo = function() {
        openfl_display_Sprite.call(this);
        this.set_visible(false);
        this.achievement = null;
    };
    $hxClasses["com.davidmaletz.mining.ui.AchievementInfo"] = com_davidmaletz_mining_ui_AchievementInfo;
    com_davidmaletz_mining_ui_AchievementInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "AchievementInfo"];
    com_davidmaletz_mining_ui_AchievementInfo.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_AchievementInfo.prototype = $extend(openfl_display_Sprite.prototype, {
        setAchievement: function(a) {
            if (this.achievement == a) return;
            this.achievement = a;
            if (this.achievement == null) this.set_visible(false);
            else {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
                this.set_visible(true);
                var s = new openfl_display_Sprite();
                com_davidmaletz_mining_ui_Achievement.addDetails(this.achievement, s, 4, 4, 0, com_davidmaletz_mining_ui_Achievement.createIcon(this.achievement, com_davidmaletz_faengfl_achievement_Achievements.instance.map.exists(this.achievement)));
                s.set_scaleX(s.set_scaleY(0.5));
                this.addChild(s);
                this.addChildAt(com_davidmaletz_mining_Main.window_factory.create(90, 20).create(0, 0), 0);
            }
        },
        getAchievement: function() {
            return this.achievement;
        },
        getWidth: function() {
            return 90;
        },
        getHeight: function() {
            return 20;
        },
        __class__: com_davidmaletz_mining_ui_AchievementInfo
    });
    var com_davidmaletz_mining_ui_AchievementRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.AchievementRenderer"] = com_davidmaletz_mining_ui_AchievementRenderer;
    com_davidmaletz_mining_ui_AchievementRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "AchievementRenderer"];
    com_davidmaletz_mining_ui_AchievementRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_AchievementRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 20;
        },
        getHeight: function(item) {
            return 20;
        },
        __class__: com_davidmaletz_mining_ui_AchievementRenderer
    };
    var com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton = function(handler, i, x, y) {
        var w = 20;
        var h = 20;
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(w, h), com_davidmaletz_mining_Main.label_factory.createHover(w, h), null);
        this.handler = handler;
        this.achievement = i;
        var t = com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("achievement." + i));
        t.set_x(2);
        t.set_y(2);
        t.set_scaleX(t.set_scaleY(0.5));
        this.addChild(t);
        this.disabled = t;
        var t1 = com_davidmaletz_mining_item_Item._createIcon(com_davidmaletz_tiles_Tile.get("achievement." + i), 4);
        t1.set_x(2);
        t1.set_y(2);
        t1.set_scaleX(t1.set_scaleY(0.5));
        this.addChild(t1);
        this.enabled = t1;
        this.enabled.set_visible(com_davidmaletz_faengfl_achievement_Achievements.instance.map.exists(this.achievement));
        this.disabled.set_visible(!this.enabled.get_visible());
        com_davidmaletz_faengfl_achievement_Achievements.instance.addEventListener("gain_achievement", $bind(this, this.updateEnabled));
    };
    $hxClasses["com.davidmaletz.mining.ui._AchievementRenderer.AchievementButton"] = com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton;
    com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_AchievementRenderer", "AchievementButton"];
    com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.achievement);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.achievement: null);
        },
        updateEnabled: function(e) {
            if (e.value == this.achievement) {
                this.enabled.set_visible(com_davidmaletz_faengfl_achievement_Achievements.instance.map.exists(this.achievement));
                this.disabled.set_visible(!this.enabled.get_visible());
            }
        },
        __class__: com_davidmaletz_mining_ui__$AchievementRenderer_AchievementButton
    });
    var com_davidmaletz_mining_ui_ItemHandler = function() {};
    $hxClasses["com.davidmaletz.mining.ui.ItemHandler"] = com_davidmaletz_mining_ui_ItemHandler;
    com_davidmaletz_mining_ui_ItemHandler.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemHandler"];
    com_davidmaletz_mining_ui_ItemHandler.prototype = {
        __class__: com_davidmaletz_mining_ui_ItemHandler
    };
    var com_davidmaletz_mining_ui_AchievementWindow = function(c) {
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_AchievementRenderer(this), 5, 5, 0.3);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("options", "achievements"), this.getWidth());
        var $it0 = com_davidmaletz_mining_MyAchievements.getAchievements();
        while ($it0.hasNext()) {
            var a = $it0.next();
            this.addItem(a);
        }
        this.details = new com_davidmaletz_mining_ui_AchievementInfo();
        this.details.set_x(this.getWidth() + 3);
        this.addChild(this.details);
    };
    $hxClasses["com.davidmaletz.mining.ui.AchievementWindow"] = com_davidmaletz_mining_ui_AchievementWindow;
    com_davidmaletz_mining_ui_AchievementWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "AchievementWindow"];
    com_davidmaletz_mining_ui_AchievementWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_AchievementWindow.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_AchievementWindow.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        onSelect: function(item) {},
        onHover: function(item) {
            this.details.setAchievement(item);
            this.details.set_y(Math.floor((this.getHeight() - 20) * 0.5));
        },
        isEnabled: function(item) {
            return com_davidmaletz_faengfl_achievement_Achievements.instance.map.exists(item);
        },
        __class__: com_davidmaletz_mining_ui_AchievementWindow
    });
    var com_davidmaletz_mining_ui_AnimalInfo = function() {
        openfl_display_Sprite.call(this);
        this.set_visible(false);
        this._height = 0;
        this.item = null;
    };
    $hxClasses["com.davidmaletz.mining.ui.AnimalInfo"] = com_davidmaletz_mining_ui_AnimalInfo;
    com_davidmaletz_mining_ui_AnimalInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "AnimalInfo"];
    com_davidmaletz_mining_ui_AnimalInfo.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_AnimalInfo.prototype = $extend(openfl_display_Sprite.prototype, {
        setItem: function(animal, additional) {
            var item;
            if (animal == null) item = null;
            else item = animal.item;
            if (this.item == item) return;
            this.item = item;
            if (item == null) this.set_visible(false);
            else {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
                this.set_visible(true);
                var y = item.addInfo(this, 76, 3);
                if (additional != null) y = additional(this, 76, y);
                this._height = y + 3;
                this.addChildAt(com_davidmaletz_mining_Main.window_factory.create(76, this._height).create(0, 0), 0);
            }
        },
        getWidth: function() {
            return 76;
        },
        getHeight: function() {
            return this._height;
        },
        __class__: com_davidmaletz_mining_ui_AnimalInfo
    });
    var com_davidmaletz_mining_ui_AnimalItemRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.AnimalItemRenderer"] = com_davidmaletz_mining_ui_AnimalItemRenderer;
    com_davidmaletz_mining_ui_AnimalItemRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "AnimalItemRenderer"];
    com_davidmaletz_mining_ui_AnimalItemRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_AnimalItemRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 80;
        },
        getHeight: function(item) {
            return 13;
        },
        __class__: com_davidmaletz_mining_ui_AnimalItemRenderer
    };
    var com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton = function(handler, a, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(80, 13), com_davidmaletz_mining_Main.label_factory.createHover(80, 13), null);
        this.handler = handler;
        var item = a.item;
        var m;
        this.text = new openfl_display_Sprite();
        this.animal = a;
        if (item != null) {
            this.icon = item.createIcon();
            this.icon.set_x(2);
            this.icon.set_y(0);
            this.text.addChild(this.icon);
            m = com_fancyfish_faeng_common_Lang.getText("item.names", item.id);
        } else m = com_fancyfish_faeng_common_Lang.getText("common", "empty");
        var t = new com_davidmaletz_faengfl_TextSprite(m, new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(4 + com_davidmaletz_tiles_Tile.SIZE);
        this.text.addChild(t);
        this._text = t;
        this.addChild(this.text);
        var p = a.percent / 10000;
        this.progress = new com_davidmaletz_controls_ProgressBar(80, 2, 16776960, p, false);
        if (p == 1 || p == 0) this.progress.set_visible(false);
        this.progress.set_y(11);
        this.addChild(this.progress);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui._AnimalItemRenderer.ListButton"] = com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_AnimalItemRenderer", "ListButton"];
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        init: function(e) {
            this.destroy(e);
            this.animal.addEventListener("update_percent", $bind(this, this.update));
            this.animal.addEventListener("update_item", $bind(this, this.updateItem));
            this.setEnabled(this.handler.isEnabled(this.animal));
        },
        destroy: function(e) {
            this.animal.removeEventListener("update_percent", $bind(this, this.update));
            this.animal.removeEventListener("update_item", $bind(this, this.updateItem));
        },
        onClick: function() {
            this.handler.onSelect(this.animal);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.animal: null);
        },
        setEnabled: function(e) {
            this.text.set_alpha(e ? 1 : 0.5);
        },
        update: function(e) {
            var p = this.animal.percent / 10000;
            if (p == 1 || p == 0) this.progress.set_visible(false);
            else {
                this.progress.set_visible(true);
                this.progress.setProgress(p);
            }
            this.setEnabled(this.handler.isEnabled(this.animal));
        },
        updateItem: function(e) {
            var item = this.animal.item;
            var m;
            if (this.icon != null) {
                this.icon.parent.removeChild(this.icon);
                this.icon = null;
            }
            if (item != null) {
                this.icon = item.createIcon();
                this.icon.set_x(2);
                this.icon.set_y(0);
                this.text.addChildAt(this.icon, 0);
                m = com_fancyfish_faeng_common_Lang.getText("item.names", item.id);
            } else m = com_fancyfish_faeng_common_Lang.getText("common", "empty");
            this._text.setText(m);
            this.setEnabled(this.handler.isEnabled(this.animal));
        },
        __class__: com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton
    });
    var com_davidmaletz_mining_ui_AnimalList = function(player, pen, showAnimalDetails, c) {
        com_davidmaletz_controls_scroll_ScrollList.call(this, c, new com_davidmaletz_mining_ui_AnimalItemRenderer(this), 8, 1);
        this.showAnimalDetails = showAnimalDetails;
        this.player = player;
        this.pen = pen;
        var $it0 = pen.getAnimals();
        while ($it0.hasNext()) {
            var a = $it0.next();
            this.addItem(a);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.AnimalList"] = com_davidmaletz_mining_ui_AnimalList;
    com_davidmaletz_mining_ui_AnimalList.__name__ = ["com", "davidmaletz", "mining", "ui", "AnimalList"];
    com_davidmaletz_mining_ui_AnimalList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_AnimalList.__super__ = com_davidmaletz_controls_scroll_ScrollList;
    com_davidmaletz_mining_ui_AnimalList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollList.prototype, {
        onSelect: function(item) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            if (item.item == null) c.addDisplay(new com_davidmaletz_mining_ui_ItemList(c, this.player.inventory, com_fancyfish_faeng_common_Lang.getText("common", "add_animal"), ($_ = this.pen, $bind($_, $_.canHouse)), (function(f, a1) {
                return function(a2) {
                    f(a1, a2);
                };
            })($bind(this, this.setAnimal), item)), 1);
            else c.addDisplay(new com_davidmaletz_mining_ui_Choice(c, "actions", ["feed", "collect"], [(function(f1, a11) {
                return function() {
                    f1(a11);
                };
            })($bind(this, this.feed), item), (function(f2, a12) {
                return function() {
                    f2(a12);
                };
            })($bind(this, this.collect), item)], 40), 1);
        },
        feed: function(item) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_ItemList(c, this.player.inventory, com_fancyfish_faeng_common_Lang.getText("common", "select_feed"), (function(f, a1) {
                return function(a2) {
                    return f(a1, a2);
                };
            })(($_ = this.pen, $bind($_, $_.canFeed)), item.item), (function(f1, a11) {
                return function(a21) {
                    f1(a11, a21);
                };
            })($bind(this, this.feedCount), item)), 1);
        },
        collect: function(item) {
            var i = item.item;
            if (i != null) {
                this.setItem(item, null);
                this.player.addItem(i, null);
            }
        },
        feedCount: function(animal, item) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_ItemCountPrompt(c, item, com_fancyfish_faeng_common_Lang.getText("common", "feed_count"), 0, (function(f, a1, a2) {
                return function(ct) {
                    f(a1, a2, ct);
                };
            })($bind(this, this.onFeed), animal, item)), 1);
        },
        onFeed: function(animal, item, ct) {
            if (ct != 0) {
                item.inventory.addItem(item.item, -ct);
                animal.feed(item.item, ct);
                com_davidmaletz_faengfl_SoundManager.playSFX("eat");
            }
        },
        setAnimal: function(animal, item) {
            if (item.inventory.addItem(item.item, -1)) this.setItem(animal, item.item);
        },
        setItem: function(animal, item) {
            if (item != animal.item) {
                animal.item = item;
                animal.updateItem();
                animal.dispatchEvent(new openfl_events_Event("update_item"));
            }
            this.showAnimalDetails(animal);
        },
        onHover: function(item) {
            this.showAnimalDetails(item);
        },
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_AnimalList
    });
    var com_davidmaletz_mining_ui_CountPrompt = function(c, msg, func, min, max, value, top, mid) {
        if (mid == null) mid = 0;
        if (top == null) top = 0;
        var y = top + 4;
        var text = new com_davidmaletz_faengfl_TextSprite(msg, new com_fancyfish_faeng_text_WrapCharacterPlacer(92, 1), 0, 1);
        text.draw();
        text.set_x(4);
        text.set_y(y);
        y += Math.round(text.bounds.height * text.get_scaleY()) + 4;
        var s = new com_davidmaletz_controls_Spinner(c, min, max, value);
        s.set_x(29.);
        s.set_y(y);
        s.addEventListener("action", $bind(this, this.action));
        y += 16;
        com_davidmaletz_controls_ClickableWindow.call(this, c, com_davidmaletz_mining_Main.window_factory.create(100, y + mid + com_davidmaletz_faengfl_Application.button_factory.defaultHeight() + 4));
        this.addChild(text);
        this.addChild(s);
        this.spinner = s;
        this.afterSpinner(y);
        y += mid;
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(4, y, com_fancyfish_faeng_common_Lang.getText("common", "ok"), $bind(this, this.confirm)));
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(56, y, com_fancyfish_faeng_common_Lang.getText("common", "cancel"), $bind(this, this.close)));
        this.onComplete = func;
    };
    $hxClasses["com.davidmaletz.mining.ui.CountPrompt"] = com_davidmaletz_mining_ui_CountPrompt;
    com_davidmaletz_mining_ui_CountPrompt.__name__ = ["com", "davidmaletz", "mining", "ui", "CountPrompt"];
    com_davidmaletz_mining_ui_CountPrompt.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_CountPrompt.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        init: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
            openfl_Lib.current.stage.addEventListener("keyDown", $bind(this, this.key_down));
        },
        destroy: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
            openfl_Lib.current.stage.removeEventListener("keyDown", $bind(this, this.key_down));
        },
        key_down: function(e) {
            if (! (this.spinner.field == com_davidmaletz_faengfl_Application.focus) && e.keyCode >= 48 && e.keyCode < 58) this.spinner.setFocused(e);
        },
        afterSpinner: function(y) {},
        confirm: function() {
            if (! (this.tracks != null)) {
                this.onComplete(this.spinner.value);
                this.close();
            }
        },
        action: function(e) {
            this.confirm();
        },
        __class__: com_davidmaletz_mining_ui_CountPrompt
    });
    var com_davidmaletz_mining_ui_BuyPrompt = function(c, coins, item, func) {
        this.costPerItem = item.item.cost;
        com_davidmaletz_mining_ui_CountPrompt.call(this, c, com_fancyfish_faeng_common_Lang.getText("common", "buy_item"), func, 0, com_fancyfish_faeng_common_Utils.min(item.count, Math.floor(coins / this.costPerItem)), 0, 12, 14);
        com_davidmaletz_mining_ui_ItemRenderer.addItemCentered(this, item.item, 50, 4);
        this.spinner.addEventListener("change_value", $bind(this, this.updateCost));
    };
    $hxClasses["com.davidmaletz.mining.ui.BuyPrompt"] = com_davidmaletz_mining_ui_BuyPrompt;
    com_davidmaletz_mining_ui_BuyPrompt.__name__ = ["com", "davidmaletz", "mining", "ui", "BuyPrompt"];
    com_davidmaletz_mining_ui_BuyPrompt.__super__ = com_davidmaletz_mining_ui_CountPrompt;
    com_davidmaletz_mining_ui_BuyPrompt.prototype = $extend(com_davidmaletz_mining_ui_CountPrompt.prototype, {
        updateCost: function(e) {
            this.cost.set(Std.string(this.spinner.value * this.costPerItem));
        },
        afterSpinner: function(y) {
            this.cost = new com_fancyfish_faeng_common_mutable_Mutable();
            this.cost.set("0");
            var x = (100 - com_davidmaletz_tiles_Tile.SIZE * 2) * 0.5;
            var icon = ((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
                return $r;
            } (this))).createIcon();
            icon.set_x(x);
            icon.set_y(y);
            this.addChild(icon);
            var t = new com_davidmaletz_faengfl_TextSprite(this.cost, new com_fancyfish_faeng_text_CharacterPlacer(com_davidmaletz_tiles_Tile.SIZE * 2, 1), 0, 1);
            t.set_x(com_davidmaletz_tiles_Tile.SIZE + x + 2);
            t.set_y(y);
            this.addChild(t);
        },
        __class__: com_davidmaletz_mining_ui_BuyPrompt
    });
    var com_davidmaletz_mining_ui_Choice = function(c, section, options, functions, w, darken, closeButton, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        if (closeButton == null) closeButton = true;
        if (darken == null) darken = true;
        if (w == null) w = 80;
        var len = options.length;
        com_davidmaletz_controls_ListWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_StringRenderer(section, this, w), len, 1, darken, true, closeButton, halign, valign);
        this.functionMap = new haxe_ds_StringMap();
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var o = options[i];
            this.addItem(o);
            this.functionMap.set(o, functions[i]);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.Choice"] = com_davidmaletz_mining_ui_Choice;
    com_davidmaletz_mining_ui_Choice.__name__ = ["com", "davidmaletz", "mining", "ui", "Choice"];
    com_davidmaletz_mining_ui_Choice.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_Choice.__super__ = com_davidmaletz_controls_ListWindow;
    com_davidmaletz_mining_ui_Choice.prototype = $extend(com_davidmaletz_controls_ListWindow.prototype, {
        onSelect: function(item) {
            if (! (this.tracks != null && this.tracks.hasTrack(com_davidmaletz_lerp_PositionKeyframe))) {
                var m = this.functionMap.get(item);
                if (m != null) {
                    m();
                    this.close();
                }
            }
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_Choice
    });
    var com_davidmaletz_mining_ui_Coins = function(p, c) {
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.player = p;
        this.coins = new com_fancyfish_faeng_common_mutable_Mutable();
        this.coins.set("");
        this.addChild(((function($this) {
            var $r;
            if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
            $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
            return $r;
        } (this))).createIcon());
        var t = new com_davidmaletz_faengfl_TextSprite(this.coins, new com_fancyfish_faeng_text_CharacterPlacer(25, 2), 16777215, 1);
        this.set_visible(false);
        t.set_x(com_davidmaletz_tiles_Tile.SIZE + 2);
        this.addChild(t);
        this.set_x(2);
        this.set_y(2);
    };
    $hxClasses["com.davidmaletz.mining.ui.Coins"] = com_davidmaletz_mining_ui_Coins;
    com_davidmaletz_mining_ui_Coins.__name__ = ["com", "davidmaletz", "mining", "ui", "Coins"];
    com_davidmaletz_mining_ui_Coins.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_ui_Coins.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            this.player.addEventListener("change_coins", $bind(this, this.change_coins));
            this.player.inventory.addEventListener("item_added", $bind(this, this.change_visible));
            this.change_visible(null);
            this.change_coins(null);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            this.player.removeEventListener("change_coins", $bind(this, this.change_coins));
            this.player.inventory.removeEventListener("item_added", $bind(this, this.change_visible));
        },
        change_coins: function(e) {
            this.coins.set(Std.string(this.player.coins));
        },
        change_visible: function(e) {
            var v = this.player.inventory.getItemCount((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
                return $r;
            } (this))) > 0;
            if (v != this.get_visible()) {
                this.set_visible(v);
                if (v) {
                    this.set_alpha(0);
                    this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
                }
            }
        },
        __class__: com_davidmaletz_mining_ui_Coins
    });
    var com_davidmaletz_mining_ui_ContinueList = function(c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_SaveRenderer(this), 5, 1, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "continue"), this.getWidth());
        var _g = 0;
        while (_g < 10) {
            var i = _g++;
            this.addItem(i);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.ContinueList"] = com_davidmaletz_mining_ui_ContinueList;
    com_davidmaletz_mining_ui_ContinueList.__name__ = ["com", "davidmaletz", "mining", "ui", "ContinueList"];
    com_davidmaletz_mining_ui_ContinueList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_ContinueList.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_ContinueList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        onSelect: function(slot) {
            new com_davidmaletz_mining_ui_transition_FadeOut((function(f, a1) {
                return function() {
                    return f(a1);
                };
            })(com_davidmaletz_mining_Main.loadSave, "slot" + slot), 60, true);
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_ContinueList
    });
    var com_davidmaletz_mining_ui_ControlRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.ControlRenderer"] = com_davidmaletz_mining_ui_ControlRenderer;
    com_davidmaletz_mining_ui_ControlRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "ControlRenderer"];
    com_davidmaletz_mining_ui_ControlRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_ControlRenderer.prototype = {
        create: function(item, x, y) {
            if (item == null) return null;
            else if (js_Boot.__instanceof(item, com_fancyfish_faeng_common_Pair)) {
                var p;
                p = js_Boot.__cast(item, com_fancyfish_faeng_common_Pair);
                var b = new com_davidmaletz_mining_ui_StringButton(this.handler, p.first, p.second, x, y, 62, 16);
                b.str += ".action";
                return b;
            } else {
                var key = Std.string(item);
                if (key == "device") return new com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton(this.handler, x, y);
                else return new com_davidmaletz_mining_ui__$ControlRenderer_KeyButton(this.handler, key, x, y);
            }
        },
        update: function(s, item) {},
        getWidth: function() {
            return 62;
        },
        getHeight: function(item) {
            if (item == null || js_Boot.__instanceof(item, com_fancyfish_faeng_common_Pair)) return 16;
            else return 32;
        },
        __class__: com_davidmaletz_mining_ui_ControlRenderer
    };
    var com_davidmaletz_mining_ui_StringButton = function(handler, section, i, x, y, w, h, align, tw) {
        if (tw == null) tw = -1;
        if (align == null) align = 1;
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(w, h), com_davidmaletz_mining_Main.label_factory.createHover(w, h), null);
        this.handler = handler;
        this.str = i;
        if (tw < 0) tw = w;
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText(section, this.str), new com_fancyfish_faeng_text_CharacterPlacer(tw, align), 0, 1);
        t.set_y(Math.round((h - 10) * 0.5));
        this.addChild(t);
    };
    $hxClasses["com.davidmaletz.mining.ui.StringButton"] = com_davidmaletz_mining_ui_StringButton;
    com_davidmaletz_mining_ui_StringButton.__name__ = ["com", "davidmaletz", "mining", "ui", "StringButton"];
    com_davidmaletz_mining_ui_StringButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_StringButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.str);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.str: null);
        },
        __class__: com_davidmaletz_mining_ui_StringButton
    });
    var com_davidmaletz_mining_ui__$ControlRenderer_KeyButton = function(handler, key, x, y) {
        com_davidmaletz_mining_ui_StringButton.call(this, handler, "controls", key, x, y, 62, 32, 2, 34);
        this.key = new com_davidmaletz_controls_KeyRenderer(key, 48, 16, handler.controls);
        this.last = handler.controls.key_map.getKey(key);
        this.addChild(this.key);
        this.controls = handler;
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui._ControlRenderer.KeyButton"] = com_davidmaletz_mining_ui__$ControlRenderer_KeyButton;
    com_davidmaletz_mining_ui__$ControlRenderer_KeyButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_ControlRenderer", "KeyButton"];
    com_davidmaletz_mining_ui__$ControlRenderer_KeyButton.__super__ = com_davidmaletz_mining_ui_StringButton;
    com_davidmaletz_mining_ui__$ControlRenderer_KeyButton.prototype = $extend(com_davidmaletz_mining_ui_StringButton.prototype, {
        init: function(e) {
            this.destroy(e);
            this.controls.addEventListener("key_changed", $bind(this, this.keyChanged));
        },
        destroy: function(e) {
            this.controls.removeEventListener("key_changed", $bind(this, this.keyChanged));
        },
        keyChanged: function(e) {
            if (e.key != this.str) {
                var k = this.controls.controls.key_map.getKey(this.str);
                if (k != this.last) {
                    this.last = k;
                    this.key.drawKey(this.last);
                }
                return;
            }
            this.last = e.value;
            if (e.value == null) this.key.set_visible(false);
            else {
                this.key.drawKey(e.value);
                this.key.set_visible(true);
            }
        },
        __class__: com_davidmaletz_mining_ui__$ControlRenderer_KeyButton
    });
    var com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton = function(handler, x, y) {
        com_davidmaletz_mining_ui_StringButton.call(this, handler, "controls", "device", x, y, 62, 32);
        var tw = 62;
        this.getChildAt(this.get_numChildren() - 1).set_y(4);
        var t = new com_davidmaletz_faengfl_TextSprite(com_davidmaletz_faengfl_controls_ControlHandler.getDeviceNames()[handler.device], new com_fancyfish_faeng_text_CharacterPlacer(tw, 1), 0, 1);
        t.set_y(18);
        this.addChild(t);
        this.text = t;
        this.controls = handler;
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui._ControlRenderer.DeviceButton"] = com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton;
    com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_ControlRenderer", "DeviceButton"];
    com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton.__super__ = com_davidmaletz_mining_ui_StringButton;
    com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton.prototype = $extend(com_davidmaletz_mining_ui_StringButton.prototype, {
        init: function(e) {
            this.destroy(e);
            this.controls.addEventListener("key_changed", $bind(this, this.keyChanged));
        },
        destroy: function(e) {
            this.controls.removeEventListener("key_changed", $bind(this, this.keyChanged));
        },
        keyChanged: function(e) {
            if (e.key == null) this.text.setText(com_davidmaletz_faengfl_controls_ControlHandler.getDeviceNames()[this.controls.device]);
        },
        __class__: com_davidmaletz_mining_ui__$ControlRenderer_DeviceButton
    });
    var com_davidmaletz_mining_ui_Controls = function(c) {
        this.device = com_davidmaletz_controls_Controller.instance.handler.device;
        this.controls = new com_davidmaletz_faengfl_controls_ControlSettings(com_davidmaletz_controls_Controller.instance.handler.controls[this.device].key_map);
        com_davidmaletz_controls_ListWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_ControlRenderer(this), 7, 4, true, true, false, 0.5, 0.8);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("options", "controls"), this.renderer.getWidth() * this.cols + 8);
        var _g = 0;
        var _g1 = com_davidmaletz_mining_ui_Controls.keys;
        while (_g < _g1.length) {
            var key = _g1[_g]; ++_g;
            this.addItem(key);
        }
        this.addItem(null);
        this.addItem("device");
        var c1;
        c1 = js_Boot.__cast(this.addItem(new com_fancyfish_faeng_common_Pair("common", "ok")), com_davidmaletz_controls_Clickable);
        var r = c1.getPos();
        r.x += this.renderer.getWidth();
        this.addItem(null);
        this.addItem(null);
        this.clickables.clickables.addClickable(c1, this);
        r.x -= this.renderer.getWidth();
        this.addItem(new com_fancyfish_faeng_common_Pair("common", "cancel"));
    };
    $hxClasses["com.davidmaletz.mining.ui.Controls"] = com_davidmaletz_mining_ui_Controls;
    com_davidmaletz_mining_ui_Controls.__name__ = ["com", "davidmaletz", "mining", "ui", "Controls"];
    com_davidmaletz_mining_ui_Controls.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_Controls.__super__ = com_davidmaletz_controls_ListWindow;
    com_davidmaletz_mining_ui_Controls.prototype = $extend(com_davidmaletz_controls_ListWindow.prototype, {
        accept: function() {
            com_davidmaletz_controls_Controller.instance.handler.setControls(this.device, this.controls);
        },
        nextDevice: function() {
            this.device = (this.device + 1) % 2;
            this.controls = new com_davidmaletz_faengfl_controls_ControlSettings(com_davidmaletz_controls_Controller.instance.handler.controls[this.device].key_map);
            this.dispatchEvent(new com_davidmaletz_mining_ui_KeyEvent("key_changed", null, null));
        },
        onSelect: function(item) {
            switch (item) {
            case "ok.action":
                this.accept();
                this.close();
                break;
            case "cancel.action":
                this.close();
                break;
            case "device":
                this.nextDevice();
                break;
            default:
                new com_davidmaletz_mining_ui__$Controls_SetKey(this, item);
            }
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_Controls
    });
    var com_davidmaletz_mining_ui_transition_Transition = function() {
        com_davidmaletz_controls_ClickableWindow.call(this, com_davidmaletz_faengfl_Application.instance.container, null, true, false, false);
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.Transition"] = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_Transition.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "Transition"];
    com_davidmaletz_mining_ui_transition_Transition.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_transition_Transition.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        add: function() {
            com_davidmaletz_faengfl_Application.instance.container.addDisplay(this, 3);
        },
        doClose: function() {
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.set_soundTransform(new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.bgm_vol));
            com_davidmaletz_controls_ClickableWindow.prototype.doClose.call(this);
        },
        remove: function() {
            if (this.parent != null) this.doClose();
        },
        onEmptySelect: function() {
            if (this.parent != null) this.doClose();
        },
        onCancel: function() {
            this.onEmptySelect();
        },
        __class__: com_davidmaletz_mining_ui_transition_Transition
    });
    var com_davidmaletz_mining_ui__$Controls_SetKey = function(controls, key) {
        this.isInit = false;
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        this.controls = controls;
        this.key = key;
        controls.dispatchEvent(new com_davidmaletz_mining_ui_KeyEvent("key_changed", key, null));
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 1000, $bind(this, this.cancel));
        this.add();
    };
    $hxClasses["com.davidmaletz.mining.ui._Controls.SetKey"] = com_davidmaletz_mining_ui__$Controls_SetKey;
    com_davidmaletz_mining_ui__$Controls_SetKey.__name__ = ["com", "davidmaletz", "mining", "ui", "_Controls", "SetKey"];
    com_davidmaletz_mining_ui__$Controls_SetKey.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui__$Controls_SetKey.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        cancel: function() {
            if (this.parent != null) this.doClose();
            this.controls.dispatchEvent(new com_davidmaletz_mining_ui_KeyEvent("key_changed", this.key, this.controls.controls.key_map.getKey(this.key)));
        },
        onEmptySelect: function() {},
        handle_frame: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.handle_frame.call(this, e);
            if (!com_davidmaletz_controls_Controller.instance.handler.isPressed(8) && !this.isInit) {
                this.isInit = true;
                if (this.controls.device == 0) openfl_Lib.current.stage.addEventListener("keyUp", $bind(this, this.keyUp));
                else {
                    com_davidmaletz_controls_Controller.instance.addEventListener("button_up", $bind(this, this.onButtonUp));
                    com_davidmaletz_controls_Controller.instance.addEventListener("axis_move", $bind(this, this.onAxisMove));
                }
            }
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.destroy.call(this, e);
            if (this.controls.device == 0) openfl_Lib.current.stage.removeEventListener("keyUp", $bind(this, this.keyUp));
            else {
                com_davidmaletz_controls_Controller.instance.removeEventListener("button_up", $bind(this, this.onButtonUp));
                com_davidmaletz_controls_Controller.instance.removeEventListener("axis_move", $bind(this, this.onAxisMove));
            }
            this.isInit = false;
        },
        setKey: function(k) {
            if (this.parent != null) this.doClose();
            this.controls.controls.setKey(this.key, k);
            this.controls.dispatchEvent(new com_davidmaletz_mining_ui_KeyEvent("key_changed", this.key, k));
        },
        keyUp: function(e) {
            this.setKey(new com_davidmaletz_faengfl_controls_KeyboardKey(e.keyCode));
        },
        onButtonUp: function(e) {
            this.setKey(new com_davidmaletz_faengfl_controls_ControllerKey(e.button));
        },
        onAxisMove: function(e) {
            var v = Math.floor(e.x + 0.5);
            if (v != 0) this.setKey(new com_davidmaletz_faengfl_controls_AxisKey(e.axis, v > 0));
        },
        __class__: com_davidmaletz_mining_ui__$Controls_SetKey
    });
    var com_davidmaletz_mining_ui_CraftingList = function(recipes, handler, i, c) {
        com_davidmaletz_controls_scroll_ScrollList.call(this, c, new com_davidmaletz_mining_ui_RecipeRenderer(handler, i), 5, 1);
        this.inventory = i;
        while (recipes.hasNext()) {
            var r = recipes.next();
            this.addItem(r);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.CraftingList"] = com_davidmaletz_mining_ui_CraftingList;
    com_davidmaletz_mining_ui_CraftingList.__name__ = ["com", "davidmaletz", "mining", "ui", "CraftingList"];
    com_davidmaletz_mining_ui_CraftingList.__super__ = com_davidmaletz_controls_scroll_ScrollList;
    com_davidmaletz_mining_ui_CraftingList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollList.prototype, {
        init: function(e) {
            com_davidmaletz_controls_scroll_ScrollList.prototype.init.call(this, e);
            this.inventory.addEventListener("item_added", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            com_davidmaletz_controls_scroll_ScrollList.prototype.destroy.call(this, e);
            this.inventory.removeEventListener("item_added", $bind(this, this.update));
        },
        update: function(e) {
            var l = this.list;
            var len = l.get_numChildren();
            var r = this.renderer;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                r.update(l.getChildAt(i), null);
            }
        },
        __class__: com_davidmaletz_mining_ui_CraftingList
    });
    var com_davidmaletz_mining_ui_CraftingWindow = function(recipes, label, i, c, onCraft, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.25;
        this.list = new com_davidmaletz_mining_ui_CraftingList(recipes, this, i, c);
        this.onCraft = onCraft;
        com_davidmaletz_controls_ClickableWindow.call(this, c, com_davidmaletz_mining_Main.window_factory.create(this.list.getWidth() + 8, this.list.getHeight() + 8), true, true, true, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, label, this.list.getWidth() + 8);
        this.list.set_x(4);
        this.list.set_y(4);
        this.addChild(this.list);
        var close = new com_davidmaletz_controls_CloseButton(this, this.list.getWidth() + 8, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        this.details = new com_davidmaletz_mining_ui_RecipeInfo();
        this.details.set_x(this.list.getWidth() + 8 + 4);
        this.addChild(this.details);
    };
    $hxClasses["com.davidmaletz.mining.ui.CraftingWindow"] = com_davidmaletz_mining_ui_CraftingWindow;
    com_davidmaletz_mining_ui_CraftingWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "CraftingWindow"];
    com_davidmaletz_mining_ui_CraftingWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_CraftingWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_CraftingWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.list.list.clickables], [4]);
        },
        onSelect: function(recipe) {
            if (this.list.inventory.craft(recipe)) {
                if (this.onCraft != null) {
                    this.onClose = this.onCraft;
                    this.onCraft = null;
                }
                new com_davidmaletz_mining_ui_ItemPopup(recipe.creates, 1);
                this.details.setItem(null, null);
                this.details.setItem(recipe, this.list.inventory);
            } else new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "ingredients"), 16720418);
        },
        onHover: function(recipe) {
            this.details.setItem(recipe, this.list.inventory);
            this.details.set_y(Math.round((this.list.getHeight() + 8 - this.details._height) * 0.5));
        },
        isEnabled: function(recipe) {
            return true;
        },
        getWidth: function() {
            return this.list.getWidth() + 8;
        },
        getHeight: function() {
            return this.list.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_CraftingWindow
    });
    var com_davidmaletz_mining_ui_Credits = function(c) {
        var b = openfl_Assets.getBitmapData("data/ui/gradient.png");
        com_davidmaletz_faengfl_ScissorSprite.call(this, c.getWidth(), b.height, this, c);
        var d = new openfl_display_Bitmap(b);
        d.set_scaleX(c.getWidth());
        this.addChild(d);
        var s = new com_davidmaletz_lerp_LerpSpriteFL();
        s.set_y(b.height);
        var t = new com_davidmaletz_mining_ui_MyFormattedText(c.getWidth(), true, com_davidmaletz_mining_ui_Credits.credits, 1);
        s.lerp(new com_davidmaletz_lerp_PositionKeyframe(0, -t.bounds.height - 13), 1800, $bind(this, this.complete));
        s.addChild(t);
        this.addChild(s);
    };
    $hxClasses["com.davidmaletz.mining.ui.Credits"] = com_davidmaletz_mining_ui_Credits;
    com_davidmaletz_mining_ui_Credits.__name__ = ["com", "davidmaletz", "mining", "ui", "Credits"];
    com_davidmaletz_mining_ui_Credits.__super__ = com_davidmaletz_faengfl_ScissorSprite;
    com_davidmaletz_mining_ui_Credits.prototype = $extend(com_davidmaletz_faengfl_ScissorSprite.prototype, {
        complete: function() {
            new com_davidmaletz_mining_ui_transition_FadeOut(com_davidmaletz_mining_Main.titleScreen, 60, true);
        },
        __class__: com_davidmaletz_mining_ui_Credits
    });
    var com_davidmaletz_mining_ui_DialogueBox = function(container, txt, complete, speaker, darken) {
        if (darken == null) darken = true;
        this.text = new com_davidmaletz_mining_ui_MyRevealText(container, 192, true, txt);
        this.text.set_x(4);
        this.text.set_y(4);
        this.speaker = speaker;
        if (speaker != null) this.text.onComplete = (function(f, a1) {
            return function() {
                f(a1);
            };
        })($bind(speaker, speaker.endSpeak), false);
        com_davidmaletz_controls_ClickableWindow.call(this, container, com_davidmaletz_mining_Main.window_factory.create(200, Math.ceil(this.text.getHeight()) + 8), true, darken, true, 0.5, js_Boot.__instanceof(speaker, com_davidmaletz_mining_Player) ? 0.95 : 0.05);
        this.addChild(this.text);
        this.onClose = complete;
    };
    $hxClasses["com.davidmaletz.mining.ui.DialogueBox"] = com_davidmaletz_mining_ui_DialogueBox;
    com_davidmaletz_mining_ui_DialogueBox.__name__ = ["com", "davidmaletz", "mining", "ui", "DialogueBox"];
    com_davidmaletz_mining_ui_DialogueBox.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_DialogueBox.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        init: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
            if (this.speaker != null) this.speaker.beginSpeak();
        },
        destroy: function(e) {
            if (e != null && this.speaker != null) this.speaker.endSpeak(true);
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
        },
        onEmptySelect: function() {
            var frames = 10000;
            if (this.text.advanceReveal(frames) == frames) this.close();
        },
        onCancel: function() {
            this.close();
        },
        __class__: com_davidmaletz_mining_ui_DialogueBox
    });
    var com_davidmaletz_mining_ui_DockWindow = function(recipes, label, p, c) {
        if (p.questMap.get("boat") == true && recipes.hasNext()) recipes.next();
        this.player = p;
        com_davidmaletz_mining_ui_CraftingWindow.call(this, recipes, label, p.inventory, c);
    };
    $hxClasses["com.davidmaletz.mining.ui.DockWindow"] = com_davidmaletz_mining_ui_DockWindow;
    com_davidmaletz_mining_ui_DockWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "DockWindow"];
    com_davidmaletz_mining_ui_DockWindow.__super__ = com_davidmaletz_mining_ui_CraftingWindow;
    com_davidmaletz_mining_ui_DockWindow.prototype = $extend(com_davidmaletz_mining_ui_CraftingWindow.prototype, {
        onSelect: function(recipe) {
            if (recipe.creates.id == "boat") {
                if (this.player.completeQuest((function($this) {
                    var $r;
                    if (com_davidmaletz_mining_npc_Quest.quests == null) com_davidmaletz_mining_npc_Quest.loadQuests();
                    $r = com_davidmaletz_mining_npc_Quest.quests.get("boat");
                    return $r;
                } (this)))) new com_davidmaletz_mining_ui_transition_FadeOut($bind(this, this.makeBoat), 60, false);
            } else com_davidmaletz_mining_ui_CraftingWindow.prototype.onSelect.call(this, recipe);
        },
        makeBoat: function() {
            this.doClose(); ((function($this) {
                var $r;
                if (com_davidmaletz_mining_structure_StructureInfo.structures == null) com_davidmaletz_mining_structure_StructureInfo.loadStructures();
                $r = com_davidmaletz_mining_structure_StructureInfo.structures.get("boat");
                return $r;
            } (this))).build(this.player.area, -4, -1);
            this.details.setItem(null, null);
            this.details.setItem((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Recipe.recipes == null) com_davidmaletz_mining_item_Recipe.loadRecipes();
                $r = com_davidmaletz_mining_item_Recipe.recipes.get("boat");
                return $r;
            } (this)), this.list.inventory);
        },
        isEnabled: function(recipe) {
            if (recipe.creates.id == "boat") return ! (this.player.questMap.get("boat") == true);
            else return com_davidmaletz_mining_ui_CraftingWindow.prototype.isEnabled.call(this, recipe);
        },
        __class__: com_davidmaletz_mining_ui_DockWindow
    });
    var com_davidmaletz_mining_ui_EatPrompt = function(c, item, func) {
        var food;
        food = js_Boot.__cast(item.item, com_davidmaletz_mining_item_Food);
        this.healthPerItem = food.health;
        this.staminaPerItem = food.stamina;
        com_davidmaletz_mining_ui_CountPrompt.call(this, c, com_fancyfish_faeng_common_Lang.getText("common", "eat_item"), func, 0, item.count, 1, 12, 14);
        com_davidmaletz_mining_ui_ItemRenderer.addItemCentered(this, item.item, 50, 4);
        this.spinner.addEventListener("change_value", $bind(this, this.updateCount));
    };
    $hxClasses["com.davidmaletz.mining.ui.EatPrompt"] = com_davidmaletz_mining_ui_EatPrompt;
    com_davidmaletz_mining_ui_EatPrompt.__name__ = ["com", "davidmaletz", "mining", "ui", "EatPrompt"];
    com_davidmaletz_mining_ui_EatPrompt.__super__ = com_davidmaletz_mining_ui_CountPrompt;
    com_davidmaletz_mining_ui_EatPrompt.prototype = $extend(com_davidmaletz_mining_ui_CountPrompt.prototype, {
        updateCount: function(e) {
            if (this.healthPerItem != 0) this.health.set(Std.string(this.spinner.value * this.healthPerItem));
            if (this.staminaPerItem != 0) this.stamina.set(Std.string(this.spinner.value * this.staminaPerItem));
        },
        afterSpinner: function(y) {
            var w = 18 + com_davidmaletz_tiles_Tile.SIZE;
            var x = Math.round((100 - (this.healthPerItem != 0 && this.staminaPerItem != 0 ? 4 + w * 2 : w)) * 0.5);
            if (this.healthPerItem != 0) {
                var t = com_davidmaletz_mining_item_Item._createIcon((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("health");
                    return $r;
                } (this)));
                t.set_x(x);
                t.set_y(y);
                this.addChild(t);
                this.health = new com_fancyfish_faeng_common_mutable_Mutable();
                this.health.set(Std.string(this.spinner.value * this.healthPerItem));
                var t1 = new com_davidmaletz_faengfl_TextSprite(this.health, new com_fancyfish_faeng_text_CharacterPlacer(0), 7798784, 1);
                t1.set_x(x + 8 + 2);
                t1.set_y(y);
                this.addChild(t1);
                x += w + 4;
            }
            if (this.staminaPerItem != 0) {}
            if (this.staminaPerItem != 0) {
                var t2 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get("stamina");
                    return $r;
                } (this)));
                t2.set_x(x);
                t2.set_y(y);
                this.addChild(t2);
                this.stamina = new com_fancyfish_faeng_common_mutable_Mutable();
                this.stamina.set(Std.string(this.spinner.value * this.staminaPerItem));
                var t3 = new com_davidmaletz_faengfl_TextSprite(this.stamina, new com_fancyfish_faeng_text_CharacterPlacer(0), 26112, 1);
                t3.set_x(x + 8 + 2);
                t3.set_y(y);
                this.addChild(t3);
            }
        },
        __class__: com_davidmaletz_mining_ui_EatPrompt
    });
    var com_davidmaletz_mining_ui_EquipmentPanel = function(p) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.player = p;
        var draw = com_davidmaletz_mining_Main.window_factory.create(76, this.getHeight());
        this.addChild(draw.create(0, 0));
        var w = draw.getWidth();
        var y = 3;
        var t = com_davidmaletz_mining_item_Item._createIcon((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("health");
            return $r;
        } (this)));
        t.set_x(3);
        t.set_y(y);
        this.addChild(t);
        this.health = new com_fancyfish_faeng_common_mutable_Mutable();
        this.stamina = new com_fancyfish_faeng_common_mutable_Mutable();
        var t1 = new com_davidmaletz_faengfl_TextSprite(this.health, new com_fancyfish_faeng_text_CharacterPlacer(w - 3, 2), 0, 1);
        t1.set_y(y);
        y += 10;
        this.addChild(t1);
        var t2 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("stamina");
            return $r;
        } (this)));
        t2.set_x(3);
        t2.set_y(y);
        this.addChild(t2);
        var t3 = new com_davidmaletz_faengfl_TextSprite(this.stamina, new com_fancyfish_faeng_text_CharacterPlacer(w - 3, 2), 0, 1);
        t3.set_y(y);
        y += 10;
        this.addChild(t3);
        var t4 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "equipment"), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 153, 1);
        t4.set_y(y + 1);
        this.addChild(t4);
        w -= 6 + com_davidmaletz_tiles_Tile.SIZE;
        y += 12;
        var t5 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "attack"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t5.set_y(y);
        t5.set_x(3);
        this.addChild(t5);
        this.attack = new com_fancyfish_faeng_common_mutable_Mutable();
        this.attack_icon = new com_davidmaletz_faengfl_TileLayer();
        this.attack_icon.set_x(w + 3);
        this.attack_icon.set_y(y);
        this.addChild(this.attack_icon);
        var t6 = new com_davidmaletz_faengfl_TextSprite(this.attack, new com_fancyfish_faeng_text_CharacterPlacer(w, 2), 0, 1);
        t6.set_y(y);
        y += 10;
        this.addChild(t6);
        this.attack_text = t6;
        var t7 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "defense"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t7.set_y(y);
        t7.set_x(3);
        this.addChild(t7);
        this.defense = new com_fancyfish_faeng_common_mutable_Mutable();
        this.defense_icon = new com_davidmaletz_faengfl_TileLayer();
        this.defense_icon.set_x(w + 3);
        this.defense_icon.set_y(y);
        this.addChild(this.defense_icon);
        var t8 = new com_davidmaletz_faengfl_TextSprite(this.defense, new com_fancyfish_faeng_text_CharacterPlacer(w, 2), 0, 1);
        t8.set_y(y);
        y += 10;
        this.addChild(t8);
        this.defense_text = t8;
        var t9 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "cut"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t9.set_y(y);
        t9.set_x(3);
        this.addChild(t9);
        this.cut = new com_fancyfish_faeng_common_mutable_Mutable();
        this.cut_icon = new com_davidmaletz_faengfl_TileLayer();
        this.cut_icon.set_x(w + 3);
        this.cut_icon.set_y(y);
        this.addChild(this.cut_icon);
        var t10 = new com_davidmaletz_faengfl_TextSprite(this.cut, new com_fancyfish_faeng_text_CharacterPlacer(w, 2), 0, 1);
        t10.set_y(y);
        y += 10;
        this.addChild(t10);
        if (this.player.mine.get() != null) {
            var t11 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "mine"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
            t11.set_y(y);
            t11.set_x(3);
            this.addChild(t11);
            this.mine = new com_fancyfish_faeng_common_mutable_Mutable();
            this.mine_icon = new com_davidmaletz_faengfl_TileLayer();
            this.mine_icon.set_x(w + 3);
            this.mine_icon.set_y(y);
            this.addChild(this.mine_icon);
            var t12 = new com_davidmaletz_faengfl_TextSprite(this.mine, new com_fancyfish_faeng_text_CharacterPlacer(w, 2), 0, 1);
            t12.set_y(y);
            y += 10;
            this.addChild(t12);
        } else this.mine = null;
    };
    $hxClasses["com.davidmaletz.mining.ui.EquipmentPanel"] = com_davidmaletz_mining_ui_EquipmentPanel;
    com_davidmaletz_mining_ui_EquipmentPanel.__name__ = ["com", "davidmaletz", "mining", "ui", "EquipmentPanel"];
    com_davidmaletz_mining_ui_EquipmentPanel.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_ui_EquipmentPanel.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        getHeight: function() {
            var ht = 67;
            if (this.player.mine.get() != null) ht += 10;
            return ht;
        },
        init: function(e) {
            this.destroy(e);
            this.player.attack.addEventListener("updated", $bind(this, this.updateAttack));
            this.player.attackMod.addEventListener("updated", $bind(this, this.updateAttack));
            this.updateAttack(null);
            this.player.defense.addEventListener("updated", $bind(this, this.updateDefense));
            this.player.defenseMod.addEventListener("updated", $bind(this, this.updateDefense));
            this.updateDefense(null);
            this.player.cut.addEventListener("updated", $bind(this, this.updateCut));
            this.updateCut(null);
            if (this.mine != null) {
                this.player.mine.addEventListener("updated", $bind(this, this.updateMine));
                this.updateMine(null);
            }
            this.player.addEventListener("change_health", $bind(this, this.updateHealth));
            this.updateHealth(null);
            this.player.addEventListener("change_stamina", $bind(this, this.updateStamina));
            this.updateStamina(null);
        },
        destroy: function(e) {
            this.player.attack.removeEventListener("updated", $bind(this, this.updateAttack));
            this.player.attackMod.removeEventListener("updated", $bind(this, this.updateAttack));
            this.player.defense.removeEventListener("updated", $bind(this, this.updateDefense));
            this.player.defenseMod.removeEventListener("updated", $bind(this, this.updateDefense));
            this.player.cut.removeEventListener("updated", $bind(this, this.updateCut));
            if (this.mine != null) this.player.mine.removeEventListener("updated", $bind(this, this.updateMine));
            this.player.removeEventListener("change_health", $bind(this, this.updateHealth));
            this.player.removeEventListener("change_stamina", $bind(this, this.updateStamina));
        },
        setIcon: function(eq, l) {
            if (eq != null) {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
                l.get_graphics().clear();
                l.handler.start(l.get_graphics(), 0);
                eq.tile.render(0, l, 0, 0);
                l.handler.finish();
            } else {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
                l.get_graphics().clear();
            }
        },
        setGreen: function(text, r) {
            var c = text.get_transform().get_colorTransform();
            c.greenMultiplier = r;
            text.get_transform().set_colorTransform(c);
        },
        updateAttack: function(e) {
            var a = this.player.attack.get();
            var t = Std.string(a == null ? 0 : a.attack);
            if (this.player.attackMod.get() > 0) {
                t += "+1";
                this.setGreen(this.attack_text, 0.3);
            } else this.setGreen(this.attack_text, 0);
            this.attack.set(t);
            this.setIcon(a, this.attack_icon);
        },
        updateDefense: function(e) {
            var a = this.player.defense.get();
            var t = Std.string(a == null ? 0 : a.defense);
            if (this.player.defenseMod.get() > 0) {
                t += "+1";
                this.setGreen(this.defense_text, 0.3);
            } else this.setGreen(this.defense_text, 0);
            this.defense.set(t);
            this.setIcon(a, this.defense_icon);
        },
        updateCut: function(e) {
            var a = this.player.cut.get();
            this.cut.set(Std.string(a == null ? 0 : a.cut));
            this.setIcon(a, this.cut_icon);
        },
        updateMine: function(e) {
            var a = this.player.mine.get();
            this.mine.set(Std.string(a == null ? 0 : a.mine));
            this.setIcon(a, this.mine_icon);
        },
        updateHealth: function(e) {
            this.health.set(Std.string(Math.floor(this.player.health / 10)) + "/" + Std.string(Math.floor(this.player.getMaxHealth() / 10)));
        },
        updateStamina: function(e) {
            this.stamina.set(Std.string(Math.floor(this.player.stamina / 10)) + "/" + Std.string(Math.floor(this.player.getMaxStamina() / 10)));
        },
        __class__: com_davidmaletz_mining_ui_EquipmentPanel
    });
    var com_davidmaletz_mining_ui_ExperiencePanel = function(p) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.player = p;
        var w = 68;
        var draw = com_davidmaletz_mining_Main.window_factory.create(w, 46);
        var y = 3;
        this.addChild(draw.create(0, 0));
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "experience"), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 153, 1);
        t.set_y(y);
        this.addChild(t);
        y += 12;
        this.level = new com_fancyfish_faeng_common_mutable_Mutable();
        this.exp = new com_fancyfish_faeng_common_mutable_Mutable();
        var t1 = new com_davidmaletz_faengfl_TextSprite(this.exp, new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 0, 1);
        t1.set_y(y);
        this.addChild(t1);
        y += 10;
        this.progress = com_davidmaletz_mining_ui_Fuel.createFuelBar(0);
        this.progress.set_x(4);
        this.progress.set_y(y + 2);
        this.addChild(this.progress);
        y += 8;
        var t2 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "level"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t2.set_x(3);
        t2.set_y(y);
        this.addChild(t2);
        var t3 = new com_davidmaletz_faengfl_TextSprite(this.level, new com_fancyfish_faeng_text_CharacterPlacer(w - 6, 2), 0, 1);
        t3.set_x(3);
        t3.set_y(y);
        this.addChild(t3);
    };
    $hxClasses["com.davidmaletz.mining.ui.ExperiencePanel"] = com_davidmaletz_mining_ui_ExperiencePanel;
    com_davidmaletz_mining_ui_ExperiencePanel.__name__ = ["com", "davidmaletz", "mining", "ui", "ExperiencePanel"];
    com_davidmaletz_mining_ui_ExperiencePanel.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_ui_ExperiencePanel.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        getWidth: function() {
            return 68;
        },
        getHeight: function() {
            return 46;
        },
        init: function(e) {
            this.destroy(e);
            this.player.addEventListener("add_exp", $bind(this, this.updateExperience));
            this.updateExperience(null);
        },
        destroy: function(e) {
            this.player.removeEventListener("add_exp", $bind(this, this.updateExperience));
        },
        updateExperience: function(e) {
            this.progress.setProgress(this.player.getExpPercent(), e == null ? 0 : 5);
            var l = this.player.getLevel();
            this.level.set(Std.string(l + 1));
            this.exp.set(this.player.experience + " / " + (Math.floor(Math.pow(1.5, l + 1) * 40) - 40));
        },
        __class__: com_davidmaletz_mining_ui_ExperiencePanel
    });
    var com_davidmaletz_mining_ui_ExportList = function(c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_SaveRenderer(this), 5, 1, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("options", "export"), this.getWidth());
        var _g = 0;
        while (_g < 10) {
            var i = _g++;
            this.addItem(i);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.ExportList"] = com_davidmaletz_mining_ui_ExportList;
    com_davidmaletz_mining_ui_ExportList.__name__ = ["com", "davidmaletz", "mining", "ui", "ExportList"];
    com_davidmaletz_mining_ui_ExportList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_ExportList.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_ExportList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        onSelect: function(slot) {
            if (this.isEnabled(slot)) com_davidmaletz_mining_ui_Options.saveFile(slot);
            this.close();
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return ! (typeof(com_davidmaletz_mining_Main.getSlotHeader("slot" + item)) == "boolean");
        },
        __class__: com_davidmaletz_mining_ui_ExportList
    });
    var com_davidmaletz_mining_ui_FarmItemRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.FarmItemRenderer"] = com_davidmaletz_mining_ui_FarmItemRenderer;
    com_davidmaletz_mining_ui_FarmItemRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "FarmItemRenderer"];
    com_davidmaletz_mining_ui_FarmItemRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_FarmItemRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 80;
        },
        getHeight: function(item) {
            return 13;
        },
        __class__: com_davidmaletz_mining_ui_FarmItemRenderer
    };
    var com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton = function(handler, i, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(80, 13), com_davidmaletz_mining_Main.label_factory.createHover(80, 13), null);
        this.handler = handler;
        var icon = i.info.item.createIcon();
        icon.set_x(2);
        icon.set_y(0);
        this.text = new openfl_display_Sprite();
        this.text.addChild(icon);
        this.item = i;
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("item.names", i.info.item.id), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(4 + com_davidmaletz_tiles_Tile.SIZE);
        this.text.addChild(t);
        var t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(i.info.min == i.info.max ? Std.string(i.info.min) : Std.string(i.info.min) + "-" + Std.string(i.info.max)), new com_fancyfish_faeng_text_CharacterPlacer(76, 2), 0, 1);
        t1.set_x(2);
        this.text.addChild(t1);
        this.addChild(this.text);
        var p = 1 - i.growth / (i.info.time * 200);
        this.progress = new com_davidmaletz_controls_ProgressBar(80, 2, 16776960, p, false);
        if (p == 1) this.progress.set_visible(false);
        else this.text.set_alpha(0.5);
        this.progress.set_y(11);
        this.addChild(this.progress);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui._FarmItemRenderer.ListButton"] = com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_FarmItemRenderer", "ListButton"];
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        init: function(e) {
            this.destroy(e);
            this.item.addEventListener("update_percent", $bind(this, this.update));
        },
        destroy: function(e) {
            this.item.removeEventListener("update_percent", $bind(this, this.update));
        },
        onClick: function() {
            this.handler.onSelect(this.item);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.item: null);
        },
        update: function(e) {
            var p = this.item.getPercent();
            if (p == 1) {
                this.progress.set_visible(false);
                this.text.set_alpha(1);
            } else {
                this.progress.set_visible(true);
                this.progress.setProgress(p);
                this.text.set_alpha(0.5);
            }
        },
        __class__: com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton
    });
    var com_davidmaletz_mining_ui_FarmItemWindow = function(player, items, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        this.farmList = new com_davidmaletz_controls_scroll_ScrollList(c, new com_davidmaletz_mining_ui_FarmItemRenderer(this), 8, 1);
        this.farmList.set_x(4);
        this.farmList.set_y(4);
        com_davidmaletz_controls_ClickableWindow.call(this, c, com_davidmaletz_mining_Main.window_factory.create(this.farmList.getWidth() + 8, this.farmList.getHeight() + 8), true, true, true, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "harvest"), this.farmList.getWidth() + 8);
        this.addChild(this.farmList);
        this.player = player;
        var close = new com_davidmaletz_controls_CloseButton(this, this.farmList.getWidth() + 8, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_x(this.farmList.getWidth() + 3);
        this.addChild(this.details);
        var $it0 = $iterator(items)();
        while ($it0.hasNext()) {
            var i = $it0.next();
            this.farmList.addItem(i);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.FarmItemWindow"] = com_davidmaletz_mining_ui_FarmItemWindow;
    com_davidmaletz_mining_ui_FarmItemWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "FarmItemWindow"];
    com_davidmaletz_mining_ui_FarmItemWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_FarmItemWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_FarmItemWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        onSelect: function(item) {
            item.collect(this.player);
        },
        onHover: function(item) {
            this.details.setItem(item == null ? null: item.info.item);
            this.details.set_y(Math.round((this.farmList.getHeight() + 8 - this.details._height) * 0.5));
        },
        isEnabled: function(item) {
            return true;
        },
        createClickables: function() {
            return this.farmList.list.clickables;
        },
        getWidth: function() {
            return this.farmList.getWidth() + 8;
        },
        getHeight: function() {
            return this.farmList.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_FarmItemWindow
    });
    var com_davidmaletz_mining_ui_FarmWindow = function(player, farm, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.65;
        this.farm = farm;
        this.farmList = new com_davidmaletz_controls_scroll_ScrollList(c, new com_davidmaletz_mining_ui_FarmItemRenderer(this), 8, 1);
        this.farmList.set_x(4);
        this.farmList.set_y(4);
        this.upgradeList = new com_davidmaletz_mining_ui_CraftingList(farm.info.getRecipes(), new com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler(this), player.inventory, c);
        var w = this.farmList.getWidth() + this.upgradeList.getWidth() + 16;
        this.upgradeList.set_x(w - 4 - this.upgradeList.getWidth());
        this.upgradeList.set_y(4);
        var draw = new com_davidmaletz_faengfl_CompoundDrawable();
        draw.add(com_davidmaletz_mining_Main.window_factory.create(this.farmList.getWidth() + 8, this.farmList.getHeight() + 8), 0, 0);
        var _x = this.farmList.getWidth() + 8 - 1;
        var _w = this.upgradeList.getWidth() + 8 + 1;
        draw.add(com_davidmaletz_mining_Main.window_factory.create(_w, this.farmList.getHeight() + 8), _x, 0);
        com_davidmaletz_controls_ClickableWindow.call(this, c, draw, true, true, true, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "harvest"), this.farmList.getWidth() + 8);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "additions"), this.upgradeList.getWidth() + 8, this.upgradeList.get_x() - 4);
        this.addChild(this.farmList);
        this.addChild(this.upgradeList);
        this.player = player;
        var close = new com_davidmaletz_controls_CloseButton(this, this.farmList.getWidth() + this.upgradeList.getWidth() + 16, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        var s = new com_davidmaletz_mining_ui_ValuePanel(com_fancyfish_faeng_common_Lang.getText("common", "addition_slots"), farm.upgrades, farm.max_upgrades);
        s.set_x(this.farmList.getWidth() + this.upgradeList.getWidth() + 16 - s.draw.getWidth());
        s.set_y(this.farmList.getHeight() + 8 + 2);
        this.addChild(s);
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_x(this.farmList.getWidth() + 3);
        this.addChild(this.details);
        this.upgrade_details = new com_davidmaletz_mining_ui_UpgradeInfo();
        this.upgrade_details.set_x(this.upgradeList.get_x() - 96 + 3);
        this.addChild(this.upgrade_details);
    };
    $hxClasses["com.davidmaletz.mining.ui.FarmWindow"] = com_davidmaletz_mining_ui_FarmWindow;
    com_davidmaletz_mining_ui_FarmWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "FarmWindow"];
    com_davidmaletz_mining_ui_FarmWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_FarmWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_FarmWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        onSelect: function(item) {
            item.collect(this.player);
        },
        onHover: function(item) {
            this.upgrade_details.setItem(null, null);
            this.details.setItem(item == null ? null: item.info.item);
            this.details.set_y(Math.round((this.farmList.getHeight() + 8 - this.details._height) * 0.5));
        },
        isEnabled: function(item) {
            return true;
        },
        init: function(e) {
            this.rem(null);
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
            this.farm.addEventListener("add_item", $bind(this, this.add));
            this.farm.addEventListener("rem_item", $bind(this, this.rem));
        },
        destroy: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
            this.farm.removeEventListener("add_item", $bind(this, this.add));
            this.farm.removeEventListener("rem_item", $bind(this, this.rem));
        },
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.farmList.list.clickables, this.upgradeList.list.clickables], [this.farmList.get_x(), this.upgradeList.get_x()]);
        },
        add: function(e) {
            this.farmList.addItem(e.value);
        },
        rem: function(e) {
            var p = com_davidmaletz_controls_scroll_ScrollList.preSwitch(this.clickables);
            var y = -this.farmList.list.get_y();
            this.farmList.list.clear();
            var $it0 = HxOverrides.iter(this.farm.items);
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.farmList.addItem(i);
            }
            var ht = this.farmList.getViewportHeight();
            var sht = this.farmList.list.getHeight();
            ht = sht - ht;
            if (y > ht) y = ht;
            if (y < 0) y = 0;
            if ( - this.farmList.list.get_y() == y) this.farmList.scrollbar.update();
            else this.farmList.updateScroll(y);
            if (p != null) this.clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
        },
        getWidth: function() {
            return this.farmList.getWidth() + this.upgradeList.getWidth() + 16;
        },
        getHeight: function() {
            return this.farmList.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_FarmWindow
    });
    var com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler = function(w) {
        this.wnd = w;
    };
    $hxClasses["com.davidmaletz.mining.ui._FarmWindow.UpgradeHandler"] = com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler;
    com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler.__name__ = ["com", "davidmaletz", "mining", "ui", "_FarmWindow", "UpgradeHandler"];
    com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler.prototype = {
        onSelect: function(recipe) {
            if (!this.isEnabled(recipe)) {
                new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "additions"), 16720418);
                return;
            }
            if (this.wnd.player.inventory.useIngredients(recipe)) {
                this.wnd.upgrade_details.setItem(null, null);
                this.wnd.upgrade_details.setItem(recipe, this.wnd.player.inventory);
                this.wnd.farm.buildUpgrade(this.wnd.player.area, recipe.structure);
            } else new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "ingredients"), 16720418);
        },
        onHover: function(recipe) {
            this.wnd.details.setItem(null);
            this.wnd.upgrade_details.setItem(recipe, this.wnd.player.inventory);
            this.wnd.upgrade_details.set_y(Math.round((this.wnd.farmList.getHeight() + 8 - this.wnd.upgrade_details._height) * 0.5));
        },
        isEnabled: function(item) {
            return this.wnd.farm.upgrades.get() < this.wnd.farm.max_upgrades;
        },
        __class__: com_davidmaletz_mining_ui__$FarmWindow_UpgradeHandler
    };
    var com_davidmaletz_mining_ui_Fuel = function(smelter, w) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.smelter = smelter;
        this.addChild(new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "fuel"), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 0, 1));
        this.progress = com_davidmaletz_mining_ui_Fuel.createFuelBar(smelter.fuel / 60);
        this.progress.set_x(Math.round((w - 60) * 0.5));
        this.progress.set_y(10);
        this.addChild(this.progress);
    };
    $hxClasses["com.davidmaletz.mining.ui.Fuel"] = com_davidmaletz_mining_ui_Fuel;
    com_davidmaletz_mining_ui_Fuel.__name__ = ["com", "davidmaletz", "mining", "ui", "Fuel"];
    com_davidmaletz_mining_ui_Fuel.createFuelBar = function(percent) {
        var progress = new com_davidmaletz_controls_ProgressBar(60, 3, 16776960, percent, false, false);
        progress.getChildAt(0).set_alpha(0.75);
        var b = new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/ui/bar_fuel.png"));
        b.set_x( - 1);
        b.set_y( - 1);
        progress.addChildAt(b, 0);
        return progress;
    };
    com_davidmaletz_mining_ui_Fuel.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_ui_Fuel.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.smelter.addEventListener("update_fuel", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            this.smelter.removeEventListener("update_fuel", $bind(this, this.update));
        },
        update: function(e) {
            this.progress.setProgress(this.smelter.fuel / 60, 5);
        },
        __class__: com_davidmaletz_mining_ui_Fuel
    });
    var com_davidmaletz_mining_ui_GameOver = function() {
        com_davidmaletz_controls_ClickableSprite.call(this);
        var w = 63;
        this.set_x(Math.round((256 - (com_davidmaletz_mining_ui_GameOver.ITEMS.length * w - 3)) * 0.5));
        this.set_y(144 - com_davidmaletz_faengfl_Application.button_factory.defaultHeight() - 2);
        var b = new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/game_over.png"));
        b.set_x( - this.get_x());
        b.set_y( - this.get_y());
        this.addChild(b);
        var ct = 0;
        var _g = 0;
        var _g1 = com_davidmaletz_mining_ui_GameOver.ITEMS;
        while (_g < _g1.length) {
            var i = _g1[_g]; ++_g;
            this.addClickable(new com_davidmaletz_mining_ui_TextButton(ct * w, 0, com_fancyfish_faeng_common_Lang.getText("common", i), (function(f, a1) {
                return function() {
                    f(a1);
                };
            })($bind(this, this.onSelect), i), 60));
            ct++;
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.GameOver"] = com_davidmaletz_mining_ui_GameOver;
    com_davidmaletz_mining_ui_GameOver.__name__ = ["com", "davidmaletz", "mining", "ui", "GameOver"];
    com_davidmaletz_mining_ui_GameOver.__super__ = com_davidmaletz_controls_ClickableSprite;
    com_davidmaletz_mining_ui_GameOver.prototype = $extend(com_davidmaletz_controls_ClickableSprite.prototype, {
        onSelect: function(str) {
            switch (str) {
            case "retry":
                new com_davidmaletz_mining_ui_transition_FadeOut(com_davidmaletz_mining_Main.loadLastSave, 60, true);
                break;
            case "title":
                new com_davidmaletz_mining_ui_transition_FadeOut(com_davidmaletz_mining_Main.titleScreen, 60, true);
                break;
            }
        },
        __class__: com_davidmaletz_mining_ui_GameOver
    });
    var com_davidmaletz_mining_ui_MyBar = function(tile, w, h, color, percent) {
        if (percent == null) percent = 1;
        this.flashing = 0;
        com_davidmaletz_controls_ProgressBar.call(this, w, h, color, percent, false, false);
        this.getChildAt(0).set_alpha(0.75);
        var b = new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/ui/bar.png"));
        b.set_x( - 1);
        b.set_y( - 1);
        this.addChildAt(b, 0);
        this.icon = com_davidmaletz_mining_item_Item._createIcon(tile == null ? null: (function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get(tile);
            return $r;
        } (this)));
        this.icon.set_x( - 10);
        this.icon.set_y( - 3);
        this.addChild(this.icon);
        this._width = w;
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui.MyBar"] = com_davidmaletz_mining_ui_MyBar;
    com_davidmaletz_mining_ui_MyBar.__name__ = ["com", "davidmaletz", "mining", "ui", "MyBar"];
    com_davidmaletz_mining_ui_MyBar.__super__ = com_davidmaletz_controls_ProgressBar;
    com_davidmaletz_mining_ui_MyBar.prototype = $extend(com_davidmaletz_controls_ProgressBar.prototype, {
        init: function(e) {
            this.destroy(e);
            this.addEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        destroy: function(e) {
            this.removeEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        enter_frame: function(e) {
            if (this.flashing > 0) {
                this.flashing--;
                if (this.flashing == 0) {
                    this.flashing = 30;
                    this.icon.set_alpha(this.icon.get_alpha() == 0.25 ? 1 : 0.25);
                }
            } else this.icon.set_alpha(1);
        },
        setProgress: function(percent, frames) {
            if (frames == null) frames = 0;
            if (percent > 0 && percent * this._width < 1) percent = 1 / this._width;
            com_davidmaletz_controls_ProgressBar.prototype.setProgress.call(this, percent, frames);
            if (percent > 0.25) this.flashing = 0;
            else if (this.flashing == 0) this.flashing = 30;
        },
        __class__: com_davidmaletz_mining_ui_MyBar
    });
    var com_davidmaletz_mining_ui_HealthBar = function(p, c) {
        com_davidmaletz_mining_ui_MyBar.call(this, "health", 50, 3, 10027008, p.health / p.getMaxHealth());
        this.player = p;
        this.set_x(12);
        this.set_y(c.getHeight() - 4 - 13);
    };
    $hxClasses["com.davidmaletz.mining.ui.HealthBar"] = com_davidmaletz_mining_ui_HealthBar;
    com_davidmaletz_mining_ui_HealthBar.__name__ = ["com", "davidmaletz", "mining", "ui", "HealthBar"];
    com_davidmaletz_mining_ui_HealthBar.__super__ = com_davidmaletz_mining_ui_MyBar;
    com_davidmaletz_mining_ui_HealthBar.prototype = $extend(com_davidmaletz_mining_ui_MyBar.prototype, {
        init: function(e) {
            com_davidmaletz_mining_ui_MyBar.prototype.init.call(this, e);
            this.player.addEventListener("change_health", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_MyBar.prototype.destroy.call(this, e);
            this.player.removeEventListener("change_health", $bind(this, this.update));
            if (this.channel != null) {
                this.channel.stop();
                this.channel = null;
            }
        },
        update: function(e) {
            var p = this.player.getHealthPercent();
            this.setProgress(p, 5);
            if (p < 0.1 && p != 0) {
                if (this.channel == null) this.channel = com_davidmaletz_faengfl_SoundManager.playSFX("low_hp", 1073741823);
            } else if (this.channel != null) {
                this.channel.stop();
                this.channel = null;
            }
        },
        __class__: com_davidmaletz_mining_ui_HealthBar
    });
    var com_davidmaletz_mining_ui_ImportList = function(c, data, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_SaveRenderer(this), 5, 1, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("options", "import"), this.getWidth());
        this.data = data;
        var _g = 0;
        while (_g < 10) {
            var i = _g++;
            this.addItem(i);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.ImportList"] = com_davidmaletz_mining_ui_ImportList;
    com_davidmaletz_mining_ui_ImportList.__name__ = ["com", "davidmaletz", "mining", "ui", "ImportList"];
    com_davidmaletz_mining_ui_ImportList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_ImportList.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_ImportList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        load: function(id) {
            com_davidmaletz_mining_Main.setSlot(id, this.data);
            this.close();
        },
        overwrite: function(id) {
            com_davidmaletz_mining_Main.deleteSave(id, false);
            com_davidmaletz_mining_Main.setSlot(id, this.data);
            this.close();
        },
        onSelect: function(slot) {
            var id = "slot" + slot;
            if (Reflect.field(com_davidmaletz_mining_Main.settings.data, id) != null) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_Prompt(c, com_fancyfish_faeng_common_Lang.getText("common", "overwrite"), (function(f, id1) {
                    return function() {
                        f(id1);
                    };
                })($bind(this, this.overwrite), id)), 1);
            } else {
                com_davidmaletz_mining_Main.setSlot(id, this.data);
                this.close();
            }
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_ImportList
    });
    var com_davidmaletz_mining_ui_InventoryList = function(i, list, c) {
        this.inventory = i;
        this.map = new haxe_ds_StringMap();
        this.categories = [];
        var len = 4;
        var w = list.renderer.getWidth() * list.cols;
        var h = list.renderer.getHeight(null) * list.rows;
        var _g = 0;
        while (_g < len) {
            var i1 = _g++;
            this.categories.push(new com_davidmaletz_controls_scroll_ListGrid(w, h, list, c, list));
        }
        this.categories.splice(com_davidmaletz_mining_ui_InventoryTabs.tab_order[0], 0, list.list);
        this.list = list;
    };
    $hxClasses["com.davidmaletz.mining.ui.InventoryList"] = com_davidmaletz_mining_ui_InventoryList;
    com_davidmaletz_mining_ui_InventoryList.__name__ = ["com", "davidmaletz", "mining", "ui", "InventoryList"];
    com_davidmaletz_mining_ui_InventoryList.prototype = {
        init: function() {
            this.inventory.addEventListener("item_added", $bind(this, this.update));
            var $it0 = this.inventory.getItems(null, com_davidmaletz_mining_item_Inventory.ascCost);
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.updateItem(i.item, i.count);
            }
        },
        getList: function(tab) {
            return this.categories[tab];
        },
        update: function(e) {
            this.updateItem(e.item, e.count);
        },
        _addItem: function(item, count, category) {
            var i = new com_davidmaletz_mining_item_ItemData(this.inventory, item, count);
            var c = this.categories[category];
            if (c == this.list.list) return this.list.addItem(i);
            else return c.addItem(this.list.renderer, i, this.list.cols);
        },
        updateItem: function(item, count) {
            var ar = this.map.get(item.id);
            if (ar == null) {
                ar = [this._addItem(item, count, item.type), this._addItem(item, count, 4)];
                this.map.set(item.id, ar);
            } else {
                var _g = 0;
                while (_g < ar.length) {
                    var s = ar[_g]; ++_g;
                    this.list.renderer.update(s, new com_davidmaletz_mining_item_ItemData(this.inventory, item, count));
                }
            }
        },
        destroy: function() {
            this.inventory.removeEventListener("item_added", $bind(this, this.update));
        },
        updateAll: function() {
            var $it0 = this.map.keys();
            while ($it0.hasNext()) {
                var id = $it0.next();
                var i;
                if (id == null) i = null;
                else {
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    i = com_davidmaletz_mining_item_Item.items.get(id);
                }
                var ar = this.map.get(id);
                var _g = 0;
                while (_g < ar.length) {
                    var s = ar[_g]; ++_g;
                    this.list.renderer.update(s, new com_davidmaletz_mining_item_ItemData(this.inventory, i, this.inventory.getItemCount(i)));
                }
            }
        },
        __class__: com_davidmaletz_mining_ui_InventoryList
    };
    var com_davidmaletz_mining_ui_InventoryTab = function(t, y, tab) {
        var f = com_davidmaletz_faengfl_Application.button_factory;
        com_davidmaletz_controls_Button.call(this, -19, y, f.createBG(20, -1), f.createHover(20, -1), null);
        this.tabs = t;
        this.tab = tab;
        var icon = com_davidmaletz_mining_item_Item.type_icons[tab];
        var t1;
        if (icon != null) t1 = com_davidmaletz_mining_item_Item._createIcon(icon);
        else {
            t1 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "all"), new com_fancyfish_faeng_text_CharacterPlacer(com_davidmaletz_tiles_Tile.SIZE, 1), 0, 1);
            t1.set_y(1);
        }
        t1.set_x(2);
        var _g = t1;
        _g.set_y(_g.get_y() + 1);
        this.addChild(t1);
    };
    $hxClasses["com.davidmaletz.mining.ui.InventoryTab"] = com_davidmaletz_mining_ui_InventoryTab;
    com_davidmaletz_mining_ui_InventoryTab.__name__ = ["com", "davidmaletz", "mining", "ui", "InventoryTab"];
    com_davidmaletz_mining_ui_InventoryTab.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_InventoryTab.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.tabs.setTab(this);
            return true;
        },
        toString: function() {
            return "Tab " + this.tab;
        },
        __class__: com_davidmaletz_mining_ui_InventoryTab
    });
    var com_davidmaletz_mining_ui_InventoryTabs = function(clickables, setTab) {
        openfl_display_Sprite.call(this);
        var len = 5;
        var ht = com_davidmaletz_faengfl_Application.button_factory.defaultHeight();
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            var tab = new com_davidmaletz_mining_ui_InventoryTab(this, i * ht, com_davidmaletz_mining_ui_InventoryTabs.tab_order[i]);
            this.addChild(tab);
            clickables.clickables.addClickable(tab, this);
            if (i == 0) this.selected_tab = tab;
            else com_davidmaletz_lerp_DarkenKeyframe.setDarkness(tab, 0.6);
        }
        this.onSetTab = setTab;
    };
    $hxClasses["com.davidmaletz.mining.ui.InventoryTabs"] = com_davidmaletz_mining_ui_InventoryTabs;
    com_davidmaletz_mining_ui_InventoryTabs.__name__ = ["com", "davidmaletz", "mining", "ui", "InventoryTabs"];
    com_davidmaletz_mining_ui_InventoryTabs.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_InventoryTabs.prototype = $extend(openfl_display_Sprite.prototype, {
        setTab: function(tab) {
            com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this.selected_tab, 0.6);
            this.selected_tab = tab;
            com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this.selected_tab, 1);
            this.onSetTab(tab.tab);
        },
        __class__: com_davidmaletz_mining_ui_InventoryTabs
    });
    var com_davidmaletz_mining_ui_InventoryWindow = function(player, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_ItemRenderer(this), 10, 1, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "inventory"), this.getWidth());
        this.player = player;
        this.inventory = new com_davidmaletz_mining_ui_InventoryList(player.inventory, this.list, c);
        this.addChild(new com_davidmaletz_mining_ui_InventoryTabs(this.clickables, $bind(this, this.setTab)));
        var eq = new com_davidmaletz_mining_ui_EquipmentPanel(player);
        eq.set_x(this.getWidth() + 3);
        eq.set_y(this.getHeight() + 18 - eq.getHeight());
        this.addChild(eq);
        this.equipment = eq;
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_x(this.getWidth() + 3);
        this.addChild(this.details);
        var e = new com_davidmaletz_mining_ui_ExperiencePanel(player);
        e.set_x( - 71);
        e.set_y(this.getHeight() - 46);
        this.addChild(e);
        if (player.mine.get() != null) {
            var _g = 0;
            while (_g < 2) {
                var i = _g++;
                var h = new com_davidmaletz_mining_renderer_Hotkey(player, i, (function(f, i1) {
                    return function() {
                        f(i1);
                    };
                })($bind(this, this.setHotkey), i), false);
                h.set_x(e.get_x());
                h.set_y(i * 32 - 4);
                this.addChild(h);
            }
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.InventoryWindow"] = com_davidmaletz_mining_ui_InventoryWindow;
    com_davidmaletz_mining_ui_InventoryWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "InventoryWindow"];
    com_davidmaletz_mining_ui_InventoryWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_InventoryWindow.addLabel = function(s, msg, w, offX, lw) {
        if (lw == null) lw = 80;
        if (offX == null) offX = 0;
        var l = new openfl_display_Sprite();
        var draw = com_davidmaletz_mining_Main.window_factory.create(lw, 16);
        l.addChild(draw.create(0, 0));
        var t = new com_davidmaletz_faengfl_TextSprite(msg, new com_fancyfish_faeng_text_CharacterPlacer(draw.getWidth(), 1), 0, 1);
        t.set_y((draw.getHeight() - 8) * 0.5);
        l.addChild(t);
        l.set_x(Math.round(offX + (w - draw.getWidth()) * 0.5));
        l.set_y( - draw.getHeight() + 1);
        s.addChild(l);
        return l;
    };
    com_davidmaletz_mining_ui_InventoryWindow.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_InventoryWindow.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        setHotkey: function(i) {
            if (this.select == null) {
                this.select = new openfl_display_Sprite();
                com_davidmaletz_mining_ui_Tooltip.draw(this.select, com_fancyfish_faeng_common_Lang.getText("common", "hotkey"));
                this.select.set_x(Math.round(this.getWidth() * 0.5));
                this.select.set_y( - 12);
                this.addChild(this.select);
            } else this.select.set_visible(!this.select.get_visible());
            this._hotkey = i;
        },
        setTab: function(tab) {
            this.switchList(this.inventory.categories[tab]);
        },
        onSelect: function(item) {
            if (this.select != null && this.select.get_visible()) {
                this.player.setHotkey(this._hotkey, item.item);
                this.select.set_visible(false);
                return;
            }
            if (item.count <= 0) return;
            if (item.item.weight > 0) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                if (item.item.type == 0) {
                    var food;
                    food = js_Boot.__cast(item.item, com_davidmaletz_mining_item_Food);
                    if (food.stamina < 0 || food.health < 0) c.addDisplay(new com_davidmaletz_mining_ui_Choice(c, "actions", ["eat", "drop"], [(function(f, a1) {
                        return function() {
                            f(a1);
                        };
                    })($bind(this, this._eat), item), (function(f1, a11) {
                        return function() {
                            f1(a11);
                        };
                    })($bind(this, this._drop), item)], 40), 1);
                    else this._eat(item);
                } else if (item.item.action != null) c.addDisplay(new com_davidmaletz_mining_ui_Choice(c, "actions", [item.item.getActionLabel(this.player), "drop"], [(function(f2, a12) {
                    return function() {
                        f2(a12);
                    };
                })($bind(this, this._use), item), (function(f3, a13) {
                    return function() {
                        f3(a13);
                    };
                })($bind(this, this._drop), item)], 40), 1);
                else this._drop(item);
            } else if (item.item.action != null) this._use(item);
        },
        _eat: function(item) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_EatPrompt(c, item, (function(f, a1) {
                return function(ct) {
                    return f(a1, ct);
                };
            })(($_ = this.player, $bind($_, $_.eat)), item.item)), 1);
        },
        _use: function(item) {
            if (item.item["use"](this.player, this)) item.inventory.addItem(item.item, -1);
        },
        _drop: function(item) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_ItemCountPrompt(c, item, com_fancyfish_faeng_common_Lang.getText("common", "drop_item"), 0, (function(f, a1) {
                return function(ct) {
                    f(a1, ct);
                };
            })($bind(this, this.onDrop), item)), 1);
        },
        onDrop: function(item, ct) {
            if (ct != 0) {
                item.inventory.addItem(item.item, -ct);
                com_davidmaletz_faengfl_SoundManager.playSFX("drop");
            }
        },
        onHover: function(item) {
            this.details.setItem(item == null ? null: item.item);
            this.details.set_y(Math.floor((this.getHeight() + 18 - this.details._height - this.equipment.getHeight()) * 0.5));
        },
        isEnabled: function(item) {
            return (item.item.weight > 0 || item.item.action != null) && item.count > 0;
        },
        init: function(e) {
            com_davidmaletz_controls_scroll_ScrollWindow.prototype.init.call(this, e);
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.release), false, com_davidmaletz_faengfl_Window.window_ct + 1);
            this.inventory.init();
        },
        destroy: function(e) {
            com_davidmaletz_controls_scroll_ScrollWindow.prototype.destroy.call(this, e);
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.release));
            this.inventory.destroy();
        },
        release: function(e) {
            var _g = e.key;
            switch (_g) {
            case "inventory":
                this.close();
                break;
            case "hotkey1":
                if (this.player.mine.get() != null) this.player.setHotkey(0, this.details.item);
                break;
            case "hotkey2":
                if (this.player.mine.get() != null) this.player.setHotkey(1, this.details.item);
                break;
            }
        },
        __class__: com_davidmaletz_mining_ui_InventoryWindow
    });
    var com_davidmaletz_mining_ui_ItemCountPrompt = function(c, item, msg, value, func) {
        com_davidmaletz_mining_ui_CountPrompt.call(this, c, msg, func, 0, item.count, value, 12);
        com_davidmaletz_mining_ui_ItemRenderer.addItemCentered(this, item.item, 50, 4);
    };
    $hxClasses["com.davidmaletz.mining.ui.ItemCountPrompt"] = com_davidmaletz_mining_ui_ItemCountPrompt;
    com_davidmaletz_mining_ui_ItemCountPrompt.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemCountPrompt"];
    com_davidmaletz_mining_ui_ItemCountPrompt.__super__ = com_davidmaletz_mining_ui_CountPrompt;
    com_davidmaletz_mining_ui_ItemCountPrompt.prototype = $extend(com_davidmaletz_mining_ui_CountPrompt.prototype, {
        __class__: com_davidmaletz_mining_ui_ItemCountPrompt
    });
    var com_davidmaletz_mining_ui_ItemInfo = function() {
        openfl_display_Sprite.call(this);
        this.set_visible(false);
        this._height = 0;
        this.item = null;
    };
    $hxClasses["com.davidmaletz.mining.ui.ItemInfo"] = com_davidmaletz_mining_ui_ItemInfo;
    com_davidmaletz_mining_ui_ItemInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemInfo"];
    com_davidmaletz_mining_ui_ItemInfo.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_ItemInfo.prototype = $extend(openfl_display_Sprite.prototype, {
        setItem: function(item, additional) {
            if (this.item == item) return;
            this.item = item;
            if (item == null) this.set_visible(false);
            else {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
                this.set_visible(true);
                var y = item.addInfo(this, 76, 3);
                if (additional != null) y = additional(this, 76, y);
                this._height = y + 3;
                this.addChildAt(com_davidmaletz_mining_Main.window_factory.create(76, this._height).create(0, 0), 0);
            }
        },
        getItem: function() {
            return this.item;
        },
        getWidth: function() {
            return 76;
        },
        getHeight: function() {
            return this._height;
        },
        __class__: com_davidmaletz_mining_ui_ItemInfo
    });
    var com_davidmaletz_mining_ui_ItemList = function(c, inv, title, filter, onSelect) {
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_ItemRenderer(this), 10, 1);
        this._onSelect = onSelect;
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, title, this.getWidth());
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_x(this.getWidth() + 3);
        this.addChild(this.details);
        var $it0 = inv.getItems(filter, com_davidmaletz_mining_item_Inventory.ascCost);
        while ($it0.hasNext()) {
            var i = $it0.next();
            this.addItem(new com_davidmaletz_mining_item_ItemData(inv, i.item, i.count));
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.ItemList"] = com_davidmaletz_mining_ui_ItemList;
    com_davidmaletz_mining_ui_ItemList.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemList"];
    com_davidmaletz_mining_ui_ItemList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_ItemList.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_ItemList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        onSelect: function(item) {
            this._onSelect(item);
            this.close();
        },
        isEnabled: function(item) {
            return item.count > 0;
        },
        onHover: function(item) {
            this.details.setItem(item == null ? null: item.item);
            this.details.set_y(Math.floor((this.getHeight() - this.details._height) * 0.5));
        },
        __class__: com_davidmaletz_mining_ui_ItemList
    });
    var com_davidmaletz_mining_ui_Tooltip = function(x, y, text, col, bg, font) {
        if (bg == null) bg = -16777216;
        if (col == null) col = 16777215;
        com_davidmaletz_lerp_LerpSprite.call(this);
        com_davidmaletz_mining_ui_Tooltip.draw(this, text, col, bg, font);
        this.set_x(Math.round(x));
        this.set_y(Math.round(y));
        com_davidmaletz_faengfl_Application.instance.container.addDisplay(this, 1);
    };
    $hxClasses["com.davidmaletz.mining.ui.Tooltip"] = com_davidmaletz_mining_ui_Tooltip;
    com_davidmaletz_mining_ui_Tooltip.__name__ = ["com", "davidmaletz", "mining", "ui", "Tooltip"];
    com_davidmaletz_mining_ui_Tooltip.draw = function(s, text, col, bg, font) {
        if (bg == null) bg = -16777216;
        if (col == null) col = 16777215;
        var t = new com_davidmaletz_faengfl_TextSprite(text, new com_fancyfish_faeng_text_CharacterPlacer(0, 1), col, 1, font);
        s.addChild(t);
        var alpha = (bg >> 24 & 255) / 255;
        if (alpha > 0) {
            t.draw();
            s.get_graphics().beginFill(bg & 16777215, alpha);
            s.get_graphics().drawRect(t.bounds.x * t.get_scaleX() - 2, -1., t.bounds.width * t.get_scaleX() + 4, t.bounds.height * t.get_scaleY() + 4);
            s.get_graphics().endFill();
        }
    };
    com_davidmaletz_mining_ui_Tooltip.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_ui_Tooltip.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        __class__: com_davidmaletz_mining_ui_Tooltip
    });
    var com_davidmaletz_mining_ui_Popup = function(x, y, dy, text, col, bg, fadeIn, hold, fadeOut, font) {
        if (fadeOut == null) fadeOut = 20;
        if (hold == null) hold = 20;
        if (fadeIn == null) fadeIn = 20;
        if (bg == null) bg = -16777216;
        if (col == null) col = 16777215;
        this.onComplete = null;
        com_davidmaletz_mining_ui_Tooltip.call(this, x, y, text, col, bg, font);
        this.set_alpha(0);
        this.hold = hold;
        this.fadeOut = fadeOut;
        if (dy != 0) this.lerp(new com_davidmaletz_lerp_PositionKeyframe(x, y + dy), fadeIn + hold + fadeOut);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), fadeIn, $bind(this, this.next));
    };
    $hxClasses["com.davidmaletz.mining.ui.Popup"] = com_davidmaletz_mining_ui_Popup;
    com_davidmaletz_mining_ui_Popup.__name__ = ["com", "davidmaletz", "mining", "ui", "Popup"];
    com_davidmaletz_mining_ui_Popup.__super__ = com_davidmaletz_mining_ui_Tooltip;
    com_davidmaletz_mining_ui_Popup.prototype = $extend(com_davidmaletz_mining_ui_Tooltip.prototype, {
        next: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), this.hold, $bind(this, this.hide));
        },
        hide: function() {
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), this.fadeOut, $bind(this, this.remove));
        },
        remove: function() {
            if (this.parent != null) this.parent.removeChild(this);
            if (this.onComplete != null) this.onComplete();
        },
        __class__: com_davidmaletz_mining_ui_Popup
    });
    var com_davidmaletz_mining_ui_ItemPopup = function(item, count, dy) {
        if (dy == null) dy = 0;
        var m = com_fancyfish_faeng_common_Lang.getText("item.names", item.id);
        if (count > 1) m = new com_fancyfish_faeng_common_mutable_Concat(m, " x" + count);
        com_davidmaletz_mining_ui_Popup.call(this, 128. + (com_davidmaletz_tiles_Tile.SIZE + 2) * 0.5, (144 - com_davidmaletz_tiles_Tile.SIZE) * 0.5 + dy, -com_davidmaletz_tiles_Tile.SIZE, m);
        var t;
        t = js_Boot.__cast(this.getChildAt(0), com_davidmaletz_faengfl_TextSprite);
        var s = item.createIcon();
        s.set_x(t.bounds.x * t.get_scaleX() - (com_davidmaletz_tiles_Tile.SIZE + 4));
        s.set_y( - 1);
        this.addChild(s);
    };
    $hxClasses["com.davidmaletz.mining.ui.ItemPopup"] = com_davidmaletz_mining_ui_ItemPopup;
    com_davidmaletz_mining_ui_ItemPopup.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemPopup"];
    com_davidmaletz_mining_ui_ItemPopup.__super__ = com_davidmaletz_mining_ui_Popup;
    com_davidmaletz_mining_ui_ItemPopup.prototype = $extend(com_davidmaletz_mining_ui_Popup.prototype, {
        __class__: com_davidmaletz_mining_ui_ItemPopup
    });
    var com_davidmaletz_mining_ui_ItemRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.ItemRenderer"] = com_davidmaletz_mining_ui_ItemRenderer;
    com_davidmaletz_mining_ui_ItemRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "ItemRenderer"];
    com_davidmaletz_mining_ui_ItemRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_ItemRenderer.addItem = function(s, item, x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        var icon = item.createIcon();
        icon.set_x(x);
        icon.set_y(y);
        s.addChild(icon);
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("item.names", item.id), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(x + com_davidmaletz_tiles_Tile.SIZE + 1);
        t.set_y(y);
        s.addChild(t);
    };
    com_davidmaletz_mining_ui_ItemRenderer.addItemCentered = function(s, item, x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("item.names", item.id), new com_fancyfish_faeng_text_CharacterPlacer(0, 1), 0, 1);
        t.draw();
        t.set_x(x + com_davidmaletz_tiles_Tile.SIZE * 0.5);
        t.set_y(y);
        s.addChild(t);
        var icon = item.createIcon();
        icon.set_x(t.bounds.x * t.get_scaleX() + t.get_x() - com_davidmaletz_tiles_Tile.SIZE - 1);
        icon.set_y(y);
        s.addChild(icon);
    };
    com_davidmaletz_mining_ui_ItemRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui_ListButton(this, item, x, y);
        },
        update: function(s, item) { (js_Boot.__cast(s, com_davidmaletz_mining_ui_ListButton)).updateCount(item);
        },
        getWidth: function() {
            return 84;
        },
        getHeight: function(item) {
            return 10;
        },
        __class__: com_davidmaletz_mining_ui_ItemRenderer
    };
    var com_davidmaletz_mining_ui_ListButton = function(r, i, x, y) {
        var w = r.getWidth();
        var h = r.getHeight(i);
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(w, h), com_davidmaletz_mining_Main.label_factory.createHover(w, h), null);
        this.handler = r.handler;
        this.text = new openfl_display_Sprite();
        com_davidmaletz_mining_ui_ItemRenderer.addItem(this.text, i.item, 1, 0);
        this.item = i;
        this.count = new com_fancyfish_faeng_common_mutable_Mutable();
        this.count.set(i.count == null ? "null": "" + i.count);
        var t = new com_davidmaletz_faengfl_TextSprite(this.count, new com_fancyfish_faeng_text_CharacterPlacer(w - 2, 2), 0, 1);
        t.set_x(1);
        this.text.addChild(t);
        this.addChild(this.text);
        this.updateEnabled();
    };
    $hxClasses["com.davidmaletz.mining.ui.ListButton"] = com_davidmaletz_mining_ui_ListButton;
    com_davidmaletz_mining_ui_ListButton.__name__ = ["com", "davidmaletz", "mining", "ui", "ListButton"];
    com_davidmaletz_mining_ui_ListButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_ListButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.item);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.item: null);
        },
        updateCount: function(item) {
            this.item = item;
            if (this.count != null) this.count.set(item.count == null ? "null": "" + item.count);
            this.updateEnabled();
        },
        updateEnabled: function() {
            this.text.set_alpha(this.handler.isEnabled(this.item) ? 1 : 0.5);
        },
        __class__: com_davidmaletz_mining_ui_ListButton
    });
    var com_davidmaletz_mining_ui_KeyEvent = function(type, key, value) {
        openfl_events_Event.call(this, type);
        this.key = key;
        this.value = value;
    };
    $hxClasses["com.davidmaletz.mining.ui.KeyEvent"] = com_davidmaletz_mining_ui_KeyEvent;
    com_davidmaletz_mining_ui_KeyEvent.__name__ = ["com", "davidmaletz", "mining", "ui", "KeyEvent"];
    com_davidmaletz_mining_ui_KeyEvent.__super__ = openfl_events_Event;
    com_davidmaletz_mining_ui_KeyEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_mining_ui_KeyEvent
    });
    var com_davidmaletz_mining_ui_KeyTooltip = function(key, x, y, text, col, bg) {
        if (bg == null) bg = -16777216;
        if (col == null) col = 16777215;
        x += Math.round(com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth * 0.25);
        com_davidmaletz_mining_ui_Tooltip.call(this, x, y, text, col, bg);
        var t;
        t = js_Boot.__cast(this.getChildAt(0), com_davidmaletz_faengfl_TextSprite);
        var x1 = Math.round(t.bounds.x * t.get_scaleX() - com_davidmaletz_mining_Main.keyCenter.x);
        var y1 = Math.round(t.bounds.height * t.get_scaleY() * 0.5);
        this.addChild(new com_davidmaletz_mining_ui__$KeyTooltip_KeyButton(key, x1, y1, t.bounds.width));
    };
    $hxClasses["com.davidmaletz.mining.ui.KeyTooltip"] = com_davidmaletz_mining_ui_KeyTooltip;
    com_davidmaletz_mining_ui_KeyTooltip.__name__ = ["com", "davidmaletz", "mining", "ui", "KeyTooltip"];
    com_davidmaletz_mining_ui_KeyTooltip.__super__ = com_davidmaletz_mining_ui_Tooltip;
    com_davidmaletz_mining_ui_KeyTooltip.prototype = $extend(com_davidmaletz_mining_ui_Tooltip.prototype, {
        __class__: com_davidmaletz_mining_ui_KeyTooltip
    });
    var com_davidmaletz_mining_ui__$KeyTooltip_KeyButton = function(key, x, y, w) {
        com_davidmaletz_faengfl_Button.call(this, null, $bind(this, this.doAction), null);
        this.addChild(new com_davidmaletz_controls_KeyRenderer(key, 16, 16));
        this._key = key;
        this._width = w + 34;
        this._height = 32;
        this.set_x(x - 16);
        this.set_y(y - 16);
        this.set_alpha(0.75);
    };
    $hxClasses["com.davidmaletz.mining.ui._KeyTooltip.KeyButton"] = com_davidmaletz_mining_ui__$KeyTooltip_KeyButton;
    com_davidmaletz_mining_ui__$KeyTooltip_KeyButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_KeyTooltip", "KeyButton"];
    com_davidmaletz_mining_ui__$KeyTooltip_KeyButton.__super__ = com_davidmaletz_faengfl_Button;
    com_davidmaletz_mining_ui__$KeyTooltip_KeyButton.prototype = $extend(com_davidmaletz_faengfl_Button.prototype, {
        init: function(e) {
            com_davidmaletz_faengfl_Button.prototype.init.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.addEventListener("touch_move", $bind(this, this.mouse_move));
        },
        destroy: function(e) {
            com_davidmaletz_faengfl_Button.prototype.destroy.call(this, e);
            com_davidmaletz_faengfl_TouchAdapter.instance.removeEventListener("touch_move", $bind(this, this.mouse_move));
        },
        mouse_up: function(e) {
            if (e.id == this.touch) {
                this.set_alpha(0.75);
                com_davidmaletz_faengfl_Button.prototype.mouse_up.call(this, e);
            }
        },
        mouse_move: function(e) {
            if (this.inBounds(e)) this.set_alpha(1);
            else this.set_alpha(0.75);
        },
        doAction: function() {
            com_davidmaletz_controls_Controller.instance.release(this._key, -1);
        },
        __class__: com_davidmaletz_mining_ui__$KeyTooltip_KeyButton
    });
    var com_davidmaletz_mining_ui_LabelFactory = function() {
        com_davidmaletz_faengfl_DefaultButtonFactory.call(this, new com_davidmaletz_mining_ui__$LabelFactory_BGFactory(), new com_davidmaletz_mining_ui__$LabelFactory_HoverFactory());
    };
    $hxClasses["com.davidmaletz.mining.ui.LabelFactory"] = com_davidmaletz_mining_ui_LabelFactory;
    com_davidmaletz_mining_ui_LabelFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "LabelFactory"];
    com_davidmaletz_mining_ui_LabelFactory.__super__ = com_davidmaletz_faengfl_DefaultButtonFactory;
    com_davidmaletz_mining_ui_LabelFactory.prototype = $extend(com_davidmaletz_faengfl_DefaultButtonFactory.prototype, {
        __class__: com_davidmaletz_mining_ui_LabelFactory
    });
    var com_davidmaletz_mining_ui__$LabelFactory_BGFactory = function() {
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui._LabelFactory.BGFactory"] = com_davidmaletz_mining_ui__$LabelFactory_BGFactory;
    com_davidmaletz_mining_ui__$LabelFactory_BGFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "_LabelFactory", "BGFactory"];
    com_davidmaletz_mining_ui__$LabelFactory_BGFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_mining_ui__$LabelFactory_BGFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            return new com_davidmaletz_faengfl_EmptyDrawable(w, h);
        },
        __class__: com_davidmaletz_mining_ui__$LabelFactory_BGFactory
    });
    var com_davidmaletz_mining_ui__$LabelFactory_HoverFactory = function() {
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui._LabelFactory.HoverFactory"] = com_davidmaletz_mining_ui__$LabelFactory_HoverFactory;
    com_davidmaletz_mining_ui__$LabelFactory_HoverFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "_LabelFactory", "HoverFactory"];
    com_davidmaletz_mining_ui__$LabelFactory_HoverFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_mining_ui__$LabelFactory_HoverFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            return new com_davidmaletz_faengfl_SolidDrawable(10066431, w, h, 0, 0, 0.5);
        },
        __class__: com_davidmaletz_mining_ui__$LabelFactory_HoverFactory
    });
    var com_davidmaletz_mining_ui_LevelUpPopup = function(fromLevel, toLevel, addHealth, addStamina) {
        com_davidmaletz_controls_ClickableWindow.call(this, com_davidmaletz_faengfl_Application.instance.container, null, true, true, false);
        com_davidmaletz_mining_ui_Tooltip.draw(this, com_fancyfish_faeng_common_Lang.getText("common", "level_up"), 16777215, 0);
        this.set_x(Math.round(128.));
        this.set_y(Math.round(52.));
        fromLevel++;
        toLevel++;
        var t = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(fromLevel + " -> " + toLevel), new com_fancyfish_faeng_text_CharacterPlacer(0, 1), 16776960, 1);
        var y = 12;
        t.set_y(y);
        this.addChild(t);
        y += 10;
        var t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static("+" + addHealth), new com_fancyfish_faeng_text_CharacterPlacer(0), 7798784, 1);
        t1.draw();
        var x = -t1.bounds.width - 4;
        t1.set_x(x);
        t1.set_y(y);
        this.addChild(t1);
        var t2 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("health");
            return $r;
        } (this)));
        t2.set_x(x - 12);
        t2.set_y(y);
        this.addChild(t2);
        var t3 = com_davidmaletz_mining_item_Item._createIcon((function($this) {
            var $r;
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            $r = com_davidmaletz_tiles_Tile.tiles.get("stamina");
            return $r;
        } (this)));
        t3.set_x(4);
        t3.set_y(y);
        this.addChild(t3);
        var t4 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static("+" + addStamina), new com_fancyfish_faeng_text_CharacterPlacer(0), 26112, 1);
        t4.set_x(16);
        t4.set_y(y);
        this.addChild(t4);
        y += 10;
        this.get_graphics().beginFill(9);
        this.get_graphics().drawRect( - 40, -1, 80, y + 2);
        this.get_graphics().endFill();
        this.set_alpha(0);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 20);
        if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
        com_davidmaletz_faengfl_FaengFL.listeners.push(this);
    };
    $hxClasses["com.davidmaletz.mining.ui.LevelUpPopup"] = com_davidmaletz_mining_ui_LevelUpPopup;
    com_davidmaletz_mining_ui_LevelUpPopup.__name__ = ["com", "davidmaletz", "mining", "ui", "LevelUpPopup"];
    com_davidmaletz_mining_ui_LevelUpPopup.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_ui_LevelUpPopup.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_LevelUpPopup.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        onEmptySelect: function() {
            this.close();
        },
        close: function() {
            if (! (this.tracks != null && this.tracks.hasTrack(com_davidmaletz_lerp_AlphaKeyframe))) this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 20, $bind(this, this.doClose));
        },
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.priority += 2;
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.priority--;
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
        },
        enter_frame: function(frames) {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
            com_davidmaletz_faengfl_SoundManager.playSFX("levelup");
            com_davidmaletz_faengfl_Application.instance.container.addDisplay(this, 1);
        },
        __class__: com_davidmaletz_mining_ui_LevelUpPopup
    });
    var com_davidmaletz_mining_ui_Mod = function(icon, m, c, i) {
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.mod = m;
        this.value = new com_fancyfish_faeng_common_mutable_Mutable();
        this.value.set("");
        this.addChild(icon);
        var t = new com_davidmaletz_faengfl_TextSprite(this.value, new com_fancyfish_faeng_text_CharacterPlacer(10, 2), 16777215, 1);
        this.set_visible(false);
        this.set_alpha(0);
        t.set_x(com_davidmaletz_tiles_Tile.SIZE + 2);
        this.addChild(t);
        this.set_x(32 + com_davidmaletz_tiles_Tile.SIZE + (com_davidmaletz_tiles_Tile.SIZE + 4 + 10) * i);
        this.set_y(2);
    };
    $hxClasses["com.davidmaletz.mining.ui.Mod"] = com_davidmaletz_mining_ui_Mod;
    com_davidmaletz_mining_ui_Mod.__name__ = ["com", "davidmaletz", "mining", "ui", "Mod"];
    com_davidmaletz_mining_ui_Mod.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_ui_Mod.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            this.mod.addEventListener("updated", $bind(this, this.change));
            this.change(null);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            this.mod.removeEventListener("updated", $bind(this, this.change));
        },
        hide: function() {
            this.set_visible(false);
        },
        change: function(e) {
            var val = this.mod.get();
            var v = val > 0;
            if (v) this.value.set(val == null ? "null": "" + val);
            if (v != this.get_visible()) {
                if (v) {
                    this.set_visible(true);
                    this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
                } else this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, $bind(this, this.hide));
            }
        },
        __class__: com_davidmaletz_mining_ui_Mod
    });
    var com_davidmaletz_mining_ui_MoveTooltip = function() {
        com_davidmaletz_mining_ui_Tooltip.call(this, 128., 72., com_fancyfish_faeng_common_Lang.getText("common", "move"));
        this.set_visible(false);
        this.ct = 250;
        var t;
        t = js_Boot.__cast(this.getChildAt(0), com_davidmaletz_faengfl_TextSprite);
        var x = Math.round(t.bounds.x * t.get_scaleX() - com_davidmaletz_mining_Main.keyCenter.x);
        var y = Math.round(t.bounds.height * t.get_scaleY() * 0.5);
        this.addChild(new com_davidmaletz_controls_KeyRenderer("left", x, y));
        x += Math.round(t.bounds.width * t.get_scaleX() + com_davidmaletz_mining_Main.keyCenter.x * 2);
        this.addChild(new com_davidmaletz_controls_KeyRenderer("right", x, y));
    };
    $hxClasses["com.davidmaletz.mining.ui.MoveTooltip"] = com_davidmaletz_mining_ui_MoveTooltip;
    com_davidmaletz_mining_ui_MoveTooltip.__name__ = ["com", "davidmaletz", "mining", "ui", "MoveTooltip"];
    com_davidmaletz_mining_ui_MoveTooltip.__interfaces__ = [com_davidmaletz_faengfl_EnterFrameHandler];
    com_davidmaletz_mining_ui_MoveTooltip.__super__ = com_davidmaletz_mining_ui_Tooltip;
    com_davidmaletz_mining_ui_MoveTooltip.prototype = $extend(com_davidmaletz_mining_ui_Tooltip.prototype, {
        init: function(e) {
            com_davidmaletz_mining_ui_Tooltip.prototype.init.call(this, e);
            com_davidmaletz_controls_Controller.instance.addEventListener("press", $bind(this, this.onKey));
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_Tooltip.prototype.destroy.call(this, e);
            com_davidmaletz_controls_Controller.instance.removeEventListener("press", $bind(this, this.onKey));
        },
        onKey: function(e) {
            if (e.key == "left" || e.key == "right") {
                if (this.get_visible()) this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, (function(f, d) {
                    return function() {
                        f(d);
                    };
                })(com_davidmaletz_faengfl_FaengFL.remove, this));
                else com_davidmaletz_faengfl_FaengFL.remove(this);
            }
        },
        enter_frame: function(frames) {
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this);
            else false;
            this.set_visible(true);
            this.set_alpha(0);
            this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
        },
        handle_frame: function(e) {
            if (this.ct > 0) {
                this.ct--;
                if (this.ct == 0) {
                    if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
                    com_davidmaletz_faengfl_FaengFL.listeners.push(this);
                }
            }
            com_davidmaletz_mining_ui_Tooltip.prototype.handle_frame.call(this, e);
        },
        __class__: com_davidmaletz_mining_ui_MoveTooltip
    });
    var com_davidmaletz_mining_ui_MultiItemPopup = function() {};
    $hxClasses["com.davidmaletz.mining.ui.MultiItemPopup"] = com_davidmaletz_mining_ui_MultiItemPopup;
    com_davidmaletz_mining_ui_MultiItemPopup.__name__ = ["com", "davidmaletz", "mining", "ui", "MultiItemPopup"];
    com_davidmaletz_mining_ui_MultiItemPopup.show = function(items, count) {
        var dy = (count - 1) * com_davidmaletz_tiles_Tile.SIZE >> 1;
        while (items.hasNext()) {
            var i = items.next();
            new com_davidmaletz_mining_ui_ItemPopup(i.item, i.count, dy);
            dy -= com_davidmaletz_tiles_Tile.SIZE;
        }
    };
    var com_davidmaletz_mining_ui_MyButtonFactory = function() {
        com_davidmaletz_faengfl_DefaultButtonFactory.call(this, new com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory(), new com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory());
    };
    $hxClasses["com.davidmaletz.mining.ui.MyButtonFactory"] = com_davidmaletz_mining_ui_MyButtonFactory;
    com_davidmaletz_mining_ui_MyButtonFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "MyButtonFactory"];
    com_davidmaletz_mining_ui_MyButtonFactory.makeBitmap = function(b, width, y) {
        var w = Math.round(width);
        var out = new openfl_display_BitmapData(w, 12, true, 0);
        out.copyPixels(b, new openfl_geom_Rectangle(0, y * 12, 4, 12), new openfl_geom_Point(0, 0));
        out.copyPixels(b, new openfl_geom_Rectangle(16, y * 12, 4, 12), new openfl_geom_Point(w - 4, 0));
        var e = Math.floor((w - 8) / 12);
        var dx = w - 8 - e * 12;
        var _g = 0;
        while (_g < e) {
            var i = _g++;
            out.copyPixels(b, new openfl_geom_Rectangle(4, y * 12, 12, 12), new openfl_geom_Point(4 + i * 12, 0));
        }
        if (dx > 0) out.copyPixels(b, new openfl_geom_Rectangle(4, y * 12, dx, 12), new openfl_geom_Point(4 + e * 12, 0));
        return new com_davidmaletz_faengfl_BitmapDrawable(out);
    };
    com_davidmaletz_mining_ui_MyButtonFactory.shrink = function(b, height, y) {
        var h = Math.round(height);
        var out = new openfl_display_BitmapData(12, h, true, 0);
        var dy = h >> 1;
        out.copyPixels(b, new openfl_geom_Rectangle(20, y * 12, 12, dy), new openfl_geom_Point(0, 0));
        out.copyPixels(b, new openfl_geom_Rectangle(20, (y + 1) * 12 - (h - dy), 12, h - dy), new openfl_geom_Point(0, dy));
        var ret = new com_davidmaletz_faengfl_BitmapDrawable(out);
        ret._height -= 1;
        return ret;
    };
    com_davidmaletz_mining_ui_MyButtonFactory.__super__ = com_davidmaletz_faengfl_DefaultButtonFactory;
    com_davidmaletz_mining_ui_MyButtonFactory.prototype = $extend(com_davidmaletz_faengfl_DefaultButtonFactory.prototype, {
        defaultHeight: function() {
            return 12;
        },
        __class__: com_davidmaletz_mining_ui_MyButtonFactory
    });
    var com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory = function() {
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui._MyButtonFactory.BGFactory"] = com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory;
    com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "_MyButtonFactory", "BGFactory"];
    com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            if (w == -1) w = 12;
            if (h == -1) h = 12;
            var t = com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/buttons.png", 20, 12);
            if (w == 12 && h == 12) return new com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile(t, 1, 0);
            else if (w == 20 && h == 12) return new com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile(t, 0, 0);
            else if (w > 20 && h == 12) return com_davidmaletz_mining_ui_MyButtonFactory.makeBitmap(t.bitmap, w, 0);
            else if (w == 12 && h < 12) return com_davidmaletz_mining_ui_MyButtonFactory.shrink(t.bitmap, h, 0);
            else return new com_davidmaletz_faengfl_SolidDrawable(11184810, w, h, 1);
        },
        __class__: com_davidmaletz_mining_ui__$MyButtonFactory_BGFactory
    });
    var com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory = function() {
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui._MyButtonFactory.HoverFactory"] = com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory;
    com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "_MyButtonFactory", "HoverFactory"];
    com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            if (w == -1) w = 12;
            if (h == -1) h = 12;
            var t = com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/buttons.png", 20, 12);
            if (w == 12 && h == 12) return new com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile(t, 1, 1);
            else if (w == 20 && h == 12) return new com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile(t, 0, 1);
            else if (w > 20 && h == 12) return com_davidmaletz_mining_ui_MyButtonFactory.makeBitmap(t.bitmap, w, 1);
            else if (w == 12 && h < 12) return com_davidmaletz_mining_ui_MyButtonFactory.shrink(t.bitmap, h, 1);
            else return new com_davidmaletz_faengfl_SolidDrawable(10066431, w, h, 1);
        },
        __class__: com_davidmaletz_mining_ui__$MyButtonFactory_HoverFactory
    });
    var com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile = function(t, x, y) {
        this.sheet = t;
        this.idx = this.sheet.getIdx(x, y);
    };
    $hxClasses["com.davidmaletz.mining.ui._MyButtonFactory.SingleTile"] = com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile;
    com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile.__name__ = ["com", "davidmaletz", "mining", "ui", "_MyButtonFactory", "SingleTile"];
    com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile.prototype = {
        getWidth: function() {
            return this.sheet.sheet.__tileRects[this.idx].width;
        },
        getHeight: function() {
            return this.sheet.sheet.__tileRects[this.idx].height;
        },
        create: function(tx, ty) {
            var l = new com_davidmaletz_faengfl_TileLayer();
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
            l.get_graphics().clear();
            l.handler.start(l.get_graphics(), 0);
            l.handler.addTile(this.sheet, 0, 0, this.idx, 1, 1, 0, 0, 1);
            l.handler.finish();
            l.set_x(tx);
            l.set_y(ty);
            return l;
        },
        __class__: com_davidmaletz_mining_ui__$MyButtonFactory_SingleTile
    };
    var com_davidmaletz_tiles_TileFormattedText = function(width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        com_davidmaletz_faengfl_FormattedText.call(this, width, multiline, txt, align, word);
    };
    $hxClasses["com.davidmaletz.tiles.TileFormattedText"] = com_davidmaletz_tiles_TileFormattedText;
    com_davidmaletz_tiles_TileFormattedText.__name__ = ["com", "davidmaletz", "tiles", "TileFormattedText"];
    com_davidmaletz_tiles_TileFormattedText.tileMap = null;
    com_davidmaletz_tiles_TileFormattedText.keyMap = null;
    com_davidmaletz_tiles_TileFormattedText.tileCustomTag = function(text, code, data, map) {
        if (data == null) return false;
        switch (code) {
        case "tile":
            if (com_davidmaletz_tiles_TileFormattedText.tileMap == null) com_davidmaletz_tiles_TileFormattedText.tileMap = new haxe_ds_StringMap();
            var c = com_davidmaletz_tiles_TileFormattedText.tileMap.get(data);
            var fnt = text.default_font.get();
            if (c == null) {
                c = new com_davidmaletz_tiles__$TileFormattedText_TileCharacter(data, fnt);
                com_davidmaletz_tiles_TileFormattedText.tileMap.set(data, c);
            }
            var cp = text.placer.place(c, -1, 1, -1);
            if (cp != null) text.getArray(map, fnt, text.default_color).push(cp);
            return true;
        case "key":
            if (com_davidmaletz_tiles_TileFormattedText.keyMap == null) com_davidmaletz_tiles_TileFormattedText.keyMap = new haxe_ds_StringMap();
            var c1 = com_davidmaletz_tiles_TileFormattedText.keyMap.get(data);
            var fnt1 = text.default_font.get();
            var s = com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight / fnt1.lineHeight;
            if (c1 == null) {
                c1 = new com_davidmaletz_tiles__$TileFormattedText_KeyCharacter(data, fnt1, s);
                com_davidmaletz_tiles_TileFormattedText.keyMap.set(data, c1);
            }
            var cp1 = text.placer.place(c1, -1, s, -1);
            if (cp1 != null) text.getArray(map, fnt1, text.default_color).push(cp1);
            return true;
        }
        return false;
    };
    com_davidmaletz_tiles_TileFormattedText.__super__ = com_davidmaletz_faengfl_FormattedText;
    com_davidmaletz_tiles_TileFormattedText.prototype = $extend(com_davidmaletz_faengfl_FormattedText.prototype, {
        startCustomTag: function(code, data, map, insertText) {
            return com_davidmaletz_faengfl_FormattedText.prototype.startCustomTag.call(this, code, data, map, insertText) || com_davidmaletz_tiles_TileFormattedText.tileCustomTag(this, code, data, map);
        },
        __class__: com_davidmaletz_tiles_TileFormattedText
    });
    var com_davidmaletz_mining_ui_MyFormattedText = function(width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        com_davidmaletz_tiles_TileFormattedText.call(this, width, multiline, txt, align, word);
    };
    $hxClasses["com.davidmaletz.mining.ui.MyFormattedText"] = com_davidmaletz_mining_ui_MyFormattedText;
    com_davidmaletz_mining_ui_MyFormattedText.__name__ = ["com", "davidmaletz", "mining", "ui", "MyFormattedText"];
    com_davidmaletz_mining_ui_MyFormattedText.myCustomTag = function(text, code, data, map, insertText) {
        if (data == null) return false;
        switch (code) {
        case "item":
            var item;
            if (data == null) item = null;
            else {
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                item = com_davidmaletz_mining_item_Item.items.get(data);
            }
            if (item != null) insertText("[color=770000][tile=" + item.tile.id + "] " + com_fancyfish_faeng_common_Lang.getText("item.names", item.id).get() + "[/color]");
            return true;
        case "var":
            var s = data.split(".");
            var _g = s[0];
            switch (_g) {
            case "quest":
                insertText(Std.string(com_davidmaletz_mining_ui_MyFormattedText.getQuestVar(com_davidmaletz_mining_npc_Quest.get(s[1]), s[2])));
                break;
            case "object":
                insertText(com_davidmaletz_mining_ui_MyFormattedText.getVar(com_davidmaletz_mining_world_ObjectInfo.get(s[1]), s[2]));
                break;
            case "item":
                insertText(com_davidmaletz_mining_ui_MyFormattedText.getVar(com_davidmaletz_mining_item_Item.get(s[1]), s[2]));
                break;
            }
            return true;
        }
        return false;
    };
    com_davidmaletz_mining_ui_MyFormattedText.getQuestVar = function(q, v) {
        var r = q.getRequirementById(v);
        if (r != null) if (r.count == null) return "null";
        else return "" + r.count;
        else return Std.string(Reflect.field(q, v));
    };
    com_davidmaletz_mining_ui_MyFormattedText.getVar = function(d, v) {
        return Std.string(Reflect.field(d, v));
    };
    com_davidmaletz_mining_ui_MyFormattedText.__super__ = com_davidmaletz_tiles_TileFormattedText;
    com_davidmaletz_mining_ui_MyFormattedText.prototype = $extend(com_davidmaletz_tiles_TileFormattedText.prototype, {
        startCustomTag: function(code, data, map, insertText) {
            return com_davidmaletz_tiles_TileFormattedText.prototype.startCustomTag.call(this, code, data, map, insertText) || com_davidmaletz_mining_ui_MyFormattedText.myCustomTag(this, code, data, map, insertText);
        },
        __class__: com_davidmaletz_mining_ui_MyFormattedText
    });
    var com_davidmaletz_tiles_TileRevealText = function(c, width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        com_davidmaletz_faengfl_RevealText.call(this, c, width, multiline, txt, align, word);
    };
    $hxClasses["com.davidmaletz.tiles.TileRevealText"] = com_davidmaletz_tiles_TileRevealText;
    com_davidmaletz_tiles_TileRevealText.__name__ = ["com", "davidmaletz", "tiles", "TileRevealText"];
    com_davidmaletz_tiles_TileRevealText.__super__ = com_davidmaletz_faengfl_RevealText;
    com_davidmaletz_tiles_TileRevealText.prototype = $extend(com_davidmaletz_faengfl_RevealText.prototype, {
        startCustomTag: function(code, data, map, insertText) {
            return com_davidmaletz_faengfl_RevealText.prototype.startCustomTag.call(this, code, data, map, insertText) || com_davidmaletz_tiles_TileFormattedText.tileCustomTag(this, code, data, map);
        },
        __class__: com_davidmaletz_tiles_TileRevealText
    });
    var com_davidmaletz_mining_ui_MyRevealText = function(c, width, multiline, txt, align, word) {
        if (word == null) word = true;
        if (align == null) align = 0;
        com_davidmaletz_tiles_TileRevealText.call(this, c, width, multiline, txt, align, word);
    };
    $hxClasses["com.davidmaletz.mining.ui.MyRevealText"] = com_davidmaletz_mining_ui_MyRevealText;
    com_davidmaletz_mining_ui_MyRevealText.__name__ = ["com", "davidmaletz", "mining", "ui", "MyRevealText"];
    com_davidmaletz_mining_ui_MyRevealText.__super__ = com_davidmaletz_tiles_TileRevealText;
    com_davidmaletz_mining_ui_MyRevealText.prototype = $extend(com_davidmaletz_tiles_TileRevealText.prototype, {
        init: function(e) {
            this.destroy(e);
            this.addEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        destroy: function(e) {
            this.removeEventListener("enterFrame", $bind(this, this.handle_frame));
        },
        handle_frame: function(e) {
            this.advanceReveal(com_davidmaletz_faengfl_RevealText.TEXT_SPEED < 0.125 ? 999999 : com_davidmaletz_faengfl_RevealText.TEXT_SPEED);
        },
        startCustomTag: function(code, data, map, insertText) {
            return com_davidmaletz_tiles_TileRevealText.prototype.startCustomTag.call(this, code, data, map, insertText) || com_davidmaletz_mining_ui_MyFormattedText.myCustomTag(this, code, data, map, insertText);
        },
        __class__: com_davidmaletz_mining_ui_MyRevealText
    });
    var com_davidmaletz_mining_ui_MySliderUI = function(s) {
        this.ui = s;
    };
    $hxClasses["com.davidmaletz.mining.ui.MySliderUI"] = com_davidmaletz_mining_ui_MySliderUI;
    com_davidmaletz_mining_ui_MySliderUI.__name__ = ["com", "davidmaletz", "mining", "ui", "MySliderUI"];
    com_davidmaletz_mining_ui_MySliderUI.__interfaces__ = [com_davidmaletz_controls_SliderUI];
    com_davidmaletz_mining_ui_MySliderUI.prototype = {
        getHeight: function() {
            return 7;
        },
        getKnobWidth: function() {
            return 14;
        },
        createBar: function(w) {
            var bar = this.ui.createScrollbar(w);
            bar.set_rotation(90);
            bar.set_x(w);
            return bar;
        },
        createKnob: function() {
            var knob = this.ui.createKnob();
            var w = this.getKnobWidth();
            this.ui.setKnobHeight(knob, w);
            knob.set_rotation(90);
            knob.set_x(w);
            return knob;
        },
        __class__: com_davidmaletz_mining_ui_MySliderUI
    };
    var com_davidmaletz_mining_ui_NewGameList = function(c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_SaveRenderer(this), 5, 1, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "newgame"), this.getWidth());
        var _g = 0;
        while (_g < 10) {
            var i = _g++;
            this.addItem(i);
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.NewGameList"] = com_davidmaletz_mining_ui_NewGameList;
    com_davidmaletz_mining_ui_NewGameList.__name__ = ["com", "davidmaletz", "mining", "ui", "NewGameList"];
    com_davidmaletz_mining_ui_NewGameList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_NewGameList.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_NewGameList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        load: function(id) {
            new com_davidmaletz_mining_ui_transition_FadeOut((function(f, a1) {
                return function() {
                    return f(a1);
                };
            })(com_davidmaletz_mining_Main.loadSave, id), 60, true);
        },
        overwrite: function(id) {
            com_davidmaletz_mining_Main.deleteSave(id, false);
            this.load(id);
        },
        onSelect: function(slot) {
            var id = "slot" + slot;
            if (Reflect.field(com_davidmaletz_mining_Main.settings.data, id) != null) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_Prompt(c, com_fancyfish_faeng_common_Lang.getText("common", "overwrite"), (function(f, id1) {
                    return function() {
                        f(id1);
                    };
                })($bind(this, this.overwrite), id)), 1);
            } else this.load(id);
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_NewGameList
    });
    var com_davidmaletz_mining_ui_OptionRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.OptionRenderer"] = com_davidmaletz_mining_ui_OptionRenderer;
    com_davidmaletz_mining_ui_OptionRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "OptionRenderer"];
    com_davidmaletz_mining_ui_OptionRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_OptionRenderer.prototype = {
        create: function(item, x, y) {
            if (js_Boot.__instanceof(item, com_davidmaletz_mining_ui_FloatValue)) return new com_davidmaletz_mining_ui__$OptionRenderer_SliderOption(this.handler, "options", item, x, y);
            else if (js_Boot.__instanceof(item, com_davidmaletz_mining_ui_OptionValue)) return new com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption(this.handler, "options", item, x, y);
            return new com_davidmaletz_mining_ui_StringButton(this.handler, "options", Std.string(item), x, y, 150, 10);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 150;
        },
        getHeight: function(item) {
            return 10;
        },
        __class__: com_davidmaletz_mining_ui_OptionRenderer
    };
    var com_davidmaletz_mining_ui_AdjustOption = function() {};
    $hxClasses["com.davidmaletz.mining.ui.AdjustOption"] = com_davidmaletz_mining_ui_AdjustOption;
    com_davidmaletz_mining_ui_AdjustOption.__name__ = ["com", "davidmaletz", "mining", "ui", "AdjustOption"];
    com_davidmaletz_mining_ui_AdjustOption.prototype = {
        __class__: com_davidmaletz_mining_ui_AdjustOption
    };
    var com_davidmaletz_mining_ui__$OptionRenderer_SliderOption = function(h, section, i, x, y) {
        com_davidmaletz_mining_ui_StringButton.call(this, h, section, i.id, x, y, 60, 10, 2);
        this.slider = new com_davidmaletz_controls_Slider(86, i.getValue());
        this.slider.addEventListener("value_changed", $bind(this, this.updateValue));
        this.slider.set_x(64);
        this.slider.set_y(Math.floor((10 - ((function($this) {
            var $r;
            if (com_davidmaletz_controls_Slider.ui == null) com_davidmaletz_controls_Slider.ui = new com_davidmaletz_controls_DefaultSliderUI();
            $r = com_davidmaletz_controls_Slider.ui;
            return $r;
        } (this))).getHeight()) * 0.5));
        this.value = i;
        this.addChild(this.slider);
    };
    $hxClasses["com.davidmaletz.mining.ui._OptionRenderer.SliderOption"] = com_davidmaletz_mining_ui__$OptionRenderer_SliderOption;
    com_davidmaletz_mining_ui__$OptionRenderer_SliderOption.__name__ = ["com", "davidmaletz", "mining", "ui", "_OptionRenderer", "SliderOption"];
    com_davidmaletz_mining_ui__$OptionRenderer_SliderOption.__interfaces__ = [com_davidmaletz_mining_ui_AdjustOption];
    com_davidmaletz_mining_ui__$OptionRenderer_SliderOption.__super__ = com_davidmaletz_mining_ui_StringButton;
    com_davidmaletz_mining_ui__$OptionRenderer_SliderOption.prototype = $extend(com_davidmaletz_mining_ui_StringButton.prototype, {
        prevValue: function() {
            this.slider.setValue(this.slider.value - 0.0625);
        },
        nextValue: function() {
            this.slider.setValue(this.slider.value + 0.0625);
        },
        updateValue: function(e) {
            this.value.setValue(this.slider.value);
        },
        __class__: com_davidmaletz_mining_ui__$OptionRenderer_SliderOption
    });
    var com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption = function(h, section, i, x, y) {
        com_davidmaletz_mining_ui_StringButton.call(this, h, section, i.id, x, y, 60, 10, 2);
        this.option = new com_davidmaletz_faengfl_TextSprite(i.optionToString(i.getOption()), new com_fancyfish_faeng_text_CharacterPlacer(86, 1), 0, 1);
        this.option.set_x(64);
        this.value = i;
        this.addChild(this.option);
        var w = 20;
        var bg = com_davidmaletz_mining_Main.label_factory.createBG(w, 10);
        var hover = com_davidmaletz_mining_Main.label_factory.createHover(w, 10);
        var b = new com_davidmaletz_controls_StaticButton(64, 0, bg, hover, new com_fancyfish_faeng_common_mutable_Static("<"));
        b.onClickFunc = $bind(this, this.prevValue);
        this.addChild(b);
        var b1 = new com_davidmaletz_controls_StaticButton(150 - w, 0, bg, hover, new com_fancyfish_faeng_common_mutable_Static(">"));
        b1.onClickFunc = $bind(this, this.nextValue);
        this.addChild(b1);
        if (i.id == "fullscreen") {
            this.addEventListener("addedToStage", $bind(this, this.init));
            this.addEventListener("removedFromStage", $bind(this, this.destroy));
        }
    };
    $hxClasses["com.davidmaletz.mining.ui._OptionRenderer.ChoiceOption"] = com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption;
    com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption.__name__ = ["com", "davidmaletz", "mining", "ui", "_OptionRenderer", "ChoiceOption"];
    com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption.__interfaces__ = [com_davidmaletz_mining_ui_AdjustOption];
    com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption.__super__ = com_davidmaletz_mining_ui_StringButton;
    com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption.prototype = $extend(com_davidmaletz_mining_ui_StringButton.prototype, {
        init: function(e) {
            this.destroy(e);
            openfl_Lib.current.stage.addEventListener("fullScreen", $bind(this, this.fullscreen));
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("fullScreen", $bind(this, this.fullscreen));
        },
        fullscreen: function(e) {
            this.option.setText(this.value.optionToString(e.fullScreen ? 1 : 0));
        },
        prevValue: function() {
            this.value.setOption(this.value.getOption() - 1);
            this.option.setText(this.value.optionToString(this.value.getOption()));
        },
        nextValue: function() {
            this.value.setOption(this.value.getOption() + 1);
            this.option.setText(this.value.optionToString(this.value.getOption()));
        },
        __class__: com_davidmaletz_mining_ui__$OptionRenderer_ChoiceOption
    });
    var com_davidmaletz_mining_ui_FloatValue = function(id) {
        this.id = id;
    };
    $hxClasses["com.davidmaletz.mining.ui.FloatValue"] = com_davidmaletz_mining_ui_FloatValue;
    com_davidmaletz_mining_ui_FloatValue.__name__ = ["com", "davidmaletz", "mining", "ui", "FloatValue"];
    com_davidmaletz_mining_ui_FloatValue.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_ui_FloatValue.prototype = {
        getValue: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        setValue: function(val) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        __class__: com_davidmaletz_mining_ui_FloatValue
    };
    var com_davidmaletz_mining_ui__$Options_MusicVol = function(id) {
        com_davidmaletz_mining_ui_FloatValue.call(this, id);
    };
    $hxClasses["com.davidmaletz.mining.ui._Options.MusicVol"] = com_davidmaletz_mining_ui__$Options_MusicVol;
    com_davidmaletz_mining_ui__$Options_MusicVol.__name__ = ["com", "davidmaletz", "mining", "ui", "_Options", "MusicVol"];
    com_davidmaletz_mining_ui__$Options_MusicVol.__super__ = com_davidmaletz_mining_ui_FloatValue;
    com_davidmaletz_mining_ui__$Options_MusicVol.prototype = $extend(com_davidmaletz_mining_ui_FloatValue.prototype, {
        getValue: function() {
            return com_davidmaletz_faengfl_SoundManager.BGM_VOL;
        },
        setValue: function(val) {
            com_davidmaletz_faengfl_SoundManager.BGM_VOL = val;
            if (com_davidmaletz_faengfl_SoundManager.bgmc != null) com_davidmaletz_faengfl_SoundManager.bgmc.set_soundTransform(new openfl_media_SoundTransform(com_davidmaletz_faengfl_SoundManager.BGM_VOL * com_davidmaletz_faengfl_SoundManager.bgm_vol));
            com_davidmaletz_faengfl_SoundManager.settings.data.bgm_vol = com_davidmaletz_faengfl_SoundManager.BGM_VOL;
        },
        __class__: com_davidmaletz_mining_ui__$Options_MusicVol
    });
    var com_davidmaletz_mining_ui__$Options_SFXVol = function(id) {
        com_davidmaletz_mining_ui_FloatValue.call(this, id);
    };
    $hxClasses["com.davidmaletz.mining.ui._Options.SFXVol"] = com_davidmaletz_mining_ui__$Options_SFXVol;
    com_davidmaletz_mining_ui__$Options_SFXVol.__name__ = ["com", "davidmaletz", "mining", "ui", "_Options", "SFXVol"];
    com_davidmaletz_mining_ui__$Options_SFXVol.__super__ = com_davidmaletz_mining_ui_FloatValue;
    com_davidmaletz_mining_ui__$Options_SFXVol.prototype = $extend(com_davidmaletz_mining_ui_FloatValue.prototype, {
        getValue: function() {
            return com_davidmaletz_faengfl_SoundManager.SFX_VOL;
        },
        setValue: function(val) {
            com_davidmaletz_faengfl_SoundManager.SFX_VOL = val;
            com_davidmaletz_faengfl_SoundManager.settings.data.sfx_vol = com_davidmaletz_faengfl_SoundManager.SFX_VOL;
        },
        __class__: com_davidmaletz_mining_ui__$Options_SFXVol
    });
    var com_davidmaletz_mining_ui__$Options_TextSpeed = function(id) {
        com_davidmaletz_mining_ui_FloatValue.call(this, id);
    };
    $hxClasses["com.davidmaletz.mining.ui._Options.TextSpeed"] = com_davidmaletz_mining_ui__$Options_TextSpeed;
    com_davidmaletz_mining_ui__$Options_TextSpeed.__name__ = ["com", "davidmaletz", "mining", "ui", "_Options", "TextSpeed"];
    com_davidmaletz_mining_ui__$Options_TextSpeed.__super__ = com_davidmaletz_mining_ui_FloatValue;
    com_davidmaletz_mining_ui__$Options_TextSpeed.prototype = $extend(com_davidmaletz_mining_ui_FloatValue.prototype, {
        getValue: function() {
            return com_davidmaletz_faengfl_RevealText.TEXT_SPEED / 20;
        },
        setValue: function(val) {
            com_davidmaletz_faengfl_RevealText.TEXT_SPEED = val * 20;
            com_davidmaletz_mining_Main.settings.data.text_speed = com_davidmaletz_faengfl_RevealText.TEXT_SPEED;
        },
        __class__: com_davidmaletz_mining_ui__$Options_TextSpeed
    });
    var com_davidmaletz_mining_ui_OptionValue = function(id) {
        this.id = id;
    };
    $hxClasses["com.davidmaletz.mining.ui.OptionValue"] = com_davidmaletz_mining_ui_OptionValue;
    com_davidmaletz_mining_ui_OptionValue.__name__ = ["com", "davidmaletz", "mining", "ui", "OptionValue"];
    com_davidmaletz_mining_ui_OptionValue.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_ui_OptionValue.prototype = {
        getOption: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        setOption: function(o) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        optionToString: function(o) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        __class__: com_davidmaletz_mining_ui_OptionValue
    };
    var com_davidmaletz_mining_ui__$Options_Fullscreen = function(id) {
        com_davidmaletz_mining_ui_OptionValue.call(this, id);
    };
    $hxClasses["com.davidmaletz.mining.ui._Options.Fullscreen"] = com_davidmaletz_mining_ui__$Options_Fullscreen;
    com_davidmaletz_mining_ui__$Options_Fullscreen.__name__ = ["com", "davidmaletz", "mining", "ui", "_Options", "Fullscreen"];
    com_davidmaletz_mining_ui__$Options_Fullscreen.__super__ = com_davidmaletz_mining_ui_OptionValue;
    com_davidmaletz_mining_ui__$Options_Fullscreen.prototype = $extend(com_davidmaletz_mining_ui_OptionValue.prototype, {
        getOption: function() {
            if (openfl_Lib.current.stage.get_displayState() != 2) return 1;
            else return 0;
        },
        setOption: function(o) {
            if (this.getOption() != o) com_davidmaletz_mining_Main.toggleFullscreen();
        },
        optionToString: function(o) {
            switch (o) {
            case 0:
                return com_fancyfish_faeng_common_Lang.getText("common", "no");
            case 1:
                return com_fancyfish_faeng_common_Lang.getText("common", "yes");
            default:
                return null;
            }
        },
        __class__: com_davidmaletz_mining_ui__$Options_Fullscreen
    });
    var com_davidmaletz_mining_ui__$Options_Language = function(id) {
        com_davidmaletz_mining_ui_OptionValue.call(this, id);
    };
    $hxClasses["com.davidmaletz.mining.ui._Options.Language"] = com_davidmaletz_mining_ui__$Options_Language;
    com_davidmaletz_mining_ui__$Options_Language.__name__ = ["com", "davidmaletz", "mining", "ui", "_Options", "Language"];
    com_davidmaletz_mining_ui__$Options_Language.__super__ = com_davidmaletz_mining_ui_OptionValue;
    com_davidmaletz_mining_ui__$Options_Language.prototype = $extend(com_davidmaletz_mining_ui_OptionValue.prototype, {
        getOption: function() {
            return HxOverrides.indexOf(com_fancyfish_faeng_common_Lang.languages, com_fancyfish_faeng_common_Lang.lang.name, 0);
        },
        setOption: function(o) {
            var len = com_fancyfish_faeng_common_Lang.languages.length;
            if (o < 0) o += len;
            else if (o >= len) o -= len;
            if (o != this.getOption()) {
                var code = com_fancyfish_faeng_common_Lang.languages[o];
                com_fancyfish_faeng_common_Lang.setLanguage(code, "data/lang/");
                com_davidmaletz_mining_Main.settings.data.language = code;
            }
        },
        optionToString: function(o) {
            return new com_fancyfish_faeng_common_mutable_Static(com_fancyfish_faeng_common_Lang.language_names.get(com_fancyfish_faeng_common_Lang.languages[o]));
        },
        __class__: com_davidmaletz_mining_ui__$Options_Language
    });
    var com_davidmaletz_mining_ui_Options = function(c, inGame) {
        var len = com_davidmaletz_mining_ui_Options.ITEMS.length + 1;
        com_davidmaletz_controls_ListWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_OptionRenderer(this), len, 1, true, true, false);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("options", inGame ? "paused": "options"), this.renderer.getWidth() * this.cols + 8);
        len = com_davidmaletz_mining_ui_Options.ITEMS.length - 1;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            this.addItem(com_davidmaletz_mining_ui_Options.ITEMS[i]);
        }
        if (inGame) this.addItem("title");
        else this.addItem("export");
        this.addItem(com_davidmaletz_mining_ui_Options.ITEMS[com_davidmaletz_mining_ui_Options.ITEMS.length - 1]);
    };
    $hxClasses["com.davidmaletz.mining.ui.Options"] = com_davidmaletz_mining_ui_Options;
    com_davidmaletz_mining_ui_Options.__name__ = ["com", "davidmaletz", "mining", "ui", "Options"];
    com_davidmaletz_mining_ui_Options.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_Options.titleScreen = function() {
        new com_davidmaletz_mining_ui_transition_FadeOut(com_davidmaletz_mining_Main.titleScreen, 60, true);
    };
    com_davidmaletz_mining_ui_Options.importFile = function(file) {
        var data = com_davidmaletz_mining_Main.importSlot(file);
        if (data == null) {
            var c1 = com_davidmaletz_faengfl_Application.instance.container;
            c1.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c1, "Cannot import: Save corrupted."), 1);
            return;
        }
        var c = com_davidmaletz_faengfl_Application.instance.container;
        c.addDisplay(new com_davidmaletz_mining_ui_ImportList(c, data), 1);
    };
    com_davidmaletz_mining_ui_Options.saveFile = function(slot) {
        var slotName = "slot" + slot;
        var data = com_davidmaletz_mining_Main.exportSlot(slotName);
        if (data == null) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, "Cannot export: Save corrupted."), 1);
            return;
        }
        var link = document.createElement('a');
        link.download = slotName + ".asav";
        link.target = "_blank";
        link.href = "data:text/plain;charset=utf-8," + encodeURIComponent(data);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
    com_davidmaletz_mining_ui_Options.__super__ = com_davidmaletz_controls_ListWindow;
    com_davidmaletz_mining_ui_Options.prototype = $extend(com_davidmaletz_controls_ListWindow.prototype, {
        init: function(e) {
            com_davidmaletz_controls_ListWindow.prototype.init.call(this, e);
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.tap), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            com_davidmaletz_controls_ListWindow.prototype.destroy.call(this, e);
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.tap));
            com_davidmaletz_mining_Main.settings.flush();
        },
        tap: function(e) {
            var left = e.key == "left";
            var right = e.key == "right";
            var sel = this.clickables.selected;
            if ((left || right) && js_Boot.__instanceof(sel, com_davidmaletz_mining_ui_AdjustOption)) {
                com_davidmaletz_faengfl_SoundManager.playSFX("move");
                var a;
                a = js_Boot.__cast(sel, com_davidmaletz_mining_ui_AdjustOption);
                if (left) a.prevValue();
                else a.nextValue();
                e.stopImmediatePropagation();
            }
        },
        onSelect: function(str) {
            switch (str) {
            case "controls":
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(new com_davidmaletz_mining_ui_Controls(c), 1);
                break;
            case "achievements":
                var c1;
                c1 = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).fullRes;
                c1.addDisplay(new com_davidmaletz_mining_ui_AchievementWindow(c1), 0);
                break;
            case "title":
                var c2 = com_davidmaletz_faengfl_Application.instance.container;
                c2.addDisplay(new com_davidmaletz_mining_ui_Prompt(c2, com_fancyfish_faeng_common_Lang.getText("options", "quitgame"), com_davidmaletz_mining_ui_Options.titleScreen), 1);
                break;
            case "back":
                this.close();
                break;
            case "export":
                var c3 = com_davidmaletz_faengfl_Application.instance.container;
                c3.addDisplay(new com_davidmaletz_mining_ui_ExportList(c3), 1);
                break;
            }
        },
        onHover: function(item) {},
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui_Options
    });
    var com_davidmaletz_mining_ui_PenWindow = function(player, pen, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        this.pen = pen;
        this.farmList = new com_davidmaletz_controls_scroll_ScrollList(c, new com_davidmaletz_mining_ui_FarmItemRenderer(this), 8, 1);
        this.farmList.set_x(4);
        this.farmList.set_y(4);
        this.animalList = new com_davidmaletz_mining_ui_AnimalList(player, pen, $bind(this, this.showAnimalDetails), c);
        var w = this.farmList.getWidth() + this.animalList.getWidth() + 16;
        this.animalList.set_x(w - 4 - this.animalList.getWidth());
        this.animalList.set_y(4);
        var draw = new com_davidmaletz_faengfl_CompoundDrawable();
        draw.add(com_davidmaletz_mining_Main.window_factory.create(this.farmList.getWidth() + 8, this.farmList.getHeight() + 8), 0, 0);
        var _x = this.farmList.getWidth() + 8 - 1;
        var _w = this.animalList.getWidth() + 8 + 1;
        draw.add(com_davidmaletz_mining_Main.window_factory.create(_w, this.farmList.getHeight() + 8), _x, 0);
        com_davidmaletz_controls_ClickableWindow.call(this, c, draw, true, true, true, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "harvest"), this.farmList.getWidth() + 8);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "manage"), this.animalList.getWidth() + 8, this.animalList.get_x() - 4);
        this.addChild(this.farmList);
        this.addChild(this.animalList);
        this.player = player;
        var close = new com_davidmaletz_controls_CloseButton(this, this.farmList.getWidth() + this.animalList.getWidth() + 16, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_x(this.farmList.getWidth() + 3);
        this.addChild(this.details);
        this.animal_details = new com_davidmaletz_mining_ui_AnimalInfo();
        this.animal_details.set_x(this.animalList.get_x() - 76 + 3);
        this.addChild(this.animal_details);
    };
    $hxClasses["com.davidmaletz.mining.ui.PenWindow"] = com_davidmaletz_mining_ui_PenWindow;
    com_davidmaletz_mining_ui_PenWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "PenWindow"];
    com_davidmaletz_mining_ui_PenWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_PenWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_PenWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        onSelect: function(item) {
            item.collect(this.player);
        },
        onHover: function(item) {
            this.animal_details.setItem(null);
            this.details.setItem(item == null ? null: item.info.item);
            this.details.set_y(Math.round((this.farmList.getHeight() + 8 - this.details._height) * 0.5));
        },
        showAnimalDetails: function(item) {
            this.details.setItem(null);
            this.animal_details.setItem(item);
            this.animal_details.set_y(Math.round((this.farmList.getHeight() + 8 - this.animal_details._height) * 0.5));
        },
        isEnabled: function(item) {
            return true;
        },
        init: function(e) {
            this.rem(null);
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
            this.pen.addEventListener("add_item", $bind(this, this.add));
            this.pen.addEventListener("rem_item", $bind(this, this.rem));
        },
        destroy: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
            this.pen.removeEventListener("add_item", $bind(this, this.add));
            this.pen.removeEventListener("rem_item", $bind(this, this.rem));
        },
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.farmList.list.clickables, this.animalList.list.clickables], [this.farmList.get_x(), this.animalList.get_x()]);
        },
        add: function(e) {
            this.farmList.addItem(e.value);
        },
        rem: function(e) {
            var p = com_davidmaletz_controls_scroll_ScrollList.preSwitch(this.clickables);
            var y = -this.farmList.list.get_y();
            this.farmList.list.clear();
            var $it0 = HxOverrides.iter(this.pen.items);
            while ($it0.hasNext()) {
                var i = $it0.next();
                this.farmList.addItem(i);
            }
            var ht = this.farmList.getViewportHeight();
            var sht = this.farmList.list.getHeight();
            ht = sht - ht;
            if (y > ht) y = ht;
            if (y < 0) y = 0;
            if ( - this.farmList.list.get_y() == y) this.farmList.scrollbar.update();
            else this.farmList.updateScroll(y);
            if (p != null) this.clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
        },
        getWidth: function() {
            return this.farmList.getWidth() + this.animalList.getWidth() + 16;
        },
        getHeight: function() {
            return this.farmList.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_PenWindow
    });
    var com_davidmaletz_mining_ui_Preloader = function() {
        NMEPreloader.call(this);
        openfl_display_Preloader.soundFail = com_davidmaletz_mining_ui_Preloader.soundFail;
        openfl_Assets.loadBitmapData("data/title_full.jpg", true, $bind(this, this.addBG));
        this.progressBar = new com_davidmaletz_controls_ProgressBar(200, 3, 10027008, 0, false, false);
        var bg = new openfl_display_Sprite();
        var g = bg.get_graphics();
        g.lineStyle(1);
        g.beginFill(16777215);
        g.drawRect( - 1, -1, 202, 5);
        g.endFill();
        this.progressBar.addChildAt(bg, 0);
        this.progressBar.set_x(Math.round(28.));
        this.progressBar.set_y(Math.round(69.5) - 12);
        this.addChild(this.progressBar);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui.Preloader"] = com_davidmaletz_mining_ui_Preloader;
    com_davidmaletz_mining_ui_Preloader.__name__ = ["com", "davidmaletz", "mining", "ui", "Preloader"];
    com_davidmaletz_mining_ui_Preloader.soundFail = function() {
        com_davidmaletz_mining_ui_Preloader.sound_fail = true;
    };
    com_davidmaletz_mining_ui_Preloader.onStart = function() {
        if (com_davidmaletz_mining_ui_Preloader.sound_fail) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            c.addDisplay(new com_davidmaletz_mining_ui_DialogueBox(c, "Your browser does not support ogg audio files. No music or sfx will play. Both Chrome and Firefox work great for playing sound."), 1);
        }
    };
    com_davidmaletz_mining_ui_Preloader.__super__ = NMEPreloader;
    com_davidmaletz_mining_ui_Preloader.prototype = $extend(NMEPreloader.prototype, {
        addBG: function(bmp) {
            var b = new openfl_display_Bitmap(bmp, 1, true);
            b.set_scaleX(b.set_scaleY(256 / bmp.width));
            this.addChildAt(b, 0);
        },
        init: function(e) {
            this.destroy(e);
            openfl_Lib.current.stage.addEventListener("resize", $bind(this, this.resize));
            this.resize(null);
        },
        destroy: function(e) {
            openfl_Lib.current.stage.removeEventListener("resize", $bind(this, this.resize));
        },
        resize: function(e) {
            var w = this.stage.stageWidth;
            var h = this.stage.stageHeight;
            var iw = 256;
            var ih = 144;
            var s = Math.min(w / iw, h / ih);
            this.set_scaleX(this.set_scaleY(s));
            this.set_x((w - iw * s) * 0.5);
            this.set_y((h - ih * s) * 0.5);
        },
        onInit: function() {},
        onLoaded: function() {
            this.progressBar.setProgress(1);
            this.dispatchEvent(new openfl_events_Event("complete"));
        },
        onUpdate: function(bytesLoaded, bytesTotal) {
            var percentLoaded = bytesLoaded / bytesTotal;
            if (percentLoaded > 1) percentLoaded = 1;
            this.progressBar.setProgress(percentLoaded);
        },
        __class__: com_davidmaletz_mining_ui_Preloader
    });
    var com_davidmaletz_mining_ui_Projectiles = function(p, c, i) {
        com_davidmaletz_lerp_LerpSprite.call(this);
        this.player = p;
        this.value = new com_fancyfish_faeng_common_mutable_Mutable();
        this.value.set("");
        this.icon = new openfl_display_Sprite();
        this.addChild(this.icon);
        var t = new com_davidmaletz_faengfl_TextSprite(this.value, new com_fancyfish_faeng_text_CharacterPlacer(10, 2), 16777215, 1);
        this.set_visible(false);
        this.set_alpha(0);
        t.set_x(com_davidmaletz_tiles_Tile.SIZE + 2);
        this.addChild(t);
        this.set_x(32 + com_davidmaletz_tiles_Tile.SIZE + (com_davidmaletz_tiles_Tile.SIZE + 4 + 10) * i);
        this.set_y(2);
    };
    $hxClasses["com.davidmaletz.mining.ui.Projectiles"] = com_davidmaletz_mining_ui_Projectiles;
    com_davidmaletz_mining_ui_Projectiles.__name__ = ["com", "davidmaletz", "mining", "ui", "Projectiles"];
    com_davidmaletz_mining_ui_Projectiles.__super__ = com_davidmaletz_lerp_LerpSprite;
    com_davidmaletz_mining_ui_Projectiles.prototype = $extend(com_davidmaletz_lerp_LerpSprite.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.init.call(this, e);
            this.player.equipment.addEventListener("updated", $bind(this, this.change));
            this.player.inventory.addEventListener("item_added", $bind(this, this.item_added));
            this.change(null);
        },
        destroy: function(e) {
            com_davidmaletz_lerp_LerpSprite.prototype.destroy.call(this, e);
            this.player.equipment.removeEventListener("updated", $bind(this, this.change));
            this.player.inventory.removeEventListener("item_added", $bind(this, this.item_added));
        },
        hide: function() {
            this.set_visible(false);
        },
        change: function(e) {
            var eq = this.player.equipment.get();
            if (eq != null && !eq.xml.exists("projectile")) eq = null;
            var v = eq != null;
            if (v) {
                var p = com_davidmaletz_mining_item_Item.get(eq.xml.get("projectile"));
                if (p != this.projectile) {
                    this.projectile = p;
                    com_davidmaletz_faengfl_FaengFL.removeAllChildren(this.icon);
                    this.icon.addChild(p.createIcon());
                }
                this.value.set(Std.string(this.player.inventory.getItemCount(this.projectile)));
            } else this.projectile = null;
            if (v != this.get_visible()) {
                if (v) {
                    this.set_visible(true);
                    this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
                } else this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10, $bind(this, this.hide));
            }
        },
        item_added: function(e) {
            if (e.item == this.projectile) this.change(null);
        },
        __class__: com_davidmaletz_mining_ui_Projectiles
    });
    var com_davidmaletz_mining_ui_Prompt = function(c, str, onAccept) {
        var t = new com_davidmaletz_faengfl_TextSprite(str, new com_fancyfish_faeng_text_WrapCharacterPlacer(142, 1), 0, 1);
        t.draw();
        var y = t.bounds.height * t.get_scaleY() + 8;
        var ht = y + com_davidmaletz_faengfl_Application.button_factory.defaultHeight() + 4;
        com_davidmaletz_controls_ClickableWindow.call(this, c, com_davidmaletz_mining_Main.window_factory.create(150, ht));
        t.set_x(4);
        t.set_y(4);
        this.addChild(t);
        this.onAccept = onAccept;
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(4, y, com_fancyfish_faeng_common_Lang.getText("common", "yes"), $bind(this, this.confirm)));
        this.addClickable(new com_davidmaletz_mining_ui_TextButton(106, y, com_fancyfish_faeng_common_Lang.getText("common", "no"), $bind(this, this.close)));
        this.clickables.moveSelection(1, 0);
        this.clickables.moveSelection(1, 0);
    };
    $hxClasses["com.davidmaletz.mining.ui.Prompt"] = com_davidmaletz_mining_ui_Prompt;
    com_davidmaletz_mining_ui_Prompt.__name__ = ["com", "davidmaletz", "mining", "ui", "Prompt"];
    com_davidmaletz_mining_ui_Prompt.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_Prompt.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        confirm: function() {
            this.onAccept();
            this.close();
        },
        __class__: com_davidmaletz_mining_ui_Prompt
    });
    var com_davidmaletz_mining_ui_QuestInfo = function(p) {
        openfl_display_Sprite.call(this);
        this.player = p;
    };
    $hxClasses["com.davidmaletz.mining.ui.QuestInfo"] = com_davidmaletz_mining_ui_QuestInfo;
    com_davidmaletz_mining_ui_QuestInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "QuestInfo"];
    com_davidmaletz_mining_ui_QuestInfo.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_QuestInfo.prototype = $extend(openfl_display_Sprite.prototype, {
        setQuest: function(q, w, title, col) {
            if (col == null) col = 0;
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            var y = 0;
            var t = new com_davidmaletz_faengfl_TextSprite(title == null ? com_fancyfish_faeng_common_Lang.getText("quests", q.id) : title, new com_fancyfish_faeng_text_CharacterPlacer(w, 1), col, 1);
            t.set_y(y);
            this.addChild(t);
            y += 12;
            var add = "";
            if (q.giver != null) add = "[color=770000][tile=" + (js_Boot.__cast(com_davidmaletz_mining_world_ObjectInfo.get(q.giver), com_davidmaletz_mining_npc_NPCInfo)).tile + "] " + com_fancyfish_faeng_common_Lang.getText("npc", q.giver).get() + "[/color] ";
            var t1 = new com_davidmaletz_mining_ui_MyFormattedText(w, true);
            t1.default_color = 6710886;
            t1.setText(add + com_fancyfish_faeng_common_Lang.getText("quest.description", q.id).get());
            t1.set_y(y);
            this.addChild(t1);
            y += Math.ceil(3 * t1.default_font.get().lineHeight);
            var complete = this.player.questMap.get(q.id) == true;
            var t2 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("quests", complete ? "complete": "requires"), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 153, 1);
            t2.set_y(y);
            this.addChild(t2);
            y += 12;
            if (complete) return;
            if (q.coins > 0) {
                var icon = ((function($this) {
                    var $r;
                    if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                    $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
                    return $r;
                } (this))).createIcon();
                icon.set_y(y);
                this.addChild(icon);
                var t3 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "coins"), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
                t3.set_x(com_davidmaletz_tiles_Tile.SIZE + 1);
                t3.set_y(y);
                this.addChild(t3);
                var t4 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(this.player.coins + "/" + q.coins), new com_fancyfish_faeng_text_CharacterPlacer(w, 2), this.player.coins < q.coins ? 16711680 : 0, 1);
                t4.set_y(y);
                this.addChild(t4);
                y += 10;
            }
            var $it0 = HxOverrides.iter(q.requires);
            while ($it0.hasNext()) {
                var i = $it0.next();
                com_davidmaletz_mining_ui_ItemRenderer.addItem(this, i.item, 0, y);
                var ct = this.player.inventory.getItemCount(i.item);
                var t5 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(ct + "/" + i.count), new com_fancyfish_faeng_text_CharacterPlacer(w, 2), ct < i.count ? 16711680 : 0, 1);
                t5.set_y(y);
                this.addChild(t5);
                y += 10;
            }
        },
        __class__: com_davidmaletz_mining_ui_QuestInfo
    });
    var com_davidmaletz_mining_ui_QuestItemRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.QuestItemRenderer"] = com_davidmaletz_mining_ui_QuestItemRenderer;
    com_davidmaletz_mining_ui_QuestItemRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "QuestItemRenderer"];
    com_davidmaletz_mining_ui_QuestItemRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_QuestItemRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui_QuestButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 80;
        },
        getHeight: function(item) {
            return 10;
        },
        __class__: com_davidmaletz_mining_ui_QuestItemRenderer
    };
    var com_davidmaletz_mining_ui_QuestButton = function(h, i, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(80, 10), com_davidmaletz_mining_Main.label_factory.createHover(80, 10), null);
        this.handler = h;
        this.item = i;
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("quests", i.id), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(1);
        if (!h.isEnabled(i)) t.set_alpha(0.5);
        this.addChild(t);
    };
    $hxClasses["com.davidmaletz.mining.ui.QuestButton"] = com_davidmaletz_mining_ui_QuestButton;
    com_davidmaletz_mining_ui_QuestButton.__name__ = ["com", "davidmaletz", "mining", "ui", "QuestButton"];
    com_davidmaletz_mining_ui_QuestButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_QuestButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.item);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.item: null);
        },
        __class__: com_davidmaletz_mining_ui_QuestButton
    });
    var com_davidmaletz_mining_ui_QuestLog = function(p, c) {
        com_davidmaletz_controls_scroll_ScrollWindow.call(this, c, com_davidmaletz_mining_Main.window_factory, new com_davidmaletz_mining_ui_QuestItemRenderer(this), 10, 1);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, com_fancyfish_faeng_common_Lang.getText("common", "quests"), this.getWidth());
        if (p.quests.length + p.completeQuests.size() == 0) {
            var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("quests", "none"), new com_fancyfish_faeng_text_WrapCharacterPlacer(this.list.getWidth(), 1), 0, 1);
            t.set_x(this.list.get_x());
            t.set_y(this.list.get_y());
            this.addChild(t);
        } else {
            this.details = new com_davidmaletz_mining_ui_QuestInfo(p);
            this.details.set_x(com_davidmaletz_controls_scroll_ScrollWindow.prototype.getWidth.call(this) + 4);
            this.details.set_y(4);
            this.addChild(this.details);
            var $it0 = HxOverrides.iter(p.quests);
            while ($it0.hasNext()) {
                var q = $it0.next();
                this.addItem(q);
            }
            var $it1 = new com_fancyfish_faeng_common__$Dequeue_DequeueIterator(p.completeQuests);
            while ($it1.hasNext()) {
                var q1 = $it1.next();
                this.addItem(q1);
            }
        }
        var achievements = new com_davidmaletz_mining_ui_TextButton(this.getWidth(), this.getHeight() + 2, com_fancyfish_faeng_common_Lang.getText("options", "achievements"), $bind(this, this.showAchievements), 80);
        this.addChild(achievements);
        this.clickables.clickables.addClickable(achievements, this);
        achievements.getPos().x -= 80;
        var _g = achievements;
        _g.set_x(_g.get_x() - 80);
    };
    $hxClasses["com.davidmaletz.mining.ui.QuestLog"] = com_davidmaletz_mining_ui_QuestLog;
    com_davidmaletz_mining_ui_QuestLog.__name__ = ["com", "davidmaletz", "mining", "ui", "QuestLog"];
    com_davidmaletz_mining_ui_QuestLog.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_QuestLog.__super__ = com_davidmaletz_controls_scroll_ScrollWindow;
    com_davidmaletz_mining_ui_QuestLog.prototype = $extend(com_davidmaletz_controls_scroll_ScrollWindow.prototype, {
        showAchievements: function() {
            var c;
            c = (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).fullRes;
            c.addDisplay(new com_davidmaletz_mining_ui_AchievementWindow(c), 0);
        },
        makeDrawable: function(factory) {
            var draw = new com_davidmaletz_faengfl_CompoundDrawable();
            var d = factory.create(com_davidmaletz_controls_scroll_ScrollWindow.prototype.getWidth.call(this), this.getHeight());
            draw.add(d, 0, 0);
            draw.add(factory.create(106 + 8, this.getHeight()), d.getWidth() - 1, 0);
            return draw;
        },
        getQuestWidth: function() {
            return 106;
        },
        getWidth: function() {
            return com_davidmaletz_controls_scroll_ScrollWindow.prototype.getWidth.call(this) - 1 + 106 + 8;
        },
        onSelect: function(item) {},
        onHover: function(item) {
            if (item == null) return;
            this.details.setQuest(item, 106);
        },
        isEnabled: function(item) {
            return ! (this.details.player.questMap.get(item.id) == true);
        },
        init: function(e) {
            com_davidmaletz_controls_scroll_ScrollWindow.prototype.init.call(this, e);
            com_davidmaletz_controls_Controller.instance.addEventListener("tap", $bind(this, this.release), false, com_davidmaletz_faengfl_Window.window_ct + 1);
        },
        destroy: function(e) {
            com_davidmaletz_controls_scroll_ScrollWindow.prototype.destroy.call(this, e);
            com_davidmaletz_controls_Controller.instance.removeEventListener("tap", $bind(this, this.release));
        },
        release: function(e) {
            if (e.key == "quest") this.close();
        },
        __class__: com_davidmaletz_mining_ui_QuestLog
    });
    var com_davidmaletz_mining_ui_RecipeInfo = function() {
        openfl_display_Sprite.call(this);
        this.set_visible(false);
        this._height = 0;
    };
    $hxClasses["com.davidmaletz.mining.ui.RecipeInfo"] = com_davidmaletz_mining_ui_RecipeInfo;
    com_davidmaletz_mining_ui_RecipeInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "RecipeInfo"];
    com_davidmaletz_mining_ui_RecipeInfo.__super__ = openfl_display_Sprite;
    com_davidmaletz_mining_ui_RecipeInfo.prototype = $extend(openfl_display_Sprite.prototype, {
        setItem: function(r, inventory) {
            if (this.recipe == r) return;
            this.recipe = r;
            if (r == null) this.set_visible(false);
            else {
                com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
                this.set_visible(true);
                var y = 3;
                var w = 96;
                y = this.addTitle(r, w, y);
                var t = new com_davidmaletz_faengfl_TextSprite(this.getRequires(), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 153, 1);
                t.set_y(y);
                this.addChild(t);
                y += 10;
                var $it0 = HxOverrides.iter(r.requires);
                while ($it0.hasNext()) {
                    var i = $it0.next();
                    com_davidmaletz_mining_ui_ItemRenderer.addItem(this, i.item, 3, y);
                    var t1;
                    if (inventory == null) t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(i.count == null ? "null": "" + i.count), new com_fancyfish_faeng_text_CharacterPlacer(w - 6, 2), 0, 1);
                    else {
                        var ct = inventory.getItemCount(i.item);
                        t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(ct + "/" + i.count), new com_fancyfish_faeng_text_CharacterPlacer(w - 6, 2), ct < i.count ? 16711680 : 0, 1);
                    }
                    t1.set_x(3);
                    t1.set_y(y);
                    this.addChild(t1);
                    y += 10;
                }
                this._height = y + 3;
                this.addChildAt(com_davidmaletz_mining_Main.window_factory.create(w, this._height).create(0, 0), 0);
            }
        },
        getRequires: function() {
            return com_fancyfish_faeng_common_Lang.getText("common", "requires");
        },
        addTitle: function(r, w, y) {
            if (r.creates == null) {
                var t = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(com_fancyfish_faeng_common_Lang.getText("common", "add_fuel"), ": " + (r.fuel == null ? "null": "" + r.fuel)), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 0, 1);
                t.set_y(y);
                this.addChild(t);
                y += 10;
            } else y = r.creates.addInfo(this, w, y);
            return y;
        },
        getWidth: function() {
            return 96;
        },
        getHeight: function() {
            return this._height;
        },
        __class__: com_davidmaletz_mining_ui_RecipeInfo
    });
    var com_davidmaletz_mining_ui_RecipeRenderer = function(handler, i) {
        this.handler = handler;
        this.inventory = i;
    };
    $hxClasses["com.davidmaletz.mining.ui.RecipeRenderer"] = com_davidmaletz_mining_ui_RecipeRenderer;
    com_davidmaletz_mining_ui_RecipeRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "RecipeRenderer"];
    com_davidmaletz_mining_ui_RecipeRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_RecipeRenderer.prototype = {
        create: function(item, x, y) {
            if (item.creates != null) return new com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton(this.handler, this.inventory, item, x, y);
            else if (item.structure != null) return new com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton(this.handler, this.inventory, item, x, y);
            else return new com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton(this.handler, this.inventory, item, x, y);
        },
        update: function(s, item) { (js_Boot.__cast(s, com_davidmaletz_mining_ui__$RecipeRenderer_ListButton)).updateEnabled();
        },
        getWidth: function() {
            return 104;
        },
        getHeight: function(item) {
            if (item != null && item.fuel != 0) return 10;
            else return 20;
        },
        __class__: com_davidmaletz_mining_ui_RecipeRenderer
    };
    var com_davidmaletz_mining_ui__$RecipeRenderer_ListButton = function(handler, i, r, bg, hover, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, bg, hover, null);
        this.inventory = i;
        this.handler = handler;
        this.recipe = r;
        var icon = this.getIcon();
        this.text = new openfl_display_Sprite();
        if (icon != null) {
            var _g = icon;
            _g.set_x(_g.get_x() + 2);
            icon.set_y(0);
            this.text.addChild(icon);
        }
        var t = new com_davidmaletz_faengfl_TextSprite(this.getName(), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(4 + this.getIconWidth());
        this.text.addChild(t);
        this.addChild(this.text);
    };
    $hxClasses["com.davidmaletz.mining.ui._RecipeRenderer.ListButton"] = com_davidmaletz_mining_ui__$RecipeRenderer_ListButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_RecipeRenderer", "ListButton"];
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.recipe);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.recipe: null);
        },
        updateEnabled: function() {},
        getIcon: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        getIconWidth: function() {
            return com_davidmaletz_tiles_Tile.SIZE;
        },
        getName: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        __class__: com_davidmaletz_mining_ui__$RecipeRenderer_ListButton
    });
    var com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton = function(handler, i, r, x, y) {
        com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.call(this, handler, i, r, com_davidmaletz_mining_Main.label_factory.createBG(104, 10), com_davidmaletz_mining_Main.label_factory.createHover(104, 10), x, y);
        this.updateEnabled();
    };
    $hxClasses["com.davidmaletz.mining.ui._RecipeRenderer.FuelButton"] = com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_RecipeRenderer", "FuelButton"];
    com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton.__super__ = com_davidmaletz_mining_ui__$RecipeRenderer_ListButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton.prototype = $extend(com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.prototype, {
        updateEnabled: function() {
            this.text.set_alpha(this.inventory.canCraft(this.recipe) ? 1 : 0.5);
        },
        getIcon: function() {
            return HxOverrides.iter(this.recipe.requires).next().item.createIcon();
        },
        getName: function() {
            return com_fancyfish_faeng_common_Lang.getText("common", "add_fuel");
        },
        __class__: com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton
    });
    var com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton = function(handler, i, r, x, y) {
        com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.call(this, handler, i, r, com_davidmaletz_mining_Main.label_factory.createBG(104, 20), com_davidmaletz_mining_Main.label_factory.createHover(104, 20), x, y);
        var x1 = 6;
        this.reqs = [];
        var $it0 = HxOverrides.iter(this.recipe.requires);
        while ($it0.hasNext()) {
            var r1 = $it0.next();
            var icon = r1.item.createIcon();
            icon.set_x(x1);
            icon.set_y(10);
            this.text.addChild(icon);
            var t = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(r1.count == null ? "null": "" + r1.count), new com_fancyfish_faeng_text_CharacterPlacer(8, 1), 16711680, 1);
            t.set_x(x1 + com_davidmaletz_tiles_Tile.SIZE);
            t.set_y(10);
            this.text.addChild(t);
            x1 += com_davidmaletz_tiles_Tile.SIZE + 8;
            this.reqs.push(t);
        }
        this.updateEnabled();
    };
    $hxClasses["com.davidmaletz.mining.ui._RecipeRenderer.RecipeButton"] = com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_RecipeRenderer", "RecipeButton"];
    com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.__super__ = com_davidmaletz_mining_ui__$RecipeRenderer_ListButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.prototype = $extend(com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.prototype, {
        updateEnabled: function() {
            var enabled = this.handler.isEnabled(this.recipe);
            var i = 0;
            var $it0 = HxOverrides.iter(this.recipe.requires);
            while ($it0.hasNext()) {
                var r = $it0.next();
                var req = this.reqs[i++];
                var c = req.get_transform().get_colorTransform();
                var e = this.inventory.getItemCount(r.item) < r.count;
                if (e) enabled = false;
                if (e) c.redMultiplier = 1;
                else c.redMultiplier = 0;
                req.get_transform().set_colorTransform(c);
            }
            this.text.set_alpha(enabled ? 1 : 0.5);
        },
        getIcon: function() {
            return this.recipe.creates.createIcon();
        },
        getName: function() {
            return com_fancyfish_faeng_common_Lang.getText("item.names", this.recipe.creates.id);
        },
        __class__: com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton
    });
    var com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton = function(handler, i, r, x, y) {
        com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.call(this, handler, i, r, x, y);
    };
    $hxClasses["com.davidmaletz.mining.ui._RecipeRenderer.StructureButton"] = com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_RecipeRenderer", "StructureButton"];
    com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton.__super__ = com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton;
    com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton.prototype = $extend(com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.prototype, {
        getIcon: function() {
            return null;
        },
        getIconWidth: function() {
            return 0;
        },
        getName: function() {
            return com_fancyfish_faeng_common_Lang.getText("structure", this.recipe.structure.id);
        },
        __class__: com_davidmaletz_mining_ui__$RecipeRenderer_StructureButton
    });
    var com_davidmaletz_mining_ui_SaveRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.SaveRenderer"] = com_davidmaletz_mining_ui_SaveRenderer;
    com_davidmaletz_mining_ui_SaveRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "SaveRenderer"];
    com_davidmaletz_mining_ui_SaveRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_SaveRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui_SaveButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 80;
        },
        getHeight: function(item) {
            return 20;
        },
        __class__: com_davidmaletz_mining_ui_SaveRenderer
    };
    var com_davidmaletz_mining_ui_SaveButton = function(h, i, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(80, 20), com_davidmaletz_mining_Main.label_factory.createHover(80, 20), null);
        this.handler = h;
        this.slot = i;
        var s = new openfl_display_Sprite();
        if (!h.isEnabled(i)) s.set_alpha(0.5);
        this.addChild(s);
        var header = com_davidmaletz_mining_Main.getSlotHeader("slot" + this.slot);
        if (typeof(header) == "boolean") {
            var t2 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", header ? "empty_slot": "corrupt_slot"), new com_fancyfish_faeng_text_CharacterPlacer(80 - com_davidmaletz_tiles_Tile.SIZE, 1), 0, 1);
            t2.set_x(com_davidmaletz_tiles_Tile.SIZE);
            s.addChild(t2);
            return;
        }
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("world", header.area), new com_fancyfish_faeng_text_CharacterPlacer(80 - com_davidmaletz_tiles_Tile.SIZE, 1), 0, 1);
        t.set_x(com_davidmaletz_tiles_Tile.SIZE);
        s.addChild(t);
        var t1 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static(com_davidmaletz_mining_ui_SaveButton.makeTime(header.time)), new com_fancyfish_faeng_text_CharacterPlacer(80 - com_davidmaletz_tiles_Tile.SIZE, 1), 0, 1);
        t1.set_x(com_davidmaletz_tiles_Tile.SIZE);
        t1.set_y(10);
        s.addChild(t1);
        var p = header.player;
        var i1 = new com_davidmaletz_tiles_render_TileAnimationRenderer(p.getInfo().tile, 10);
        var e = p.equipment.get();
        if (e == null) {
            e = p.mine.get();
            if (e == null) e = p.cut.get();
        }
        if (e != null) {
            var eq = new com_davidmaletz_tiles_render_TileAnimationRenderer(com_davidmaletz_tiles_Tile.get(e.id), 10);
            eq.setAnimation("equipment." + e.id);
            i1.addChild(eq);
            i1.setAnimation("player.mine");
        } else i1.setAnimation("player.idle");
        i1.set_y((20 - com_davidmaletz_tiles_Tile.SIZE) * 0.5);
        s.addChild(i1);
    };
    $hxClasses["com.davidmaletz.mining.ui.SaveButton"] = com_davidmaletz_mining_ui_SaveButton;
    com_davidmaletz_mining_ui_SaveButton.__name__ = ["com", "davidmaletz", "mining", "ui", "SaveButton"];
    com_davidmaletz_mining_ui_SaveButton.two = function(i) {
        if (i < 10) return "0" + i;
        else if (i == null) return "null";
        else return "" + i;
    };
    com_davidmaletz_mining_ui_SaveButton.makeTime = function(s) {
        var day = Math.floor(s / 86400);
        s -= day * 86400;
        var hour = Math.floor(s / 3600);
        s -= hour * 3600;
        var minute = Math.floor(s / 60);
        s -= minute * 60;
        return (day > 0 ? day + "d ": "") + (hour < 10 ? "0" + hour: hour == null ? "null": "" + hour) + ":" + (minute < 10 ? "0" + minute: minute == null ? "null": "" + minute) + ":" + (s < 10 ? "0" + s: s == null ? "null": "" + s);
    };
    com_davidmaletz_mining_ui_SaveButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_SaveButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        onClick: function() {
            this.handler.onSelect(this.slot);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.slot: null);
        },
        __class__: com_davidmaletz_mining_ui_SaveButton
    });
    var com_davidmaletz_mining_ui_ScrollbarUI = function() {};
    $hxClasses["com.davidmaletz.mining.ui.ScrollbarUI"] = com_davidmaletz_mining_ui_ScrollbarUI;
    com_davidmaletz_mining_ui_ScrollbarUI.__name__ = ["com", "davidmaletz", "mining", "ui", "ScrollbarUI"];
    com_davidmaletz_mining_ui_ScrollbarUI.__interfaces__ = [com_davidmaletz_controls_scroll_ScrollUI];
    com_davidmaletz_mining_ui_ScrollbarUI.prototype = {
        isAlwaysVisible: function() {
            return false;
        },
        getWidth: function() {
            return 7;
        },
        getMinKnobHeight: function() {
            return 14;
        },
        getBitmap: function() {
            return com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/ancient_scroll.png", 7, 7);
        },
        createScrollbar: function(h) {
            return new com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar(com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/ancient_scroll.png", 7, 7), 0).setHeight(h);
        },
        createKnob: function() {
            return new com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar(com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/ancient_scroll.png", 7, 7), 1);
        },
        setKnobHeight: function(knob, h) { (js_Boot.__cast(knob, com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar)).setHeight(h);
        },
        __class__: com_davidmaletz_mining_ui_ScrollbarUI
    };
    var com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar = function(b, x) {
        com_davidmaletz_faengfl_TileLayer.call(this);
        this.bitmap = b;
        this.tx = x;
    };
    $hxClasses["com.davidmaletz.mining.ui._ScrollbarUI.Scrollbar"] = com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar;
    com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar.__name__ = ["com", "davidmaletz", "mining", "ui", "_ScrollbarUI", "Scrollbar"];
    com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar.__super__ = com_davidmaletz_faengfl_TileLayer;
    com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar.prototype = $extend(com_davidmaletz_faengfl_TileLayer.prototype, {
        setHeight: function(height) {
            var h = Math.ceil(height / 7) - 2;
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(this);
            this.get_graphics().clear();
            this.handler.start(this.get_graphics(), 0);
            var _g = 0;
            while (_g < h) {
                var y = _g++;
                this.addTile(this.bitmap, 0, (y + 1) * 7, this.bitmap.getIdx(this.tx, 1), null, null, null, null, null);
            }
            this.addTile(this.bitmap, 0, 0, this.bitmap.getIdx(this.tx, 0), null, null, null, null, null);
            this.addTile(this.bitmap, 0, height - 7, this.bitmap.getIdx(this.tx, 2), null, null, null, null, null);
            this.handler.finish();
            return this;
        },
        __class__: com_davidmaletz_mining_ui__$ScrollbarUI_Scrollbar
    });
    var com_davidmaletz_mining_ui_SellPrompt = function(c, item, func) {
        com_davidmaletz_mining_ui_CountPrompt.call(this, c, com_fancyfish_faeng_common_Lang.getText("common", "sell_item"), func, 0, item.count, 0, 12, 14);
        com_davidmaletz_mining_ui_ItemRenderer.addItemCentered(this, item.item, 50, 4);
        this.costPerItem = Math.round(item.item.cost * 0.7);
        this.spinner.addEventListener("change_value", $bind(this, this.updateCost));
    };
    $hxClasses["com.davidmaletz.mining.ui.SellPrompt"] = com_davidmaletz_mining_ui_SellPrompt;
    com_davidmaletz_mining_ui_SellPrompt.__name__ = ["com", "davidmaletz", "mining", "ui", "SellPrompt"];
    com_davidmaletz_mining_ui_SellPrompt.__super__ = com_davidmaletz_mining_ui_CountPrompt;
    com_davidmaletz_mining_ui_SellPrompt.prototype = $extend(com_davidmaletz_mining_ui_CountPrompt.prototype, {
        updateCost: function(e) {
            this.cost.set(Std.string(this.spinner.value * this.costPerItem));
        },
        afterSpinner: function(y) {
            this.cost = new com_fancyfish_faeng_common_mutable_Mutable();
            this.cost.set("0");
            var x = (100 - com_davidmaletz_tiles_Tile.SIZE * 3) * 0.5;
            var icon = ((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
                return $r;
            } (this))).createIcon();
            icon.set_x(x);
            icon.set_y(y);
            this.addChild(icon);
            var t = new com_davidmaletz_faengfl_TextSprite(this.cost, new com_fancyfish_faeng_text_CharacterPlacer(com_davidmaletz_tiles_Tile.SIZE * 2, 1), 0, 1);
            t.set_x(com_davidmaletz_tiles_Tile.SIZE + x + 2);
            t.set_y(y);
            this.addChild(t);
        },
        __class__: com_davidmaletz_mining_ui_SellPrompt
    });
    var com_davidmaletz_mining_ui_SmeltItemRenderer = function(handler) {
        this.handler = handler;
    };
    $hxClasses["com.davidmaletz.mining.ui.SmeltItemRenderer"] = com_davidmaletz_mining_ui_SmeltItemRenderer;
    com_davidmaletz_mining_ui_SmeltItemRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "SmeltItemRenderer"];
    com_davidmaletz_mining_ui_SmeltItemRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_SmeltItemRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton(this.handler, item, x, y);
        },
        update: function(s, item) {},
        getWidth: function() {
            return 92;
        },
        getHeight: function(item) {
            return 13;
        },
        __class__: com_davidmaletz_mining_ui_SmeltItemRenderer
    };
    var com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton = function(handler, i, x, y) {
        com_davidmaletz_controls_Button.call(this, x, y, com_davidmaletz_mining_Main.label_factory.createBG(92, 13), com_davidmaletz_mining_Main.label_factory.createHover(92, 13), null);
        var r = i.recipe;
        this.handler = handler;
        this.complete = r.creates.createIcon();
        this.incomplete = new openfl_display_Sprite();
        var _x = 0;
        var $it0 = HxOverrides.iter(r.requires);
        while ($it0.hasNext()) {
            var req = $it0.next();
            var icon = req.item.createIcon();
            icon.set_x(_x);
            this.incomplete.addChildAt(icon, 0);
            _x += 4;
        }
        this.complete.set_x(8);
        this.complete.set_y(0);
        this.addChild(this.complete);
        this.incomplete.set_x(2 + (12 - _x) * 0.5);
        this.incomplete.set_y(0);
        this.addChild(this.incomplete);
        this.item = i;
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("item.names", r.creates.id), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
        t.set_x(4 + com_davidmaletz_tiles_Tile.SIZE + 12);
        this.addChild(t);
        var p = 1 - i.fuel / 125;
        this.progress = new com_davidmaletz_controls_ProgressBar(92, 2, 16776960, p, false);
        if (p == 1) {
            this.incomplete.set_visible(false);
            this.progress.set_visible(false);
        } else this.complete.set_visible(false);
        this.progress.set_y(11);
        this.addChild(this.progress);
        this.addEventListener("addedToStage", $bind(this, this.init));
        this.addEventListener("removedFromStage", $bind(this, this.destroy));
    };
    $hxClasses["com.davidmaletz.mining.ui._SmeltItemRenderer.ListButton"] = com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton;
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.__name__ = ["com", "davidmaletz", "mining", "ui", "_SmeltItemRenderer", "ListButton"];
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        init: function(e) {
            this.destroy(e);
            this.item.addEventListener("update_percent", $bind(this, this.update));
        },
        destroy: function(e) {
            this.item.removeEventListener("update_percent", $bind(this, this.update));
        },
        onClick: function() {
            this.handler.onSelect(this.item);
            return true;
        },
        onHover: function(hover) {
            com_davidmaletz_controls_Button.prototype.onHover.call(this, hover);
            this.handler.onHover(hover ? this.item: null);
        },
        update: function(e) {
            var p = 1 - this.item.fuel / 125;
            if (p == 1) {
                this.progress.set_visible(false);
                this.incomplete.set_visible(false);
                this.complete.set_visible(true);
            } else this.progress.setProgress(p);
        },
        __class__: com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton
    });
    var com_davidmaletz_mining_ui_SmeltWindow = function(player, label, smelter, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        this.recipeList = new com_davidmaletz_mining_ui_CraftingList(smelter.info.getRecipes(), this, player.inventory, c);
        this.recipeList.set_x(4);
        this.recipeList.set_y(4);
        this.smeltList = new com_davidmaletz_mining_ui__$SmeltWindow_SmeltList(player, smelter, c);
        var w = this.recipeList.getWidth() + this.smeltList.getWidth() + 16;
        this.smeltList.set_x(w - 4 - this.smeltList.getWidth());
        this.smeltList.set_y(4);
        var draw = new com_davidmaletz_faengfl_CompoundDrawable();
        draw.add(com_davidmaletz_mining_Main.window_factory.create(this.recipeList.getWidth() + 8, this.recipeList.getHeight() + 8), 0, 0);
        var _x = this.recipeList.getWidth() + 8 - 1;
        var _h = this.smeltList.getHeight() + 8;
        var _w = this.smeltList.getWidth() + 8 + 1;
        draw.add(com_davidmaletz_mining_Main.window_factory.create(_w, _h), _x, 0);
        draw.add(com_davidmaletz_mining_Main.window_factory.create(_w, this.recipeList.getHeight() + 8 - _h + 1), _x, _h - 1);
        com_davidmaletz_controls_ClickableWindow.call(this, c, draw, true, true, true, halign, valign);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, label, this.recipeList.getWidth() + this.smeltList.getWidth() + 16);
        this.addChild(this.recipeList);
        this.addChild(this.smeltList);
        var close = new com_davidmaletz_controls_CloseButton(this, this.recipeList.getWidth() + this.smeltList.getWidth() + 16, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        var fuel = new com_davidmaletz_mining_ui_Fuel(smelter, this.smeltList.getWidth());
        fuel.set_x(this.smeltList.get_x());
        fuel.set_y(this.smeltList.get_y() + this.smeltList.getHeight() + 4);
        this.addChild(fuel);
        this.details = new com_davidmaletz_mining_ui_RecipeInfo();
        this.addChild(this.details);
    };
    $hxClasses["com.davidmaletz.mining.ui.SmeltWindow"] = com_davidmaletz_mining_ui_SmeltWindow;
    com_davidmaletz_mining_ui_SmeltWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "SmeltWindow"];
    com_davidmaletz_mining_ui_SmeltWindow.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_SmeltWindow.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_SmeltWindow.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        onSelect: function(recipe) {
            if (!this.smeltList.player.inventory.useIngredients(recipe)) {
                new com_davidmaletz_mining_ui_Popup(128., 72., 0, com_fancyfish_faeng_common_Lang.getText("warning", "ingredients"), 16720418);
                return;
            }
            if (recipe.creates != null) this.smeltList.smelter.addItem(new com_davidmaletz_mining_item_SmeltItem(recipe));
            else this.smeltList.smelter.addFuel(recipe.fuel);
            this.details.setItem(null, null);
            this.onHover(recipe);
        },
        onHover: function(recipe) {
            this.details.setItem(recipe, this.smeltList.player.inventory);
            if (recipe != null) {
                this.details.set_x(this.recipeList.getWidth() + 3);
                this.details.set_y(Math.round((this.recipeList.getHeight() + 8 - this.details._height) * 0.5));
            }
        },
        showSmeltItem: function(recipe) {
            this.details.setItem(recipe, null);
            if (recipe != null) {
                this.details.set_x(this.smeltList.get_x() - 96);
                this.details.set_y(Math.round((this.recipeList.getHeight() + 8 - this.details._height) * 0.5));
            }
        },
        isEnabled: function(recipe) {
            return true;
        },
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.recipeList.list.clickables, this.smeltList.list.clickables], [this.recipeList.get_x(), this.smeltList.get_x()]);
        },
        getWidth: function() {
            return this.recipeList.getWidth() + this.smeltList.getWidth() + 16;
        },
        getHeight: function() {
            return this.recipeList.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_SmeltWindow
    });
    var com_davidmaletz_mining_ui__$SmeltWindow_SmeltList = function(player, smelter, c) {
        com_davidmaletz_controls_scroll_ScrollList.call(this, c, new com_davidmaletz_mining_ui_SmeltItemRenderer(this), 5, 1);
        this.player = player;
        this.smelter = smelter;
    };
    $hxClasses["com.davidmaletz.mining.ui._SmeltWindow.SmeltList"] = com_davidmaletz_mining_ui__$SmeltWindow_SmeltList;
    com_davidmaletz_mining_ui__$SmeltWindow_SmeltList.__name__ = ["com", "davidmaletz", "mining", "ui", "_SmeltWindow", "SmeltList"];
    com_davidmaletz_mining_ui__$SmeltWindow_SmeltList.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui__$SmeltWindow_SmeltList.__super__ = com_davidmaletz_controls_scroll_ScrollList;
    com_davidmaletz_mining_ui__$SmeltWindow_SmeltList.prototype = $extend(com_davidmaletz_controls_scroll_ScrollList.prototype, {
        init: function(e) {
            com_davidmaletz_controls_scroll_ScrollList.prototype.init.call(this, e);
            this.smelter.addEventListener("add_item", $bind(this, this.add));
            this.smelter.addEventListener("rem_item", $bind(this, this.rem));
            this.rem(null);
        },
        destroy: function(e) {
            com_davidmaletz_controls_scroll_ScrollList.prototype.destroy.call(this, e);
            this.smelter.removeEventListener("add_item", $bind(this, this.add));
            this.smelter.removeEventListener("rem_item", $bind(this, this.rem));
        },
        add: function(e) {
            this.addItem(e.value);
        },
        rem: function(e) {
            var clickables;
            clickables = (js_Boot.__cast(this.parent, com_davidmaletz_mining_ui_SmeltWindow)).clickables;
            var p = com_davidmaletz_controls_scroll_ScrollList.preSwitch(clickables);
            var y = -this.list.get_y();
            this.list.clear();
            var $it0 = HxOverrides.iter(this.smelter.queue);
            while ($it0.hasNext()) {
                var s = $it0.next();
                this.addItem(s);
            }
            var ht = this.renderer.getHeight(null) * this.rows;
            var sht = this.list.getHeight();
            ht = sht - ht;
            if (y > ht) y = ht;
            if (y < 0) y = 0;
            if ( - this.list.get_y() == y) this.scrollbar.update();
            else this.updateScroll(y);
            if (p != null) clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
        },
        onSelect: function(item) {
            if (item.fuel == 0) {
                this.player.inventory.addItem(item.recipe.creates, 1);
                new com_davidmaletz_mining_ui_ItemPopup(item.recipe.creates, 1);
            } else {
                this.player.inventory.addIngredients(item.recipe);
                com_davidmaletz_mining_ui_MultiItemPopup.show(HxOverrides.iter(item.recipe.requires), item.recipe.requires.length);
            }
            this.smelter.removeItem(item);
        },
        onHover: function(item) { (js_Boot.__cast(this.parent, com_davidmaletz_mining_ui_SmeltWindow)).showSmeltItem(item == null ? null: item.recipe);
        },
        isEnabled: function(item) {
            return true;
        },
        __class__: com_davidmaletz_mining_ui__$SmeltWindow_SmeltList
    });
    var com_davidmaletz_mining_ui_StaminaBar = function(p, c) {
        com_davidmaletz_mining_ui_MyBar.call(this, "stamina", 50, 3, 39168, p.stamina / p.getMaxStamina());
        this.player = p;
        this.set_x(12);
        this.set_y(c.getHeight() - 2 - 6);
    };
    $hxClasses["com.davidmaletz.mining.ui.StaminaBar"] = com_davidmaletz_mining_ui_StaminaBar;
    com_davidmaletz_mining_ui_StaminaBar.__name__ = ["com", "davidmaletz", "mining", "ui", "StaminaBar"];
    com_davidmaletz_mining_ui_StaminaBar.__super__ = com_davidmaletz_mining_ui_MyBar;
    com_davidmaletz_mining_ui_StaminaBar.prototype = $extend(com_davidmaletz_mining_ui_MyBar.prototype, {
        init: function(e) {
            com_davidmaletz_mining_ui_MyBar.prototype.init.call(this, e);
            this.player.addEventListener("change_stamina", $bind(this, this.update));
            this.update(null);
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_MyBar.prototype.destroy.call(this, e);
            this.player.removeEventListener("change_stamina", $bind(this, this.update));
        },
        update: function(e) {
            this.setProgress(this.player.getStaminaPercent(), 5);
        },
        __class__: com_davidmaletz_mining_ui_StaminaBar
    });
    var com_davidmaletz_mining_ui_TransferInventory = function(from, to, from_l, to_l, c, from_weight, to_weight, centerCol) {
        if (centerCol == null) centerCol = 24;
        this.allow_zero_weight = false;
        var renderer = new com_davidmaletz_mining_ui_ItemRenderer(this);
        this.centerCol = centerCol;
        this.from = new com_davidmaletz_mining_ui_InventoryList(from, new com_davidmaletz_controls_scroll_ScrollList(c, renderer, 10, 1), c);
        this.to = new com_davidmaletz_mining_ui_InventoryList(to, new com_davidmaletz_controls_scroll_ScrollList(c, renderer, 10, 1), c);
        this.from.list.set_x(4);
        this.from.list.set_y(4);
        var w = this.from.list.getWidth() + this.to.list.getWidth() + this.centerCol + 16;
        var lw = this.to.list.getWidth();
        this.to.list.set_x(w - 4 - lw);
        this.to.list.set_y(4);
        var draw = new com_davidmaletz_faengfl_CompoundDrawable();
        var d = com_davidmaletz_mining_Main.window_factory.create(lw + 8, this.from.list.getHeight() + 8);
        draw.add(d, 0, 0);
        draw.add(d, this.to.list.get_x() - 4, 0);
        com_davidmaletz_controls_ClickableWindow.call(this, c, draw, true, true, true, 0.6);
        this.category = com_davidmaletz_mining_ui_InventoryTabs.tab_order[0];
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, from_l, lw + 8, 0, 70);
        com_davidmaletz_mining_ui_InventoryWindow.addLabel(this, to_l, lw + 8, this.to.list.get_x() - 4, 70);
        this.addChild(this.from.list);
        this.addChild(this.to.list);
        this.addCenterColumn();
        if (from_weight != null) {
            var s = new com_davidmaletz_mining_ui_Weight(from, from_weight);
            s.set_x(0);
            s.set_y(this.from.list.getHeight() + 8 + 2);
            this.addChild(s);
        }
        if (to_weight != null) {
            var s1 = new com_davidmaletz_mining_ui_Weight(to, to_weight);
            s1.set_x(this.from.list.getWidth() + this.to.list.getWidth() + this.centerCol + 16 - s1.draw.getWidth());
            s1.set_y(this.from.list.getHeight() + 8 + 2);
            this.addChild(s1);
        }
        this.addChild(new com_davidmaletz_mining_ui_InventoryTabs(this.clickables, $bind(this, this.setTab)));
        var close = new com_davidmaletz_controls_CloseButton(this, this.from.list.getWidth() + this.to.list.getWidth() + this.centerCol + 16, 0);
        this.addChild(close);
        this.clickables.clickables.addClickable(close, this);
        this.details = new com_davidmaletz_mining_ui_ItemInfo();
        this.details.set_y(0);
        this.addChild(this.details);
    };
    $hxClasses["com.davidmaletz.mining.ui.TransferInventory"] = com_davidmaletz_mining_ui_TransferInventory;
    com_davidmaletz_mining_ui_TransferInventory.__name__ = ["com", "davidmaletz", "mining", "ui", "TransferInventory"];
    com_davidmaletz_mining_ui_TransferInventory.__interfaces__ = [com_davidmaletz_mining_ui_ItemHandler];
    com_davidmaletz_mining_ui_TransferInventory.__super__ = com_davidmaletz_controls_ClickableWindow;
    com_davidmaletz_mining_ui_TransferInventory.prototype = $extend(com_davidmaletz_controls_ClickableWindow.prototype, {
        addCenterColumn: function() {
            var f = com_davidmaletz_faengfl_Application.button_factory;
            var bg = f.createBG( - 1, -1);
            var hover = f.createHover( - 1, -1);
            var x = this.from.list.getWidth() + 8 + 2 + Math.round((this.centerCol - 16) * 0.5);
            var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "move_all"), new com_fancyfish_faeng_text_WrapCharacterPlacer(this.centerCol, 1, true, 10), 0, 1);
            t.set_x(this.from.list.get_x() + this.from.list.getWidth() + 4);
            t.set_y(4);
            t.draw();
            this.addChildAt(com_davidmaletz_mining_Main.window_factory.create(this.centerCol + 4, t.bounds.height + 4 + 32).create(Math.round(t.get_x() - 2.), Math.round(t.get_y() - 2.)), 0);
            this.addChild(t);
            var ty = t.bounds.height + 8;
            var b = new com_davidmaletz_controls_Button(x, ty, bg, hover, new com_fancyfish_faeng_common_mutable_Static("<"));
            b.onClickFunc = $bind(this, this.moveAllLeft);
            if (js_Boot.__instanceof(b, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(b, openfl_display_DisplayObject));
            this.clickables.clickables.addClickable(b, this);
            var b1 = new com_davidmaletz_controls_Button(x, ty + 15, bg, hover, new com_fancyfish_faeng_common_mutable_Static(">"));
            b1.onClickFunc = $bind(this, this.moveAllRight);
            if (js_Boot.__instanceof(b1, openfl_display_DisplayObject)) this.addChild(js_Boot.__cast(b1, openfl_display_DisplayObject));
            this.clickables.clickables.addClickable(b1, this);
        },
        moveAllLeft: function() {
            var items = [];
            var $it0 = this.to.inventory.getItems(this.category == 4 ? null: (function(f, a1) {
                return function(a2) {
                    return f(a1, a2);
                };
            })(com_davidmaletz_mining_item_Inventory.filterType, this.category));
            while ($it0.hasNext()) {
                var item = $it0.next();
                if (item.item.weight > 0) items.push(item);
            }
            var _g = 0;
            while (_g < items.length) {
                var item1 = items[_g]; ++_g;
                if (this.to.inventory.addItem(item1.item, -item1.count)) this.moveItem(item1.item, item1.count, this.from.inventory);
            }
        },
        moveAllRight: function() {
            var items = [];
            var $it0 = this.from.inventory.getItems(this.category == 4 ? null: (function(f, a1) {
                return function(a2) {
                    return f(a1, a2);
                };
            })(com_davidmaletz_mining_item_Inventory.filterType, this.category));
            while ($it0.hasNext()) {
                var item = $it0.next();
                if (item.item.weight > 0) items.push(item);
            }
            var _g = 0;
            while (_g < items.length) {
                var item1 = items[_g]; ++_g;
                if (this.from.inventory.addItem(item1.item, -item1.count)) this.moveItem(item1.item, item1.count, this.to.inventory);
            }
        },
        moveItem: function(item, ct, i) {
            i.addItem(item, ct);
        },
        createPrompt: function(c, item, func) {
            return new com_davidmaletz_mining_ui_ItemCountPrompt(c, item, com_fancyfish_faeng_common_Lang.getText("common", item.inventory == this.from.inventory ? "store_item": "retrieve_item"), item.count, func);
        },
        onMove: function(item, ct) {
            if (item.inventory.addItem(item.item, -ct)) this.moveItem(item.item, ct, (item.inventory == this.from.inventory ? this.to: this.from).inventory);
        },
        onSelect: function(item) {
            if (this.isEnabled(item)) {
                var c = com_davidmaletz_faengfl_Application.instance.container;
                c.addDisplay(this.createPrompt(c, item, (function(f, a1) {
                    return function(ct) {
                        f(a1, ct);
                    };
                })($bind(this, this.onMove), item)), 1);
            }
        },
        onHover: function(item) {
            if (item == null) {
                this.details.setItem(null);
                return;
            }
            if (item.inventory == this.from.inventory) this.details.set_x(this.from.list.get_x() + this.from.list.getWidth());
            else this.details.set_x(this.to.list.get_x() - 76);
            this.details.setItem(item.item, (function(f, a1) {
                return function(s, w, y) {
                    return f(a1, s, w, y);
                };
            })($bind(this, this.additionalInfo), item));
            this.details.set_y(Math.round((this.from.list.getHeight() + 8 - this.details._height) * 0.5));
        },
        additionalInfo: function(item, s, w, y) {
            return y;
        },
        isEnabled: function(item) {
            return (this.allow_zero_weight || item.item.weight > 0) && item.count > 0;
        },
        setTab: function(tab) {
            var f = this.from.categories[tab];
            var t = this.to.categories[tab];
            this.category = tab;
            var p = com_davidmaletz_controls_scroll_ScrollList.preSwitch(this.clickables);
            this.from.list.switchList(f);
            this.to.list.switchList(t);
            var c;
            c = js_Boot.__cast(this.clickables.clickables, com_davidmaletz_controls_CompoundClickableColumns);
            c.setColumn(0, f.clickables);
            c.setColumn(1, t.clickables);
            if (p != null) this.clickables.reset(new com_davidmaletz_faengfl_events_TEvent("", 0, p.x, p.y, 0));
        },
        createClickables: function() {
            return new com_davidmaletz_controls_CompoundClickableColumns([this.from.list.list.clickables, this.to.list.list.clickables], [this.from.list.get_x(), this.to.list.get_x()]);
        },
        init: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.init.call(this, e);
            this.from.init();
            this.to.init();
        },
        destroy: function(e) {
            com_davidmaletz_controls_ClickableWindow.prototype.destroy.call(this, e);
            this.from.destroy();
            this.to.destroy();
        },
        getWidth: function() {
            return this.from.list.getWidth() + this.to.list.getWidth() + this.centerCol + 16;
        },
        getHeight: function() {
            return this.from.list.getHeight() + 8;
        },
        __class__: com_davidmaletz_mining_ui_TransferInventory
    });
    var com_davidmaletz_mining_ui_StoreWindow = function(p, buy, c, map) {
        com_davidmaletz_mining_ui_TransferInventory.call(this, p.inventory, buy, com_fancyfish_faeng_common_Lang.getText("common", "sell"), com_fancyfish_faeng_common_Lang.getText("common", "buy"), c, p.capacity, null, 4);
        this.player = p;
        this.achievement_map = map;
    };
    $hxClasses["com.davidmaletz.mining.ui.StoreWindow"] = com_davidmaletz_mining_ui_StoreWindow;
    com_davidmaletz_mining_ui_StoreWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "StoreWindow"];
    com_davidmaletz_mining_ui_StoreWindow.__super__ = com_davidmaletz_mining_ui_TransferInventory;
    com_davidmaletz_mining_ui_StoreWindow.prototype = $extend(com_davidmaletz_mining_ui_TransferInventory.prototype, {
        init: function(e) {
            com_davidmaletz_mining_ui_TransferInventory.prototype.init.call(this, e);
            this.player.addEventListener("change_coins", $bind(this, this.change_coins));
            this.change_coins(null);
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_TransferInventory.prototype.destroy.call(this, e);
            this.player.removeEventListener("change_coins", $bind(this, this.change_coins));
        },
        change_coins: function(e) {
            this.to.updateAll();
        },
        addCenterColumn: function() {},
        moveItem: function(item, ct, i) {
            com_davidmaletz_mining_ui_TransferInventory.prototype.moveItem.call(this, item, ct, i);
            com_davidmaletz_faengfl_SoundManager.playSFX("buy");
            if (i == this.player.inventory) {
                if (this.achievement_map.exists(item.id)) com_davidmaletz_faengfl_achievement_Achievements.instance.gainAchievement(this.achievement_map.get(item.id));
                this.player.addCoins( - item.cost * ct);
            } else this.player.addCoins(Math.round(item.cost * 0.7) * ct);
        },
        createPrompt: function(c, item, func) {
            if (item.inventory == this.from.inventory) return new com_davidmaletz_mining_ui_SellPrompt(c, item, func);
            else return new com_davidmaletz_mining_ui_BuyPrompt(c, this.player.coins, item, func);
        },
        additionalInfo: function(item, s, w, y) {
            var icon = ((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("coin_purse");
                return $r;
            } (this))).createIcon();
            icon.set_x(4);
            icon.set_y(y);
            s.addChild(icon);
            var c = item.item.cost;
            var m;
            if (item.inventory == this.player.inventory) {
                c = Math.round(c * 0.7);
                m = com_fancyfish_faeng_common_Lang.getText("common", "sell");
            } else m = com_fancyfish_faeng_common_Lang.getText("common", "buy");
            var t = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Concat(m, ": " + (c == null ? "null": "" + c)), new com_fancyfish_faeng_text_CharacterPlacer(0), 0, 1);
            t.set_x(icon.get_x() + com_davidmaletz_tiles_Tile.SIZE + 1);
            t.set_y(y);
            s.addChild(t);
            return y + 12;
        },
        isEnabled: function(item) {
            return item.item.cost > 0 && item.count > 0 && (item.inventory == this.player.inventory || item.item.cost <= this.player.coins);
        },
        __class__: com_davidmaletz_mining_ui_StoreWindow
    });
    var com_davidmaletz_mining_ui_StringRenderer = function(section, handler, w) {
        if (w == null) w = 80;
        this.section = section;
        this.handler = handler;
        this.width = w;
    };
    $hxClasses["com.davidmaletz.mining.ui.StringRenderer"] = com_davidmaletz_mining_ui_StringRenderer;
    com_davidmaletz_mining_ui_StringRenderer.__name__ = ["com", "davidmaletz", "mining", "ui", "StringRenderer"];
    com_davidmaletz_mining_ui_StringRenderer.__interfaces__ = [com_davidmaletz_controls_ListItemRenderer];
    com_davidmaletz_mining_ui_StringRenderer.prototype = {
        create: function(item, x, y) {
            return new com_davidmaletz_mining_ui_StringButton(this.handler, this.section, item, x, y, this.width, 10);
        },
        update: function(s, item) {},
        getWidth: function() {
            return this.width;
        },
        getHeight: function(item) {
            return 10;
        },
        __class__: com_davidmaletz_mining_ui_StringRenderer
    };
    var com_davidmaletz_mining_ui_TextButton = function(x, y, txt, func, w) {
        if (w == null) w = -1;
        if (w == -1) w = 40;
        var f = com_davidmaletz_faengfl_Application.button_factory;
        com_davidmaletz_controls_Button.call(this, x, y, f.createBG(w, -1), f.createHover(w, -1), txt);
        this.onClickFunc = func;
    };
    $hxClasses["com.davidmaletz.mining.ui.TextButton"] = com_davidmaletz_mining_ui_TextButton;
    com_davidmaletz_mining_ui_TextButton.__name__ = ["com", "davidmaletz", "mining", "ui", "TextButton"];
    com_davidmaletz_mining_ui_TextButton.getHeight = function() {
        return com_davidmaletz_faengfl_Application.button_factory.defaultHeight();
    };
    com_davidmaletz_mining_ui_TextButton.__super__ = com_davidmaletz_controls_Button;
    com_davidmaletz_mining_ui_TextButton.prototype = $extend(com_davidmaletz_controls_Button.prototype, {
        __class__: com_davidmaletz_mining_ui_TextButton
    });
    var com_davidmaletz_mining_ui_TitleScreen = function() {
        com_davidmaletz_controls_ClickableSprite.call(this);
        var w = 63;
        this.set_x(Math.round((256 - (com_davidmaletz_mining_ui_TitleScreen.ITEMS.length * w - 3)) * 0.5));
        this.set_y(144 - com_davidmaletz_faengfl_Application.button_factory.defaultHeight() - 2);
        var b = new openfl_display_Bitmap(openfl_Assets.getBitmapData("data/title.png"));
        b.set_x( - this.get_x());
        b.set_y( - this.get_y());
        this.addChild(b);
        var ct = 0;
        var _g = 0;
        var _g1 = com_davidmaletz_mining_ui_TitleScreen.ITEMS;
        while (_g < _g1.length) {
            var i = _g1[_g]; ++_g;
            this.addClickable(new com_davidmaletz_mining_ui_TextButton(ct * w, 0, com_fancyfish_faeng_common_Lang.getText("common", i), (function(f, a1) {
                return function() {
                    f(a1);
                };
            })($bind(this, this.onSelect), i), 60));
            ct++;
        }
    };
    $hxClasses["com.davidmaletz.mining.ui.TitleScreen"] = com_davidmaletz_mining_ui_TitleScreen;
    com_davidmaletz_mining_ui_TitleScreen.__name__ = ["com", "davidmaletz", "mining", "ui", "TitleScreen"];
    com_davidmaletz_mining_ui_TitleScreen.__super__ = com_davidmaletz_controls_ClickableSprite;
    com_davidmaletz_mining_ui_TitleScreen.prototype = $extend(com_davidmaletz_controls_ClickableSprite.prototype, {
        onSelect: function(str) {
            var c = com_davidmaletz_faengfl_Application.instance.container;
            switch (str) {
            case "newgame":
                c.addDisplay(new com_davidmaletz_mining_ui_NewGameList(c), 1);
                break;
            case "continue":
                c.addDisplay(new com_davidmaletz_mining_ui_ContinueList(c), 1);
                break;
            case "options":
                c.addDisplay(new com_davidmaletz_mining_ui_Options(c, false), 1);
                break;
            case "forums":
                openfl_Lib.getURL(new openfl_net_URLRequest("https://www.reddit.com/r/aground"), "_blank");
                break;
            }
        },
        __class__: com_davidmaletz_mining_ui_TitleScreen
    });
    var com_davidmaletz_mining_ui_UpgradeInfo = function() {
        com_davidmaletz_mining_ui_RecipeInfo.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui.UpgradeInfo"] = com_davidmaletz_mining_ui_UpgradeInfo;
    com_davidmaletz_mining_ui_UpgradeInfo.__name__ = ["com", "davidmaletz", "mining", "ui", "UpgradeInfo"];
    com_davidmaletz_mining_ui_UpgradeInfo.__super__ = com_davidmaletz_mining_ui_RecipeInfo;
    com_davidmaletz_mining_ui_UpgradeInfo.prototype = $extend(com_davidmaletz_mining_ui_RecipeInfo.prototype, {
        getRequires: function() {
            return com_fancyfish_faeng_common_Lang.getText("structure", "requires");
        },
        addTitle: function(r, w, y) {
            var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("structure", r.structure.id), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 0, 1);
            t.set_y(y);
            this.addChild(t);
            y += 10;
            var t1 = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("structure", "produces"), new com_fancyfish_faeng_text_CharacterPlacer(w, 1), 153, 1);
            t1.set_y(y);
            this.addChild(t1);
            y += 10;
            var $it0 = r.structure.xml.elementsNamed("farmable");
            while ($it0.hasNext()) {
                var e = $it0.next();
                var info = com_davidmaletz_mining_item_FarmInfo.get(e.get("id"));
                com_davidmaletz_mining_ui_ItemRenderer.addItem(this, info.item, 4, y);
                var t2 = new com_davidmaletz_faengfl_TextSprite(new com_fancyfish_faeng_common_mutable_Static((info.min == null ? "null": "" + info.min) + "-" + (info.max == null ? "null": "" + info.max)), new com_fancyfish_faeng_text_CharacterPlacer(w - 8, 2), 0, 1);
                t2.set_x(4);
                t2.set_y(y);
                this.addChild(t2);
                y += 10;
            }
            return y;
        },
        __class__: com_davidmaletz_mining_ui_UpgradeInfo
    });
    var com_davidmaletz_mining_ui_ValuePanel = function(label, cur, max) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.current = cur;
        this.max = max;
        this.str = new com_fancyfish_faeng_common_mutable_Mutable();
        this.draw = com_davidmaletz_mining_Main.window_factory.create(80, 16);
        this.addChild(this.draw.create(0, 0));
        this.value = new openfl_display_Sprite();
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this.value, 0);
        var t = new com_davidmaletz_faengfl_TextSprite(label, new com_fancyfish_faeng_text_CharacterPlacer(0), 16777215, 1);
        t.set_x(3);
        t.set_y((this.draw.getHeight() - 8) * 0.5);
        this.value.addChild(t);
        var t1 = new com_davidmaletz_faengfl_TextSprite(this.str, new com_fancyfish_faeng_text_CharacterPlacer(this.draw.getWidth() - 3, 2), 16777215, 1);
        t1.set_y((this.draw.getHeight() - 8) * 0.5);
        this.value.addChild(t1);
        this.addChild(this.value);
    };
    $hxClasses["com.davidmaletz.mining.ui.ValuePanel"] = com_davidmaletz_mining_ui_ValuePanel;
    com_davidmaletz_mining_ui_ValuePanel.__name__ = ["com", "davidmaletz", "mining", "ui", "ValuePanel"];
    com_davidmaletz_mining_ui_ValuePanel.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_ui_ValuePanel.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.current.addEventListener("updated", $bind(this, this.updateValue));
            this.updateValue();
        },
        destroy: function(e) {
            this.current.removeEventListener("updated", $bind(this, this.updateValue));
        },
        updateValue: function(e) {
            this.str.set(this.current.get() + "/" + this.max);
            var c = this.value.get_transform().get_colorTransform();
            if (this.current.get() > this.max) c.redMultiplier = 1;
            else c.redMultiplier = 0;
            this.value.get_transform().set_colorTransform(c);
        },
        getWidth: function() {
            return this.draw.getWidth();
        },
        getHeight: function() {
            return this.draw.getHeight();
        },
        __class__: com_davidmaletz_mining_ui_ValuePanel
    });
    var com_davidmaletz_mining_ui_Weight = function(i, max_weight) {
        com_davidmaletz_faengfl_InitSprite.call(this);
        this.inventory = i;
        this.capacity = max_weight;
        this.weightStr = new com_fancyfish_faeng_common_mutable_Mutable();
        this.draw = com_davidmaletz_mining_Main.window_factory.create(80, 16);
        this.addChild(this.draw.create(0, 0));
        this.weight = new openfl_display_Sprite();
        com_davidmaletz_lerp_DarkenKeyframe.setDarkness(this.weight, 0);
        var t = new com_davidmaletz_faengfl_TextSprite(com_fancyfish_faeng_common_Lang.getText("common", "weight"), new com_fancyfish_faeng_text_CharacterPlacer(0), 16777215, 1);
        t.set_x(3);
        t.set_y((this.draw.getHeight() - 8) * 0.5);
        this.weight.addChild(t);
        var t1 = new com_davidmaletz_faengfl_TextSprite(this.weightStr, new com_fancyfish_faeng_text_CharacterPlacer(this.draw.getWidth() - 3, 2), 16777215, 1);
        t1.set_y((this.draw.getHeight() - 8) * 0.5);
        this.weight.addChild(t1);
        this.addChild(this.weight);
    };
    $hxClasses["com.davidmaletz.mining.ui.Weight"] = com_davidmaletz_mining_ui_Weight;
    com_davidmaletz_mining_ui_Weight.__name__ = ["com", "davidmaletz", "mining", "ui", "Weight"];
    com_davidmaletz_mining_ui_Weight.__super__ = com_davidmaletz_faengfl_InitSprite;
    com_davidmaletz_mining_ui_Weight.prototype = $extend(com_davidmaletz_faengfl_InitSprite.prototype, {
        init: function(e) {
            this.destroy(e);
            this.capacity.addEventListener("updated", $bind(this, this.updateWeight));
            this.inventory.addEventListener("item_added", $bind(this, this.updateWeight));
            this.updateWeight();
        },
        destroy: function(e) {
            this.capacity.removeEventListener("updated", $bind(this, this.updateWeight));
            this.inventory.removeEventListener("item_added", $bind(this, this.updateWeight));
        },
        updateWeight: function(e) {
            this.weightStr.set(this.inventory.weight + "/" + this.capacity.get());
            var c = this.weight.get_transform().get_colorTransform();
            if (this.inventory.weight > this.capacity.get()) c.redMultiplier = 1;
            else c.redMultiplier = 0;
            this.weight.get_transform().set_colorTransform(c);
        },
        getWidth: function() {
            return this.draw.getWidth();
        },
        getHeight: function() {
            return this.draw.getHeight();
        },
        __class__: com_davidmaletz_mining_ui_Weight
    });
    var com_davidmaletz_mining_ui_WeightInventoryWindow = function(p, c, halign, valign) {
        if (valign == null) valign = 0.5;
        if (halign == null) halign = 0.5;
        com_davidmaletz_mining_ui_InventoryWindow.call(this, p, c, halign, valign);
        var s = new com_davidmaletz_mining_ui_Weight(this.player.inventory, this.player.capacity);
        s.set_x(this.getWidth() - s.draw.getWidth());
        s.set_y(this.getHeight() + 2);
        this.addChild(s);
    };
    $hxClasses["com.davidmaletz.mining.ui.WeightInventoryWindow"] = com_davidmaletz_mining_ui_WeightInventoryWindow;
    com_davidmaletz_mining_ui_WeightInventoryWindow.__name__ = ["com", "davidmaletz", "mining", "ui", "WeightInventoryWindow"];
    com_davidmaletz_mining_ui_WeightInventoryWindow.__super__ = com_davidmaletz_mining_ui_InventoryWindow;
    com_davidmaletz_mining_ui_WeightInventoryWindow.prototype = $extend(com_davidmaletz_mining_ui_InventoryWindow.prototype, {
        __class__: com_davidmaletz_mining_ui_WeightInventoryWindow
    });
    var com_davidmaletz_mining_ui_WindowFactory = function() {
        com_davidmaletz_faengfl_AbstractDrawableFactory.call(this);
    };
    $hxClasses["com.davidmaletz.mining.ui.WindowFactory"] = com_davidmaletz_mining_ui_WindowFactory;
    com_davidmaletz_mining_ui_WindowFactory.__name__ = ["com", "davidmaletz", "mining", "ui", "WindowFactory"];
    com_davidmaletz_mining_ui_WindowFactory.__super__ = com_davidmaletz_faengfl_AbstractDrawableFactory;
    com_davidmaletz_mining_ui_WindowFactory.prototype = $extend(com_davidmaletz_faengfl_AbstractDrawableFactory.prototype, {
        makeDrawable: function(w, h) {
            return new com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable(com_davidmaletz_faengfl_AutoTileBitmap.get("data/ui/ancient_window.png", 16, 16), w, h);
        },
        __class__: com_davidmaletz_mining_ui_WindowFactory
    });
    var com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable = function(t, w, h) {
        this.sheet = t;
        this.width = w;
        this.height = h;
        if (this.height < 16) this.height = 16;
    };
    $hxClasses["com.davidmaletz.mining.ui._WindowFactory.WindowDrawable"] = com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable;
    com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable.__name__ = ["com", "davidmaletz", "mining", "ui", "_WindowFactory", "WindowDrawable"];
    com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable.__interfaces__ = [com_davidmaletz_faengfl_Drawable];
    com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable.prototype = {
        getWidth: function() {
            return this.width;
        },
        getHeight: function() {
            return this.height;
        },
        create: function(tx, ty) {
            var l = new com_davidmaletz_faengfl_TileLayer();
            var w = Math.ceil(this.width / 16) - 2;
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
            l.get_graphics().clear();
            l.handler.start(l.get_graphics(), 0);
            if (this.height <= 16) {
                var _g = 0;
                while (_g < w) {
                    var x = _g++;
                    l.addTile(this.sheet, (x + 1) * 16, 0, this.sheet.getIdx(1, 3), null, null, null, null, null);
                }
                l.addTile(this.sheet, 0, 0, this.sheet.getIdx(0, 3), null, null, null, null, null);
                l.addTile(this.sheet, this.width - 16, 0, this.sheet.getIdx(2, 3), null, null, null, null, null);
            } else {
                var h = Math.ceil(this.height / 16) - 2;
                var _g1 = 0;
                while (_g1 < h) {
                    var y = _g1++;
                    var _g11 = 0;
                    while (_g11 < w) {
                        var x1 = _g11++;
                        l.addTile(this.sheet, (x1 + 1) * 16, (y + 1) * 16, this.sheet.getIdx(1, 1), null, null, null, null, null);
                    }
                }
                var _g2 = 0;
                while (_g2 < w) {
                    var x2 = _g2++;
                    l.addTile(this.sheet, (x2 + 1) * 16, 0, this.sheet.getIdx(1, 0), null, null, null, null, null);
                    l.addTile(this.sheet, (x2 + 1) * 16, this.height - 16, this.sheet.getIdx(1, 2), null, null, null, null, null);
                }
                var _g3 = 0;
                while (_g3 < h) {
                    var y1 = _g3++;
                    l.addTile(this.sheet, 0, (y1 + 1) * 16, this.sheet.getIdx(0, 1), null, null, null, null, null);
                    l.addTile(this.sheet, this.width - 16, (y1 + 1) * 16, this.sheet.getIdx(2, 1), null, null, null, null, null);
                }
                l.addTile(this.sheet, 0, 0, this.sheet.getIdx(0, 0), null, null, null, null, null);
                l.addTile(this.sheet, this.width - 16, 0, this.sheet.getIdx(2, 0), null, null, null, null, null);
                l.addTile(this.sheet, 0, this.height - 16, this.sheet.getIdx(0, 2), null, null, null, null, null);
                l.addTile(this.sheet, this.width - 16, this.height - 16, this.sheet.getIdx(2, 2), null, null, null, null, null);
            }
            l.handler.finish();
            l.set_x(tx);
            l.set_y(ty);
            return l;
        },
        __class__: com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable
    };
    var com_davidmaletz_mining_ui_transition_EllipseFade = function(func, frames, fadeMusic, offX, offY) {
        if (offY == null) offY = 0;
        if (offX == null) offX = 0;
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        this.func = func;
        this.fadeMusic = fadeMusic;
        var w = 4096;
        var h = 2304;
        var b = openfl_Assets.getBitmapData("data/ellipse.png");
        this.get_graphics().beginBitmapFill(b, new openfl_geom_Matrix(1, 0, 0, 1, -b.width * 0.5, -b.height * 0.5), false);
        this.get_graphics().drawRect( - w * 0.5, -h * 0.5, w, h);
        this.get_graphics().endFill();
        this.set_x(128. + offX);
        this.set_y(72. + offY);
        this.dark = new com_davidmaletz_lerp_LerpSprite();
        var g = this.dark.get_graphics();
        g.beginFill(0);
        g.drawRect( - w * 0.5, -h * 0.5, w, h);
        g.endFill();
        this.dark.set_alpha(0);
        this.addChild(this.dark);
        this.dark.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), frames - 20, (function(f, k, a1) {
            return function() {
                f(k, a1);
            };
        })(($_ = this.dark, $bind($_, $_.lerp)), new com_davidmaletz_lerp_AlphaKeyframe(1), 20));
        this.set_alpha(0);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
        this.set_scaleX(this.set_scaleY(1.5));
        this.lerp(new com_davidmaletz_lerp_ScaleKeyframe(0.125, 0.125), frames, (function(f1, a11) {
            return function() {
                f1(a11);
            };
        })($bind(this, this.finish), frames));
        this.add();
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.EllipseFade"] = com_davidmaletz_mining_ui_transition_EllipseFade;
    com_davidmaletz_mining_ui_transition_EllipseFade.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "EllipseFade"];
    com_davidmaletz_mining_ui_transition_EllipseFade.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_EllipseFade.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        onEmptySelect: function() {
            if (this.parent != null) {
                if (this.func != null) {
                    this.func();
                    this.func = null;
                }
                if (this.parent != null) this.doClose();
            }
        },
        finish: function(frames) {
            if (this.parent != null) {
                this.func();
                if (this.stage == null) this.add();
                this.lerp(new com_davidmaletz_lerp_ScaleKeyframe(1.5, 1.5), frames, $bind(this, this.remove));
                this.dark.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 20);
                this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), frames - 10, (function(f, k, a1) {
                    return function() {
                        f(k, a1);
                    };
                })($bind(this, this.lerp), new com_davidmaletz_lerp_AlphaKeyframe(0), 10));
            }
        },
        handle_frame: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.handle_frame.call(this, e);
            if (this.fadeMusic) com_davidmaletz_faengfl_SoundManager.fadeBGM((this.get_scaleX() - 0.125) / 1.375, false);
        },
        __class__: com_davidmaletz_mining_ui_transition_EllipseFade
    });
    var com_davidmaletz_mining_ui_transition_FadeOut = function(func, frames, fadeMusic) {
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        this.func = func;
        this.get_graphics().beginFill(0);
        this.get_graphics().drawRect(0, 0, 256, 144);
        this.get_graphics().endFill();
        this.fadeMusic = fadeMusic;
        this.set_alpha(0);
        this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(), frames, (function(f, a1) {
            return function() {
                f(a1);
            };
        })($bind(this, this.fade), frames));
        this.add();
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.FadeOut"] = com_davidmaletz_mining_ui_transition_FadeOut;
    com_davidmaletz_mining_ui_transition_FadeOut.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "FadeOut"];
    com_davidmaletz_mining_ui_transition_FadeOut.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_FadeOut.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        onEmptySelect: function() {
            if (this.parent != null) {
                if (this.func != null) {
                    this.func();
                    this.func = null;
                }
                if (this.parent != null) this.doClose();
            }
        },
        fade: function(frames) {
            if (this.parent != null) {
                if (this.func != null) {
                    this.func();
                    this.func = null;
                }
                if (this.stage == null) this.add();
                this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), frames, $bind(this, this.remove));
            }
        },
        handle_frame: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.handle_frame.call(this, e);
            if (this.fadeMusic) com_davidmaletz_faengfl_SoundManager.fadeBGM(1 - this.get_alpha(), false);
        },
        __class__: com_davidmaletz_mining_ui_transition_FadeOut
    });
    var com_davidmaletz_mining_ui_transition_LerpModal = function(s, func) {
        this.first = true;
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        s.addEventListener("addedToStage", $bind(this, this.init));
        s.addEventListener("removedFromStage", $bind(this, this.kill));
        this.sprite = s;
        this.onClose = func;
        if (s.stage != null) this.init(null);
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.LerpModal"] = com_davidmaletz_mining_ui_transition_LerpModal;
    com_davidmaletz_mining_ui_transition_LerpModal.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "LerpModal"];
    com_davidmaletz_mining_ui_transition_LerpModal.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_LerpModal.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        kill: function(e) {
            this.sprite.removeEventListener("addedToStage", $bind(this, this.init));
            this.sprite.removeEventListener("removedFromStage", $bind(this, this.kill));
            if (this.first) {
                this.destroy(e);
                this.first = false;
                if (this.onClose != null) this.onClose();
            }
        },
        onEmptySelect: function() {
            if (this.onClose != null) {
                this.sprite.advanceFrame(99999);
                this.kill(null);
            }
        },
        init: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.init.call(this, e);
            openfl_Lib.current.stage.addEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        destroy: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.destroy.call(this, e);
            openfl_Lib.current.stage.removeEventListener("enterFrame", $bind(this, this.enter_frame));
        },
        enter_frame: function(e) {
            if (!js_Boot.__instanceof(this.sprite, com_davidmaletz_lerp_LerpSprite)) this.sprite.advanceFrame(com_davidmaletz_faengfl_FaengFL.frameTime);
            if (! (this.sprite.tracks != null)) this.kill(null);
        },
        __class__: com_davidmaletz_mining_ui_transition_LerpModal
    });
    var com_davidmaletz_mining_ui_transition_Modal = function(s, func) {
        this.first = true;
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        s.addEventListener("addedToStage", $bind(this, this.init));
        s.addEventListener("removedFromStage", $bind(this, this.kill));
        this.onClose = func;
        if (s.stage != null) this.init(null);
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.Modal"] = com_davidmaletz_mining_ui_transition_Modal;
    com_davidmaletz_mining_ui_transition_Modal.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "Modal"];
    com_davidmaletz_mining_ui_transition_Modal.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_Modal.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        kill: function(e) {
            if (this.first) {
                this.destroy(e);
                this.first = false;
                if (this.onClose != null) this.onClose();
            }
        },
        onEmptySelect: function() {
            if (this.onClose != null) this.kill(null);
        },
        __class__: com_davidmaletz_mining_ui_transition_Modal
    });
    var com_davidmaletz_mining_ui_transition_Wait = function(frames, onComplete) {
        com_davidmaletz_mining_ui_transition_Transition.call(this);
        this.set_visible(false);
        this.frames = frames;
        this.onClose = onComplete;
        this.add();
    };
    $hxClasses["com.davidmaletz.mining.ui.transition.Wait"] = com_davidmaletz_mining_ui_transition_Wait;
    com_davidmaletz_mining_ui_transition_Wait.__name__ = ["com", "davidmaletz", "mining", "ui", "transition", "Wait"];
    com_davidmaletz_mining_ui_transition_Wait.__super__ = com_davidmaletz_mining_ui_transition_Transition;
    com_davidmaletz_mining_ui_transition_Wait.prototype = $extend(com_davidmaletz_mining_ui_transition_Transition.prototype, {
        handle_frame: function(e) {
            com_davidmaletz_mining_ui_transition_Transition.prototype.handle_frame.call(this, e);
            this.frames--;
            if (this.frames == 0) {
                if (this.parent != null) this.doClose();
            }
        },
        __class__: com_davidmaletz_mining_ui_transition_Wait
    });
    var com_davidmaletz_tiles_TileMap = function() {
        openfl_events_EventDispatcher.call(this);
        this.tile_index = new com_davidmaletz_tiles_TileIndex();
        this.floor = new com_davidmaletz_tiles_Floor();
    };
    $hxClasses["com.davidmaletz.tiles.TileMap"] = com_davidmaletz_tiles_TileMap;
    com_davidmaletz_tiles_TileMap.__name__ = ["com", "davidmaletz", "tiles", "TileMap"];
    com_davidmaletz_tiles_TileMap.copyMap = function(map) {
        var ret = new haxe_ds_StringMap();
        var $it0 = map.keys();
        while ($it0.hasNext()) {
            var k = $it0.next();
            var value;
            value = __map_reserved[k] != null ? map.getReserved(k) : map.h[k];
            if (__map_reserved[k] != null) ret.setReserved(k, value);
            else ret.h[k] = value;
        }
        return ret;
    };
    com_davidmaletz_tiles_TileMap.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_tiles_TileMap.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        copy: function(d) {
            this.tile_index.copy(d.tile_index);
            this.tile_index_map = com_davidmaletz_tiles_TileMap.copyMap(d.tile_index_map);
            this.tile_index_count = d.tile_index_count;
            this.floor = d.floor.clone();
            this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, null, -1));
        },
        copyIndex: function(d) {
            this.tile_index.copy(d.tile_index);
            this.tile_index_map = com_davidmaletz_tiles_TileMap.copyMap(d.tile_index_map);
            this.tile_index_count = d.tile_index_count;
        },
        clone: function() {
            var d = new com_davidmaletz_tiles_TileMap();
            d.tile_index.copy(this.tile_index);
            d.tile_index_map = com_davidmaletz_tiles_TileMap.copyMap(this.tile_index_map);
            d.tile_index_count = this.tile_index_count;
            d.floor = this.floor.clone();
            d.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", d, null, -1));
            return d;
        },
        getTileIndex: function(idx) {
            return this.tile_index.tiles.h[idx];
        },
        addTileIndex: function(tile) {
            if (this.tile_index_map == null) {
                this.tile_index_map = new haxe_ds_StringMap();
                this.tile_index_count = 0;
            }
            if (this.tile_index_map.exists(tile)) return this.tile_index_map.get(tile);
            else {
                var i = this.tile_index_count;
                this.tile_index_count++;
                this.tile_index_map.set(tile, i);
                if (this.tile_index.setTile(i, tile == null ? null: (function($this) {
                    var $r;
                    if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                    $r = com_davidmaletz_tiles_Tile.tiles.get(tile);
                    return $r;
                } (this)))) this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, null, -1));
                return i;
            }
        },
        replaceTileIndex: function(tile, i) {
            if (this.tile_index.tiles.h[i] == null) return;
            var key = this.tile_index.tiles.h[i].id;
            this.tile_index_map.remove(key);
            this.tile_index_map.set(tile, i);
            if (this.tile_index.setTile(i, tile == null ? null: (function($this) {
                var $r;
                if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
                $r = com_davidmaletz_tiles_Tile.tiles.get(tile);
                return $r;
            } (this)))) this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, null, -1));
        },
        getTileId: function(x, y, layer) {
            var cx = Math.floor(x / 16);
            var cy = Math.floor(y / 16);
            x -= cx * 16;
            y -= cy * 16;
            if (!this.floor.chunks.h.hasOwnProperty((cy + 16384) * 32768 + (cx + 16384))) return - 1;
            else return this.floor.getChunk(cx, cy).getTile(x, y, layer);
        },
        getTile: function(x, y, layer) {
            var id = this.getTileId(x, y, layer);
            if (id == -1) return null;
            else return this.tile_index.tiles.h[id];
        },
        setTile: function(x, y, layer, tile) {
            var cx = Math.floor(x / 16);
            var cy = Math.floor(y / 16);
            x -= cx * 16;
            y -= cy * 16;
            var c = this.floor.getChunk(cx, cy);
            if (c.setTile(x, y, tile, layer)) {
                this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, c, layer));
                return true;
            } else return false;
        },
        clear: function() {
            var $it0 = this.floor.chunks.iterator();
            while ($it0.hasNext()) {
                var c = $it0.next();
                c.clear();
                this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, c, -1));
            }
        },
        getFloor: function() {
            return this.floor;
        },
        write: function(b) {
            b.writeByte(0);
            if (this.tile_index_map == null) b.writeByte(0);
            else {
                b.writeByte(1);
                var ar = [];
                var $it0 = this.tile_index_map.keys();
                while ($it0.hasNext()) {
                    var tile = $it0.next();
                    ar[this.tile_index_map.get(tile)] = tile;
                }
                b.writeUInt16(ar.length);
                var _g = 0;
                while (_g < ar.length) {
                    var tile1 = ar[_g]; ++_g;
                    com_davidmaletz_faengfl_UTFUtils.writeUTF(b, tile1);
                }
            }
            this.floor.write(b);
        },
        read: function(b, version) {
            var ver = b.readByte();
            if (ver != 0) return;
            this.tile_index = new com_davidmaletz_tiles_TileIndex();
            this.tile_index_map = null;
            this.tile_index_count = 0;
            var layers = b.readByte();
            var _g = 0;
            while (_g < layers) {
                var layer = _g++;
                var len = b.readUInt16();
                var _g1 = 0;
                while (_g1 < len) {
                    var i = _g1++;
                    this.addTileIndex(com_davidmaletz_faengfl_UTFUtils.readUTF(b));
                }
            }
            this.floor = com_davidmaletz_tiles_Floor.read(b);
            this.dispatchEvent(new com_davidmaletz_tiles_ChunkEvent("chunk_update", this, null, -1));
        },
        __class__: com_davidmaletz_tiles_TileMap
    });
    var com_davidmaletz_mining_world_Area = function(id) {
        com_davidmaletz_tiles_TileMap.call(this);
        this.structures = new haxe_ds_IntMap();
        this.objects = [];
        var _g = 0;
        while (_g < 5) {
            var i = _g++;
            this.objects.push(i == 2 ? new com_davidmaletz_mining_world_ArrayObjectLayer(this) : new com_davidmaletz_mining_world_HashObjectLayer(this));
        }
        this.objects.push(new com_davidmaletz_mining_world_ArrayObjectLayer(this));
        this.projectiles = [];
        if (id != null) this.spawner = new com_davidmaletz_mining_enemy_EnemySpawnerHandler(this, id);
    };
    $hxClasses["com.davidmaletz.mining.world.Area"] = com_davidmaletz_mining_world_Area;
    com_davidmaletz_mining_world_Area.__name__ = ["com", "davidmaletz", "mining", "world", "Area"];
    com_davidmaletz_mining_world_Area.getLight = function(y) {
        return com_fancyfish_faeng_common_Utils.min(y * 8, 120);
    };
    com_davidmaletz_mining_world_Area.readArea = function(b, version) {
        var area = new com_davidmaletz_mining_world_Area(null);
        area.read(b, version);
        return area;
    };
    com_davidmaletz_mining_world_Area.__super__ = com_davidmaletz_tiles_TileMap;
    com_davidmaletz_mining_world_Area.prototype = $extend(com_davidmaletz_tiles_TileMap.prototype, {
        init: function(r) {
            this.renderer = r;
            if (com_davidmaletz_faengfl_FaengFL.listeners == null) com_davidmaletz_faengfl_FaengFL.listeners = [];
            com_davidmaletz_faengfl_FaengFL.listeners.push(this.spawner);
        },
        destroy: function() {
            this.renderer = null;
            if (com_davidmaletz_faengfl_FaengFL.listeners != null) HxOverrides.remove(com_davidmaletz_faengfl_FaengFL.listeners, this.spawner);
            else false;
        },
        addStructure: function(info, tile_x, tile_y) {
            var s = info.create(tile_x, tile_y);
            var w = Math.ceil(s.info.width / com_davidmaletz_tiles_Tile.SIZE) + 1;
            var ar = this.structures.h[tile_y];
            if (ar == null) {
                ar = new com_fancyfish_faeng_common_SortedArray(com_fancyfish_faeng_common_SortedArray.sortableValue);
                this.structures.h[tile_y] = ar;
            }
            if (!s.isBack()) {
                var old = this.getStructure(tile_x, tile_y);
                if (old != null && !old.isBack()) {
                    HxOverrides.remove(ar.array, old);
                    this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("rem_structure", old));
                }
            }
            var _g = -1;
            while (_g < w) {
                var i = _g++;
                var o = this.objects[0].getObject(i + tile_x, -1);
                if (o != null && !js_Boot.__instanceof(o, com_davidmaletz_mining_npc_NPC)) this.objects[o.getLayer()].removeObject(o, null, null);
            }
            ar.insert(s);
            s.addedToArea(this, true);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_structure", s));
        },
        _addStructure: function(s) {
            var ar = this.structures.h[s.tile_y];
            if (ar == null) {
                ar = new com_fancyfish_faeng_common_SortedArray(com_fancyfish_faeng_common_SortedArray.sortableValue);
                this.structures.h[s.tile_y] = ar;
            }
            ar.insert(s);
        },
        getStructures: function() {
            return new com_fancyfish_faeng_common_CompoundIterator2(this.structures.iterator());
        },
        getStructure: function(tile_x, tile_y) {
            var ar = this.structures.h[tile_y];
            if (ar == null) return null;
            var s = ar.getByValue(tile_x);
            if (s != null && tile_x >= s.tile_x && tile_x < s.tile_x + Math.ceil(s.info.width / com_davidmaletz_tiles_Tile.SIZE)) return s;
            else return null;
        },
        addObject: function(object) {
            this.objects[object.getLayer()].addObject(object);
        },
        removeObject: function(object, killer, onComplete) {
            this.objects[object.getLayer()].removeObject(object, killer, onComplete);
        },
        moveObject: function(object, toX, toY) {
            this.objects[object.getLayer()].moveObject(object, toX, toY);
        },
        getObjectOnLayer: function(x, y, l) {
            return this.objects[l].getObject(x, y);
        },
        getObject: function(x, y, asker, flags) {
            if (flags == null) flags = 0;
            var len = this.objects.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var o = this.objects[len - 1 - i].getObject(x, y);
                if (o != null && o != asker && o.isBlocking(asker, flags)) return o;
            }
            return null;
        },
        hasObject: function(x, y) {
            var len = this.objects.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (this.objects[i].getObject(x, y) != null) return true;
            }
            return false;
        },
        getActionObject: function(p, x, y) {
            var len = this.objects.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var o = this.objects[len - 1 - i].getObject(x, y);
                if (o != null && o.getAction(p) != null) return o;
            }
            return null;
        },
        getObjectLayers: function() {
            return HxOverrides.iter(this.objects);
        },
        addProjectile: function(p) {
            this.projectiles.push(p);
            if (p.area != this) {
                if (p.area != null) p.removedFromArea(p.area);
                p.area = this;
                p.addedToArea();
            }
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_projectile", p));
        },
        removeProjectile: function(p) {
            if (HxOverrides.remove(this.projectiles, p)) {
                if (this == p.area) {
                    p.area = null;
                    p.removedFromArea(this);
                }
                this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("rem_projectile", p));
            }
        },
        getProjectiles: function() {
            return HxOverrides.iter(this.projectiles);
        },
        write: function(b) {
            com_davidmaletz_tiles_TileMap.prototype.write.call(this, b);
            var $it0 = new com_fancyfish_faeng_common_CompoundIterator2(this.structures.iterator());
            while ($it0.hasNext()) {
                var s = $it0.next();
                s.write(b);
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
            var _g = 0;
            while (_g < 5) {
                var i = _g++;
                var $it1 = this.objects[i].getObjects();
                while ($it1.hasNext()) {
                    var o = $it1.next();
                    o.write(b);
                }
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
            var _g1 = 0;
            var _g11 = this.projectiles;
            while (_g1 < _g11.length) {
                var p = _g11[_g1]; ++_g1;
                p.write(b);
            }
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
            this.spawner.write(b);
        },
        setLightTile: function(x, y) {
            if (y > 0 && (this.getTileId(x, y, 0) != -1 || this.getTileId(x, y, 3) != -1)) this.setTile(x, y, 2, com_fancyfish_faeng_common_Utils.min(this.getTileId(x, y, 2), com_fancyfish_faeng_common_Utils.min(y * 8, 120) - 1));
        },
        insertNode: function(queue, x, y, parent, visited) {
            var i = (y + 16384) * 32768 + (x + 16384);
            if (!visited.h.hasOwnProperty(i)) {
                visited.h[i] = true;
                if (y > 0 && (this.getTileId(x, y, 0) != -1 || this.getTileId(x, y, 3) != -1)) this.setTile(x, y, 2, com_fancyfish_faeng_common_Utils.min(this.getTileId(x, y, 2), com_fancyfish_faeng_common_Utils.min(y * 8, 120) - 1));
                queue.addLast(new com_fancyfish_faeng_common_Node(x, y, parent));
            }
        },
        lightTiles: function(x, y, light) {
            if (light <= 0) return;
            light--;
            var queue = new com_fancyfish_faeng_common_Dequeue();
            var visited = new haxe_ds_IntMap();
            this.insertNode(queue, x, y, null, visited);
            while (! (queue.head == queue.tail)) {
                var n = queue.removeFirst();
                if (n.depth >= light) break;
                this.insertNode(queue, n.x + 1, n.y, n, visited);
                this.insertNode(queue, n.x - 1, n.y, n, visited);
                this.insertNode(queue, n.x, n.y + 1, n, visited);
                this.insertNode(queue, n.x, n.y - 1, n, visited);
            }
        },
        mine: function(x, y, back, light) {
            var item = null;
            this.setTile(x, y, 0, -1);
            this.setTile(x, y, 3, back);
            var ore = this.getTileId(x, y, 1);
            if (ore != -1) {
                this.setTile(x, y, 1, -1);
                item = new com_davidmaletz_mining_item_ItemCt(com_davidmaletz_mining_item_Item.get(this.tile_index.tiles.h[ore].id), 1);
            }
            this.lightTiles(x, y, light);
            return item;
        },
        read: function(b, version) {
            this.structures = new haxe_ds_IntMap();
            com_davidmaletz_tiles_TileMap.prototype.read.call(this, b, version);
            while (com_davidmaletz_mining_structure_Structure.load(b, version, $bind(this, this._addStructure))) {}
            var o;
            while ((o = com_davidmaletz_mining_world_Object.load(b, version)) != null) this.objects[o.getLayer()].addObject(o);
            if (version >= 14) {
                var p;
                while ((p = com_davidmaletz_mining_world_Projectile.load(b, version)) != null) {
                    this.projectiles.push(p);
                    if (p.area != this) {
                        if (p.area != null) p.removedFromArea(p.area);
                        p.area = this;
                        p.addedToArea();
                    }
                    this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_projectile", p));
                }
            }
            this.spawner = com_davidmaletz_mining_enemy_EnemySpawnerHandler.read(this, b);
            var $it0 = new com_fancyfish_faeng_common_CompoundIterator2(this.structures.iterator());
            while ($it0.hasNext()) {
                var s = $it0.next();
                s.addedToArea(this, false);
            }
        },
        __class__: com_davidmaletz_mining_world_Area
    });
    var com_davidmaletz_mining_world_ObjectLayer = function(area) {
        openfl_events_EventDispatcher.call(this);
        this.area = area;
    };
    $hxClasses["com.davidmaletz.mining.world.ObjectLayer"] = com_davidmaletz_mining_world_ObjectLayer;
    com_davidmaletz_mining_world_ObjectLayer.__name__ = ["com", "davidmaletz", "mining", "world", "ObjectLayer"];
    com_davidmaletz_mining_world_ObjectLayer.__interfaces__ = [AbstractClass];
    com_davidmaletz_mining_world_ObjectLayer.__super__ = openfl_events_EventDispatcher;
    com_davidmaletz_mining_world_ObjectLayer.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        addObject: function(object) {
            object.addToArea(this.area);
            this.dispatchEvent(new com_davidmaletz_faengfl_events_ObjectEvent("add_object", object));
        },
        removeObject: function(object, killer, onComplete) {
            object.removeFromArea(this.area);
            if ((this.area.renderer == null || this.area.renderer.stage == null) && onComplete != null) {
                onComplete();
                onComplete = null;
            }
            this.dispatchEvent(new com_davidmaletz_mining_world_RemoveEvent("rem_object", object, killer, onComplete));
        },
        moveObject: function(object, toX, toY) {},
        getObject: function(x, y) {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        getObjects: function() {
            throw new js__$Boot_HaxeError("abstract method, must override");
        },
        __class__: com_davidmaletz_mining_world_ObjectLayer
    });
    var com_davidmaletz_mining_world_ArrayObjectLayer = function(area) {
        com_davidmaletz_mining_world_ObjectLayer.call(this, area);
        this.objects = [];
    };
    $hxClasses["com.davidmaletz.mining.world.ArrayObjectLayer"] = com_davidmaletz_mining_world_ArrayObjectLayer;
    com_davidmaletz_mining_world_ArrayObjectLayer.__name__ = ["com", "davidmaletz", "mining", "world", "ArrayObjectLayer"];
    com_davidmaletz_mining_world_ArrayObjectLayer.__super__ = com_davidmaletz_mining_world_ObjectLayer;
    com_davidmaletz_mining_world_ArrayObjectLayer.prototype = $extend(com_davidmaletz_mining_world_ObjectLayer.prototype, {
        addObject: function(object) {
            this.objects.push(object);
            com_davidmaletz_mining_world_ObjectLayer.prototype.addObject.call(this, object);
        },
        removeObject: function(object, killer, onComplete) {
            HxOverrides.remove(this.objects, object);
            com_davidmaletz_mining_world_ObjectLayer.prototype.removeObject.call(this, object, killer, onComplete);
        },
        getObject: function(x, y) {
            var _g = 0;
            var _g1 = this.objects;
            while (_g < _g1.length) {
                var o = _g1[_g]; ++_g;
                if (o.tile_x == x && o.tile_y == y) return o;
            }
            return null;
        },
        getObjects: function() {
            return HxOverrides.iter(this.objects);
        },
        __class__: com_davidmaletz_mining_world_ArrayObjectLayer
    });
    var com_davidmaletz_mining_world_BasicObject = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.world.BasicObject"] = com_davidmaletz_mining_world_BasicObject;
    com_davidmaletz_mining_world_BasicObject.__name__ = ["com", "davidmaletz", "mining", "world", "BasicObject"];
    com_davidmaletz_mining_world_BasicObject.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_world_BasicObject.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            var info = this.info;
            var r = new com_davidmaletz_tiles_render_PlayAnimation(com_davidmaletz_tiles_Tile.get(info.tile), info.animation, 10, true, null, -0.5, -0.5);
            r.set_x((this.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
            r.set_y((this.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
            return r;
        },
        getLoot: function() {
            var i = this.info.loot.getLoot();
            if (i == null) return null;
            else return new com_davidmaletz_mining_item_ItemCt(i, 1);
        },
        getInfo: function() {
            return this.info;
        },
        getLayer: function() {
            return this.info.layer;
        },
        getAction: function(p) {
            var action = this.info.action;
            if (action == null) return null;
            else return com_fancyfish_faeng_common_Lang.getText("actions", action);
        },
        isBlocking: function(asker, flags) {
            return this.info.blocking;
        },
        playAnimation: function(id) {
            if (this.renderer == null) return;
            var r;
            r = js_Boot.__cast(this.renderer, com_davidmaletz_tiles_render_PlayAnimation);
            r.setAnimation(id, -0.5, -0.5);
            r.loop = true;
            r.onComplete = null;
        },
        onOperate: function(p) {
            this.info.createAction(p, this).runAll();
        },
        __class__: com_davidmaletz_mining_world_BasicObject
    });
    var com_davidmaletz_mining_world_BasicObjectInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), xml.exists("health") ? Std.parseInt(xml.get("health")) : 0);
        this.tile = xml.get("tile");
        this.animation = xml.get("animation");
        this.action = xml.get("action");
        this.script = xml;
        this.layer = com_davidmaletz_mining_world_BasicObjectInfo.parseLayer(xml.get("layer"));
        this.blocking = xml.get("blocking") == "true";
        this.loot = new com_davidmaletz_mining_LootHandler(xml);
    };
    $hxClasses["com.davidmaletz.mining.world.BasicObjectInfo"] = com_davidmaletz_mining_world_BasicObjectInfo;
    com_davidmaletz_mining_world_BasicObjectInfo.__name__ = ["com", "davidmaletz", "mining", "world", "BasicObjectInfo"];
    com_davidmaletz_mining_world_BasicObjectInfo.parseLayer = function(layer) {
        switch (layer) {
        case "item":
            return 1;
        case "npc":
            return 2;
        case "enemy":
            return 3;
        case "trap":
            return 4;
        case "player":
            return 5;
        default:
            return 0;
        }
    };
    com_davidmaletz_mining_world_BasicObjectInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_world_BasicObjectInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        getLoot: function() {
            return this.loot.getLoot();
        },
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_world_BasicObject(this, tile_x, tile_y);
        },
        createAction: function(p, o, onComplete) {
            return new com_davidmaletz_mining_npc_NPCEventHandler(this.script, p, o, onComplete);
        },
        __class__: com_davidmaletz_mining_world_BasicObjectInfo
    });
    var com_davidmaletz_mining_world_Bush = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
        this.growth = this.info.grown + 2.;
    };
    $hxClasses["com.davidmaletz.mining.world.Bush"] = com_davidmaletz_mining_world_Bush;
    com_davidmaletz_mining_world_Bush.__name__ = ["com", "davidmaletz", "mining", "world", "Bush"];
    com_davidmaletz_mining_world_Bush.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_world_Bush.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_world__$Bush_BushRenderer(this);
        },
        getInfo: function() {
            return this.info;
        },
        getLoot: function() {
            return new com_davidmaletz_mining_item_ItemCt(this.info.loot, this.info.getCount());
        },
        isBack: function() {
            return true;
        },
        getLayer: function() {
            return 0;
        },
        getAction: function(p) {
            return com_fancyfish_faeng_common_Lang.getText("object.tooltip", "bush");
        },
        isBlocking: function(asker, flags) {
            return false;
        },
        canCollect: function(p) {
            return this.growth > this.info.grown;
        },
        onEnter: function(p) {
            com_davidmaletz_mining_world_TooltipObject.prototype.onEnter.call(this, p);
            this.player = p;
            if (this.tooltip != null && !this.canCollect(p)) this.tooltip.tracks = null;
        },
        onExit: function(p) {
            com_davidmaletz_mining_world_TooltipObject.prototype.onExit.call(this, p);
            this.player = null;
        },
        onOperate: function(p) {
            if (!this.canCollect(p)) return;
            this.setGrowth(0);
            if (this.renderer != null) {
                com_davidmaletz_mining_renderer_CollectLoot.collect(p, this.getLoot(), this.renderer.parent, com_davidmaletz_tiles_Tile.SIZE * this.tile_x, (this.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE); (js_Boot.__cast(this.renderer, com_davidmaletz_tiles_render_TileAnimationRenderer)).setFrame(this.growth);
                p.addExp(1);
            }
        },
        canFlip: function() {
            return false;
        },
        setGrowth: function(g) {
            if (this.growth != g) {
                this.growth = g;
                if (this.tooltip != null) {
                    if (this.canCollect(this.player)) {
                        if (this.tooltip.get_alpha() != 1) this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), 10);
                    } else if (this.tooltip.get_alpha() != 0) this.tooltip.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), 10);
                }
                return true;
            } else return false;
        },
        write: function(b) {
            com_davidmaletz_mining_world_TooltipObject.prototype.write.call(this, b);
            b.writeInt32(haxe_io_FPHelper.floatToI32(this.growth));
        },
        read: function(b, version) {
            com_davidmaletz_mining_world_TooltipObject.prototype.read.call(this, b, version);
            this.growth = haxe_io_FPHelper.i32ToFloat(b.readInt32());
        },
        __class__: com_davidmaletz_mining_world_Bush
    });
    var com_davidmaletz_mining_world__$Bush_BushRenderer = function(b) {
        com_davidmaletz_tiles_render_TileAnimationRenderer.call(this, b.info, 15);
        this.bush = b;
        this.setAnimation(this.bush.info.id + ".grow");
        this.setFrame(this.bush.growth);
        this.set_x((b.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((b.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
    };
    $hxClasses["com.davidmaletz.mining.world._Bush.BushRenderer"] = com_davidmaletz_mining_world__$Bush_BushRenderer;
    com_davidmaletz_mining_world__$Bush_BushRenderer.__name__ = ["com", "davidmaletz", "mining", "world", "_Bush", "BushRenderer"];
    com_davidmaletz_mining_world__$Bush_BushRenderer.__super__ = com_davidmaletz_tiles_render_TileAnimationRenderer;
    com_davidmaletz_mining_world__$Bush_BushRenderer.prototype = $extend(com_davidmaletz_tiles_render_TileAnimationRenderer.prototype, {
        enter_frame: function(frames) {
            com_davidmaletz_tiles_render_TileAnimationRenderer.prototype.enter_frame.call(this, frames);
            if (this.animation == this.bush.info.id + ".grow") {
                this.setFrame(this.frame + frames * this.bush.info.speed, false);
                this.bush.setGrowth(this.frame);
            }
        },
        __class__: com_davidmaletz_mining_world__$Bush_BushRenderer
    });
    var com_davidmaletz_mining_world_BushInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), xml.exists("health") ? Std.parseInt(xml.get("health")) : 0);
        this.loot = com_davidmaletz_mining_item_Item.get(xml.get("loot"));
        this.tiles = [];
        if (xml.exists("min")) this.min = Std.parseInt(xml.get("min"));
        else this.min = 1;
        if (xml.exists("max")) this.max = Std.parseInt(xml.get("max"));
        else this.max = 1;
        this.grown = Std.parseFloat(xml.get("grown")) * 60 / 15;
        this.speed = Std.parseFloat(xml.get("speed"));
        var $it0 = xml.elementsNamed("tile");
        while ($it0.hasNext()) {
            var e = $it0.next();
            this.tiles.push(new com_davidmaletz_tiles_Tile(e.get("id"), "data/tile/", e));
        }
    };
    $hxClasses["com.davidmaletz.mining.world.BushInfo"] = com_davidmaletz_mining_world_BushInfo;
    com_davidmaletz_mining_world_BushInfo.__name__ = ["com", "davidmaletz", "mining", "world", "BushInfo"];
    com_davidmaletz_mining_world_BushInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_world_BushInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        getCount: function() {
            return Math.floor((this.max + 1 - this.min) * Math.random()) + this.min;
        },
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_world_Bush(this, tile_x, tile_y);
        },
        render: function(neighbors, layer, x, y, offX, offY) {
            var t = this.tiles[offX];
            t.render(neighbors, layer, x - (t.base == null ? 0 : t.base.sheet.tileWidth) / (com_davidmaletz_tiles_Tile.SIZE * 2), y - (t.base == null ? 0 : t.base.sheet.tileHeight) / com_davidmaletz_tiles_Tile.SIZE + 0.5, offY);
        },
        getTileWidth: function(offX, offY) {
            return this.tiles[offX].getWidth();
        },
        getTileHeight: function(offX, offY) {
            return this.tiles[offX].getHeight();
        },
        __class__: com_davidmaletz_mining_world_BushInfo
    });
    var com_davidmaletz_mining_world_Generate = function(a, p, init) {
        this.area = a;
        this.player = p;
        this.xml = init;
    };
    $hxClasses["com.davidmaletz.mining.world.Generate"] = com_davidmaletz_mining_world_Generate;
    com_davidmaletz_mining_world_Generate.__name__ = ["com", "davidmaletz", "mining", "world", "Generate"];
    com_davidmaletz_mining_world_Generate.runLoad = function(r, player) {
        var xml = com_davidmaletz_mining_world_Generate.getLoad(r.area.spawner.id);
        if (xml != null) new com_davidmaletz_mining_npc_NPCEventHandler(xml, player, r).runAll();
    };
    com_davidmaletz_mining_world_Generate.getLoad = function(id) {
        var xml = com_davidmaletz_mining_world_Generate.get(id);
        if (xml == null) return null;
        var i = xml.elementsNamed("onLoad");
        if (i.hasNext()) return i.next();
        else return null;
    };
    com_davidmaletz_mining_world_Generate.generate = function(area, w, h, top, first, second, bottom) {
        var array = new com_fancyfish_faeng_common_SortedArray(com_fancyfish_faeng_common_Node.getDepth);
        var z = Math.random() * 12345.6789;
        h--;
        var _g = 1;
        while (_g < h) {
            var y = _g++;
            var _g1 = 0;
            while (_g1 < w) {
                var x = _g1++;
                var v = Math.round((Math.abs(com_fancyfish_faeng_common_Noise.noise(x * 0.1, y * 0.1, z) * 0.5 + 0.5) * 64 + y * 2) * 1024);
                array.insert(new com_fancyfish_faeng_common_Node(x, y, null, v));
                area.setTile(x, y, 2, 254);
            }
        }
        var _g2 = 0;
        while (_g2 < w) {
            var x1 = _g2++;
            area.setTile(x1, 0, 0, top);
            area.setTile(x1, h, 0, bottom);
            area.setTile(x1, h, 2, 254);
        }
        var len = array.array.length;
        var half = len >> 1;
        var _g3 = 0;
        while (_g3 < len) {
            var i = _g3++;
            var n = array.array[i];
            area.setTile(n.x, n.y, 0, i < half ? first: second);
        }
        return array;
    };
    com_davidmaletz_mining_world_Generate.addOre = function(area, array, ore, min, max, count) {
        var len = array.array.length;
        var st = Math.floor(len * min);
        var end = Math.ceil(len * max);
        var ar = [];
        var _g = st;
        while (_g < end) {
            var i = _g++;
            var n = array.array[i];
            if (area.getTileId(n.x, n.y, 0) != -1 && area.getTileId(n.x, n.y, 1) == -1) ar.push(i);
        }
        if (count > ar.length) count = ar.length;
        var _g1 = 0;
        while (_g1 < count) {
            var i1 = _g1++;
            var v = Math.floor(Math.random() * ar.length);
            var n1 = array.array[ar[v]];
            if (v != ar.length - 1) ar[v] = ar[ar.length - 1];
            ar.pop();
            area.setTile(n1.x, n1.y, 1, ore);
        }
    };
    com_davidmaletz_mining_world_Generate.addOrePercent = function(area, array, ore, min, max, p) {
        com_davidmaletz_mining_world_Generate.addOre(area, array, ore, min, max, Math.round(array.array.length * p));
    };
    com_davidmaletz_mining_world_Generate.addUnderground = function(area, array, enemy, min, max, count) {
        var len = array.array.length;
        var st = Math.floor(len * min);
        var end = Math.ceil(len * max);
        var ar = [];
        var _g = st;
        while (_g < end) {
            var i = _g++;
            var n = array.array[i];
            if (area.getTileId(n.x, n.y, 1) == -1 && area.getObject(n.x, n.y, null) == null) ar.push(i);
        }
        if (count > ar.length) count = ar.length;
        var _g1 = 0;
        while (_g1 < count) {
            var i1 = _g1++;
            var v = Math.floor(Math.random() * ar.length);
            var n1 = array.array[ar[v]];
            if (v != ar.length - 1) ar[v] = ar[ar.length - 1];
            ar.pop();
            area.addObject(enemy.create(n1.x, n1.y));
        }
    };
    com_davidmaletz_mining_world_Generate.addUndergroundPercent = function(area, array, enemy, min, max, p) {
        com_davidmaletz_mining_world_Generate.addUnderground(area, array, enemy, min, max, Math.round(array.array.length * p));
    };
    com_davidmaletz_mining_world_Generate.loadPlayer = function(xml) {
        var player;
        player = js_Boot.__cast(com_davidmaletz_mining_world_ObjectInfo.make(xml.get("id"), Std.parseInt(xml.get("x")), Std.parseInt(xml.get("y"))), com_davidmaletz_mining_Player);
        var $it0 = xml.elementsNamed("addItem");
        while ($it0.hasNext()) {
            var e = $it0.next();
            player.inventory.addItem(com_davidmaletz_mining_item_Item.get(e.get("id")), e.exists("count") ? Std.parseInt(e.get("count")) : 1);
        }
        return player;
    };
    com_davidmaletz_mining_world_Generate.makeShore = function(area, xml, height) {
        var trans1 = area.addTileIndex(xml.get("trans1"));
        var trans2 = area.addTileIndex(xml.get("trans2"));
        var top = area.addTileIndex(xml.get("top"));
        var bottom = area.addTileIndex(xml.get("bottom"));
        var empty = area.addTileIndex("empty");
        var pos = Std.parseInt(xml.get("x"));
        var flip = xml.get("flip") == "true";
        var ct = Math.floor(Math.random() * 2) + 1;
        var x = pos;
        var _g = 0;
        while (_g < ct) {
            var i = _g++;
            if (flip) x++;
            else x--;
            area.setTile(x, 0, 0, trans2);
        }
        var ct1 = Math.floor(Math.random() * 2) + 1;
        var _g1 = 0;
        while (_g1 < ct1) {
            var i1 = _g1++;
            if (flip) x++;
            else x--;
            area.setTile(x, 0, 0, trans1);
        }
        var _g2 = 0;
        while (_g2 < 4) {
            var y = _g2++;
            area.setTile(pos, y, 0, empty);
        }
        var _g3 = 4;
        while (_g3 < height) {
            var y1 = _g3++;
            var w = Math.ceil(com_fancyfish_faeng_common_Utils.interp( - 4, -16, com_fancyfish_faeng_common_Utils.clamp((y1 - 4) / 64, 0, 1)));
            var _g11 = w;
            while (_g11 < 0) {
                var x1 = _g11++;
                var tx;
                if (flip) tx = pos + x1 + 1;
                else tx = pos - x1 - 1;
                var t = y1 > 4 && area.getTileId(tx, y1 - 1, 0) == -1;
                area.setTile(tx, y1, 0, t ? top: bottom);
                area.setTile(tx, y1, 2, (t ? com_fancyfish_faeng_common_Utils.min(y1 * 8, 120) : 255) - 1);
            }
        }
        if (flip)((function($this) {
            var $r;
            if (com_davidmaletz_mining_structure_StructureInfo.structures == null) com_davidmaletz_mining_structure_StructureInfo.loadStructures();
            $r = com_davidmaletz_mining_structure_StructureInfo.structures.get("dock_empty");
            return $r;
        } (this))).build(area, pos - 3, -1);
        else((function($this) {
            var $r;
            if (com_davidmaletz_mining_structure_StructureInfo.structures == null) com_davidmaletz_mining_structure_StructureInfo.loadStructures();
            $r = com_davidmaletz_mining_structure_StructureInfo.structures.get("dock_empty_flip");
            return $r;
        } (this))).build(area, pos + 4, -1);
    };
    com_davidmaletz_mining_world_Generate.placeObjects = function(area, xml, array, arrays) {
        var o = com_davidmaletz_mining_world_ObjectInfo.get(xml.get("id"));
        if (xml.exists("start")) {
            var st = Std.parseFloat(xml.get("start"));
            var end = Std.parseFloat(xml.get("end"));
            if (xml.exists("percent")) com_davidmaletz_mining_world_Generate.addUndergroundPercent(area, array, o, st, end, Std.parseFloat(xml.get("percent")));
            else if (xml.exists("count")) com_davidmaletz_mining_world_Generate.addUnderground(area, array, o, st, end, Std.parseInt(xml.get("count")));
        } else {
            var y;
            if (xml.exists("y")) y = Std.parseInt(xml.get("y"));
            else y = -1;
            var pos = [];
            var ct;
            if (xml.exists("between")) {
                var ar;
                var key = xml.get("between");
                ar = __map_reserved[key] != null ? arrays.getReserved(key) : arrays.h[key];
                var len = ar.length;
                var add = function(p) {
                    var _g = 1;
                    while (_g < len) {
                        var i = _g++;
                        var x = Math.round(ar[i - 1] * (1 - p) + ar[i] * p);
                        if (!area.hasObject(x, y)) pos.push(x);
                    }
                };
                add(Std.parseFloat(xml.get("pos")));
                if (xml.exists("altPos")) add(Std.parseFloat(xml.get("altPos")));
            } else if (xml.exists("minDist")) {
                var x1 = Std.parseInt(xml.get("startX"));
                var end1 = Std.parseInt(xml.get("endX"));
                var minDist = Std.parseInt(xml.get("minDist"));
                var maxDist = Std.parseInt(xml.get("maxDist"));
                if (minDist > 0) end1--;
                while (true) {
                    x1 += minDist + Math.floor(Math.random() * (maxDist - minDist + 1));
                    if (minDist < 0 == x1 < end1) break;
                    pos.push(x1);
                    area.addObject(o.create(x1, y));
                }
                if (xml.exists("array")) {
                    var key1 = xml.get("array");
                    if (__map_reserved[key1] != null) arrays.setReserved(key1, pos);
                    else arrays.h[key1] = pos;
                }
                return;
            } else if (xml.exists("fromArray")) {
                var l = ((function($this) {
                    var $r;
                    var key2 = xml.get("fromArray");
                    $r = __map_reserved[key2] != null ? arrays.getReserved(key2) : arrays.h[key2];
                    return $r;
                } (this)))[0] + 1;
                var r = ((function($this) {
                    var $r;
                    var key3 = xml.get("toArray");
                    $r = __map_reserved[key3] != null ? arrays.getReserved(key3) : arrays.h[key3];
                    return $r;
                } (this)))[0];
                var ex;
                if (xml.exists("exclude")) ex = Std.parseInt(xml.get("exclude"));
                else ex = -100000;
                var _g1 = l;
                while (_g1 < r) {
                    var i1 = _g1++;
                    if (i1 != ex && !area.hasObject(i1, y)) pos.push(i1);
                }
            } else return;
            if (xml.exists("percent")) ct = Math.round(pos.length * Std.parseFloat(xml.get("percent")));
            else ct = Std.parseInt(xml.get("count"));
            if (ct > pos.length) ct = pos.length;
            com_fancyfish_faeng_common_Utils.shuffle(pos, Math.random);
            var _g2 = 0;
            while (_g2 < ct) {
                var i2 = _g2++;
                area.addObject(o.create(pos[i2], y));
            }
        }
    };
    com_davidmaletz_mining_world_Generate.map = null;
    com_davidmaletz_mining_world_Generate.get = function(id) {
        if (com_davidmaletz_mining_world_Generate.map == null) {
            com_davidmaletz_mining_world_Generate.map = new haxe_ds_StringMap();
            var action_map = new haxe_ds_StringMap();
            if (__map_reserved.area != null) action_map.setReserved("area",
            function(e) {
                var key = e.get("id");
                com_davidmaletz_mining_world_Generate.map.set(key, e);
            });
            else action_map.h["area"] = function(e) {
                var key = e.get("id");
                com_davidmaletz_mining_world_Generate.map.set(key, e);
            };
            com_davidmaletz_faengfl_EventHandler.parse("data/areas.xml", action_map);
        }
        return com_davidmaletz_mining_world_Generate.map.get(id);
    };
    com_davidmaletz_mining_world_Generate.create = function(id) {
        var xml = com_davidmaletz_mining_world_Generate.get(id);
        if (xml == null) return null;
        else return com_davidmaletz_mining_world_Generate.load(id, xml);
    };
    com_davidmaletz_mining_world_Generate.load = function(id, xml) {
        var area = new com_davidmaletz_mining_world_Area(id);
        var array = com_davidmaletz_mining_world_Generate.generate(area, Std.parseInt(xml.get("width")), Std.parseInt(xml.get("height")), area.addTileIndex(xml.get("top")), area.addTileIndex(xml.get("high")), area.addTileIndex(xml.get("low")), area.addTileIndex(xml.get("bottom")));
        var e = new com_davidmaletz_mining_world_GenerateEventHandler(area, array, xml);
        e.start();
        if (e.player == null) throw new js__$Boot_HaxeError("No player set!");
        return new com_davidmaletz_mining_world_Generate(area, e.player, e.init);
    };
    com_davidmaletz_mining_world_Generate.prototype = {
        init: function(r) {
            if (this.xml != null) new com_davidmaletz_mining_npc_NPCEventHandler(this.xml, this.player, r).runAll();
        },
        __class__: com_davidmaletz_mining_world_Generate
    };
    var com_davidmaletz_mining_world_GenerateEventHandler = function(area, array, xml, func, v) {
        com_davidmaletz_faengfl_EventHandler.call(this, "data/", xml, func, v);
        this.vars.set("area", area);
        this.vars.set("mine", $bind(this, this.mine));
        this.vars.set("setTile", $bind(this, this.set));
        this.area = area;
        this.array = array;
        this.arrays = new haxe_ds_StringMap();
        this.init = null;
        this.player = null;
        this.height = Std.parseInt(xml.get("height"));
    };
    $hxClasses["com.davidmaletz.mining.world.GenerateEventHandler"] = com_davidmaletz_mining_world_GenerateEventHandler;
    com_davidmaletz_mining_world_GenerateEventHandler.__name__ = ["com", "davidmaletz", "mining", "world", "GenerateEventHandler"];
    com_davidmaletz_mining_world_GenerateEventHandler.doMine = function(area, e) {
        var x = Std.parseInt(e.get("x"));
        var y = Std.parseInt(e.get("y"));
        var t;
        if (e.exists("tile")) t = area.addTileIndex(e.get("tile"));
        else t = area.getTileId(x, y, 0);
        area.mine(x, y, t, e.exists("light") ? Std.parseInt(e.get("light")) : 0);
    };
    com_davidmaletz_mining_world_GenerateEventHandler.setTile = function(area, e) {
        area.setTile(Std.parseInt(e.get("x")), Std.parseInt(e.get("y")), 0, area.addTileIndex(e.get("tile")));
    };
    com_davidmaletz_mining_world_GenerateEventHandler.__super__ = com_davidmaletz_faengfl_EventHandler;
    com_davidmaletz_mining_world_GenerateEventHandler.prototype = $extend(com_davidmaletz_faengfl_EventHandler.prototype, {
        mine: function(x, y, light, tile) {
            if (light == null) light = 0;
            var t;
            if (tile != null) t = this.area.addTileIndex(tile);
            else t = this.area.getTileId(x, y, 0);
            return this.area.mine(x, y, t, light);
        },
        set: function(x, y, tile) {
            this.area.setTile(x, y, 0, this.area.addTileIndex(tile));
        },
        handleNode: function(e) {
            var _g;
            if (e.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e.nodeType);
            _g = e.nodeName;
            switch (_g) {
            case "ore":
                var st = Std.parseFloat(e.get("start"));
                var end = Std.parseFloat(e.get("end"));
                var t = this.area.addTileIndex(e.get("id"));
                if (e.exists("percent")) com_davidmaletz_mining_world_Generate.addOrePercent(this.area, this.array, t, st, end, Std.parseFloat(e.get("percent")));
                else if (e.exists("count")) com_davidmaletz_mining_world_Generate.addOre(this.area, this.array, t, st, end, Std.parseInt(e.get("count")));
                break;
            case "object":
                this.area.addObject(com_davidmaletz_mining_world_ObjectInfo.make(e.get("id"), Std.parseInt(e.get("x")), Std.parseInt(e.get("y"))));
                break;
            case "structure":
                com_davidmaletz_mining_structure_StructureInfo.get(e.get("id")).build(this.area, Std.parseInt(e.get("x")), e.exists("y") ? Std.parseInt(e.get("y")) : -1);
                break;
            case "mine":
                com_davidmaletz_mining_world_GenerateEventHandler.doMine(this.area, e);
                break;
            case "setTile":
                com_davidmaletz_mining_world_GenerateEventHandler.setTile(this.area, e);
                break;
            case "player":
                this.player = com_davidmaletz_mining_world_Generate.loadPlayer(e);
                break;
            case "shore":
                com_davidmaletz_mining_world_Generate.makeShore(this.area, e, this.height);
                break;
            case "objects":
                com_davidmaletz_mining_world_Generate.placeObjects(this.area, e, this.array, this.arrays);
                break;
            case "init":
                this.init = e;
                break;
            default:
                return com_davidmaletz_faengfl_EventHandler.prototype.handleNode.call(this, e);
            }
            return false;
        },
        __class__: com_davidmaletz_mining_world_GenerateEventHandler
    });
    var com_davidmaletz_mining_world_HashObjectLayer = function(area) {
        com_davidmaletz_mining_world_ObjectLayer.call(this, area);
        this.objects = new haxe_ds_IntMap();
    };
    $hxClasses["com.davidmaletz.mining.world.HashObjectLayer"] = com_davidmaletz_mining_world_HashObjectLayer;
    com_davidmaletz_mining_world_HashObjectLayer.__name__ = ["com", "davidmaletz", "mining", "world", "HashObjectLayer"];
    com_davidmaletz_mining_world_HashObjectLayer.__super__ = com_davidmaletz_mining_world_ObjectLayer;
    com_davidmaletz_mining_world_HashObjectLayer.prototype = $extend(com_davidmaletz_mining_world_ObjectLayer.prototype, {
        addObject: function(object) {
            var id = (object.tile_y + 16384) * 32768 + (object.tile_x + 16384);
            if (this.objects.h.hasOwnProperty(id)) this.removeObject(this.objects.h[id], null);
            this.objects.h[id] = object;
            com_davidmaletz_mining_world_ObjectLayer.prototype.addObject.call(this, object);
        },
        removeObject: function(object, killer, onComplete) {
            this.objects.remove((object.tile_y + 16384) * 32768 + (object.tile_x + 16384));
            com_davidmaletz_mining_world_ObjectLayer.prototype.removeObject.call(this, object, killer, onComplete);
        },
        moveObject: function(object, toX, toY) {
            var id = (toY + 16384) * 32768 + (toX + 16384);
            if (this.objects.h.hasOwnProperty(id)) this.removeObject(this.objects.h[id], null);
            this.objects.remove((object.tile_y + 16384) * 32768 + (object.tile_x + 16384));
            this.objects.h[id] = object;
        },
        getObject: function(x, y) {
            return this.objects.h[(y + 16384) * 32768 + (x + 16384)];
        },
        getObjects: function() {
            return this.objects.iterator();
        },
        __class__: com_davidmaletz_mining_world_HashObjectLayer
    });
    var com_davidmaletz_mining_world_ItemObject = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.world.ItemObject"] = com_davidmaletz_mining_world_ItemObject;
    com_davidmaletz_mining_world_ItemObject.__name__ = ["com", "davidmaletz", "mining", "world", "ItemObject"];
    com_davidmaletz_mining_world_ItemObject.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_world_ItemObject.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            var ret = new com_davidmaletz_lerp_LerpSpriteFL();
            var icon = this.info.item.createIcon();
            icon.set_x( - com_davidmaletz_tiles_Tile.SIZE * 0.5);
            ret.addChild(icon);
            ret.set_x((this.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
            ret.set_y((this.tile_y + 1) * com_davidmaletz_tiles_Tile.SIZE - 10);
            return ret;
        },
        isBack: function() {
            return true;
        },
        canFlip: function() {
            return false;
        },
        getInfo: function() {
            return this.info;
        },
        getLayer: function() {
            return 1;
        },
        getAction: function(p) {
            return new com_fancyfish_faeng_common_mutable_Concat2(com_fancyfish_faeng_common_Lang.getText("common", "collect"), com_fancyfish_faeng_common_Lang.getText("item.names", this.info.item.id), " ");
        },
        isBlocking: function(asker, flags) {
            if (this.info.blocking) return asker == null || !js_Boot.__instanceof(asker, com_davidmaletz_mining_Player);
            else return false;
        },
        onOperate: function(p) {
            if (this.area != null) {
                p.addItem(this.info.item, null);
                this.area.objects[this.getLayer()].removeObject(this, null, null);
                p.onEnterTile(p.tile_x, p.tile_y);
            }
        },
        __class__: com_davidmaletz_mining_world_ItemObject
    });
    var com_davidmaletz_mining_world_ItemObjectInfo = function(i) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, i.id, 0);
        this.item = i;
        this.blocking = false;
    };
    $hxClasses["com.davidmaletz.mining.world.ItemObjectInfo"] = com_davidmaletz_mining_world_ItemObjectInfo;
    com_davidmaletz_mining_world_ItemObjectInfo.__name__ = ["com", "davidmaletz", "mining", "world", "ItemObjectInfo"];
    com_davidmaletz_mining_world_ItemObjectInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_world_ItemObjectInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_world_ItemObject(this, tile_x, tile_y);
        },
        loadAdditional: function(xml) {
            if (xml.exists("blocking")) this.blocking = xml.get("blocking") == "true";
        },
        __class__: com_davidmaletz_mining_world_ItemObjectInfo
    });
    var com_davidmaletz_mining_world_HealthEvent = function(type, attacker, delta) {
        openfl_events_Event.call(this, type);
        this.attacker = attacker;
        this.delta = delta;
    };
    $hxClasses["com.davidmaletz.mining.world.HealthEvent"] = com_davidmaletz_mining_world_HealthEvent;
    com_davidmaletz_mining_world_HealthEvent.__name__ = ["com", "davidmaletz", "mining", "world", "HealthEvent"];
    com_davidmaletz_mining_world_HealthEvent.__super__ = openfl_events_Event;
    com_davidmaletz_mining_world_HealthEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_mining_world_HealthEvent
    });
    var com_davidmaletz_mining_world_RemoveEvent = function(type, obj, k, func) {
        com_davidmaletz_faengfl_events_ObjectEvent.call(this, type, obj);
        this.killer = k;
        this.onComplete = func;
    };
    $hxClasses["com.davidmaletz.mining.world.RemoveEvent"] = com_davidmaletz_mining_world_RemoveEvent;
    com_davidmaletz_mining_world_RemoveEvent.__name__ = ["com", "davidmaletz", "mining", "world", "RemoveEvent"];
    com_davidmaletz_mining_world_RemoveEvent.__super__ = com_davidmaletz_faengfl_events_ObjectEvent;
    com_davidmaletz_mining_world_RemoveEvent.prototype = $extend(com_davidmaletz_faengfl_events_ObjectEvent.prototype, {
        __class__: com_davidmaletz_mining_world_RemoveEvent
    });
    var com_davidmaletz_mining_world_Projectile = function(projectile, range, x, y, right, delay) {
        com_davidmaletz_mining_world_BaseObject.call(this, x, y);
        this.projectile = projectile;
        if (right) this.range = range;
        else this.range = -range;
        this.delay = delay;
    };
    $hxClasses["com.davidmaletz.mining.world.Projectile"] = com_davidmaletz_mining_world_Projectile;
    com_davidmaletz_mining_world_Projectile.__name__ = ["com", "davidmaletz", "mining", "world", "Projectile"];
    com_davidmaletz_mining_world_Projectile.load = function(b, version) {
        var id = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
        if (id == null) return null;
        var p = new com_davidmaletz_mining_world_Projectile(id == null ? null: (function($this) {
            var $r;
            if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
            $r = com_davidmaletz_mining_item_Item.items.get(id);
            return $r;
        } (this)), b.readInt16(), b.readInt16(), b.readInt16(), true, 0);
        p.read(b, version);
        return p;
    };
    com_davidmaletz_mining_world_Projectile.writeNull = function(b) {
        com_davidmaletz_faengfl_UTFUtils.writeUTF(b, null);
    };
    com_davidmaletz_mining_world_Projectile.__super__ = com_davidmaletz_mining_world_BaseObject;
    com_davidmaletz_mining_world_Projectile.prototype = $extend(com_davidmaletz_mining_world_BaseObject.prototype, {
        getId: function() {
            return this.projectile.id;
        },
        createRenderer: function(area) {
            return new com_davidmaletz_mining_world_ProjectileRenderer(this, area);
        },
        getSpeed: function() {
            if (this.projectile.xml.exists("speed")) return Std.parseInt(this.projectile.xml.get("speed"));
            else return 6;
        },
        write: function(b) {
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.projectile.id);
            b.writeInt16(this.range);
            b.writeInt16(this.tile_x);
            b.writeInt16(this.tile_y);
        },
        read: function(b, version) {},
        __class__: com_davidmaletz_mining_world_Projectile
    });
    var com_davidmaletz_mining_world_ProjectileRenderer = function(p, area) {
        com_davidmaletz_lerp_LerpSpriteFL.call(this);
        this.projectile = p;
        var data = openfl_Assets.getBitmapData("data/projectiles/" + p.projectile.id + ".png");
        var b = new openfl_display_Bitmap(data);
        b.set_x( - Math.round(data.width * 0.5));
        b.set_y(4 - Math.round(data.height * 0.5));
        this.addChild(b);
        this.area = area;
        this.set_x((p.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_y((p.tile_y + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
        this.set_scaleX(p.range > 0 ? 1 : -1);
    };
    $hxClasses["com.davidmaletz.mining.world.ProjectileRenderer"] = com_davidmaletz_mining_world_ProjectileRenderer;
    com_davidmaletz_mining_world_ProjectileRenderer.__name__ = ["com", "davidmaletz", "mining", "world", "ProjectileRenderer"];
    com_davidmaletz_mining_world_ProjectileRenderer.__super__ = com_davidmaletz_lerp_LerpSpriteFL;
    com_davidmaletz_mining_world_ProjectileRenderer.prototype = $extend(com_davidmaletz_lerp_LerpSpriteFL.prototype, {
        init: function(e) {
            com_davidmaletz_lerp_LerpSpriteFL.prototype.init.call(this, e);
            if (this.projectile.delay > 0) {
                this.set_visible(false);
                this.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), this.projectile.delay, $bind(this, this.show));
                this.projectile.delay = 0;
            } else this.fly();
        },
        show: function() {
            this.set_visible(true);
            this.fly();
            this.advanceFrame(4);
        },
        fly: function() {
            if (this.projectile.area == null) return;
            if (this.projectile.range == 0) {
                this.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.projectile.tile_x - com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null) * 4 + 0.5) * com_davidmaletz_tiles_Tile.SIZE, this.get_y()), this.projectile.getSpeed() * 4);
                this.projectile.area.removeProjectile(this.projectile);
                return;
            }
            if (this.projectile.range > 0) {
                this.projectile.range--;
                this.projectile.tile_x--;
            } else {
                this.projectile.range++;
                this.projectile.tile_x++;
            }
            var o = this.projectile.area.getObject(this.projectile.tile_x, this.projectile.tile_y, null, 1);
            if (this.area.area.getTileId(this.projectile.tile_x, this.projectile.tile_y, 0) != -1) this.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.projectile.tile_x + com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null) * 0.75 + 0.5) * com_davidmaletz_tiles_Tile.SIZE, this.get_y()), this.projectile.getSpeed() >> 2, (function(f, p) {
                return function() {
                    f(p);
                };
            })(($_ = this.projectile.area, $bind($_, $_.removeProjectile)), this.projectile));
            else this.lerp(new com_davidmaletz_lerp_PositionKeyframe((this.projectile.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE, this.get_y()), this.projectile.getSpeed(), o == null ? $bind(this, this.fly) : (function(f1, o1) {
                return function() {
                    f1(o1);
                };
            })($bind(this, this.hit), o));
        },
        hit: function(o) {
            var r;
            if (o.renderer == null) o.renderer = o.createRenderer(this.area);
            r = o.renderer;
            var crit = o.canFlip() && r.get_scaleX() == this.get_scaleX();
            if (crit) r.set_scaleX( - this.get_scaleX());
            var old = o.health;
            o.loseHealth(this.projectile.projectile.attack, crit, o, this.projectile.projectile);
            if (o.health <= 0) {
                var loot = o.getLoot();
                if (loot != null && this.area.area.objects[1].getObject(o.tile_x, o.tile_y) == null) this.area.area.addObject(com_davidmaletz_mining_world_ObjectInfo.make(loot.item.id, o.tile_x, o.tile_y));
            }
            this.area.area.removeProjectile(this.projectile); (js_Boot.__cast(com_davidmaletz_faengfl_Application.instance, com_davidmaletz_mining_Main)).player.addAttackExp(o, old);
        },
        __class__: com_davidmaletz_mining_world_ProjectileRenderer
    });
    var com_davidmaletz_mining_world_TrapInfo = function(xml) {
        com_davidmaletz_mining_world_ObjectInfo.call(this, xml.get("id"), xml.exists("health") ? Std.parseInt(xml.get("health")) : 0);
        if (xml.exists("damage")) this.damage = Std.parseInt(xml.get("damage"));
        else this.damage = 0;
        if (xml.exists("capture")) this.capture = Std.parseInt(xml.get("capture"));
        else this.capture = 0;
    };
    $hxClasses["com.davidmaletz.mining.world.TrapInfo"] = com_davidmaletz_mining_world_TrapInfo;
    com_davidmaletz_mining_world_TrapInfo.__name__ = ["com", "davidmaletz", "mining", "world", "TrapInfo"];
    com_davidmaletz_mining_world_TrapInfo.__super__ = com_davidmaletz_mining_world_ObjectInfo;
    com_davidmaletz_mining_world_TrapInfo.prototype = $extend(com_davidmaletz_mining_world_ObjectInfo.prototype, {
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_world_TrapObject(this, tile_x, tile_y);
        },
        __class__: com_davidmaletz_mining_world_TrapInfo
    });
    var com_davidmaletz_mining_world_TrapObject = function(info, x, y) {
        com_davidmaletz_mining_world_TooltipObject.call(this, info, x, y);
        this.held = null;
    };
    $hxClasses["com.davidmaletz.mining.world.TrapObject"] = com_davidmaletz_mining_world_TrapObject;
    com_davidmaletz_mining_world_TrapObject.__name__ = ["com", "davidmaletz", "mining", "world", "TrapObject"];
    com_davidmaletz_mining_world_TrapObject.__super__ = com_davidmaletz_mining_world_TooltipObject;
    com_davidmaletz_mining_world_TrapObject.prototype = $extend(com_davidmaletz_mining_world_TooltipObject.prototype, {
        createRenderer: function(area) {
            var ret = new com_davidmaletz_lerp_LerpSpriteFL();
            if (this.held != null) {
                var icon1 = this.held.createIcon();
                icon1.set_x( - com_davidmaletz_tiles_Tile.SIZE * 0.5);
                ret.addChild(icon1);
            }
            var icon = new com_davidmaletz_tiles_render_PlayAnimation(com_davidmaletz_mining_item_Item.get(this.info.id).tile, this.info.id + (this.tile_y == -1 ? ".place": ".below_surface"), 15, false);
            icon.set_x( - com_davidmaletz_tiles_Tile.SIZE * 0.5);
            ret.addChild(icon);
            ret.set_x((this.tile_x + 0.5) * com_davidmaletz_tiles_Tile.SIZE);
            ret.set_y((this.tile_y + 1) * com_davidmaletz_tiles_Tile.SIZE - 10);
            return ret;
        },
        fadeIn: function(l, frames) {
            l.lerp(new com_davidmaletz_lerp_AlphaKeyframe(1), frames);
        },
        setHeld: function(h, frames) {
            if (frames == null) frames = 0;
            this.held = h;
            if (this.held == null) return false;
            if (this.renderer != null) {
                var icon = this.held.createIcon();
                icon.set_x( - com_davidmaletz_tiles_Tile.SIZE * 0.5);
                if (frames == 0) this.renderer.addChildAt(icon, 0);
                else {
                    var l = new com_davidmaletz_lerp_LerpSpriteFL();
                    l.addChild(icon);
                    l.set_alpha(0);
                    l.lerp(new com_davidmaletz_lerp_AlphaKeyframe(0), frames, (function(f, l1, a1) {
                        return function() {
                            f(l1, a1);
                        };
                    })($bind(this, this.fadeIn), l, frames));
                    this.renderer.addChildAt(l, 0);
                }
            }
            return true;
        },
        activate: function(o) {
            if (this.held == null && this.area != null && js_Boot.__instanceof(o, com_davidmaletz_mining_enemy_Enemy)) {
                var remove = null;
                var info = this.info;
                if (info.capture > 0 && this.setHeld((js_Boot.__cast(o, com_davidmaletz_mining_enemy_Enemy)).onCapture(), 10)) this.area.objects[o.getLayer()].removeObject(o, this, null);
                else if (info.damage > 0) {
                    com_davidmaletz_mining_Sounds.playSound(this, null, o);
                    o.loseHealth(info.damage, false, this, null);
                    var loot = o.getLoot();
                    if (o.area != null || loot == null || !this.setHeld(loot.item, 10)) remove = $bind(this, this.remove);
                }
                if (this.renderer != null)(js_Boot.__cast(this.renderer.getChildAt(this.renderer.get_numChildren() - 1), com_davidmaletz_tiles_render_PlayAnimation)).playAnimation(info.id + ".spring", false, remove, null, null);
            }
        },
        remove: function(p) {
            if (this.area != null) this.area.objects[this.getLayer()].removeObject(this, null, null);
        },
        getInfo: function() {
            return this.info;
        },
        getLayer: function() {
            return 4;
        },
        getAction: function(p) {
            return new com_fancyfish_faeng_common_mutable_Concat2(com_fancyfish_faeng_common_Lang.getText("common", "collect"), com_fancyfish_faeng_common_Lang.getText("item.names", this.held == null ? this.info.id: this.held.id), " ");
        },
        isBlocking: function(asker, flags) {
            return false;
        },
        onOperate: function(p) {
            if (this.area != null) {
                p.addItem(this.held == null ? com_davidmaletz_mining_item_Item.get(this.info.id) : this.held, null);
                this.area.objects[this.getLayer()].removeObject(this, null, null);
                p.onEnterTile(p.tile_x, p.tile_y);
            }
        },
        write: function(b) {
            com_davidmaletz_mining_world_TooltipObject.prototype.write.call(this, b);
            com_davidmaletz_faengfl_UTFUtils.writeUTF(b, this.held == null ? null: this.held.id);
        },
        read: function(b, version) {
            com_davidmaletz_mining_world_TooltipObject.prototype.read.call(this, b, version);
            var id = com_davidmaletz_faengfl_UTFUtils.readUTF(b);
            if (id == null) this.held = null;
            else if (id == null) this.held = null;
            else {
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                this.held = com_davidmaletz_mining_item_Item.items.get(id);
            }
        },
        __class__: com_davidmaletz_mining_world_TrapObject
    });
    var com_davidmaletz_mining_world_Tree = function(info, x, y) {
        com_davidmaletz_mining_world_Bush.call(this, info, x, y);
    };
    $hxClasses["com.davidmaletz.mining.world.Tree"] = com_davidmaletz_mining_world_Tree;
    com_davidmaletz_mining_world_Tree.__name__ = ["com", "davidmaletz", "mining", "world", "Tree"];
    com_davidmaletz_mining_world_Tree.__super__ = com_davidmaletz_mining_world_Bush;
    com_davidmaletz_mining_world_Tree.prototype = $extend(com_davidmaletz_mining_world_Bush.prototype, {
        createRenderer: function(area) {
            return new com_davidmaletz_mining_renderer_TreeRenderer(this);
        },
        getLoot: function() {
            if (this.growth > this.info.grown) return com_davidmaletz_mining_world_Bush.prototype.getLoot.call(this);
            else return new com_davidmaletz_mining_item_ItemCt((function($this) {
                var $r;
                if (com_davidmaletz_mining_item_Item.items == null) com_davidmaletz_mining_item_Item.loadItems();
                $r = com_davidmaletz_mining_item_Item.items.get("wood");
                return $r;
            } (this)), 1);
        },
        onOperate: function(p) {
            p.tryAttack(null, null);
        },
        getTreeInfo: function() {
            return js_Boot.__cast(this.info, com_davidmaletz_mining_world_TreeInfo);
        },
        isGrown: function() {
            return this.growth > this.info.grown;
        },
        loseHealth: function(h, critical, attacker, equip) {
            com_davidmaletz_mining_world_Bush.prototype.loseHealth.call(this, h, false, attacker, equip);
            if (this.health == 0) this.health = 2;
        },
        getAction: function(p) {
            return com_fancyfish_faeng_common_Lang.getText("object.tooltip", "tree");
        },
        canCollect: function(p) {
            return p.cut.get() != null && this.growth > (js_Boot.__cast(this.info, com_davidmaletz_mining_world_TreeInfo)).collect;
        },
        isBlocking: function(asker, flags) {
            return this.growth > (js_Boot.__cast(this.info, com_davidmaletz_mining_world_TreeInfo)).blocking || (flags & 1) != 0 && js_Boot.__instanceof(asker, com_davidmaletz_mining_Player) && this.canCollect(asker);
        },
        setGrowth: function(g) {
            if (com_davidmaletz_mining_world_Bush.prototype.setGrowth.call(this, g)) {
                if (this.growth > this.info.grown && this.health <= 2) this.addHealth(this.getMaxHealth() - this.health);
                return true;
            } else return false;
        },
        __class__: com_davidmaletz_mining_world_Tree
    });
    var com_davidmaletz_mining_world_TreeInfo = function(xml) {
        com_davidmaletz_mining_world_BushInfo.call(this, xml);
        if (xml.exists("blocking")) this.blocking = Std.parseFloat(xml.get("blocking")) * 60 / 15;
        else {
            this.blocking = Infinity;
        }
        if (xml.exists("collect")) this.collect = Std.parseFloat(xml.get("collect")) * 60 / 15;
        else this.collect = this.grown;
        this.handler = new com_davidmaletz_mining_LootHandler(xml);
    };
    $hxClasses["com.davidmaletz.mining.world.TreeInfo"] = com_davidmaletz_mining_world_TreeInfo;
    com_davidmaletz_mining_world_TreeInfo.__name__ = ["com", "davidmaletz", "mining", "world", "TreeInfo"];
    com_davidmaletz_mining_world_TreeInfo.__super__ = com_davidmaletz_mining_world_BushInfo;
    com_davidmaletz_mining_world_TreeInfo.prototype = $extend(com_davidmaletz_mining_world_BushInfo.prototype, {
        getLoot: function() {
            return this.handler.getLoot();
        },
        create: function(tile_x, tile_y) {
            return new com_davidmaletz_mining_world_Tree(this, tile_x, tile_y);
        },
        __class__: com_davidmaletz_mining_world_TreeInfo
    });
    var com_davidmaletz_mining_world_types_Bird = function(area, t, xml) {
        this.lastHop = false;
        com_davidmaletz_tiles_render_PlayAnimation.call(this, t, "bird.idle", 20, false, $bind(this, this.hop));
        this.area = area;
        if (Math.random() < 0.5) this.set_scaleX( - this.get_scaleX());
        this.fromX = Std.parseInt(xml.get("fromX"));
        this.toX = Std.parseInt(xml.get("toX"));
    };
    $hxClasses["com.davidmaletz.mining.world.types.Bird"] = com_davidmaletz_mining_world_types_Bird;
    com_davidmaletz_mining_world_types_Bird.__name__ = ["com", "davidmaletz", "mining", "world", "types", "Bird"];
    com_davidmaletz_mining_world_types_Bird.__super__ = com_davidmaletz_tiles_render_PlayAnimation;
    com_davidmaletz_mining_world_types_Bird.prototype = $extend(com_davidmaletz_tiles_render_PlayAnimation.prototype, {
        setAnimation: function(anim_id, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            com_davidmaletz_tiles_render_PlayAnimation.prototype.setAnimation.call(this, anim_id, -0.5, -0.5);
        },
        playIdle: function(p) {
            this.setFrame(0);
            this.setAnimation("bird.idle", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.hop);
        },
        hop: function(p) {
            var nx = this.get_x() - 16 * com_fancyfish_faeng_common_Utils.sign(this.get_scaleX(), null);
            if (nx < this.fromX * com_davidmaletz_tiles_Tile.SIZE + 4 || nx > this.toX * com_davidmaletz_tiles_Tile.SIZE - 4 || this.lastHop && Math.random() < 0.5) {
                this.lastHop = false;
                this.set_scaleX( - this.get_scaleX());
                this.playIdle(p);
            } else {
                this.lastHop = true;
                this.setFrame(0);
                this.setAnimation("bird.hop", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.playIdle);
                this.lerp(new com_davidmaletz_lerp_PositionKeyframe(nx, this.get_y()), Math.floor(this.anim == null ? 0 : this.anim.getMaxTime() / this.deltaFrame));
            }
        },
        fly: function(p) {
            var ht = 144 + com_davidmaletz_tiles_Tile.SIZE * 2;
            this.setAnimation("bird.fly", 0, 0);
            this.loop = true;
            this.onComplete = null;
            this.lerp(new com_davidmaletz_lerp_PositionKeyframe(this.get_x() - this.get_scaleX() * ht, this.get_y() - ht), 100, $bind(this, this.land));
        },
        land: function() {
            var ht = 144 + com_davidmaletz_tiles_Tile.SIZE * 2;
            var nx = this.get_x() - this.get_scaleX() * ht;
            if (nx < this.fromX * com_davidmaletz_tiles_Tile.SIZE + 4 || nx > this.toX * com_davidmaletz_tiles_Tile.SIZE - 4 || this.objectOverlap(nx, this.get_y() + ht)) nx = (Math.random() * (this.toX - this.fromX) + this.fromX) * com_davidmaletz_tiles_Tile.SIZE;
            this.set_x(nx + this.get_scaleX() * ht);
            this.lerp(new com_davidmaletz_lerp_PositionKeyframe(nx, this.get_y() + ht), 100, $bind(this, this.land2));
        },
        land2: function() {
            this.setAnimation("bird.land", 0, 0);
            this.loop = false;
            this.onComplete = $bind(this, this.playIdle);
        },
        objectOverlap: function(nx, ny) {
            var x = Math.round(nx / com_davidmaletz_tiles_Tile.SIZE - 0.5);
            var y = Math.round(ny / com_davidmaletz_tiles_Tile.SIZE - 0.5);
            var _g = -1;
            while (_g < 2) {
                var i = _g++;
                if (this.hasObject(x + i, y)) return true;
            }
            return false;
        },
        hasObject: function(x, y) {
            return this.area.objects[3].getObject(x, y) != null || this.area.objects[2].getObject(x, y) != null || this.area.objects[5].getObject(x, y) != null;
        },
        enter_frame: function(frames) {
            if (! (this.tracks != null) && this.objectOverlap(this.get_x(), this.get_y())) {
                this.setAnimation("bird.leap", 0, 0);
                this.loop = false;
                this.onComplete = $bind(this, this.fly);
            }
            com_davidmaletz_tiles_render_PlayAnimation.prototype.enter_frame.call(this, frames);
        },
        __class__: com_davidmaletz_mining_world_types_Bird
    });
    var com_davidmaletz_tiles_Chunk = function(x, y) {
        this.x = x;
        this.y = y;
        this.tiles = [];
        this.clear();
    };
    $hxClasses["com.davidmaletz.tiles.Chunk"] = com_davidmaletz_tiles_Chunk;
    com_davidmaletz_tiles_Chunk.__name__ = ["com", "davidmaletz", "tiles", "Chunk"];
    com_davidmaletz_tiles_Chunk.pack = function(t, layer, tile) {
        t &= ~ (255 << layer * 8);
        t |= (tile + 1 & 255) << layer * 8;
        return t;
    };
    com_davidmaletz_tiles_Chunk.read = function(b, x, y) {
        var c = new com_davidmaletz_tiles_Chunk(x, y);
        var e = 256;
        var _g = 0;
        while (_g < e) {
            var i = _g++;
            c.tiles[i] = b.readInt32();
        }
        return c;
    };
    com_davidmaletz_tiles_Chunk.prototype = {
        clear: function() {
            var e = 256;
            var _g = 0;
            while (_g < e) {
                var i = _g++;
                this.tiles[i] = 0;
            }
        },
        getTile: function(x, y, layer) {
            var tile = this.tiles[y * 16 + x];
            if (layer < 0) return tile;
            else return (tile >> layer * 8 & 255) - 1;
        },
        setTile: function(x, y, tile, layer) {
            var ot = this.tiles[y * 16 + x];
            var t = ot;
            if (layer < 0) t = tile;
            else t = com_davidmaletz_tiles_Chunk.pack(t, layer, tile);
            if (t != ot) {
                this.tiles[y * 16 + x] = t;
                return true;
            } else return false;
        },
        copy: function(c) {
            var e = 256;
            var _g = 0;
            while (_g < e) {
                var i = _g++;
                this.tiles[i] = c.tiles[i];
            }
        },
        clone: function() {
            var c = new com_davidmaletz_tiles_Chunk(this.x, this.y);
            c.copy(this);
            return c;
        },
        write: function(b) {
            var e = 256;
            var _g = 0;
            while (_g < e) {
                var i = _g++;
                b.writeInt32(this.tiles[i]);
            }
        },
        __class__: com_davidmaletz_tiles_Chunk
    };
    var com_davidmaletz_tiles_ChunkEvent = function(type, map, chunk, layer) {
        openfl_events_Event.call(this, type);
        this.map = map;
        this.chunk = chunk;
        this.layer = layer;
    };
    $hxClasses["com.davidmaletz.tiles.ChunkEvent"] = com_davidmaletz_tiles_ChunkEvent;
    com_davidmaletz_tiles_ChunkEvent.__name__ = ["com", "davidmaletz", "tiles", "ChunkEvent"];
    com_davidmaletz_tiles_ChunkEvent.__super__ = openfl_events_Event;
    com_davidmaletz_tiles_ChunkEvent.prototype = $extend(openfl_events_Event.prototype, {
        __class__: com_davidmaletz_tiles_ChunkEvent
    });
    var com_davidmaletz_tiles_Floor = function() {
        this.chunks = new haxe_ds_IntMap();
        this.bounds = new com_fancyfish_faeng_common_Bounds2D_$Int();
        this.bounds.reset();
    };
    $hxClasses["com.davidmaletz.tiles.Floor"] = com_davidmaletz_tiles_Floor;
    com_davidmaletz_tiles_Floor.__name__ = ["com", "davidmaletz", "tiles", "Floor"];
    com_davidmaletz_tiles_Floor.read = function(b) {
        var f = new com_davidmaletz_tiles_Floor();
        while (true) {
            var x = b.readInt16();
            if (x == 32767) break;
            var y = b.readInt16();
            f.bounds.add(x, y, 1, 1);
            var i = (y + 16384) * 32768 + (x + 16384);
            var value = com_davidmaletz_tiles_Chunk.read(b, x, y);
            f.chunks.h[i] = value;
        }
        return f;
    };
    com_davidmaletz_tiles_Floor.prototype = {
        hasChunk: function(x, y) {
            return this.chunks.h.hasOwnProperty((y + 16384) * 32768 + (x + 16384));
        },
        getChunk: function(x, y) {
            var i = (y + 16384) * 32768 + (x + 16384);
            var c = this.chunks.h[i];
            if (c == null) {
                c = new com_davidmaletz_tiles_Chunk(x, y);
                this.chunks.h[i] = c;
                this.bounds.add(x, y, 1, 1);
            }
            return c;
        },
        iterator: function() {
            return this.chunks.iterator();
        },
        copy: function(f) {
            this.chunks = new haxe_ds_IntMap();
            var $it0 = f.chunks.keys();
            while ($it0.hasNext()) {
                var c = $it0.next();
                var value = f.chunks.h[c].clone();
                this.chunks.h[c] = value;
            }
            this.bounds.copy(f.bounds);
        },
        clone: function() {
            var f = new com_davidmaletz_tiles_Floor();
            f.copy(this);
            return f;
        },
        write: function(b) {
            var $it0 = this.chunks.iterator();
            while ($it0.hasNext()) {
                var c = $it0.next();
                b.writeInt16(c.x);
                b.writeInt16(c.y);
                c.write(b);
            }
            b.writeInt16(32767);
        },
        __class__: com_davidmaletz_tiles_Floor
    };
    var com_davidmaletz_tiles_Frame = function(x, y, v, offX, offY) {
        this.x = x;
        this.y = y;
        this.visible = v;
        this.offsetX = offX;
        this.offsetY = offY;
    };
    $hxClasses["com.davidmaletz.tiles.Frame"] = com_davidmaletz_tiles_Frame;
    com_davidmaletz_tiles_Frame.__name__ = ["com", "davidmaletz", "tiles", "Frame"];
    com_davidmaletz_tiles_Frame.prototype = {
        __class__: com_davidmaletz_tiles_Frame
    };
    var com_davidmaletz_tiles_Tile = function(id, path, xml) {
        this.id = id;
        this.layers = null;
        if (xml.exists("sheet")) this.base = new com_davidmaletz_tiles__$Tile_TileData(path, xml);
        else this.base = null;
        var list = xml.elementsNamed("tile");
        this.p_total = 0.0;
        if (list.hasNext()) {
            this.layers = [];
            while (list.hasNext()) {
                var e = list.next();
                var t = new com_davidmaletz_tiles__$Tile_TileData(path, e);
                this.layers.push(t);
                this.p_total += t.p;
            }
        }
        var $it0 = xml.elementsNamed("neighbor");
        while ($it0.hasNext()) {
            var n = $it0.next();
            if (this.neighbors == null) this.neighbors = new haxe_ds_StringMap();
            var key = n.get("id");
            this.neighbors.set(key, true);
        }
    };
    $hxClasses["com.davidmaletz.tiles.Tile"] = com_davidmaletz_tiles_Tile;
    com_davidmaletz_tiles_Tile.__name__ = ["com", "davidmaletz", "tiles", "Tile"];
    com_davidmaletz_tiles_Tile.tiles = null;
    com_davidmaletz_tiles_Tile.loadTilesheet = function(e) {
        com_davidmaletz_tiles_Tile.loadTilesheetPath("data/tile/" + e.get("id"), e);
    };
    com_davidmaletz_tiles_Tile.loadTilesheetPath = function(path, e) {
        var w;
        if (e.exists("width")) w = Std.parseInt(e.get("width"));
        else w = com_davidmaletz_tiles_Tile.SIZE;
        var h;
        if (e.exists("height")) h = Std.parseInt(e.get("height"));
        else h = com_davidmaletz_tiles_Tile.SIZE;
        com_davidmaletz_faengfl_AutoTileBitmap.get(path, w, h);
    };
    com_davidmaletz_tiles_Tile.setTile = function(id, path, e) {
        if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.tiles = new haxe_ds_StringMap();
        var value = new com_davidmaletz_tiles_Tile(id, path, e);
        com_davidmaletz_tiles_Tile.tiles.set(id, value);
    };
    com_davidmaletz_tiles_Tile.loadTiles = function() {
        com_davidmaletz_tiles_Tile.tiles = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        action_map.set("tilesheet", com_davidmaletz_tiles_Tile.loadTilesheet);
        if (__map_reserved.tile != null) action_map.setReserved("tile",
        function(e) {
            var id = e.get("id");
            var value = new com_davidmaletz_tiles_Tile(id, "data/tile/", e);
            com_davidmaletz_tiles_Tile.tiles.set(id, value);
        });
        else action_map.h["tile"] = function(e) {
            var id = e.get("id");
            var value = new com_davidmaletz_tiles_Tile(id, "data/tile/", e);
            com_davidmaletz_tiles_Tile.tiles.set(id, value);
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/tile/tiles.xml", action_map);
    };
    com_davidmaletz_tiles_Tile.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            return com_davidmaletz_tiles_Tile.tiles.get(id);
        }
    };
    com_davidmaletz_tiles_Tile.makeIcon = function(tile) {
        var l = new com_davidmaletz_faengfl_TileLayer();
        com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
        l.get_graphics().clear();
        l.handler.start(l.get_graphics(), 0);
        tile.render(0, l, 0, 0, 0, 0);
        l.handler.finish();
        return l;
    };
    com_davidmaletz_tiles_Tile.prototype = {
        getId: function() {
            return this.id;
        },
        getBase: function() {
            return "tile";
        },
        render: function(neighbors, layer, x, y, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            var tx = Math.round(x * com_davidmaletz_tiles_Tile.SIZE);
            var ty = Math.round(y * com_davidmaletz_tiles_Tile.SIZE);
            if (this.base != null) this.base.render(neighbors, layer, tx, ty, offX, offY);
            if (this.layers != null) {
                var r = com_fancyfish_faeng_common_Utils.fract(Math.sin(tx * 9106.966345 + ty * 3742.931314) * 49824.21294) * this.p_total;
                var cur = 0.0;
                var _g = 0;
                var _g1 = this.layers;
                while (_g < _g1.length) {
                    var l = _g1[_g]; ++_g;
                    cur += l.p;
                    if (l.p == 0.0 || cur > r) {
                        if (cur > r) cur = -Infinity;
                        l.render(neighbors, layer, tx, ty, offX, offY);
                    }
                }
            }
        },
        getWidth: function() {
            if (this.base == null) return 0;
            else return this.base.sheet.tileWidth;
        },
        getHeight: function() {
            if (this.base == null) return 0;
            else return this.base.sheet.tileHeight;
        },
        getTileWidth: function(offX, offY) {
            if (this.base == null) return 0;
            else return this.base.sheet.tileWidth;
        },
        getTileHeight: function(offX, offY) {
            if (this.base == null) return 0;
            else return this.base.sheet.tileHeight;
        },
        isNeighbor: function(t) {
            return t == this || this.neighbors != null && t != null && this.neighbors.exists(t.id);
        },
        __class__: com_davidmaletz_tiles_Tile
    };
    var com_davidmaletz_tiles__$Tile_TileData = function(path, xml) {
        this.sheet = com_davidmaletz_faengfl_AutoTileBitmap.get(path + xml.get("sheet"), com_davidmaletz_tiles_Tile.SIZE);
        this.x = Std.parseInt(xml.get("x"));
        this.y = Std.parseInt(xml.get("y"));
        if (xml.exists("p")) this.p = Std.parseFloat(xml.get("p"));
        else this.p = 0.0;
        this._if = xml.get("if");
    };
    $hxClasses["com.davidmaletz.tiles._Tile.TileData"] = com_davidmaletz_tiles__$Tile_TileData;
    com_davidmaletz_tiles__$Tile_TileData.__name__ = ["com", "davidmaletz", "tiles", "_Tile", "TileData"];
    com_davidmaletz_tiles__$Tile_TileData.prototype = {
        render: function(neighbors, layer, tx, ty, offX, offY) {
            var w = Math.floor(this.sheet.bitmap.width / this.sheet.tileWidth);
            if (this.x + offX >= w) {
                var ct = Math.floor((this.x + offX) / w);
                offX -= ct * w;
                offY += ct;
            }
            layer.addTile(this.sheet, tx, ty, this.sheet.getIdx(this.x + offX, this.y + offY), null, null, null, null, null);
        },
        __class__: com_davidmaletz_tiles__$Tile_TileData
    };
    var com_davidmaletz_tiles_TileAnimation = function(id, xml) {
        this.id = id;
        this.frames = [];
        this.cdf = [];
        var iter = xml.elementsNamed("append");
        if (iter.hasNext()) this.append = new com_davidmaletz_tiles_Append(iter.next());
        this.tile = com_davidmaletz_tiles_Tile.get(xml.get("tile"));
        if (xml.exists("count") || xml.exists("countY")) {
            var tx;
            if (xml.exists("x")) tx = Std.parseInt(xml.get("x"));
            else tx = 0;
            var ty;
            if (xml.exists("y")) ty = Std.parseInt(xml.get("y"));
            else ty = 0;
            var visible = xml.get("visible") != "false";
            var length;
            if (xml.exists("length")) length = Std.parseFloat(xml.get("length"));
            else length = 1;
            var offX;
            if (xml.exists("offsetX")) offX = Std.parseInt(xml.get("offsetX"));
            else offX = 0;
            var offY;
            if (xml.exists("offsetY")) offY = Std.parseInt(xml.get("offsetY"));
            else offY = 0;
            if (xml.exists("count")) {
                var count = Std.parseInt(xml.get("count"));
                var _g = 0;
                while (_g < count) {
                    var i = _g++;
                    this.frames.push(new com_davidmaletz_tiles_Frame(tx + i, ty, visible, offX, offY));
                    this.cdf.push(length);
                }
            }
            if (xml.exists("countY")) {
                var count1 = Std.parseInt(xml.get("countY"));
                var _g1 = 0;
                while (_g1 < count1) {
                    var i1 = _g1++;
                    this.frames.push(new com_davidmaletz_tiles_Frame(tx, ty + i1, visible, offX, offY));
                    this.cdf.push(length);
                }
            }
        }
        var $it0 = xml.elementsNamed("frame");
        while ($it0.hasNext()) {
            var f = $it0.next();
            var tx1;
            if (f.exists("x")) tx1 = Std.parseInt(f.get("x"));
            else tx1 = 0;
            var ty1;
            if (f.exists("y")) ty1 = Std.parseInt(f.get("y"));
            else ty1 = 0;
            var visible1 = f.get("visible") != "false";
            var count2;
            if (f.exists("count")) count2 = Std.parseInt(f.get("count"));
            else count2 = 1;
            var length1;
            if (f.exists("length")) length1 = Std.parseFloat(f.get("length"));
            else length1 = 1;
            var offX1;
            if (f.exists("offsetX")) offX1 = Std.parseInt(f.get("offsetX"));
            else offX1 = 0;
            var offY1;
            if (f.exists("offsetY")) offY1 = Std.parseInt(f.get("offsetY"));
            else offY1 = 0;
            var rev = f.get("reverse") == "true";
            var repeat;
            if (f.exists("repeat")) repeat = Std.parseInt(f.get("repeat"));
            else repeat = 1;
            var _g2 = 0;
            while (_g2 < repeat) {
                var r = _g2++;
                var _g11 = 0;
                while (_g11 < count2) {
                    var i2 = _g11++;
                    var c;
                    if (rev) c = count2 - 1 - i2;
                    else c = i2;
                    this.frames.push(new com_davidmaletz_tiles_Frame(tx1 + c, ty1, visible1, offX1, offY1));
                    this.cdf.push(length1);
                }
            }
        }
        if (xml.exists("shift")) {
            var shift = Std.parseInt(xml.get("shift"));
            while (shift > 0) {
                shift--;
                this.frames.unshift(this.frames.pop());
                this.cdf.unshift(this.cdf.pop());
            }
            while (shift < 0) {
                shift++;
                this.frames.push(this.frames.shift());
                this.cdf.push(this.cdf.shift());
            }
        }
        if (xml.get("reverse") == "true") {
            this.frames.reverse();
            this.cdf.reverse();
        }
        com_fancyfish_faeng_common_Utils.pdfToCDF(this.cdf);
    };
    $hxClasses["com.davidmaletz.tiles.TileAnimation"] = com_davidmaletz_tiles_TileAnimation;
    com_davidmaletz_tiles_TileAnimation.__name__ = ["com", "davidmaletz", "tiles", "TileAnimation"];
    com_davidmaletz_tiles_TileAnimation.anims = null;
    com_davidmaletz_tiles_TileAnimation.loadAnims = function() {
        com_davidmaletz_tiles_TileAnimation.anims = new haxe_ds_StringMap();
        var action_map = new haxe_ds_StringMap();
        if (__map_reserved.animation != null) action_map.setReserved("animation",
        function(e) {
            var id = e.get("id");
            if (e.exists("equals")) {
                var value;
                var key = e.get("equals");
                value = com_davidmaletz_tiles_TileAnimation.anims.get(key);
                com_davidmaletz_tiles_TileAnimation.anims.set(id, value);
            } else {
                var value1 = new com_davidmaletz_tiles_TileAnimation(id, e);
                com_davidmaletz_tiles_TileAnimation.anims.set(id, value1);
            }
        });
        else action_map.h["animation"] = function(e) {
            var id = e.get("id");
            if (e.exists("equals")) {
                var value;
                var key = e.get("equals");
                value = com_davidmaletz_tiles_TileAnimation.anims.get(key);
                com_davidmaletz_tiles_TileAnimation.anims.set(id, value);
            } else {
                var value1 = new com_davidmaletz_tiles_TileAnimation(id, e);
                com_davidmaletz_tiles_TileAnimation.anims.set(id, value1);
            }
        };
        com_davidmaletz_faengfl_EventHandler.parse("data/tile/anims.xml", action_map);
    };
    com_davidmaletz_tiles_TileAnimation.setAnimation = function(id, e) {
        if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.anims = new haxe_ds_StringMap();
        var value = new com_davidmaletz_tiles_TileAnimation(id, e);
        com_davidmaletz_tiles_TileAnimation.anims.set(id, value);
    };
    com_davidmaletz_tiles_TileAnimation.get = function(id) {
        if (id == null) return null;
        else {
            if (com_davidmaletz_tiles_TileAnimation.anims == null) com_davidmaletz_tiles_TileAnimation.loadAnims();
            return com_davidmaletz_tiles_TileAnimation.anims.get(id);
        }
    };
    com_davidmaletz_tiles_TileAnimation.prototype = {
        getMaxTime: function() {
            return this.cdf[this.cdf.length - 1];
        },
        getFrameAtTime: function(f) {
            return com_fancyfish_faeng_common_Utils.drawCDF(this.cdf, f, false);
        },
        getFrameCount: function() {
            return this.frames.length;
        },
        createLayerForFrame: function(tile, f, offX, offY) {
            if (offY == null) offY = 0;
            if (offX == null) offX = 0;
            if (this.tile != null) tile = this.tile;
            var f1 = this.frames[f];
            if (!f1.visible) {
                var d = new openfl_display_Sprite();
                d.set_visible(false);
                return d;
            }
            var w = tile.getTileWidth(f1.x, f1.y);
            var h = tile.getTileHeight(f1.x, f1.y);
            var l = new com_davidmaletz_faengfl_TileLayer();
            com_davidmaletz_faengfl_FaengFL.removeAllChildren(l);
            l.get_graphics().clear();
            l.handler.start(l.get_graphics(), 0);
            tile.render(0, l, 0, 0, f1.x, f1.y);
            l.set_x(Math.round(offX * w + f1.offsetX));
            l.set_y(Math.round(offY * h + f1.offsetY));
            l.handler.finish();
            return l;
        },
        getFrame: function(i) {
            return this.frames[i];
        },
        __class__: com_davidmaletz_tiles_TileAnimation
    };
    var com_davidmaletz_tiles_Append = function(xml) {
        this.tile = com_davidmaletz_tiles_Tile.get(xml.get("tile"));
        this.animation = xml.get("animation");
    };
    $hxClasses["com.davidmaletz.tiles.Append"] = com_davidmaletz_tiles_Append;
    com_davidmaletz_tiles_Append.__name__ = ["com", "davidmaletz", "tiles", "Append"];
    com_davidmaletz_tiles_Append.prototype = {
        __class__: com_davidmaletz_tiles_Append
    };
    var com_fancyfish_faeng_text_Character = function(xml, fnt) {
        if (xml != null) {
            this.id = Std.parseInt(xml.get("id"));
            this.xoffset = Std.parseFloat(xml.get("xoffset"));
            this.yoffset = Std.parseFloat(xml.get("yoffset"));
            this.xadvance = Std.parseFloat(xml.get("xadvance"));
            this.x = Std.parseInt(xml.get("x"));
            this.y = Std.parseInt(xml.get("y"));
            this.width = Std.parseInt(xml.get("width"));
            this.height = Std.parseInt(xml.get("height"));
            this.kernings = new haxe_ds_IntMap();
        }
        this.font = fnt;
    };
    $hxClasses["com.fancyfish.faeng.text.Character"] = com_fancyfish_faeng_text_Character;
    com_fancyfish_faeng_text_Character.__name__ = ["com", "fancyfish", "faeng", "text", "Character"];
    com_fancyfish_faeng_text_Character.prototype = {
        addKerning: function(id, value) {
            if (this.kernings != null) this.kernings.h[id] = value;
        },
        getKerning: function(prevId) {
            if (this.kernings == null) return 0;
            else {
                var k = this.kernings.h[prevId];
                if (k == null) return 0;
                else return k;
            }
        },
        getXOffset: function(prevId) {
            if (prevId == null) prevId = -1;
            return this.xoffset + this.getKerning(prevId);
        },
        getYOffset: function() {
            return this.yoffset;
        },
        getXAdvance: function(prevId) {
            if (prevId == null) prevId = -1;
            return this.xadvance + this.getKerning(prevId);
        },
        isDisplayable: function() {
            return this.width > 0 && this.height > 0;
        },
        __class__: com_fancyfish_faeng_text_Character
    };
    var com_davidmaletz_tiles__$TileFormattedText_TileCharacter = function(id, fnt) {
        com_fancyfish_faeng_text_Character.call(this, null, fnt);
        var tile;
        if (id == null) tile = null;
        else {
            if (com_davidmaletz_tiles_Tile.tiles == null) com_davidmaletz_tiles_Tile.loadTiles();
            tile = com_davidmaletz_tiles_Tile.tiles.get(id);
        }
        if (tile.base == null) this.width = 0;
        else this.width = tile.base.sheet.tileWidth;
        this.xoffset = 0;
        this.xadvance = this.width;
        this.yoffset = Math.round((fnt.lineHeight - (tile.base == null ? 0 : tile.base.sheet.tileHeight)) * 0.5);
        this.id = -1;
        this.x = 0;
        this.y = 0;
        this.height = 10;
        this.userData = (function(f, a1) {
            return function() {
                return f(a1);
            };
        })(com_davidmaletz_tiles_Tile.makeIcon, tile);
    };
    $hxClasses["com.davidmaletz.tiles._TileFormattedText.TileCharacter"] = com_davidmaletz_tiles__$TileFormattedText_TileCharacter;
    com_davidmaletz_tiles__$TileFormattedText_TileCharacter.__name__ = ["com", "davidmaletz", "tiles", "_TileFormattedText", "TileCharacter"];
    com_davidmaletz_tiles__$TileFormattedText_TileCharacter.__super__ = com_fancyfish_faeng_text_Character;
    com_davidmaletz_tiles__$TileFormattedText_TileCharacter.prototype = $extend(com_fancyfish_faeng_text_Character.prototype, {
        __class__: com_davidmaletz_tiles__$TileFormattedText_TileCharacter
    });
    var com_davidmaletz_tiles__$TileFormattedText_KeyCharacter = function(id, fnt, s) {
        com_fancyfish_faeng_text_Character.call(this, null, fnt);
        this.width = Math.round(com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth / s);
        this.xoffset = 0;
        this.xadvance = this.width;
        this.yoffset = 0;
        this.id = -1;
        this.x = 0;
        this.y = 0;
        this.height = Math.round(com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight / s);
        this.userData = (function(f, id1) {
            return function() {
                return f(id1);
            };
        })(com_davidmaletz_tiles__$TileFormattedText_KeyCharacter.makeIcon, id);
    };
    $hxClasses["com.davidmaletz.tiles._TileFormattedText.KeyCharacter"] = com_davidmaletz_tiles__$TileFormattedText_KeyCharacter;
    com_davidmaletz_tiles__$TileFormattedText_KeyCharacter.__name__ = ["com", "davidmaletz", "tiles", "_TileFormattedText", "KeyCharacter"];
    com_davidmaletz_tiles__$TileFormattedText_KeyCharacter.makeIcon = function(id) {
        return new com_davidmaletz_controls_KeyRenderer(id, com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileWidth * 0.5, com_davidmaletz_faengfl_controls_AbstractKey.key_bitmap.tileHeight * 0.5);
    };
    com_davidmaletz_tiles__$TileFormattedText_KeyCharacter.__super__ = com_fancyfish_faeng_text_Character;
    com_davidmaletz_tiles__$TileFormattedText_KeyCharacter.prototype = $extend(com_fancyfish_faeng_text_Character.prototype, {
        __class__: com_davidmaletz_tiles__$TileFormattedText_KeyCharacter
    });
    var com_davidmaletz_tiles_TileIndex = function() {
        this.tiles = new haxe_ds_IntMap();
    };
    $hxClasses["com.davidmaletz.tiles.TileIndex"] = com_davidmaletz_tiles_TileIndex;
    com_davidmaletz_tiles_TileIndex.__name__ = ["com", "davidmaletz", "tiles", "TileIndex"];
    com_davidmaletz_tiles_TileIndex.prototype = {
        getTile: function(idx) {
            return this.tiles.h[idx];
        },
        setTile: function(idx, tile) {
            if (this.tiles.h[idx] != tile) {
                this.tiles.h[idx] = tile;
                return true;
            } else return false;
        },
        copy: function(c) {
            this.tiles = new haxe_ds_IntMap();
            var $it0 = c.tiles.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                var value = c.tiles.h[k];
                this.tiles.h[k] = value;
            }
        },
        clone: function() {
            var c = new com_davidmaletz_tiles_TileIndex();
            c.copy(this);
            return c;
        },
        __class__: com_davidmaletz_tiles_TileIndex
    };
    var com_davidmaletz_tiles_render_FrameRenderer = function(tile, frame) {
        this.tile = tile;
        this.frame = frame;
    };
    $hxClasses["com.davidmaletz.tiles.render.FrameRenderer"] = com_davidmaletz_tiles_render_FrameRenderer;
    com_davidmaletz_tiles_render_FrameRenderer.__name__ = ["com", "davidmaletz", "tiles", "render", "FrameRenderer"];
    com_davidmaletz_tiles_render_FrameRenderer.prototype = {
        render: function(neighbors, layer, x, y, offX, offY) {
            if (this.frame.visible) this.tile.render(neighbors, layer, x + this.frame.offsetX, y + this.frame.offsetY, this.frame.x, this.frame.y);
        },
        getTileWidth: function(offX, offY) {
            return this.tile.getTileWidth(this.frame.x, this.frame.y);
        },
        getTileHeight: function(offX, offY) {
            return this.tile.getTileHeight(this.frame.x, this.frame.y);
        },
        __class__: com_davidmaletz_tiles_render_FrameRenderer
    };
    var com_davidmaletz_videapi_Line = function(_x1, _y1, _x2, _y2, l) {
        this.x1 = _x1;
        this.y1 = _y1;
        this.x2 = _x2;
        this.y2 = _y2;
        this.length = l;
    };
    $hxClasses["com.davidmaletz.videapi.Line"] = com_davidmaletz_videapi_Line;
    com_davidmaletz_videapi_Line.__name__ = ["com", "davidmaletz", "videapi", "Line"];
    com_davidmaletz_videapi_Line._distanceSq = function(x1, y1, x2, y2) {
        var dx = x1 - x2;
        var dy = y1 - y2;
        return dx * dx + dy * dy;
    };
    com_davidmaletz_videapi_Line.prototype = {
        distanceSq: function(x, y) {
            var l = com_davidmaletz_videapi_Line._distanceSq(this.x1, this.y1, this.x2, this.y2);
            if (l == 0) return com_davidmaletz_videapi_Line._distanceSq(x, y, this.x1, this.y1);
            var t = ((x - this.x1) * (this.x2 - this.x1) + (y - this.y1) * (this.y2 - this.y1)) / l;
            if (t < 0) return com_davidmaletz_videapi_Line._distanceSq(x, y, this.x1, this.y1);
            if (t > 1) return com_davidmaletz_videapi_Line._distanceSq(x, y, this.x2, this.y2);
            return com_davidmaletz_videapi_Line._distanceSq(x, y, this.x1 + t * (this.x2 - this.x1), this.y1 + t * (this.y2 - this.y1));
        },
        distance: function(x, y) {
            return Math.sqrt(this.distanceSq(x, y));
        },
        getClosestT: function(x, y) {
            var l = com_davidmaletz_videapi_Line._distanceSq(this.x1, this.y1, this.x2, this.y2);
            if (l == 0) return 0;
            var t = ((x - this.x1) * (this.x2 - this.x1) + (y - this.y1) * (this.y2 - this.y1)) / l;
            if (t < 0) return 0;
            if (t > 1) return 1;
            return t;
        },
        __class__: com_davidmaletz_videapi_Line
    };
    var com_fancyfish_faeng_common_Bounds2D_$Float = function(x, y, w, h) {
        if (h == null) h = 0;
        if (w == null) w = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.min_x = x;
        this.min_y = y;
        this.max_x = x + w;
        this.max_y = y + h;
    };
    $hxClasses["com.fancyfish.faeng.common.Bounds2D_Float"] = com_fancyfish_faeng_common_Bounds2D_$Float;
    com_fancyfish_faeng_common_Bounds2D_$Float.__name__ = ["com", "fancyfish", "faeng", "common", "Bounds2D_Float"];
    com_fancyfish_faeng_common_Bounds2D_$Float.prototype = {
        set: function(x, y, w, h) {
            if (h == null) h = 0;
            if (w == null) w = 0;
            if (y == null) y = 0;
            if (x == null) x = 0;
            this.min_x = x;
            this.min_y = y;
            this.max_x = x + w;
            this.max_y = y + h;
        },
        copy: function(b) {
            this.min_x = b.min_x;
            this.min_y = b.min_y;
            this.max_x = b.max_x;
            this.max_y = b.max_y;
        },
        clone: function() {
            return new com_fancyfish_faeng_common_Bounds2D_$Float(this.min_x, this.min_y, this.max_x - this.min_x, this.max_y - this.min_y);
        },
        reset: function() {
            this.min_x = 100000;
            this.min_y = this.min_x;
            this.max_x = -this.min_x;
            this.max_y = this.max_x;
        },
        add: function(x, y, w, h) {
            if (x < this.min_x) this.min_x = x;
            if (y < this.min_y) this.min_y = y;
            x += w;
            if (x > this.max_x) this.max_x = x;
            y += h;
            if (y > this.max_y) this.max_y = y;
        },
        scaleBy: function(s) {
            this.min_x *= s;
            this.min_y *= s;
            this.max_x *= s;
            this.max_y *= s;
        },
        getWidth: function() {
            return this.max_x - this.min_x;
        },
        getHeight: function() {
            return this.max_y - this.min_y;
        },
        getArea: function() {
            return (this.max_x - this.min_x) * (this.max_y - this.min_y);
        },
        move: function(x, y) {
            this.min_x += x;
            this.max_x += x;
            this.min_y += y;
            this.max_y += y;
        },
        isEmpty: function(delta) {
            if (delta == null) delta = 0;
            return this.max_x - this.min_x <= delta || this.max_y - this.min_y <= delta;
        },
        contains: function(x, y) {
            return x >= this.min_x && x < this.max_x && y >= this.min_y && y < this.max_y;
        },
        boundX: function(x) {
            if (x < this.min_x) x = this.min_x;
            if (x >= this.max_x) x = this.max_x - 1;
            return x;
        },
        boundY: function(y) {
            if (y < this.min_y) y = this.min_y;
            if (y >= this.max_y) y = this.max_y - 1;
            return y;
        },
        getIdx: function(x, y) {
            return (y - this.min_y) * (this.max_x - this.min_x) + (x - this.min_x);
        },
        intersectBounds: function(out, b) {
            this.intersection(out, b.min_x, b.min_y, b.max_x - b.min_x, b.max_y - b.min_y);
        },
        intersection: function(out, x, y, w, h) {
            var tx1 = this.min_x;
            var ty1 = this.min_y;
            var rx1 = x;
            var ry1 = y;
            var tx2 = this.max_x;
            var ty2 = this.max_y;
            var rx2 = rx1 + w;
            var ry2 = ry1 + h;
            if (tx1 < rx1) tx1 = rx1;
            if (ty1 < ry1) ty1 = ry1;
            if (tx2 > rx2) tx2 = rx2;
            if (ty2 > ry2) ty2 = ry2;
            out.min_x = tx1;
            out.min_y = ty1;
            out.max_x = tx2;
            out.max_y = ty2;
        },
        intersects: function(b) {
            return b.max_x >= this.min_x && b.min_x <= this.max_x && b.max_y >= this.min_y && b.min_y <= this.max_y;
        },
        toString: function() {
            return "[" + Std.string(this.min_x) + "," + Std.string(this.min_y) + "]-[" + Std.string(this.max_x) + "," + Std.string(this.max_y) + "]";
        },
        equalsBounds: function(b) {
            return this.min_x == b.min_x && this.min_y == b.min_y && this.max_x == b.max_x && this.max_y == b.max_y;
        },
        __class__: com_fancyfish_faeng_common_Bounds2D_$Float
    };
    var com_fancyfish_faeng_common_Bounds2D_$Int = function(x, y, w, h) {
        if (h == null) h = 0;
        if (w == null) w = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.min_x = x;
        this.min_y = y;
        this.max_x = x + w;
        this.max_y = y + h;
    };
    $hxClasses["com.fancyfish.faeng.common.Bounds2D_Int"] = com_fancyfish_faeng_common_Bounds2D_$Int;
    com_fancyfish_faeng_common_Bounds2D_$Int.__name__ = ["com", "fancyfish", "faeng", "common", "Bounds2D_Int"];
    com_fancyfish_faeng_common_Bounds2D_$Int.prototype = {
        set: function(x, y, w, h) {
            if (h == null) h = 0;
            if (w == null) w = 0;
            if (y == null) y = 0;
            if (x == null) x = 0;
            this.min_x = x;
            this.min_y = y;
            this.max_x = x + w;
            this.max_y = y + h;
        },
        copy: function(b) {
            this.min_x = b.min_x;
            this.min_y = b.min_y;
            this.max_x = b.max_x;
            this.max_y = b.max_y;
        },
        clone: function() {
            return new com_fancyfish_faeng_common_Bounds2D_$Int(this.min_x, this.min_y, this.max_x - this.min_x, this.max_y - this.min_y);
        },
        reset: function() {
            this.min_x = 100000;
            this.min_y = this.min_x;
            this.max_x = -this.min_x;
            this.max_y = this.max_x;
        },
        add: function(x, y, w, h) {
            if (x < this.min_x) this.min_x = x;
            if (y < this.min_y) this.min_y = y;
            x += w;
            if (x > this.max_x) this.max_x = x;
            y += h;
            if (y > this.max_y) this.max_y = y;
        },
        scaleBy: function(s) {
            this.min_x *= s;
            this.min_y *= s;
            this.max_x *= s;
            this.max_y *= s;
        },
        getWidth: function() {
            return this.max_x - this.min_x;
        },
        getHeight: function() {
            return this.max_y - this.min_y;
        },
        getArea: function() {
            return (this.max_x - this.min_x) * (this.max_y - this.min_y);
        },
        move: function(x, y) {
            this.min_x += x;
            this.max_x += x;
            this.min_y += y;
            this.max_y += y;
        },
        isEmpty: function(delta) {
            if (delta == null) delta = 0;
            return this.max_x - this.min_x <= delta || this.max_y - this.min_y <= delta;
        },
        contains: function(x, y) {
            return x >= this.min_x && x < this.max_x && y >= this.min_y && y < this.max_y;
        },
        boundX: function(x) {
            if (x < this.min_x) x = this.min_x;
            if (x >= this.max_x) x = this.max_x - 1;
            return x;
        },
        boundY: function(y) {
            if (y < this.min_y) y = this.min_y;
            if (y >= this.max_y) y = this.max_y - 1;
            return y;
        },
        getIdx: function(x, y) {
            return (y - this.min_y) * (this.max_x - this.min_x) + (x - this.min_x);
        },
        intersectBounds: function(out, b) {
            this.intersection(out, b.min_x, b.min_y, b.max_x - b.min_x, b.max_y - b.min_y);
        },
        intersection: function(out, x, y, w, h) {
            var tx1 = this.min_x;
            var ty1 = this.min_y;
            var rx1 = x;
            var ry1 = y;
            var tx2 = this.max_x;
            var ty2 = this.max_y;
            var rx2 = rx1 + w;
            var ry2 = ry1 + h;
            if (tx1 < rx1) tx1 = rx1;
            if (ty1 < ry1) ty1 = ry1;
            if (tx2 > rx2) tx2 = rx2;
            if (ty2 > ry2) ty2 = ry2;
            out.min_x = tx1;
            out.min_y = ty1;
            out.max_x = tx2;
            out.max_y = ty2;
        },
        intersects: function(b) {
            return b.max_x >= this.min_x && b.min_x <= this.max_x && b.max_y >= this.min_y && b.min_y <= this.max_y;
        },
        toString: function() {
            return "[" + Std.string(this.min_x) + "," + Std.string(this.min_y) + "]-[" + Std.string(this.max_x) + "," + Std.string(this.max_y) + "]";
        },
        equalsBounds: function(b) {
            return this.min_x == b.min_x && this.min_y == b.min_y && this.max_x == b.max_x && this.max_y == b.max_y;
        },
        __class__: com_fancyfish_faeng_common_Bounds2D_$Int
    };
    var com_fancyfish_faeng_common_CompoundIterator = function(i) {
        this.iterators = i;
        this.current = this.getNext();
    };
    $hxClasses["com.fancyfish.faeng.common.CompoundIterator"] = com_fancyfish_faeng_common_CompoundIterator;
    com_fancyfish_faeng_common_CompoundIterator.__name__ = ["com", "fancyfish", "faeng", "common", "CompoundIterator"];
    com_fancyfish_faeng_common_CompoundIterator.make = function(i) {
        return new com_fancyfish_faeng_common_CompoundIterator($iterator(i)());
    };
    com_fancyfish_faeng_common_CompoundIterator.prototype = {
        hasNext: function() {
            return this.current != null;
        },
        next: function() {
            var ret = this.current;
            this.current = this.getNext();
            return ret;
        },
        getNext: function() {
            if (this.iterator != null && this.iterator.hasNext()) return this.iterator.next();
            while (this.iterators.hasNext()) {
                this.iterator = this.iterators.next();
                if (this.iterator != null && this.iterator.hasNext()) return this.iterator.next();
            }
            return null;
        },
        __class__: com_fancyfish_faeng_common_CompoundIterator
    };
    var com_fancyfish_faeng_common_CompoundIterator2 = function(i) {
        this.iterators = i;
        this.current = this.getNext();
    };
    $hxClasses["com.fancyfish.faeng.common.CompoundIterator2"] = com_fancyfish_faeng_common_CompoundIterator2;
    com_fancyfish_faeng_common_CompoundIterator2.__name__ = ["com", "fancyfish", "faeng", "common", "CompoundIterator2"];
    com_fancyfish_faeng_common_CompoundIterator2.make = function(i) {
        return new com_fancyfish_faeng_common_CompoundIterator2($iterator(i)());
    };
    com_fancyfish_faeng_common_CompoundIterator2.prototype = {
        hasNext: function() {
            return this.current != null;
        },
        next: function() {
            var ret = this.current;
            this.current = this.getNext();
            return ret;
        },
        getNext: function() {
            if (this.iterator != null && this.iterator.hasNext()) return this.iterator.next();
            while (this.iterators.hasNext()) {
                this.iterator = $iterator(this.iterators.next())();
                if (this.iterator != null && this.iterator.hasNext()) return this.iterator.next();
            }
            return null;
        },
        __class__: com_fancyfish_faeng_common_CompoundIterator2
    };
    var com_fancyfish_faeng_common_Dequeue = function() {
        this.array = this.createArray(8);
        this.head = 0;
        this.tail = 0;
    };
    $hxClasses["com.fancyfish.faeng.common.Dequeue"] = com_fancyfish_faeng_common_Dequeue;
    com_fancyfish_faeng_common_Dequeue.__name__ = ["com", "fancyfish", "faeng", "common", "Dequeue"];
    com_fancyfish_faeng_common_Dequeue.prototype = {
        addFirst: function(v) {
            this.head = this.head - 1 & this.array.length - 1;
            this.array[this.head] = v;
            if (this.head == this.tail) this.doubleCapacity();
        },
        addLast: function(v) {
            this.array[this.tail] = v;
            this.tail = this.tail + 1 & this.array.length - 1;
            if (this.head == this.tail) this.doubleCapacity();
        },
        clear: function() {
            this.head = 0;
            this.tail = 0;
        },
        isEmpty: function() {
            return this.head == this.tail;
        },
        size: function() {
            return this.tail - this.head & this.array.length - 1;
        },
        getFirst: function() {
            return this.array[this.head];
        },
        getLast: function() {
            return this.array[this.tail - 1 & this.array.length - 1];
        },
        set: function(i, v) {
            this.array[this.head + i & this.array.length - 1] = v;
        },
        get: function(i) {
            return this.array[this.head + i & this.array.length - 1];
        },
        removeFirst: function() {
            var NULL = null;
            if (this.head == this.tail) return NULL;
            else {
                var ret = this.array[this.head];
                this.array[this.head] = NULL;
                this.head = this.head + 1 & this.array.length - 1;
                return ret;
            }
        },
        remove: function(v) {
            var sz = this.tail - this.head & this.array.length - 1;
            var idx = -1;
            var _g = 0;
            while (_g < sz) {
                var i = _g++;
                if (idx != -1) this.array[this.head + (i - 1) & this.array.length - 1] = this.array[this.head + i & this.array.length - 1];
                else if (this.array[this.head + i & this.array.length - 1] == v) idx = i;
            }
            if (idx != -1) this.removeLast();
        },
        removeLast: function() {
            var NULL = null;
            if (this.head == this.tail) return NULL;
            else {
                this.tail = this.tail - 1 & this.array.length - 1;
                var ret = this.array[this.tail];
                this.array[this.tail] = NULL;
                return ret;
            }
        },
        doubleCapacity: function() {
            var new_array = this.createArray(this.array.length << 1);
            var n = this.array.length - this.head;
            var i = 0;
            while (i < n) {
                new_array[i] = this.array[this.head + i];
                i++;
            }
            i = 0;
            while (i < this.head) {
                new_array[n + i] = this.array[i];
                i++;
            }
            this.head = 0;
            this.tail = this.array.length;
            this.array = new_array;
        },
        createArray: function(len) {
            var NULL = null;
            var ret = [];
            var i = 0;
            while (i < len) {
                ret.push(NULL);
                i++;
            }
            return ret;
        },
        iterator: function() {
            return new com_fancyfish_faeng_common__$Dequeue_DequeueIterator(this);
        },
        __class__: com_fancyfish_faeng_common_Dequeue
    };
    var com_fancyfish_faeng_common__$Dequeue_DequeueIterator = function(q) {
        this.queue = q;
        this.i = 0;
    };
    $hxClasses["com.fancyfish.faeng.common._Dequeue.DequeueIterator"] = com_fancyfish_faeng_common__$Dequeue_DequeueIterator;
    com_fancyfish_faeng_common__$Dequeue_DequeueIterator.__name__ = ["com", "fancyfish", "faeng", "common", "_Dequeue", "DequeueIterator"];
    com_fancyfish_faeng_common__$Dequeue_DequeueIterator.prototype = {
        hasNext: function() {
            return this.i < this.queue.size();
        },
        next: function() {
            return this.queue.get(this.i++);
        },
        __class__: com_fancyfish_faeng_common__$Dequeue_DequeueIterator
    };
    var com_fancyfish_faeng_common_HashMap = function() {
        this.map = new haxe_ds_IntMap();
    };
    $hxClasses["com.fancyfish.faeng.common.HashMap"] = com_fancyfish_faeng_common_HashMap;
    com_fancyfish_faeng_common_HashMap.__name__ = ["com", "fancyfish", "faeng", "common", "HashMap"];
    com_fancyfish_faeng_common_HashMap.prototype = {
        set: function(key, value) {
            var hash = key.hashCode();
            var v = this.map.h[hash];
            if (v == null) {
                v = new com_fancyfish_faeng_common_Values();
                this.map.h[hash] = v;
            }
            v.set(key, value);
            return;
        },
        get: function(key) {
            var v;
            var key1 = key.hashCode();
            v = this.map.h[key1];
            if (v == null) return null;
            else return v.get(key);
        },
        remove: function(key) {
            var hash = key.hashCode();
            var v = this.map.h[hash];
            if (v != null && v.remove(key)) this.map.remove(hash);
        },
        getKey: function(value) {
            var $it0 = this.map.iterator();
            while ($it0.hasNext()) {
                var v = $it0.next();
                var k = v.getKey(value);
                if (k != null) return k;
            }
            return null;
        },
        clone: function() {
            var ret = new com_fancyfish_faeng_common_HashMap();
            var $it0 = this.map.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                var value = this.map.h[k].clone();
                ret.map.h[k] = value;
            }
            return ret;
        },
        iterator: function() {
            return new com_fancyfish_faeng_common_MapIterator(this.map.iterator());
        },
        __class__: com_fancyfish_faeng_common_HashMap
    };
    var com_fancyfish_faeng_common_Entry = function(k, v) {
        this.key = k;
        this.value = v;
    };
    $hxClasses["com.fancyfish.faeng.common.Entry"] = com_fancyfish_faeng_common_Entry;
    com_fancyfish_faeng_common_Entry.__name__ = ["com", "fancyfish", "faeng", "common", "Entry"];
    com_fancyfish_faeng_common_Entry.prototype = {
        __class__: com_fancyfish_faeng_common_Entry
    };
    var com_fancyfish_faeng_common_MapIterator = function(i) {
        this.iterator = i;
    };
    $hxClasses["com.fancyfish.faeng.common.MapIterator"] = com_fancyfish_faeng_common_MapIterator;
    com_fancyfish_faeng_common_MapIterator.__name__ = ["com", "fancyfish", "faeng", "common", "MapIterator"];
    com_fancyfish_faeng_common_MapIterator.prototype = {
        hasNext: function() {
            return this.iterator.hasNext() || this.values != null && this.cur < this.values.keys.length - 1;
        },
        next: function() {
            if (this.values == null || this.cur >= this.values.keys.length) {
                this.values = this.iterator.next();
                this.cur = 0;
            }
            var e = new com_fancyfish_faeng_common_Entry(this.values.keys[this.cur], this.values.values[this.cur]);
            this.cur++;
            return e;
        },
        __class__: com_fancyfish_faeng_common_MapIterator
    };
    var com_fancyfish_faeng_common_Values = function() {
        this.keys = [];
        this.values = [];
    };
    $hxClasses["com.fancyfish.faeng.common.Values"] = com_fancyfish_faeng_common_Values;
    com_fancyfish_faeng_common_Values.__name__ = ["com", "fancyfish", "faeng", "common", "Values"];
    com_fancyfish_faeng_common_Values.prototype = {
        set: function(key, value) {
            var len = this.keys.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (key.equals(this.keys[i])) {
                    this.values[i] = value;
                    return;
                }
            }
            this.keys.push(key);
            this.values.push(value);
        },
        get: function(key) {
            var len = this.keys.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (key.equals(this.keys[i])) return this.values[i];
            }
            return null;
        },
        remove: function(key) {
            var len = this.keys.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (key.equals(this.keys[i])) {
                    this.keys.splice(i, 1);
                    this.values.splice(i, 1);
                    return this.keys.length == 0;
                }
            }
            return false;
        },
        getKey: function(value) {
            var len = this.keys.length;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                if (value == this.values[i]) return this.keys[i];
            }
            return null;
        },
        clone: function() {
            var ret = new com_fancyfish_faeng_common_Values();
            ret.keys = this.keys.slice();
            ret.values = this.values.slice();
            return ret;
        },
        __class__: com_fancyfish_faeng_common_Values
    };
    var com_fancyfish_faeng_common_Heap = function(_lessThan) {
        this.array = [];
        this.lessThan = _lessThan;
    };
    $hxClasses["com.fancyfish.faeng.common.Heap"] = com_fancyfish_faeng_common_Heap;
    com_fancyfish_faeng_common_Heap.__name__ = ["com", "fancyfish", "faeng", "common", "Heap"];
    com_fancyfish_faeng_common_Heap.prototype = {
        head: function() {
            return this.array[0];
        },
        insert: function(val) {
            var idx = this.array.length;
            this.array.push(val);
            while (idx > 0) {
                var parent = idx - 1 >> 1;
                if (this.lessThan(val, this.array[parent])) {
                    this.array[idx] = this.array[parent];
                    idx = parent;
                } else break;
            }
            this.array[idx] = val;
        },
        remove: function() {
            if (this.array.length == 0) return null;
            var ret = this.array[0];
            if (this.array.length > 1) {
                var low = this.array[this.array.length - 1];
                this.array.pop();
                var idx = 0;
                var child = 1;
                while (child < this.array.length) {
                    if (child < this.array.length - 1 && this.lessThan(this.array[child + 1], this.array[child])) child++;
                    if (this.lessThan(this.array[child], low)) {
                        this.array[idx] = this.array[child];
                        idx = child;
                        child = (idx << 1) + 1;
                    } else break;
                }
                this.array[idx] = low;
            } else this.array.pop();
            return ret;
        },
        isEmpty: function() {
            return this.array.length == 0;
        },
        size: function() {
            return this.array.length;
        },
        getUnordered: function(i) {
            return this.array[i];
        },
        iterator: function() {
            return HxOverrides.iter(this.array);
        },
        __class__: com_fancyfish_faeng_common_Heap
    };
    var com_fancyfish_faeng_common_Keyboard = function(xml) {
        this.keys = new haxe_ds_StringMap();
        var $it0 = xml.elementsNamed("key");
        while ($it0.hasNext()) {
            var s = $it0.next();
            if (s.exists("name")) {
                var key = s.get("name");
                var value = com_fancyfish_faeng_common_Key.load(s);
                this.keys.set(key, value);
            }
        }
    };
    $hxClasses["com.fancyfish.faeng.common.Keyboard"] = com_fancyfish_faeng_common_Keyboard;
    com_fancyfish_faeng_common_Keyboard.__name__ = ["com", "fancyfish", "faeng", "common", "Keyboard"];
    com_fancyfish_faeng_common_Keyboard.prototype = {
        getKey: function(name) {
            var ret = this.keys.get(name);
            if (ret == null) {
                ret = new com_fancyfish_faeng_common_Key(0, "?" + name);
                this.keys.set(name, ret);
            }
            return ret;
        },
        __class__: com_fancyfish_faeng_common_Keyboard
    };
    var com_fancyfish_faeng_common_Key = function(t, txt, icn) {
        this.type = t;
        this.text = txt;
        this.icon = icn;
    };
    $hxClasses["com.fancyfish.faeng.common.Key"] = com_fancyfish_faeng_common_Key;
    com_fancyfish_faeng_common_Key.__name__ = ["com", "fancyfish", "faeng", "common", "Key"];
    com_fancyfish_faeng_common_Key.load = function(xml) {
        var type = 0;
        var t = xml.get("type");
        if (t == "medium") type = 1;
        else if (t == "large") type = 2;
        var iter;
        if (xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
        iter = HxOverrides.iter(xml.children);
        var text;
        if (iter.hasNext()) text = com_fancyfish_faeng_common_Lang.escape(iter.next().get_nodeValue());
        else text = "";
        return new com_fancyfish_faeng_common_Key(type, text, xml.get("icon"));
    };
    com_fancyfish_faeng_common_Key.prototype = {
        __class__: com_fancyfish_faeng_common_Key
    };
    var com_fancyfish_faeng_common_Lang = function(id, folder) {
        this.name = id;
        this.sections = new haxe_ds_StringMap();
        this.initXML(Xml.parse(openfl_Assets.getText(folder + id + ".xml")).firstElement(), folder);
    };
    $hxClasses["com.fancyfish.faeng.common.Lang"] = com_fancyfish_faeng_common_Lang;
    com_fancyfish_faeng_common_Lang.__name__ = ["com", "fancyfish", "faeng", "common", "Lang"];
    com_fancyfish_faeng_common_Lang.languages = null;
    com_fancyfish_faeng_common_Lang.language_names = null;
    com_fancyfish_faeng_common_Lang.default_lang = null;
    com_fancyfish_faeng_common_Lang.defaultFont = null;
    com_fancyfish_faeng_common_Lang.init = function(lang, languages) {
        com_fancyfish_faeng_common_Lang.defaultFont = com_fancyfish_faeng_text_FontManager.defaultFont.get();
        com_fancyfish_faeng_common_Lang.default_lang = com_fancyfish_faeng_common_Lang.setLanguages(languages);
        if (lang != null && com_fancyfish_faeng_common_Lang.language_names.exists(lang)) com_fancyfish_faeng_common_Lang.default_lang = lang;
    };
    com_fancyfish_faeng_common_Lang.setLanguages = function(languages) {
        com_fancyfish_faeng_common_Lang.languages = [];
        com_fancyfish_faeng_common_Lang.language_names = new haxe_ds_StringMap();
        var default_lang = null;
        var $it0 = languages.elementsNamed("lang");
        while ($it0.hasNext()) {
            var l = $it0.next();
            var id = l.get("id");
            if (com_fancyfish_faeng_common_Lang.language_names.exists(id)) continue;
            if (default_lang == null || l.get("default") == "true") default_lang = id;
            com_fancyfish_faeng_common_Lang.languages.push(id);
            var value = l.get("name");
            com_fancyfish_faeng_common_Lang.language_names.set(id, value);
        }
        return default_lang;
    };
    com_fancyfish_faeng_common_Lang.getLanguageIdx = function() {
        return HxOverrides.indexOf(com_fancyfish_faeng_common_Lang.languages, com_fancyfish_faeng_common_Lang.lang.name, 0);
    };
    com_fancyfish_faeng_common_Lang.getLanguageName = function(code) {
        return com_fancyfish_faeng_common_Lang.language_names.get(code);
    };
    com_fancyfish_faeng_common_Lang.fontCache = null;
    com_fancyfish_faeng_common_Lang.getFontCached = function(id, premultiply) {
        if (com_fancyfish_faeng_common_Lang.fontCache == null) com_fancyfish_faeng_common_Lang.fontCache = new haxe_ds_StringMap();
        var ret = com_fancyfish_faeng_common_Lang.fontCache.get(id);
        if (ret == null) {
            ret = new com_fancyfish_faeng_text_Font(Xml.parse(openfl_Assets.getText(id)).firstChild(), id);
            com_fancyfish_faeng_common_Lang.fontCache.set(id, ret);
        }
        return ret;
    };
    com_fancyfish_faeng_common_Lang.getFont = function(folder, id) {
        var xml = Xml.parse(openfl_Assets.getText(folder + id + ".xml")).firstElement();
        if (xml.exists("font")) return com_fancyfish_faeng_common_Lang.getFontCached(xml.get("font"), false);
        else return com_fancyfish_faeng_common_Lang.defaultFont;
    };
    com_fancyfish_faeng_common_Lang.lang = null;
    com_fancyfish_faeng_common_Lang.setLanguage = function(id, folder, folders, cls) {
        if (com_fancyfish_faeng_common_Lang.lang != null && com_fancyfish_faeng_common_Lang.lang.name == id) return false;
        com_fancyfish_faeng_common_Lang.loadLanguage(id, folder, folders, cls);
        return true;
    };
    com_fancyfish_faeng_common_Lang.loadLanguage = function(id, folder, folders, cls) {
        com_fancyfish_faeng_common_Lang.lang = null;
        if (folders == null) folders = com_fancyfish_faeng_common_Lang.DEFAULT_FOLDERS;
        var _g = 0;
        while (_g < folders.length) {
            var dir = folders[_g]; ++_g;
            var f = dir + folder;
            if (!openfl_Assets.exists(f + id + ".xml")) continue;
            if (com_fancyfish_faeng_common_Lang.lang == null) {
                if (cls == null) com_fancyfish_faeng_common_Lang.lang = new com_fancyfish_faeng_common_Lang(id, f);
                else com_fancyfish_faeng_common_Lang.lang = Type.createInstance(cls, [id, f]);
            } else com_fancyfish_faeng_common_Lang.lang.addXML(Xml.parse(openfl_Assets.getText(f + id + ".xml")).firstElement(), f);
        }
        com_fancyfish_faeng_text_FontManager.defaultFont.set(com_fancyfish_faeng_common_Lang.lang.font);
        com_fancyfish_faeng_common_Lang.dispatcher.dispatchEvent(new openfl_events_Event("lang_changed"));
        var $it0 = com_fancyfish_faeng_common_Lang.text_cache.iterator();
        while ($it0.hasNext()) {
            var text = $it0.next();
            text.update();
        }
        var $it1 = com_fancyfish_faeng_common_Lang.message_cache.iterator();
        while ($it1.hasNext()) {
            var message = $it1.next();
            message.update();
        }
        var $it2 = com_fancyfish_faeng_common_Lang.template_cache.iterator();
        while ($it2.hasNext()) {
            var template = $it2.next();
            template.update();
        }
        var $it3 = com_fancyfish_faeng_common_Lang.key_cache.iterator();
        while ($it3.hasNext()) {
            var key = $it3.next();
            key.update();
        }
    };
    com_fancyfish_faeng_common_Lang.reloadLanguage = function(folder, folders, cls) {
        if (com_fancyfish_faeng_common_Lang.lang != null) com_fancyfish_faeng_common_Lang.loadLanguage(com_fancyfish_faeng_common_Lang.lang.name, folder, folders, cls);
    };
    com_fancyfish_faeng_common_Lang.getText = function(section, id) {
        var name = section + "." + id;
        var ret = com_fancyfish_faeng_common_Lang.text_cache.get(name);
        if (ret == null) {
            ret = new com_fancyfish_faeng_common_MutableString(section, id);
            com_fancyfish_faeng_common_Lang.text_cache.set(name, ret);
        }
        return ret;
    };
    com_fancyfish_faeng_common_Lang.getMessage = function(section, id) {
        var name = section + "." + id;
        var ret = com_fancyfish_faeng_common_Lang.message_cache.get(name);
        if (ret == null) {
            ret = new com_fancyfish_faeng_common_MutableMessage(section, id);
            com_fancyfish_faeng_common_Lang.message_cache.set(name, ret);
        }
        return ret;
    };
    com_fancyfish_faeng_common_Lang.getTemplate = function(section, id) {
        var name = section + "." + id;
        var ret = com_fancyfish_faeng_common_Lang.template_cache.get(name);
        if (ret == null) {
            ret = new com_fancyfish_faeng_common_MutableXml(section, id);
            com_fancyfish_faeng_common_Lang.template_cache.set(name, ret);
        }
        return ret;
    };
    com_fancyfish_faeng_common_Lang.getKeyByName = function(name) {
        var ret = com_fancyfish_faeng_common_Lang.key_cache.get(name);
        if (ret == null) {
            ret = new com_fancyfish_faeng_common_MutableKey(name);
            com_fancyfish_faeng_common_Lang.key_cache.set(name, ret);
        }
        return ret;
    };
    com_fancyfish_faeng_common_Lang.escape = function(s) {
        return StringTools.trim(StringTools.replace(StringTools.replace(StringTools.replace(StringTools.replace(s, "&amp;", "&"), "&lt;", "<"), "&gt;", ">"), "\\n", "\n"));
    };
    com_fancyfish_faeng_common_Lang.prototype = {
        setFont: function() {
            com_fancyfish_faeng_text_FontManager.defaultFont.set(this.font);
        },
        initXML: function(xml, folder) {
            if (xml.exists("keyboard")) this.keyboard = new com_fancyfish_faeng_common_Keyboard(Xml.parse(openfl_Assets.getText(folder + "keyboards/" + xml.get("keyboard") + ".xml")).firstElement());
            if (xml.exists("font")) this.font = com_fancyfish_faeng_common_Lang.getFontCached(xml.get("font"), false);
            else this.font = com_fancyfish_faeng_common_Lang.defaultFont;
            this.addXML(xml, folder);
        },
        addXML: function(xml, folder) {
            var $it0 = xml.elements();
            while ($it0.hasNext()) {
                var e = $it0.next();
                if ((function($this) {
                    var $r;
                    if (e.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e.nodeType);
                    $r = e.nodeName;
                    return $r;
                } (this)) == "section") {
                    if (e.exists("id")) {
                        var id = e.get("id");
                        var s = this.sections.get(id);
                        if (s == null) {
                            s = new com_fancyfish_faeng_common_Section();
                            this.sections.set(id, s);
                        }
                        s.load(e, this);
                    }
                } else if ((function($this) {
                    var $r;
                    if (e.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + e.nodeType);
                    $r = e.nodeName;
                    return $r;
                } (this)) == "include" && e.exists("lang") && openfl_Assets.exists(folder + e.get("lang") + ".xml")) {
                    var lang = folder + e.get("lang");
                    var i = lang.lastIndexOf("/");
                    this.addXML(Xml.parse(openfl_Assets.getText(lang + ".xml")).firstElement(), i == -1 ? folder: lang.substring(0, i + 1));
                }
            }
        },
        hasText: function(section, id) {
            var s = this.sections.get(section);
            return s != null && s.text != null && s.text.get(id) != null;
        },
        text: function(section, id) {
            var s = this.sections.get(section);
            if (s == null || s.text == null) return "";
            else {
                var t = s.text.get(id);
                if (t == null) return "";
                else return t;
            }
        },
        message: function(section, id) {
            var s = this.sections.get(section);
            if (s == null || s.messages == null) return com_fancyfish_faeng_common_Message.blank();
            else {
                var m = s.messages.get(id);
                if (m == null) return com_fancyfish_faeng_common_Message.blank();
                else return m;
            }
        },
        template: function(section, id) {
            var s = this.sections.get(section);
            if (s == null || s.templates == null) return null;
            else return s.templates.get(id);
        },
        parse: function(str) {
            return com_fancyfish_faeng_common_Lang.escape(str);
        },
        __class__: com_fancyfish_faeng_common_Lang
    };
    var com_fancyfish_faeng_common_Section = function() {};
    $hxClasses["com.fancyfish.faeng.common.Section"] = com_fancyfish_faeng_common_Section;
    com_fancyfish_faeng_common_Section.__name__ = ["com", "fancyfish", "faeng", "common", "Section"];
    com_fancyfish_faeng_common_Section.prototype = {
        load: function(xml, lang) {
            var $it0 = xml.elementsNamed("text");
            while ($it0.hasNext()) {
                var t = $it0.next();
                if (t.exists("id")) {
                    if (this.text == null) this.text = new haxe_ds_StringMap();
                    var key = t.get("id");
                    var value = lang.parse(((function($this) {
                        var $r;
                        if (t.nodeType != Xml.Document && t.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + t.nodeType);
                        $r = t.children[0];
                        return $r;
                    } (this))).get_nodeValue());
                    this.text.set(key, value);
                }
            }
            var $it1 = xml.elementsNamed("message");
            while ($it1.hasNext()) {
                var m = $it1.next();
                if (m.exists("id")) {
                    if (this.messages == null) this.messages = new haxe_ds_StringMap();
                    var key1 = m.get("id");
                    var value1 = com_fancyfish_faeng_common_Message.load(m, lang);
                    this.messages.set(key1, value1);
                }
            }
            var $it2 = xml.elementsNamed("template");
            while ($it2.hasNext()) {
                var t1 = $it2.next();
                if (t1.exists("id")) {
                    if (this.templates == null) this.templates = new haxe_ds_StringMap();
                    var key2 = t1.get("id");
                    this.templates.set(key2, t1);
                }
            }
        },
        __class__: com_fancyfish_faeng_common_Section
    };
    var com_fancyfish_faeng_common_Message = function() {};
    $hxClasses["com.fancyfish.faeng.common.Message"] = com_fancyfish_faeng_common_Message;
    com_fancyfish_faeng_common_Message.__name__ = ["com", "fancyfish", "faeng", "common", "Message"];
    com_fancyfish_faeng_common_Message.load = function(xml, lang) {
        var m = new com_fancyfish_faeng_common_Message();
        m._load(xml, lang);
        return m;
    };
    com_fancyfish_faeng_common_Message.blank = function() {
        var m = new com_fancyfish_faeng_common_Message();
        m.text = "";
        return m;
    };
    com_fancyfish_faeng_common_Message.prototype = {
        getText: function() {
            return this.text;
        },
        _load: function(xml, lang) {
            this.text = lang.parse(((function($this) {
                var $r;
                if (xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + xml.nodeType);
                $r = xml.children[0];
                return $r;
            } (this))).get_nodeValue());
            this.title = xml.get("title");
            this.voice = xml.get("voice");
        },
        __class__: com_fancyfish_faeng_common_Message
    };
    var com_fancyfish_faeng_common_mutable_Mutable = function() {
        openfl_events_EventDispatcher.call(this);
        this.value = null;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.Mutable"] = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_Mutable.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "Mutable"];
    com_fancyfish_faeng_common_mutable_Mutable.__super__ = openfl_events_EventDispatcher;
    com_fancyfish_faeng_common_mutable_Mutable.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        getValue: function() {
            return null;
        },
        get: function() {
            if (this.value == null) this.value = this.getValue();
            return this.value;
        },
        set: function(v) {
            if (this.value != v) {
                this.value = v;
                this.dispatchEvent(new openfl_events_Event("updated"));
            }
        },
        update: function() {
            this.value = null;
            this.dispatchEvent(new openfl_events_Event("updated"));
        },
        __class__: com_fancyfish_faeng_common_mutable_Mutable
    });
    var com_fancyfish_faeng_common_MutableString = function(section, id) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.section = section;
        this.id = id;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableString"] = com_fancyfish_faeng_common_MutableString;
    com_fancyfish_faeng_common_MutableString.__name__ = ["com", "fancyfish", "faeng", "common", "MutableString"];
    com_fancyfish_faeng_common_MutableString.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableString.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return com_fancyfish_faeng_common_Lang.lang.text(this.section, this.id);
        },
        __class__: com_fancyfish_faeng_common_MutableString
    });
    var com_fancyfish_faeng_common_MutableMessage = function(section, id) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.section = section;
        this.id = id;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableMessage"] = com_fancyfish_faeng_common_MutableMessage;
    com_fancyfish_faeng_common_MutableMessage.__name__ = ["com", "fancyfish", "faeng", "common", "MutableMessage"];
    com_fancyfish_faeng_common_MutableMessage.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableMessage.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return com_fancyfish_faeng_common_Lang.lang.message(this.section, this.id);
        },
        update: function() {
            com_fancyfish_faeng_common_mutable_Mutable.prototype.update.call(this);
            if (this.title != null) this.title.update();
            if (this.text != null) this.text.update();
            if (this.voice != null) this.voice.update();
        },
        getTitle: function() {
            if (this.title == null) this.title = new com_fancyfish_faeng_common_MutableTitle(this);
            return this.title;
        },
        getText: function() {
            if (this.text == null) this.text = new com_fancyfish_faeng_common_MutableText(this);
            return this.text;
        },
        getVoice: function() {
            if (this.voice == null) this.voice = new com_fancyfish_faeng_common_MutableVoice(this);
            return this.voice;
        },
        __class__: com_fancyfish_faeng_common_MutableMessage
    });
    var com_fancyfish_faeng_common_MutableXml = function(section, id) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.section = section;
        this.id = id;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableXml"] = com_fancyfish_faeng_common_MutableXml;
    com_fancyfish_faeng_common_MutableXml.__name__ = ["com", "fancyfish", "faeng", "common", "MutableXml"];
    com_fancyfish_faeng_common_MutableXml.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableXml.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return com_fancyfish_faeng_common_Lang.lang.template(this.section, this.id);
        },
        __class__: com_fancyfish_faeng_common_MutableXml
    });
    var com_fancyfish_faeng_common_MutableTitle = function(p) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.parent = p;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableTitle"] = com_fancyfish_faeng_common_MutableTitle;
    com_fancyfish_faeng_common_MutableTitle.__name__ = ["com", "fancyfish", "faeng", "common", "MutableTitle"];
    com_fancyfish_faeng_common_MutableTitle.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableTitle.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return this.parent.get().title;
        },
        __class__: com_fancyfish_faeng_common_MutableTitle
    });
    var com_fancyfish_faeng_common_MutableText = function(p) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.parent = p;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableText"] = com_fancyfish_faeng_common_MutableText;
    com_fancyfish_faeng_common_MutableText.__name__ = ["com", "fancyfish", "faeng", "common", "MutableText"];
    com_fancyfish_faeng_common_MutableText.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableText.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return this.parent.get().getText();
        },
        __class__: com_fancyfish_faeng_common_MutableText
    });
    var com_fancyfish_faeng_common_MutableVoice = function(p) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.parent = p;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableVoice"] = com_fancyfish_faeng_common_MutableVoice;
    com_fancyfish_faeng_common_MutableVoice.__name__ = ["com", "fancyfish", "faeng", "common", "MutableVoice"];
    com_fancyfish_faeng_common_MutableVoice.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableVoice.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return this.parent.get().voice;
        },
        __class__: com_fancyfish_faeng_common_MutableVoice
    });
    var com_fancyfish_faeng_common_MutableKey = function(name) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.name = name;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableKey"] = com_fancyfish_faeng_common_MutableKey;
    com_fancyfish_faeng_common_MutableKey.__name__ = ["com", "fancyfish", "faeng", "common", "MutableKey"];
    com_fancyfish_faeng_common_MutableKey.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableKey.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return com_fancyfish_faeng_common_Lang.lang.keyboard.getKey(this.name);
        },
        update: function() {
            com_fancyfish_faeng_common_mutable_Mutable.prototype.update.call(this);
            if (this.text != null) this.text.update();
        },
        getText: function() {
            if (this.text == null) this.text = new com_fancyfish_faeng_common_MutableKeyText(this);
            return this.text;
        },
        __class__: com_fancyfish_faeng_common_MutableKey
    });
    var com_fancyfish_faeng_common_MutableKeyText = function(p) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.parent = p;
    };
    $hxClasses["com.fancyfish.faeng.common.MutableKeyText"] = com_fancyfish_faeng_common_MutableKeyText;
    com_fancyfish_faeng_common_MutableKeyText.__name__ = ["com", "fancyfish", "faeng", "common", "MutableKeyText"];
    com_fancyfish_faeng_common_MutableKeyText.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_MutableKeyText.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return this.parent.get().text;
        },
        __class__: com_fancyfish_faeng_common_MutableKeyText
    });
    var com_fancyfish_faeng_common_Node = function(_x, _y, p, d) {
        if (d == null) d = 0;
        this.x = _x;
        this.y = _y;
        this.parent = p;
        if (p == null) this.depth = d;
        else this.depth = p.depth + 1;
    };
    $hxClasses["com.fancyfish.faeng.common.Node"] = com_fancyfish_faeng_common_Node;
    com_fancyfish_faeng_common_Node.__name__ = ["com", "fancyfish", "faeng", "common", "Node"];
    com_fancyfish_faeng_common_Node.lessThan = function(a, b) {
        return a.depth < b.depth;
    };
    com_fancyfish_faeng_common_Node.greaterThan = function(a, b) {
        return a.depth > b.depth;
    };
    com_fancyfish_faeng_common_Node.getDepth = function(n) {
        return n.depth;
    };
    com_fancyfish_faeng_common_Node.prototype = {
        __class__: com_fancyfish_faeng_common_Node
    };
    var com_fancyfish_faeng_common_Noise = function() {};
    $hxClasses["com.fancyfish.faeng.common.Noise"] = com_fancyfish_faeng_common_Noise;
    com_fancyfish_faeng_common_Noise.__name__ = ["com", "fancyfish", "faeng", "common", "Noise"];
    com_fancyfish_faeng_common_Noise.fade = function(t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
    };
    com_fancyfish_faeng_common_Noise.grad = function(hash, x, y, z) {
        var h = hash & 15;
        var u;
        if (h < 8) u = x;
        else u = y;
        var v;
        if (h < 4) v = y;
        else if (h == 12 || h == 14) v = x;
        else v = z;
        return ((h & 1) == 0 ? u: -u) + ((h & 2) == 0 ? v: -v);
    };
    com_fancyfish_faeng_common_Noise.noise = function(x, y, z) {
        var fx = Math.floor(x);
        var fy = Math.floor(y);
        var fz = Math.floor(z);
        var ix = fx & 255;
        var iy = fy & 255;
        var iz = fz & 255;
        x -= fx;
        y -= fy;
        z -= fz;
        var u = x * x * x * (x * (x * 6 - 15) + 10);
        var v = y * y * y * (y * (y * 6 - 15) + 10);
        var w = z * z * z * (z * (z * 6 - 15) + 10);
        var A = com_fancyfish_faeng_common_Noise.p_vals[ix] + iy;
        var AA = com_fancyfish_faeng_common_Noise.p_vals[A] + iz;
        var AB = com_fancyfish_faeng_common_Noise.p_vals[A + 1] + iz;
        var B = com_fancyfish_faeng_common_Noise.p_vals[ix + 1] + iy;
        var BA = com_fancyfish_faeng_common_Noise.p_vals[B] + iz;
        var BB = com_fancyfish_faeng_common_Noise.p_vals[B + 1] + iz;
        return com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[AA], x, y, z), com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[BA], x - 1, y, z), u), com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[AB], x, y - 1, z), com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[BB], x - 1, y - 1, z), u), v), com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[AA + 1], x, y, z - 1), com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[BA + 1], x - 1, y, z - 1), u), com_fancyfish_faeng_common_Utils.interp(com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[AB + 1], x, y - 1, z - 1), com_fancyfish_faeng_common_Noise.grad(com_fancyfish_faeng_common_Noise.p_vals[BB + 1], x - 1, y - 1, z - 1), u), v), w);
    };
    com_fancyfish_faeng_common_Noise.fBm = function(x, y, z, octaves, lacunarity, gain) {
        if (gain == null) gain = 0.65;
        if (lacunarity == null) lacunarity = 1.8715;
        if (octaves == null) octaves = 16;
        var total = 0.0;
        var frequency = 1.0;
        var amplitude = gain;
        var _g = 0;
        while (_g < octaves) {
            var i = _g++;
            total += com_fancyfish_faeng_common_Noise.noise(x * frequency, y * frequency, z * frequency) * amplitude;
            frequency *= lacunarity;
            amplitude *= gain;
        }
        return total;
    };
    var com_fancyfish_faeng_common_NullIterator = function() {};
    $hxClasses["com.fancyfish.faeng.common.NullIterator"] = com_fancyfish_faeng_common_NullIterator;
    com_fancyfish_faeng_common_NullIterator.__name__ = ["com", "fancyfish", "faeng", "common", "NullIterator"];
    com_fancyfish_faeng_common_NullIterator.prototype = {
        next: function() {
            return null;
        },
        hasNext: function() {
            return false;
        },
        __class__: com_fancyfish_faeng_common_NullIterator
    };
    var com_fancyfish_faeng_common_Pair = function(f, s) {
        this.first = f;
        this.second = s;
    };
    $hxClasses["com.fancyfish.faeng.common.Pair"] = com_fancyfish_faeng_common_Pair;
    com_fancyfish_faeng_common_Pair.__name__ = ["com", "fancyfish", "faeng", "common", "Pair"];
    com_fancyfish_faeng_common_Pair.prototype = {
        __class__: com_fancyfish_faeng_common_Pair
    };
    var com_fancyfish_faeng_common_SortedArray = function(_getSortValue) {
        this.array = [];
        this.getSortValue = _getSortValue;
    };
    $hxClasses["com.fancyfish.faeng.common.SortedArray"] = com_fancyfish_faeng_common_SortedArray;
    com_fancyfish_faeng_common_SortedArray.__name__ = ["com", "fancyfish", "faeng", "common", "SortedArray"];
    com_fancyfish_faeng_common_SortedArray.lower_bound = function(array, val, getSortValue) {
        var count = array.length;
        var cur = 0;
        var step;
        while (count > 0) {
            step = count >> 1;
            var v = getSortValue(array[cur + step]);
            if (v < val) {
                cur += step + 1;
                count -= step + 1;
            } else if (v == val) return cur + step;
            else count = step;
        }
        return cur;
    };
    com_fancyfish_faeng_common_SortedArray.sortableValue = function(s) {
        return s.getSortValue();
    };
    com_fancyfish_faeng_common_SortedArray.prototype = {
        isEmpty: function() {
            return this.array.length != 0;
        },
        length: function() {
            return this.array.length;
        },
        get: function(i) {
            return this.array[i];
        },
        getByValue: function(val) {
            if (this.array.length == 0) return null;
            else {
                var i = com_fancyfish_faeng_common_SortedArray.lower_bound(this.array, val, this.getSortValue);
                return this.array[com_fancyfish_faeng_common_Utils.min(i, this.array.length - 1)];
            }
        },
        remove: function(t) {
            return HxOverrides.remove(this.array, t);
        },
        insert: function(t) {
            var pos = com_fancyfish_faeng_common_SortedArray.lower_bound(this.array, this.getSortValue(t), this.getSortValue);
            this.array.splice(pos, 0, t);
        },
        iterator: function() {
            return HxOverrides.iter(this.array);
        },
        __class__: com_fancyfish_faeng_common_SortedArray
    };
    var com_fancyfish_faeng_common_Utils = function() {};
    $hxClasses["com.fancyfish.faeng.common.Utils"] = com_fancyfish_faeng_common_Utils;
    com_fancyfish_faeng_common_Utils.__name__ = ["com", "fancyfish", "faeng", "common", "Utils"];
    com_fancyfish_faeng_common_Utils.numberOfOnes = function(i) {
        i = i - (i >> 1 & 1431655765);
        i = (i & 858993459) + (i >> 2 & 858993459);
        return (i + (i >> 4) & 252645135) * 16843009 >> 24;
    };
    com_fancyfish_faeng_common_Utils.numberOfTrailingZeros = function(i) {
        return com_fancyfish_faeng_common_Utils.MultiplyDeBruijnBitPosition[(i & -i) * 125613361 >> 27];
    };
    com_fancyfish_faeng_common_Utils.numberOfLeadingZeros = function(i) {
        i |= i >> 1;
        i |= i >> 2;
        i |= i >> 4;
        i |= i >> 8;
        i |= i >> 16;
        return 32 - com_fancyfish_faeng_common_Utils.numberOfOnes(i);
    };
    com_fancyfish_faeng_common_Utils.nearestPowerOf2 = function(i) {
        return com_fancyfish_faeng_common_Utils.pow2(32 - com_fancyfish_faeng_common_Utils.numberOfLeadingZeros(i - 1));
    };
    com_fancyfish_faeng_common_Utils.abs = function(a) {
        if (a < 0) return - a;
        else return a;
    };
    com_fancyfish_faeng_common_Utils.min = function(a, b) {
        if (a < b) return a;
        else return b;
    };
    com_fancyfish_faeng_common_Utils.max = function(a, b) {
        if (a > b) return a;
        else return b;
    };
    com_fancyfish_faeng_common_Utils.sign = function(f, fuzzy) {
        if (fuzzy == null) fuzzy = 0;
        if (f > fuzzy) return 1;
        else if (f < -fuzzy) return - 1;
        else return 0;
    };
    com_fancyfish_faeng_common_Utils.fract = function(f) {
        return f - Math.floor(f);
    };
    com_fancyfish_faeng_common_Utils.clampi = function(e, l, h) {
        if (e > l) {
            if (e > h) return h;
            else return e;
        } else return l;
    };
    com_fancyfish_faeng_common_Utils.clamp = function(e, l, h) {
        if (e > l) {
            if (e > h) return h;
            else return e;
        } else return l;
    };
    com_fancyfish_faeng_common_Utils.interp = function(a, b, f) {
        return a * (1 - f) + b * f;
    };
    com_fancyfish_faeng_common_Utils.mod = function(a, n) {
        return a - Math.floor(a / n) * n;
    };
    com_fancyfish_faeng_common_Utils.smoothstep = function(edge0, edge1, x) {
        var f = com_fancyfish_faeng_common_Utils.clamp((x - edge0) / (edge1 - edge0), 0, 1);
        return f * f * (3 - 2 * f);
    };
    com_fancyfish_faeng_common_Utils.toRadians = function(d) {
        return d * Math.PI / 180.0;
    };
    com_fancyfish_faeng_common_Utils.toDegrees = function(r) {
        return r * 180.0 / Math.PI;
    };
    com_fancyfish_faeng_common_Utils.luminance = function(r, g, b) {
        return r * 0.299 + g * 0.587 + b * 0.114;
    };
    com_fancyfish_faeng_common_Utils.luminancei = function(col) {
        return (col >> 16 & 255) / 255.0 * 0.299 + (col >> 8 & 255) / 255.0 * 0.587 + (col & 255) / 255.0 * 0.114;
    };
    com_fancyfish_faeng_common_Utils.pow2 = function(i) {
        return 1 << i;
    };
    com_fancyfish_faeng_common_Utils.log2floor = function(i) {
        i |= i >> 1;
        i |= i >> 2;
        i |= i >> 4;
        i |= i >> 8;
        i |= i >> 16;
        return com_fancyfish_faeng_common_Utils.numberOfOnes(i) - 1;
    };
    com_fancyfish_faeng_common_Utils.log2ceil = function(i) {
        var v = i & i - 1;
        v |= -v;
        v >>= 31;
        return com_fancyfish_faeng_common_Utils.log2floor(i) - v;
    };
    com_fancyfish_faeng_common_Utils.contains = function(f, ar) {
        var _g = 0;
        while (_g < ar.length) {
            var t = ar[_g]; ++_g;
            if (f == t) return true;
        }
        return false;
    };
    com_fancyfish_faeng_common_Utils.drawCDF = function(cdf, r, normalized) {
        if (normalized == null) normalized = true;
        if (r == null) r = -1;
        if (r < 0) r = Math.random();
        if (normalized) r *= cdf[cdf.length - 1];
        var count = cdf.length;
        var st = 0;
        var step;
        while (count > 0) {
            step = count >> 1;
            if (r > cdf[st + step]) {
                st += step + 1;
                count -= step + 1;
            } else count = step;
        }
        return st;
    };
    com_fancyfish_faeng_common_Utils.pdfToCDF = function(pdf) {
        var total = 0.0;
        var len = pdf.length;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            total += pdf[i];
            pdf[i] = total;
        }
        return total;
    };
    com_fancyfish_faeng_common_Utils.shuffle = function(ar, rnd) {
        var i = ar.length;
        while (i > 1) {
            var rnd1 = Math.floor(rnd() * i);
            i--;
            var tmp = ar[i];
            ar[i] = ar[rnd1];
            ar[rnd1] = tmp;
        }
    };
    com_fancyfish_faeng_common_Utils.shuffleN = function(ar, ct, rnd) {
        var i = ar.length / ct | 0;
        while (i > 1) {
            var rnd1 = Math.floor(rnd() * i) * ct;
            i--;
            var idx = i * ct;
            var _g = 0;
            while (_g < ct) {
                var j = _g++;
                var tmp = ar[idx + j];
                ar[idx + j] = ar[rnd1 + j];
                ar[rnd1 + j] = tmp;
            }
        }
    };
    com_fancyfish_faeng_common_Utils.addCommas = function(f) {
        var ret = "";
        var i = Math.floor(f);
        var j = Math.round((f - i) * 100);
        if (j >= 100) {
            j = 0;
            i++;
        }
        var s;
        if (i == null) s = "null";
        else s = "" + i;
        var l = 0;
        var len = s.length;
        while (l < len - 3) {
            l += 3;
            ret = "," + HxOverrides.substr(s, len - l, 3) + ret;
        }
        ret = HxOverrides.substr(s, 0, len - l) + ret;
        if (j != 0) ret += "." + (j < 10 ? "0": "") + j;
        return ret;
    };
    com_fancyfish_faeng_common_Utils.twoDigits = function(i) {
        if (i < 10) return "0" + i;
        else if (i == null) return "null";
        else return "" + i;
    };
    com_fancyfish_faeng_common_Utils.toSigned8 = function(u) {
        if (u < 128) return u;
        else return u - 256;
    };
    com_fancyfish_faeng_common_Utils.toSigned16 = function(u) {
        if (u < 32768) return u;
        else return u - 65536;
    };
    com_fancyfish_faeng_common_Utils.toUnsigned32 = function(u) {
        if (u < 0) return 4294967296.0 + u;
        else return u;
    };
    com_fancyfish_faeng_common_Utils.getColor = function(col, channel) {
        return (col >> channel & 255) / 255.0;
    };
    com_fancyfish_faeng_common_Utils.setColor = function(col, channel, val) {
        return col | (Math.floor(val * 255.0 + 0.5) & 255) << channel;
    };
    com_fancyfish_faeng_common_Utils.printStackTrace = function() {
        haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.callStack()), {
            fileName: "Utils.hx",
            lineNumber: 100,
            className: "com.fancyfish.faeng.common.Utils",
            methodName: "printStackTrace"
        });
    };
    com_fancyfish_faeng_common_Utils.printExceptionTrace = function() {
        haxe_Log.trace(haxe_CallStack.toString(haxe_CallStack.exceptionStack()), {
            fileName: "Utils.hx",
            lineNumber: 101,
            className: "com.fancyfish.faeng.common.Utils",
            methodName: "printExceptionTrace"
        });
    };
    com_fancyfish_faeng_common_Utils.frand = function(x) {
        return com_fancyfish_faeng_common_Utils.fract(Math.sin(x * 9106.966345) * 49824.21294);
    };
    com_fancyfish_faeng_common_Utils.frand2 = function(x, y) {
        return com_fancyfish_faeng_common_Utils.fract(Math.sin(x * 9106.966345 + y * 3742.931314) * 49824.21294);
    };
    com_fancyfish_faeng_common_Utils.frand3 = function(x, y, z) {
        return com_fancyfish_faeng_common_Utils.fract(Math.sin(x * 9106.966345 + y * 3742.931314 + z * 8046.780733) * 49824.21294);
    };
    com_fancyfish_faeng_common_Utils.frand4 = function(x, y, z, w) {
        return com_fancyfish_faeng_common_Utils.fract(Math.sin(x * 9106.966345 + y * 3742.931314 + z * 8046.780733 + w * 2574.684771) * 49824.21294);
    };
    com_fancyfish_faeng_common_Utils.getGaussian = function(rnd) {
        if (isNaN(com_fancyfish_faeng_common_Utils.nextGaussian)) {
            var g = com_fancyfish_faeng_common_Utils.getGaussian2(rnd);
            com_fancyfish_faeng_common_Utils.nextGaussian = g.second;
            return g.first;
        } else {
            var r = com_fancyfish_faeng_common_Utils.nextGaussian;
            com_fancyfish_faeng_common_Utils.nextGaussian = NaN;
            return r;
        }
    };
    com_fancyfish_faeng_common_Utils.getGaussian2 = function(rnd) {
        var v1;
        var v2;
        var s;
        do {
            v1 = 2 * rnd() - 1;
            v2 = 2 * rnd() - 1;
            s = v1 * v1 + v2 * v2;
        } while ( s >= 1 || s == 0 );
        var mul = Math.sqrt( - 2 * Math.log(s) / s);
        return {
            first: v1 * mul,
            second: v2 * mul
        };
    };
    com_fancyfish_faeng_common_Utils.clear = function(arr) {
        arr.length = 0;
    };
    com_fancyfish_faeng_common_Utils.getIdx = function(x, y) {
        return (y + 16384) * 32768 + (x + 16384);
    };
    com_fancyfish_faeng_common_Utils.getX = function(idx) {
        return idx % 32768 - 16384;
    };
    com_fancyfish_faeng_common_Utils.getY = function(idx) {
        return Math.floor(idx / 32768) - 16384;
    };
    var com_fancyfish_faeng_common_mutable_Concat = function(first, second) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.first = first;
        this.second = second;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.Concat"] = com_fancyfish_faeng_common_mutable_Concat;
    com_fancyfish_faeng_common_mutable_Concat.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "Concat"];
    com_fancyfish_faeng_common_mutable_Concat.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_Concat.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            return this.first.get() + this.second;
        },
        handleEvent: function(e) {
            this.update();
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.addEventListener.call(this, type, listener);
            if (!old && this.hasEventListener("updated")) this.first.addEventListener("updated", $bind(this, this.handleEvent));
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.removeEventListener.call(this, type, listener);
            if (old && !this.hasEventListener("updated")) this.first.removeEventListener("updated", $bind(this, this.handleEvent));
        },
        __class__: com_fancyfish_faeng_common_mutable_Concat
    });
    var com_fancyfish_faeng_common_mutable_ListMutable = function(list, delim) {
        if (delim == null) delim = "";
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.list = list;
        this.delim = delim;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.ListMutable"] = com_fancyfish_faeng_common_mutable_ListMutable;
    com_fancyfish_faeng_common_mutable_ListMutable.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "ListMutable"];
    com_fancyfish_faeng_common_mutable_ListMutable.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_ListMutable.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            var b = new StringBuf();
            var first = true;
            var _g = 0;
            var _g1 = this.list;
            while (_g < _g1.length) {
                var item = _g1[_g]; ++_g;
                if (first) first = false;
                else b.b += Std.string(this.delim);
                b.add((function($this) {
                    var $r;
                    if (item.value == null) item.value = item.getValue();
                    $r = item.value;
                    return $r;
                } (this)));
            }
            return b.b;
        },
        handleEvent: function(e) {
            this.update();
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.addEventListener.call(this, type, listener);
            if (!old && this.hasEventListener("updated")) {
                var _g = 0;
                var _g1 = this.list;
                while (_g < _g1.length) {
                    var m = _g1[_g]; ++_g;
                    m.addEventListener("updated", $bind(this, this.handleEvent));
                }
            }
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.removeEventListener.call(this, type, listener);
            if (old && !this.hasEventListener("updated")) {
                var _g = 0;
                var _g1 = this.list;
                while (_g < _g1.length) {
                    var m = _g1[_g]; ++_g;
                    m.removeEventListener("updated", $bind(this, this.handleEvent));
                }
            }
        },
        __class__: com_fancyfish_faeng_common_mutable_ListMutable
    });
    var com_fancyfish_faeng_common_mutable_Concat2 = function(first, second, delim) {
        if (delim == null) delim = "";
        com_fancyfish_faeng_common_mutable_ListMutable.call(this, [first, second], delim);
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.Concat2"] = com_fancyfish_faeng_common_mutable_Concat2;
    com_fancyfish_faeng_common_mutable_Concat2.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "Concat2"];
    com_fancyfish_faeng_common_mutable_Concat2.__super__ = com_fancyfish_faeng_common_mutable_ListMutable;
    com_fancyfish_faeng_common_mutable_Concat2.prototype = $extend(com_fancyfish_faeng_common_mutable_ListMutable.prototype, {
        __class__: com_fancyfish_faeng_common_mutable_Concat2
    });
    var com_fancyfish_faeng_common_mutable_MutableTemplate = function(mutable, templates) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.mutable = mutable;
        this.templates = templates;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.MutableTemplate"] = com_fancyfish_faeng_common_mutable_MutableTemplate;
    com_fancyfish_faeng_common_mutable_MutableTemplate.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "MutableTemplate"];
    com_fancyfish_faeng_common_mutable_MutableTemplate.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_MutableTemplate.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            var ret = this.mutable.get();
            var $it0 = this.templates.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                ret = StringTools.replace(ret, k, this.templates.get(k).get());
            }
            return ret;
        },
        handleEvent: function(e) {
            this.update();
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.addEventListener.call(this, type, listener);
            if (!old && this.hasEventListener("updated")) this.mutable.addEventListener("updated", $bind(this, this.handleEvent));
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.removeEventListener.call(this, type, listener);
            if (old && !this.hasEventListener("updated")) this.mutable.removeEventListener("updated", $bind(this, this.handleEvent));
        },
        __class__: com_fancyfish_faeng_common_mutable_MutableTemplate
    });
    var com_fancyfish_faeng_common_mutable_MutableTemplateStatic = function(mutable, templates) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.mutable = mutable;
        this.templates = templates;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.MutableTemplateStatic"] = com_fancyfish_faeng_common_mutable_MutableTemplateStatic;
    com_fancyfish_faeng_common_mutable_MutableTemplateStatic.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "MutableTemplateStatic"];
    com_fancyfish_faeng_common_mutable_MutableTemplateStatic.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_MutableTemplateStatic.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        getValue: function() {
            var ret = this.mutable.get();
            var $it0 = this.templates.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                ret = StringTools.replace(ret, k, this.templates.get(k));
            }
            return ret;
        },
        handleEvent: function(e) {
            this.update();
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.addEventListener.call(this, type, listener);
            if (!old && this.hasEventListener("updated")) this.mutable.addEventListener("updated", $bind(this, this.handleEvent));
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
            var old = this.hasEventListener("updated");
            com_fancyfish_faeng_common_mutable_Mutable.prototype.removeEventListener.call(this, type, listener);
            if (old && !this.hasEventListener("updated")) this.mutable.removeEventListener("updated", $bind(this, this.handleEvent));
        },
        __class__: com_fancyfish_faeng_common_mutable_MutableTemplateStatic
    });
    var com_fancyfish_faeng_common_mutable_Static = function(v) {
        com_fancyfish_faeng_common_mutable_Mutable.call(this);
        this.value = v;
    };
    $hxClasses["com.fancyfish.faeng.common.mutable.Static"] = com_fancyfish_faeng_common_mutable_Static;
    com_fancyfish_faeng_common_mutable_Static.__name__ = ["com", "fancyfish", "faeng", "common", "mutable", "Static"];
    com_fancyfish_faeng_common_mutable_Static.__super__ = com_fancyfish_faeng_common_mutable_Mutable;
    com_fancyfish_faeng_common_mutable_Static.prototype = $extend(com_fancyfish_faeng_common_mutable_Mutable.prototype, {
        update: function() {},
        __class__: com_fancyfish_faeng_common_mutable_Static
    });
    var com_fancyfish_faeng_display_Matrix2D = function(a, b, c, d, tx, ty) {
        if (ty == null) ty = 0;
        if (tx == null) tx = 0;
        if (d == null) d = 1;
        if (c == null) c = 0;
        if (b == null) b = 0;
        if (a == null) a = 1;
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    };
    $hxClasses["com.fancyfish.faeng.display.Matrix2D"] = com_fancyfish_faeng_display_Matrix2D;
    com_fancyfish_faeng_display_Matrix2D.__name__ = ["com", "fancyfish", "faeng", "display", "Matrix2D"];
    com_fancyfish_faeng_display_Matrix2D.prototype = {
        clone: function() {
            return new com_fancyfish_faeng_display_Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);
        },
        set: function(a, b, c, d, tx, ty) {
            if (ty == null) ty = 0;
            if (tx == null) tx = 0;
            if (d == null) d = 1;
            if (c == null) c = 0;
            if (b == null) b = 0;
            if (a == null) a = 1;
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        },
        copy: function(m) {
            this.a = m.a;
            this.b = m.b;
            this.c = m.c;
            this.d = m.d;
            this.tx = m.tx;
            this.ty = m.ty;
        },
        identity: function() {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0;
        },
        isIdentity: function() {
            return this.a == 1 && this.b == 0 && this.c == 0 && this.d == 1 && this.tx == 0 && this.ty == 0;
        },
        equals: function(m) {
            return this.a == m.a && this.b == m.b && this.c == m.c && this.d == m.d && this.tx == m.tx && this.ty == m.ty;
        },
        translate: function(x, y) {
            this.tx += this.a * x + this.c * y;
            this.ty += this.b * x + this.d * y;
        },
        transform: function(p, copy) {
            if (copy == null) copy = true;
            var x = p.x * this.a + p.y * this.c + this.tx;
            var y = p.x * this.b + p.y * this.d + this.ty;
            if (copy) return new com_fancyfish_faeng_display_Point2D(x, y);
            else {
                p.x = x;
                p.y = y;
                return p;
            }
        },
        rotate: function(r) {
            var cos = Math.cos( - r);
            var sin = Math.sin( - r);
            var a1 = this.a * cos - this.b * sin;
            this.b = this.a * sin + this.b * cos;
            this.a = a1;
            var c1 = this.c * cos - this.d * sin;
            this.d = this.c * sin + this.d * cos;
            this.c = c1;
        },
        invert: function() {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) {
                this.a = this.b = this.c = this.d = 0;
                this.tx = -this.tx;
                this.ty = -this.ty;
            } else {
                norm = 1.0 / norm;
                var a1 = this.d * norm;
                this.d = this.a * norm;
                this.a = a1;
                this.b *= -norm;
                this.c *= -norm;
                var tx1 = -this.a * this.tx - this.c * this.ty;
                this.ty = -this.b * this.tx - this.d * this.ty;
                this.tx = tx1;
            }
            return this;
        },
        concat: function(m) {
            var a1 = this.a * m.a + this.b * m.c;
            this.b = this.a * m.b + this.b * m.d;
            this.a = a1;
            var c1 = this.c * m.a + this.d * m.c;
            this.d = this.c * m.b + this.d * m.d;
            this.c = c1;
            var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
            this.ty = this.tx * m.b + this.ty * m.d + m.ty;
            this.tx = tx1;
        },
        mult: function(m) {
            var ret = new com_fancyfish_faeng_display_Matrix2D();
            ret.a = this.a * m.a + this.b * m.c;
            ret.b = this.a * m.b + this.b * m.d;
            ret.c = this.c * m.a + this.d * m.c;
            ret.d = this.c * m.b + this.d * m.d;
            ret.tx = this.tx * m.a + this.ty * m.c + m.tx;
            ret.ty = this.tx * m.b + this.ty * m.d + m.ty;
            return ret;
        },
        toString: function() {
            return "Matrix2D [" + this.a + "," + this.b + "," + this.c + "," + this.d + "," + this.tx + "," + this.ty + "]";
        },
        __class__: com_fancyfish_faeng_display_Matrix2D
    };
    var com_fancyfish_faeng_display_Point2D = function(x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.x = x;
        this.y = y;
    };
    $hxClasses["com.fancyfish.faeng.display.Point2D"] = com_fancyfish_faeng_display_Point2D;
    com_fancyfish_faeng_display_Point2D.__name__ = ["com", "fancyfish", "faeng", "display", "Point2D"];
    com_fancyfish_faeng_display_Point2D.distance = function(a, b) {
        return Math.sqrt(com_fancyfish_faeng_display_Point2D.distanceSqf(a.x, a.y, b.x, b.y));
    };
    com_fancyfish_faeng_display_Point2D.distanceSq = function(a, b) {
        return com_fancyfish_faeng_display_Point2D.distanceSqf(a.x, a.y, b.x, b.y);
    };
    com_fancyfish_faeng_display_Point2D.distanceSqf = function(ax, ay, bx, by) {
        var dx = ax - bx;
        var dy = ay - by;
        return dx * dx + dy * dy;
    };
    com_fancyfish_faeng_display_Point2D.prototype = {
        set: function(x, y) {
            if (y == null) y = 0;
            if (x == null) x = 0;
            this.x = x;
            this.y = y;
        },
        copy: function() {
            return new com_fancyfish_faeng_display_Point2D(this.x, this.y);
        },
        mul: function(f) {
            this.x *= f;
            this.y *= f;
        },
        add: function(f) {
            this.x += f;
            this.y += f;
        },
        length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        normalize: function() {
            this.mul(1.0 / Math.sqrt(this.x * this.x + this.y * this.y));
        },
        equals: function(d) {
            var k;
            k = js_Boot.__cast(d, com_fancyfish_faeng_display_Point2D);
            return this.x == k.x && this.y == k.y;
        },
        hashCode: function() {
            return this.x * 100 - this.y * 10000 | 0;
        },
        toString: function() {
            return "[" + this.x + "," + this.y + "]";
        },
        __class__: com_fancyfish_faeng_display_Point2D
    };
    var com_fancyfish_faeng_display_Rectangle = function(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    };
    $hxClasses["com.fancyfish.faeng.display.Rectangle"] = com_fancyfish_faeng_display_Rectangle;
    com_fancyfish_faeng_display_Rectangle.__name__ = ["com", "fancyfish", "faeng", "display", "Rectangle"];
    com_fancyfish_faeng_display_Rectangle.prototype = {
        setPos: function(x, y) {
            this.x = x;
            this.y = y;
        },
        setSize: function(width, height) {
            this.width = width;
            this.height = height;
        },
        set: function(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        },
        equals: function(r) {
            return this.x == r.x && this.y == r.y && this.width == r.width && this.height == r.height;
        },
        equalsVal: function(x, y, width, height) {
            return x == this.x && y == this.y && width == this.width && height == this.height;
        },
        toString: function() {
            return "Rect [" + Std.string(this.x) + "," + Std.string(this.y) + ", " + Std.string(this.width) + "," + Std.string(this.height) + "]";
        },
        __class__: com_fancyfish_faeng_display_Rectangle
    };
    var com_fancyfish_faeng_display_Rectangle2D = function(x, y, width, height) {
        if (height == null) height = 0;
        if (width == null) width = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        com_fancyfish_faeng_display_Rectangle.call(this, x, y, width, height);
    };
    $hxClasses["com.fancyfish.faeng.display.Rectangle2D"] = com_fancyfish_faeng_display_Rectangle2D;
    com_fancyfish_faeng_display_Rectangle2D.__name__ = ["com", "fancyfish", "faeng", "display", "Rectangle2D"];
    com_fancyfish_faeng_display_Rectangle2D.createPoint = function(x, y) {
        return new com_fancyfish_faeng_display_Rectangle2D(x, y, 0.00001, 0.00001);
    };
    com_fancyfish_faeng_display_Rectangle2D.mult = function(r, m) {
        var p = m.transform(new com_fancyfish_faeng_display_Point2D(r.x, r.y), null);
        var ret = new com_fancyfish_faeng_display_Rectangle2D(p.x, p.y);
        ret.addPoint2D(m.transform(new com_fancyfish_faeng_display_Point2D(r.x + r.width, r.y), null));
        ret.addPoint2D(m.transform(new com_fancyfish_faeng_display_Point2D(r.x, r.y + r.height), null));
        ret.addPoint2D(m.transform(new com_fancyfish_faeng_display_Point2D(r.x + r.width, r.y + r.height), null));
        return ret;
    };
    com_fancyfish_faeng_display_Rectangle2D.__super__ = com_fancyfish_faeng_display_Rectangle;
    com_fancyfish_faeng_display_Rectangle2D.prototype = $extend(com_fancyfish_faeng_display_Rectangle.prototype, {
        reset: function() {
            this.x = 100000;
            this.y = this.x;
            this.width = -this.x * 2;
            this.height = this.width;
        },
        empty: function() {
            return this.width <= 0 || this.height <= 0;
        },
        containsPoint: function(p) {
            return p.x >= this.x && p.x < this.x + this.width && p.y >= this.y && p.y < this.y + this.height;
        },
        contains: function(r) {
            return r.x >= this.x && r.x + r.width <= this.x + this.width && r.y >= this.y && r.y + r.height <= this.y + this.height;
        },
        intersects: function(r) {
            return r.x + r.width > this.x && r.x < this.x + this.width && r.y + r.height > this.y && r.y < this.y + this.height;
        },
        intersection: function(r) {
            var rx = Math.max(this.x, r.x);
            var ry = Math.max(this.y, r.y);
            return new com_fancyfish_faeng_display_Rectangle2D(rx, ry, Math.min(this.x + this.width, r.x + r.width) - rx, Math.min(this.y + this.height, r.y + r.height) - ry);
        },
        addPoint2D: function(p) {
            this.addPoint(p.x, p.y);
        },
        addPoint: function(x1, y1) {
            var x2 = Math.max(this.x + this.width, x1 + 0.00001);
            var y2 = Math.max(this.y + this.height, y1 + 0.00001);
            this.x = Math.min(this.x, x1);
            this.y = Math.min(this.y, y1);
            this.width = x2 - this.x;
            this.height = y2 - this.y;
        },
        addRectangle: function(rx, ry, rwidth, rheight) {
            var x2 = Math.max(this.x + this.width, rx + rwidth);
            var y2 = Math.max(this.y + this.height, ry + rheight);
            this.x = Math.min(this.x, rx);
            this.y = Math.min(this.y, ry);
            this.width = x2 - this.x;
            this.height = y2 - this.y;
        },
        addRect: function(r) {
            this.addRectangle(r.x, r.y, r.width, r.height);
        },
        area: function() {
            return this.width * this.height;
        },
        clone: function() {
            return new com_fancyfish_faeng_display_Rectangle2D(this.x, this.y, this.width, this.height);
        },
        __class__: com_fancyfish_faeng_display_Rectangle2D
    });
    var com_fancyfish_faeng_text_CharacterPos = function(c, x, y, s, i) {
        this.character = c;
        this.x = x;
        this.y = y;
        this.scale = s;
        this.id = i;
    };
    $hxClasses["com.fancyfish.faeng.text.CharacterPos"] = com_fancyfish_faeng_text_CharacterPos;
    com_fancyfish_faeng_text_CharacterPos.__name__ = ["com", "fancyfish", "faeng", "text", "CharacterPos"];
    com_fancyfish_faeng_text_CharacterPos.prototype = {
        __class__: com_fancyfish_faeng_text_CharacterPos
    };
    var com_fancyfish_faeng_text_Font = function(xml, path) {
        this.file = xml.elementsNamed("pages").next().elementsNamed("page").next().get("file");
        var idx = path.lastIndexOf("/");
        if (idx != -1) this.file = path.substring(0, idx + 1) + this.file;
        var info = xml.elementsNamed("info").next();
        this.fontName = info.get("face");
        this.size = Std.parseFloat(info.get("size"));
        var common = xml.elementsNamed("common").next();
        this.lineHeight = Std.parseFloat(common.get("lineHeight"));
        this.baseline = Std.parseFloat(common.get("base")) / this.lineHeight;
        this.characters = new haxe_ds_IntMap();
        var chars = xml.elementsNamed("chars").next();
        var $it0 = chars.elementsNamed("char");
        while ($it0.hasNext()) {
            var c = $it0.next();
            var $char = new com_fancyfish_faeng_text_Character(c, this);
            this.characters.h[$char.id] = $char;
        }
        var kernings = xml.elementsNamed("kernings").next();
        if (kernings != null) {
            var $it1 = kernings.elementsNamed("kerning");
            while ($it1.hasNext()) {
                var k = $it1.next();
                var char1;
                var key = Std.parseInt(k.get("second"));
                char1 = this.characters.h[key];
                if (char1 == null) continue;
                char1.addKerning(Std.parseInt(k.get("first")), Std.parseFloat(k.get("amount")));
            }
        }
    };
    $hxClasses["com.fancyfish.faeng.text.Font"] = com_fancyfish_faeng_text_Font;
    com_fancyfish_faeng_text_Font.__name__ = ["com", "fancyfish", "faeng", "text", "Font"];
    com_fancyfish_faeng_text_Font.prototype = {
        getLineHeight: function(sz) {
            return this.lineHeight * sz / this.size;
        },
        canDisplay: function(id) {
            var c = this.characters.h[id];
            return c != null && c.width > 0 && c.height > 0;
        },
        getCharacter: function(id) {
            return this.characters.h[id];
        },
        stringWidth: function(str) {
            var ret = 0;
            var len = str.length;
            var prev = -1;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                var id = HxOverrides.cca(str, i);
                var c = this.characters.h[id];
                if (c != null) ret += c.xadvance + c.getKerning(prev);
                prev = id;
            }
            return ret;
        },
        iterator: function() {
            return this.characters.iterator();
        },
        __class__: com_fancyfish_faeng_text_Font
    };
    var com_fancyfish_faeng_text_FontManager = function() {};
    $hxClasses["com.fancyfish.faeng.text.FontManager"] = com_fancyfish_faeng_text_FontManager;
    com_fancyfish_faeng_text_FontManager.__name__ = ["com", "fancyfish", "faeng", "text", "FontManager"];
    com_fancyfish_faeng_text_FontManager.get = function(name) {
        return com_fancyfish_faeng_text_FontManager.font_map.get(name);
    };
    com_fancyfish_faeng_text_FontManager.set = function(name, f) {
        var m = com_fancyfish_faeng_text_FontManager.font_map.get(name);
        if (m == null) {
            m = new com_fancyfish_faeng_common_mutable_Mutable();
            com_fancyfish_faeng_text_FontManager.font_map.set(name, m);
        }
        if (m.value != f) {
            m.value = f;
            m.dispatchEvent(new openfl_events_Event("updated"));
        }
    };
    var haxe_StackItem = $hxClasses["haxe.StackItem"] = {
        __ename__: ["haxe", "StackItem"],
        __constructs__: ["CFunction", "Module", "FilePos", "Method", "LocalFunction"]
    };
    haxe_StackItem.CFunction = ["CFunction", 0];
    haxe_StackItem.CFunction.toString = $estr;
    haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
    haxe_StackItem.Module = function(m) {
        var $x = ["Module", 1, m];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x;
    };
    haxe_StackItem.FilePos = function(s, file, line) {
        var $x = ["FilePos", 2, s, file, line];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x;
    };
    haxe_StackItem.Method = function(classname, method) {
        var $x = ["Method", 3, classname, method];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x;
    };
    haxe_StackItem.LocalFunction = function(v) {
        var $x = ["LocalFunction", 4, v];
        $x.__enum__ = haxe_StackItem;
        $x.toString = $estr;
        return $x;
    };
    var haxe_CallStack = function() {};
    $hxClasses["haxe.CallStack"] = haxe_CallStack;
    haxe_CallStack.__name__ = ["haxe", "CallStack"];
    haxe_CallStack.lastException = null;
    haxe_CallStack.getStack = function(e) {
        if (e == null) return [];
        var oldValue = Error.prepareStackTrace;
        Error.prepareStackTrace = function(error, callsites) {
            var stack = [];
            var _g = 0;
            while (_g < callsites.length) {
                var site = callsites[_g]; ++_g;
                if (haxe_CallStack.wrapCallSite != null) site = haxe_CallStack.wrapCallSite(site);
                var method = null;
                var fullName = site.getFunctionName();
                if (fullName != null) {
                    var idx = fullName.lastIndexOf(".");
                    if (idx >= 0) {
                        var className = HxOverrides.substr(fullName, 0, idx);
                        var methodName = HxOverrides.substr(fullName, idx + 1, null);
                        method = haxe_StackItem.Method(className, methodName);
                    }
                }
                stack.push(haxe_StackItem.FilePos(method, site.getFileName(), site.getLineNumber()));
            }
            return stack;
        };
        var a = haxe_CallStack.makeStack(e.stack);
        Error.prepareStackTrace = oldValue;
        return a;
    };
    haxe_CallStack.wrapCallSite = null;
    haxe_CallStack.callStack = function() {
        try {
            throw new Error();
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            var a = haxe_CallStack.getStack(e);
            a.shift();
            return a;
        }
    };
    haxe_CallStack.exceptionStack = function() {
        return haxe_CallStack.getStack(haxe_CallStack.lastException);
    };
    haxe_CallStack.toString = function(stack) {
        var b = new StringBuf();
        var _g = 0;
        while (_g < stack.length) {
            var s = stack[_g]; ++_g;
            b.b += "\nCalled from ";
            haxe_CallStack.itemToString(b, s);
        }
        return b.b;
    };
    haxe_CallStack.itemToString = function(b, s) {
        switch (s[1]) {
        case 0:
            b.b += "a C function";
            break;
        case 1:
            var m = s[2];
            b.b += "module ";
            if (m == null) b.b += "null";
            else b.b += "" + m;
            break;
        case 2:
            var line = s[4];
            var file = s[3];
            var s1 = s[2];
            if (s1 != null) {
                haxe_CallStack.itemToString(b, s1);
                b.b += " (";
            }
            if (file == null) b.b += "null";
            else b.b += "" + file;
            b.b += " line ";
            if (line == null) b.b += "null";
            else b.b += "" + line;
            if (s1 != null) b.b += ")";
            break;
        case 3:
            var meth = s[3];
            var cname = s[2];
            if (cname == null) b.b += "null";
            else b.b += "" + cname;
            b.b += ".";
            if (meth == null) b.b += "null";
            else b.b += "" + meth;
            break;
        case 4:
            var n = s[2];
            b.b += "local function #";
            if (n == null) b.b += "null";
            else b.b += "" + n;
            break;
        }
    };
    haxe_CallStack.makeStack = function(s) {
        if (s == null) return [];
        else if (typeof(s) == "string") {
            var stack = s.split("\n");
            if (stack[0] == "Error") stack.shift();
            var m = [];
            var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$", "");
            var _g = 0;
            while (_g < stack.length) {
                var line = stack[_g]; ++_g;
                if (rie10.match(line)) {
                    var path = rie10.matched(1).split(".");
                    var meth = path.pop();
                    var file = rie10.matched(2);
                    var line1 = Std.parseInt(rie10.matched(3));
                    m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null: haxe_StackItem.Method(path.join("."), meth), file, line1));
                } else m.push(haxe_StackItem.Module(StringTools.trim(line)));
            }
            return m;
        } else return s;
    };
    var haxe_IMap = function() {};
    $hxClasses["haxe.IMap"] = haxe_IMap;
    haxe_IMap.__name__ = ["haxe", "IMap"];
    haxe_IMap.prototype = {
        __class__: haxe_IMap
    };
    var haxe__$Int64__$_$_$Int64 = function(high, low) {
        this.high = high;
        this.low = low;
    };
    $hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
    haxe__$Int64__$_$_$Int64.__name__ = ["haxe", "_Int64", "___Int64"];
    haxe__$Int64__$_$_$Int64.prototype = {
        __class__: haxe__$Int64__$_$_$Int64
    };
    var haxe_Log = function() {};
    $hxClasses["haxe.Log"] = haxe_Log;
    haxe_Log.__name__ = ["haxe", "Log"];
    haxe_Log.trace = function(v, infos) {
        js_Boot.__trace(v, infos);
    };
    var haxe_Serializer = function() {
        this.buf = new StringBuf();
        this.cache = [];
        this.useCache = haxe_Serializer.USE_CACHE;
        this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
        this.shash = new haxe_ds_StringMap();
        this.scount = 0;
    };
    $hxClasses["haxe.Serializer"] = haxe_Serializer;
    haxe_Serializer.__name__ = ["haxe", "Serializer"];
    haxe_Serializer.run = function(v) {
        var s = new haxe_Serializer();
        s.serialize(v);
        return s.toString();
    };
    haxe_Serializer.prototype = {
        toString: function() {
            return this.buf.b;
        },
        serializeString: function(s) {
            var x = this.shash.get(s);
            if (x != null) {
                this.buf.b += "R";
                if (x == null) this.buf.b += "null";
                else this.buf.b += "" + x;
                return;
            }
            this.shash.set(s, this.scount++);
            this.buf.b += "y";
            s = encodeURIComponent(s);
            if (s.length == null) this.buf.b += "null";
            else this.buf.b += "" + s.length;
            this.buf.b += ":";
            if (s == null) this.buf.b += "null";
            else this.buf.b += "" + s;
        },
        serializeRef: function(v) {
            var vt = typeof(v);
            var _g1 = 0;
            var _g = this.cache.length;
            while (_g1 < _g) {
                var i = _g1++;
                var ci = this.cache[i];
                if (typeof(ci) == vt && ci == v) {
                    this.buf.b += "r";
                    if (i == null) this.buf.b += "null";
                    else this.buf.b += "" + i;
                    return true;
                }
            }
            this.cache.push(v);
            return false;
        },
        serializeFields: function(v) {
            var _g = 0;
            var _g1 = Reflect.fields(v);
            while (_g < _g1.length) {
                var f = _g1[_g]; ++_g;
                this.serializeString(f);
                this.serialize(Reflect.field(v, f));
            }
            this.buf.b += "g";
        },
        serialize: function(v) {
            {
                var _g = Type["typeof"](v);
                switch (_g[1]) {
                case 0:
                    this.buf.b += "n";
                    break;
                case 1:
                    var v1 = v;
                    if (v1 == 0) {
                        this.buf.b += "z";
                        return;
                    }
                    this.buf.b += "i";
                    if (v1 == null) this.buf.b += "null";
                    else this.buf.b += "" + v1;
                    break;
                case 2:
                    var v2 = v;
                    if (isNaN(v2)) this.buf.b += "k";
                    else if (!isFinite(v2)) if (v2 < 0) this.buf.b += "m";
                    else this.buf.b += "p";
                    else {
                        this.buf.b += "d";
                        if (v2 == null) this.buf.b += "null";
                        else this.buf.b += "" + v2;
                    }
                    break;
                case 3:
                    if (v) this.buf.b += "t";
                    else this.buf.b += "f";
                    break;
                case 6:
                    var c = _g[2];
                    if (c == String) {
                        this.serializeString(v);
                        return;
                    }
                    if (this.useCache && this.serializeRef(v)) return;
                    switch (c) {
                    case Array:
                        var ucount = 0;
                        this.buf.b += "a";
                        var l = v.length;
                        var _g1 = 0;
                        while (_g1 < l) {
                            var i = _g1++;
                            if (v[i] == null) ucount++;
                            else {
                                if (ucount > 0) {
                                    if (ucount == 1) this.buf.b += "n";
                                    else {
                                        this.buf.b += "u";
                                        if (ucount == null) this.buf.b += "null";
                                        else this.buf.b += "" + ucount;
                                    }
                                    ucount = 0;
                                }
                                this.serialize(v[i]);
                            }
                        }
                        if (ucount > 0) {
                            if (ucount == 1) this.buf.b += "n";
                            else {
                                this.buf.b += "u";
                                if (ucount == null) this.buf.b += "null";
                                else this.buf.b += "" + ucount;
                            }
                        }
                        this.buf.b += "h";
                        break;
                    case List:
                        this.buf.b += "l";
                        var v3 = v;
                        var _g1_head = v3.h;
                        var _g1_val = null;
                        while (_g1_head != null) {
                            var i1;
                            _g1_val = _g1_head[0];
                            _g1_head = _g1_head[1];
                            i1 = _g1_val;
                            this.serialize(i1);
                        }
                        this.buf.b += "h";
                        break;
                    case Date:
                        var d = v;
                        this.buf.b += "v";
                        this.buf.add(d.getTime());
                        break;
                    case haxe_ds_StringMap:
                        this.buf.b += "b";
                        var v4 = v;
                        var $it0 = v4.keys();
                        while ($it0.hasNext()) {
                            var k = $it0.next();
                            this.serializeString(k);
                            this.serialize(__map_reserved[k] != null ? v4.getReserved(k) : v4.h[k]);
                        }
                        this.buf.b += "h";
                        break;
                    case haxe_ds_IntMap:
                        this.buf.b += "q";
                        var v5 = v;
                        var $it1 = v5.keys();
                        while ($it1.hasNext()) {
                            var k1 = $it1.next();
                            this.buf.b += ":";
                            if (k1 == null) this.buf.b += "null";
                            else this.buf.b += "" + k1;
                            this.serialize(v5.h[k1]);
                        }
                        this.buf.b += "h";
                        break;
                    case haxe_ds_ObjectMap:
                        this.buf.b += "M";
                        var v6 = v;
                        var $it2 = v6.keys();
                        while ($it2.hasNext()) {
                            var k2 = $it2.next();
                            var id = Reflect.field(k2, "__id__");
                            Reflect.deleteField(k2, "__id__");
                            this.serialize(k2);
                            k2.__id__ = id;
                            this.serialize(v6.h[k2.__id__]);
                        }
                        this.buf.b += "h";
                        break;
                    case haxe_io_Bytes:
                        var v7 = v;
                        var i2 = 0;
                        var max = v7.length - 2;
                        var charsBuf = new StringBuf();
                        var b64 = haxe_Serializer.BASE64;
                        while (i2 < max) {
                            var b1 = v7.get(i2++);
                            var b2 = v7.get(i2++);
                            var b3 = v7.get(i2++);
                            charsBuf.add(b64.charAt(b1 >> 2));
                            charsBuf.add(b64.charAt((b1 << 4 | b2 >> 4) & 63));
                            charsBuf.add(b64.charAt((b2 << 2 | b3 >> 6) & 63));
                            charsBuf.add(b64.charAt(b3 & 63));
                        }
                        if (i2 == max) {
                            var b11 = v7.get(i2++);
                            var b21 = v7.get(i2++);
                            charsBuf.add(b64.charAt(b11 >> 2));
                            charsBuf.add(b64.charAt((b11 << 4 | b21 >> 4) & 63));
                            charsBuf.add(b64.charAt(b21 << 2 & 63));
                        } else if (i2 == max + 1) {
                            var b12 = v7.get(i2++);
                            charsBuf.add(b64.charAt(b12 >> 2));
                            charsBuf.add(b64.charAt(b12 << 4 & 63));
                        }
                        var chars = charsBuf.b;
                        this.buf.b += "s";
                        if (chars.length == null) this.buf.b += "null";
                        else this.buf.b += "" + chars.length;
                        this.buf.b += ":";
                        if (chars == null) this.buf.b += "null";
                        else this.buf.b += "" + chars;
                        break;
                    default:
                        if (this.useCache) this.cache.pop();
                        if (v.hxSerialize != null) {
                            this.buf.b += "C";
                            this.serializeString(Type.getClassName(c));
                            if (this.useCache) this.cache.push(v);
                            v.hxSerialize(this);
                            this.buf.b += "g";
                        } else {
                            this.buf.b += "c";
                            this.serializeString(Type.getClassName(c));
                            if (this.useCache) this.cache.push(v);
                            this.serializeFields(v);
                        }
                    }
                    break;
                case 4:
                    if (js_Boot.__instanceof(v, Class)) {
                        var className = Type.getClassName(v);
                        this.buf.b += "A";
                        this.serializeString(className);
                    } else if (js_Boot.__instanceof(v, Enum)) {
                        this.buf.b += "B";
                        this.serializeString(Type.getEnumName(v));
                    } else {
                        if (this.useCache && this.serializeRef(v)) return;
                        this.buf.b += "o";
                        this.serializeFields(v);
                    }
                    break;
                case 7:
                    var e = _g[2];
                    if (this.useCache) {
                        if (this.serializeRef(v)) return;
                        this.cache.pop();
                    }
                    if (this.useEnumIndex) this.buf.b += "j";
                    else this.buf.b += "w";
                    this.serializeString(Type.getEnumName(e));
                    if (this.useEnumIndex) {
                        this.buf.b += ":";
                        this.buf.b += Std.string(v[1]);
                    } else this.serializeString(v[0]);
                    this.buf.b += ":";
                    var l1 = v.length;
                    this.buf.b += Std.string(l1 - 2);
                    var _g11 = 2;
                    while (_g11 < l1) {
                        var i3 = _g11++;
                        this.serialize(v[i3]);
                    }
                    if (this.useCache) this.cache.push(v);
                    break;
                case 5:
                    throw new js__$Boot_HaxeError("Cannot serialize function");
                    break;
                default:
                    throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
                }
            }
        },
        __class__: haxe_Serializer
    };
    var haxe_Timer = function(time_ms) {
        var me = this;
        this.id = setInterval(function() {
            me.run();
        },
        time_ms);
    };
    $hxClasses["haxe.Timer"] = haxe_Timer;
    haxe_Timer.__name__ = ["haxe", "Timer"];
    haxe_Timer.delay = function(f, time_ms) {
        var t = new haxe_Timer(time_ms);
        t.run = function() {
            t.stop();
            f();
        };
        return t;
    };
    haxe_Timer.measure = function(f, pos) {
        var t0 = haxe_Timer.stamp();
        var r = f();
        haxe_Log.trace(haxe_Timer.stamp() - t0 + "s", pos);
        return r;
    };
    haxe_Timer.stamp = function() {
        return new Date().getTime() / 1000;
    };
    haxe_Timer.prototype = {
        stop: function() {
            if (this.id == null) return;
            clearInterval(this.id);
            this.id = null;
        },
        run: function() {},
        __class__: haxe_Timer
    };
    var haxe_Unserializer = function(buf) {
        this.buf = buf;
        this.length = buf.length;
        this.pos = 0;
        this.scache = [];
        this.cache = [];
        var r = haxe_Unserializer.DEFAULT_RESOLVER;
        if (r == null) {
            r = Type;
            haxe_Unserializer.DEFAULT_RESOLVER = r;
        }
        this.setResolver(r);
    };
    $hxClasses["haxe.Unserializer"] = haxe_Unserializer;
    haxe_Unserializer.__name__ = ["haxe", "Unserializer"];
    haxe_Unserializer.initCodes = function() {
        var codes = [];
        var _g1 = 0;
        var _g = haxe_Unserializer.BASE64.length;
        while (_g1 < _g) {
            var i = _g1++;
            codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
        }
        return codes;
    };
    haxe_Unserializer.prototype = {
        setResolver: function(r) {
            if (r == null) this.resolver = {
                resolveClass: function(_) {
                    return null;
                },
                resolveEnum: function(_1) {
                    return null;
                }
            };
            else this.resolver = r;
        },
        get: function(p) {
            return this.buf.charCodeAt(p);
        },
        readDigits: function() {
            var k = 0;
            var s = false;
            var fpos = this.pos;
            while (true) {
                var c = this.buf.charCodeAt(this.pos);
                if (c != c) break;
                if (c == 45) {
                    if (this.pos != fpos) break;
                    s = true;
                    this.pos++;
                    continue;
                }
                if (c < 48 || c > 57) break;
                k = k * 10 + (c - 48);
                this.pos++;
            }
            if (s) k *= -1;
            return k;
        },
        readFloat: function() {
            var p1 = this.pos;
            while (true) {
                var c = this.buf.charCodeAt(this.pos);
                if (c >= 43 && c < 58 || c == 101 || c == 69) this.pos++;
                else break;
            }
            return Std.parseFloat(HxOverrides.substr(this.buf, p1, this.pos - p1));
        },
        unserializeObject: function(o) {
            while (true) {
                if (this.pos >= this.length) throw new js__$Boot_HaxeError("Invalid object");
                if (this.buf.charCodeAt(this.pos) == 103) break;
                var k = this.unserialize();
                if (! (typeof(k) == "string")) throw new js__$Boot_HaxeError("Invalid object key");
                var v = this.unserialize();
                o[k] = v;
            }
            this.pos++;
        },
        unserializeEnum: function(edecl, tag) {
            if (this.get(this.pos++) != 58) throw new js__$Boot_HaxeError("Invalid enum format");
            var nargs = this.readDigits();
            if (nargs == 0) return Type.createEnum(edecl, tag);
            var args = [];
            while (nargs-->0) args.push(this.unserialize());
            return Type.createEnum(edecl, tag, args);
        },
        unserialize: function() {
            var _g = this.get(this.pos++);
            switch (_g) {
            case 110:
                return null;
            case 116:
                return true;
            case 102:
                return false;
            case 122:
                return 0;
            case 105:
                return this.readDigits();
            case 100:
                return this.readFloat();
            case 121:
                var len = this.readDigits();
                if (this.get(this.pos++) != 58 || this.length - this.pos < len) throw new js__$Boot_HaxeError("Invalid string length");
                var s = HxOverrides.substr(this.buf, this.pos, len);
                this.pos += len;
                s = decodeURIComponent(s.split("+").join(" "));
                this.scache.push(s);
                return s;
            case 107:
                return NaN;
            case 109:
                return - Infinity;
            case 112:
                return Infinity;
            case 97:
                var buf = this.buf;
                var a = [];
                this.cache.push(a);
                while (true) {
                    var c = this.buf.charCodeAt(this.pos);
                    if (c == 104) {
                        this.pos++;
                        break;
                    }
                    if (c == 117) {
                        this.pos++;
                        var n = this.readDigits();
                        a[a.length + n - 1] = null;
                    } else a.push(this.unserialize());
                }
                return a;
            case 111:
                var o = {};
                this.cache.push(o);
                this.unserializeObject(o);
                return o;
            case 114:
                var n1 = this.readDigits();
                if (n1 < 0 || n1 >= this.cache.length) throw new js__$Boot_HaxeError("Invalid reference");
                return this.cache[n1];
            case 82:
                var n2 = this.readDigits();
                if (n2 < 0 || n2 >= this.scache.length) throw new js__$Boot_HaxeError("Invalid string reference");
                return this.scache[n2];
            case 120:
                throw new js__$Boot_HaxeError(this.unserialize());
                break;
            case 99:
                var name = this.unserialize();
                var cl = this.resolver.resolveClass(name);
                if (cl == null) throw new js__$Boot_HaxeError("Class not found " + name);
                var o1 = Type.createEmptyInstance(cl);
                this.cache.push(o1);
                this.unserializeObject(o1);
                return o1;
            case 119:
                var name1 = this.unserialize();
                var edecl = this.resolver.resolveEnum(name1);
                if (edecl == null) throw new js__$Boot_HaxeError("Enum not found " + name1);
                var e = this.unserializeEnum(edecl, this.unserialize());
                this.cache.push(e);
                return e;
            case 106:
                var name2 = this.unserialize();
                var edecl1 = this.resolver.resolveEnum(name2);
                if (edecl1 == null) throw new js__$Boot_HaxeError("Enum not found " + name2);
                this.pos++;
                var index = this.readDigits();
                var tag = Type.getEnumConstructs(edecl1)[index];
                if (tag == null) throw new js__$Boot_HaxeError("Unknown enum index " + name2 + "@" + index);
                var e1 = this.unserializeEnum(edecl1, tag);
                this.cache.push(e1);
                return e1;
            case 108:
                var l = new List();
                this.cache.push(l);
                var buf1 = this.buf;
                while (this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
                this.pos++;
                return l;
            case 98:
                var h = new haxe_ds_StringMap();
                this.cache.push(h);
                var buf2 = this.buf;
                while (this.buf.charCodeAt(this.pos) != 104) {
                    var s1 = this.unserialize();
                    h.set(s1, this.unserialize());
                }
                this.pos++;
                return h;
            case 113:
                var h1 = new haxe_ds_IntMap();
                this.cache.push(h1);
                var buf3 = this.buf;
                var c1 = this.get(this.pos++);
                while (c1 == 58) {
                    var i = this.readDigits();
                    h1.set(i, this.unserialize());
                    c1 = this.get(this.pos++);
                }
                if (c1 != 104) throw new js__$Boot_HaxeError("Invalid IntMap format");
                return h1;
            case 77:
                var h2 = new haxe_ds_ObjectMap();
                this.cache.push(h2);
                var buf4 = this.buf;
                while (this.buf.charCodeAt(this.pos) != 104) {
                    var s2 = this.unserialize();
                    h2.set(s2, this.unserialize());
                }
                this.pos++;
                return h2;
            case 118:
                var d;
                if (this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
                    var s3 = HxOverrides.substr(this.buf, this.pos, 19);
                    d = HxOverrides.strDate(s3);
                    this.pos += 19;
                } else {
                    var t = this.readFloat();
                    var d1 = new Date();
                    d1.setTime(t);
                    d = d1;
                }
                this.cache.push(d);
                return d;
            case 115:
                var len1 = this.readDigits();
                var buf5 = this.buf;
                if (this.get(this.pos++) != 58 || this.length - this.pos < len1) throw new js__$Boot_HaxeError("Invalid bytes length");
                var codes = haxe_Unserializer.CODES;
                if (codes == null) {
                    codes = haxe_Unserializer.initCodes();
                    haxe_Unserializer.CODES = codes;
                }
                var i1 = this.pos;
                var rest = len1 & 3;
                var size;
                size = (len1 >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
                var max = i1 + (len1 - rest);
                var bytes = haxe_io_Bytes.alloc(size);
                var bpos = 0;
                while (i1 < max) {
                    var c11 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    var c2 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    bytes.set(bpos++, c11 << 2 | c2 >> 4);
                    var c3 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    bytes.set(bpos++, c2 << 4 | c3 >> 2);
                    var c4 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    bytes.set(bpos++, c3 << 6 | c4);
                }
                if (rest >= 2) {
                    var c12 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    var c21 = codes[StringTools.fastCodeAt(buf5, i1++)];
                    bytes.set(bpos++, c12 << 2 | c21 >> 4);
                    if (rest == 3) {
                        var c31 = codes[StringTools.fastCodeAt(buf5, i1++)];
                        bytes.set(bpos++, c21 << 4 | c31 >> 2);
                    }
                }
                this.pos += len1;
                this.cache.push(bytes);
                return bytes;
            case 67:
                var name3 = this.unserialize();
                var cl1 = this.resolver.resolveClass(name3);
                if (cl1 == null) throw new js__$Boot_HaxeError("Class not found " + name3);
                var o2 = Type.createEmptyInstance(cl1);
                this.cache.push(o2);
                o2.hxUnserialize(this);
                if (this.get(this.pos++) != 103) throw new js__$Boot_HaxeError("Invalid custom data");
                return o2;
            case 65:
                var name4 = this.unserialize();
                var cl2 = this.resolver.resolveClass(name4);
                if (cl2 == null) throw new js__$Boot_HaxeError("Class not found " + name4);
                return cl2;
            case 66:
                var name5 = this.unserialize();
                var e2 = this.resolver.resolveEnum(name5);
                if (e2 == null) throw new js__$Boot_HaxeError("Enum not found " + name5);
                return e2;
            default:
            }
            this.pos--;
            throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
        },
        __class__: haxe_Unserializer
    };
    var haxe_Utf8 = function() {};
    $hxClasses["haxe.Utf8"] = haxe_Utf8;
    haxe_Utf8.__name__ = ["haxe", "Utf8"];
    haxe_Utf8.sub = function(s, pos, len) {
        return HxOverrides.substr(s, pos, len);
    };
    var haxe_io_Bytes = function(data) {
        this.length = data.byteLength;
        this.b = new Uint8Array(data);
        this.b.bufferValue = data;
        data.hxBytes = this;
        data.bytes = this.b;
    };
    $hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
    haxe_io_Bytes.__name__ = ["haxe", "io", "Bytes"];
    haxe_io_Bytes.alloc = function(length) {
        return new haxe_io_Bytes(new ArrayBuffer(length));
    };
    haxe_io_Bytes.ofString = function(s) {
        var a = [];
        var i = 0;
        while (i < s.length) {
            var c = StringTools.fastCodeAt(s, i++);
            if (55296 <= c && c <= 56319) c = c - 55232 << 10 | StringTools.fastCodeAt(s, i++) & 1023;
            if (c <= 127) a.push(c);
            else if (c <= 2047) {
                a.push(192 | c >> 6);
                a.push(128 | c & 63);
            } else if (c <= 65535) {
                a.push(224 | c >> 12);
                a.push(128 | c >> 6 & 63);
                a.push(128 | c & 63);
            } else {
                a.push(240 | c >> 18);
                a.push(128 | c >> 12 & 63);
                a.push(128 | c >> 6 & 63);
                a.push(128 | c & 63);
            }
        }
        return new haxe_io_Bytes(new Uint8Array(a).buffer);
    };
    haxe_io_Bytes.ofData = function(b) {
        var hb = b.hxBytes;
        if (hb != null) return hb;
        return new haxe_io_Bytes(b);
    };
    haxe_io_Bytes.prototype = {
        get: function(pos) {
            return this.b[pos];
        },
        set: function(pos, v) {
            this.b[pos] = v & 255;
        },
        blit: function(pos, src, srcpos, len) {
            if (pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            if (srcpos == 0 && len == src.length) this.b.set(src.b, pos);
            else this.b.set(src.b.subarray(srcpos, srcpos + len), pos);
        },
        getDouble: function(pos) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            return this.data.getFloat64(pos, true);
        },
        getFloat: function(pos) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            return this.data.getFloat32(pos, true);
        },
        setDouble: function(pos, v) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            this.data.setFloat64(pos, v, true);
        },
        setFloat: function(pos, v) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            this.data.setFloat32(pos, v, true);
        },
        setUInt16: function(pos, v) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            this.data.setUint16(pos, v, true);
        },
        setInt32: function(pos, v) {
            if (this.data == null) this.data = new DataView(this.b.buffer, this.b.byteOffset, this.b.byteLength);
            this.data.setInt32(pos, v, true);
        },
        getString: function(pos, len) {
            if (pos < 0 || len < 0 || pos + len > this.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            var s = "";
            var b = this.b;
            var fcc = String.fromCharCode;
            var i = pos;
            var max = pos + len;
            while (i < max) {
                var c = b[i++];
                if (c < 128) {
                    if (c == 0) break;
                    s += fcc(c);
                } else if (c < 224) s += fcc((c & 63) << 6 | b[i++] & 127);
                else if (c < 240) {
                    var c2 = b[i++];
                    s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
                } else {
                    var c21 = b[i++];
                    var c3 = b[i++];
                    var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
                    s += fcc((u >> 10) + 55232);
                    s += fcc(u & 1023 | 56320);
                }
            }
            return s;
        },
        toString: function() {
            return this.getString(0, this.length);
        },
        __class__: haxe_io_Bytes
    };
    var haxe_crypto_Base64 = function() {};
    $hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
    haxe_crypto_Base64.__name__ = ["haxe", "crypto", "Base64"];
    haxe_crypto_Base64.encode = function(bytes, complement) {
        if (complement == null) complement = true;
        var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
        if (complement) {
            var _g = bytes.length % 3;
            switch (_g) {
            case 1:
                str += "==";
                break;
            case 2:
                str += "=";
                break;
            default:
            }
        }
        return str;
    };
    haxe_crypto_Base64.decode = function(str, complement) {
        if (complement == null) complement = true;
        if (complement) while (HxOverrides.cca(str, str.length - 1) == 61) str = HxOverrides.substr(str, 0, -1);
        return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
    };
    var haxe_crypto_BaseCode = function(base) {
        var len = base.length;
        var nbits = 1;
        while (len > 1 << nbits) nbits++;
        if (nbits > 8 || len != 1 << nbits) throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
        this.base = base;
        this.nbits = nbits;
    };
    $hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
    haxe_crypto_BaseCode.__name__ = ["haxe", "crypto", "BaseCode"];
    haxe_crypto_BaseCode.prototype = {
        encodeBytes: function(b) {
            var nbits = this.nbits;
            var base = this.base;
            var size = b.length * 8 / nbits | 0;
            var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
            var buf = 0;
            var curbits = 0;
            var mask = (1 << nbits) - 1;
            var pin = 0;
            var pout = 0;
            while (pout < size) {
                while (curbits < nbits) {
                    curbits += 8;
                    buf <<= 8;
                    buf |= b.get(pin++);
                }
                curbits -= nbits;
                out.set(pout++, base.b[buf >> curbits & mask]);
            }
            if (curbits > 0) out.set(pout++, base.b[buf << nbits - curbits & mask]);
            return out;
        },
        initTable: function() {
            var tbl = [];
            var _g = 0;
            while (_g < 256) {
                var i = _g++;
                tbl[i] = -1;
            }
            var _g1 = 0;
            var _g2 = this.base.length;
            while (_g1 < _g2) {
                var i1 = _g1++;
                tbl[this.base.b[i1]] = i1;
            }
            this.tbl = tbl;
        },
        decodeBytes: function(b) {
            var nbits = this.nbits;
            var base = this.base;
            if (this.tbl == null) this.initTable();
            var tbl = this.tbl;
            var size = b.length * nbits >> 3;
            var out = haxe_io_Bytes.alloc(size);
            var buf = 0;
            var curbits = 0;
            var pin = 0;
            var pout = 0;
            while (pout < size) {
                while (curbits < 8) {
                    curbits += nbits;
                    buf <<= nbits;
                    var i = tbl[b.get(pin++)];
                    if (i == -1) throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
                    buf |= i;
                }
                curbits -= 8;
                out.set(pout++, buf >> curbits & 255);
            }
            return out;
        },
        __class__: haxe_crypto_BaseCode
    };
    var haxe_crypto_Md5 = function() {};
    $hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
    haxe_crypto_Md5.__name__ = ["haxe", "crypto", "Md5"];
    haxe_crypto_Md5.encode = function(s) {
        var m = new haxe_crypto_Md5();
        var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
        return m.hex(h);
    };
    haxe_crypto_Md5.str2blks = function(str) {
        var nblk = (str.length + 8 >> 6) + 1;
        var blks = [];
        var blksSize = nblk * 16;
        var _g = 0;
        while (_g < blksSize) {
            var i1 = _g++;
            blks[i1] = 0;
        }
        var i = 0;
        while (i < str.length) {
            blks[i >> 2] |= HxOverrides.cca(str, i) << (str.length * 8 + i) % 4 * 8;
            i++;
        }
        blks[i >> 2] |= 128 << (str.length * 8 + i) % 4 * 8;
        var l = str.length * 8;
        var k = nblk * 16 - 2;
        blks[k] = l & 255;
        blks[k] |= (l >>> 8 & 255) << 8;
        blks[k] |= (l >>> 16 & 255) << 16;
        blks[k] |= (l >>> 24 & 255) << 24;
        return blks;
    };
    haxe_crypto_Md5.prototype = {
        bitOR: function(a, b) {
            var lsb = a & 1 | b & 1;
            var msb31 = a >>> 1 | b >>> 1;
            return msb31 << 1 | lsb;
        },
        bitXOR: function(a, b) {
            var lsb = a & 1 ^ b & 1;
            var msb31 = a >>> 1 ^ b >>> 1;
            return msb31 << 1 | lsb;
        },
        bitAND: function(a, b) {
            var lsb = a & 1 & (b & 1);
            var msb31 = a >>> 1 & b >>> 1;
            return msb31 << 1 | lsb;
        },
        addme: function(x, y) {
            var lsw = (x & 65535) + (y & 65535);
            var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return msw << 16 | lsw & 65535;
        },
        hex: function(a) {
            var str = "";
            var hex_chr = "0123456789abcdef";
            var _g = 0;
            while (_g < a.length) {
                var num = a[_g]; ++_g;
                var _g1 = 0;
                while (_g1 < 4) {
                    var j = _g1++;
                    str += hex_chr.charAt(num >> j * 8 + 4 & 15) + hex_chr.charAt(num >> j * 8 & 15);
                }
            }
            return str;
        },
        rol: function(num, cnt) {
            return num << cnt | num >>> 32 - cnt;
        },
        cmn: function(q, a, b, x, s, t) {
            return this.addme(this.rol(this.addme(this.addme(a, q), this.addme(x, t)), s), b);
        },
        ff: function(a, b, c, d, x, s, t) {
            return this.cmn(this.bitOR(this.bitAND(b, c), this.bitAND(~b, d)), a, b, x, s, t);
        },
        gg: function(a, b, c, d, x, s, t) {
            return this.cmn(this.bitOR(this.bitAND(b, d), this.bitAND(c, ~d)), a, b, x, s, t);
        },
        hh: function(a, b, c, d, x, s, t) {
            return this.cmn(this.bitXOR(this.bitXOR(b, c), d), a, b, x, s, t);
        },
        ii: function(a, b, c, d, x, s, t) {
            return this.cmn(this.bitXOR(c, this.bitOR(b, ~d)), a, b, x, s, t);
        },
        doEncode: function(x) {
            var a = 1732584193;
            var b = -271733879;
            var c = -1732584194;
            var d = 271733878;
            var step;
            var i = 0;
            while (i < x.length) {
                var olda = a;
                var oldb = b;
                var oldc = c;
                var oldd = d;
                step = 0;
                a = this.ff(a, b, c, d, x[i], 7, -680876936);
                d = this.ff(d, a, b, c, x[i + 1], 12, -389564586);
                c = this.ff(c, d, a, b, x[i + 2], 17, 606105819);
                b = this.ff(b, c, d, a, x[i + 3], 22, -1044525330);
                a = this.ff(a, b, c, d, x[i + 4], 7, -176418897);
                d = this.ff(d, a, b, c, x[i + 5], 12, 1200080426);
                c = this.ff(c, d, a, b, x[i + 6], 17, -1473231341);
                b = this.ff(b, c, d, a, x[i + 7], 22, -45705983);
                a = this.ff(a, b, c, d, x[i + 8], 7, 1770035416);
                d = this.ff(d, a, b, c, x[i + 9], 12, -1958414417);
                c = this.ff(c, d, a, b, x[i + 10], 17, -42063);
                b = this.ff(b, c, d, a, x[i + 11], 22, -1990404162);
                a = this.ff(a, b, c, d, x[i + 12], 7, 1804603682);
                d = this.ff(d, a, b, c, x[i + 13], 12, -40341101);
                c = this.ff(c, d, a, b, x[i + 14], 17, -1502002290);
                b = this.ff(b, c, d, a, x[i + 15], 22, 1236535329);
                a = this.gg(a, b, c, d, x[i + 1], 5, -165796510);
                d = this.gg(d, a, b, c, x[i + 6], 9, -1069501632);
                c = this.gg(c, d, a, b, x[i + 11], 14, 643717713);
                b = this.gg(b, c, d, a, x[i], 20, -373897302);
                a = this.gg(a, b, c, d, x[i + 5], 5, -701558691);
                d = this.gg(d, a, b, c, x[i + 10], 9, 38016083);
                c = this.gg(c, d, a, b, x[i + 15], 14, -660478335);
                b = this.gg(b, c, d, a, x[i + 4], 20, -405537848);
                a = this.gg(a, b, c, d, x[i + 9], 5, 568446438);
                d = this.gg(d, a, b, c, x[i + 14], 9, -1019803690);
                c = this.gg(c, d, a, b, x[i + 3], 14, -187363961);
                b = this.gg(b, c, d, a, x[i + 8], 20, 1163531501);
                a = this.gg(a, b, c, d, x[i + 13], 5, -1444681467);
                d = this.gg(d, a, b, c, x[i + 2], 9, -51403784);
                c = this.gg(c, d, a, b, x[i + 7], 14, 1735328473);
                b = this.gg(b, c, d, a, x[i + 12], 20, -1926607734);
                a = this.hh(a, b, c, d, x[i + 5], 4, -378558);
                d = this.hh(d, a, b, c, x[i + 8], 11, -2022574463);
                c = this.hh(c, d, a, b, x[i + 11], 16, 1839030562);
                b = this.hh(b, c, d, a, x[i + 14], 23, -35309556);
                a = this.hh(a, b, c, d, x[i + 1], 4, -1530992060);
                d = this.hh(d, a, b, c, x[i + 4], 11, 1272893353);
                c = this.hh(c, d, a, b, x[i + 7], 16, -155497632);
                b = this.hh(b, c, d, a, x[i + 10], 23, -1094730640);
                a = this.hh(a, b, c, d, x[i + 13], 4, 681279174);
                d = this.hh(d, a, b, c, x[i], 11, -358537222);
                c = this.hh(c, d, a, b, x[i + 3], 16, -722521979);
                b = this.hh(b, c, d, a, x[i + 6], 23, 76029189);
                a = this.hh(a, b, c, d, x[i + 9], 4, -640364487);
                d = this.hh(d, a, b, c, x[i + 12], 11, -421815835);
                c = this.hh(c, d, a, b, x[i + 15], 16, 530742520);
                b = this.hh(b, c, d, a, x[i + 2], 23, -995338651);
                a = this.ii(a, b, c, d, x[i], 6, -198630844);
                d = this.ii(d, a, b, c, x[i + 7], 10, 1126891415);
                c = this.ii(c, d, a, b, x[i + 14], 15, -1416354905);
                b = this.ii(b, c, d, a, x[i + 5], 21, -57434055);
                a = this.ii(a, b, c, d, x[i + 12], 6, 1700485571);
                d = this.ii(d, a, b, c, x[i + 3], 10, -1894986606);
                c = this.ii(c, d, a, b, x[i + 10], 15, -1051523);
                b = this.ii(b, c, d, a, x[i + 1], 21, -2054922799);
                a = this.ii(a, b, c, d, x[i + 8], 6, 1873313359);
                d = this.ii(d, a, b, c, x[i + 15], 10, -30611744);
                c = this.ii(c, d, a, b, x[i + 6], 15, -1560198380);
                b = this.ii(b, c, d, a, x[i + 13], 21, 1309151649);
                a = this.ii(a, b, c, d, x[i + 4], 6, -145523070);
                d = this.ii(d, a, b, c, x[i + 11], 10, -1120210379);
                c = this.ii(c, d, a, b, x[i + 2], 15, 718787259);
                b = this.ii(b, c, d, a, x[i + 9], 21, -343485551);
                a = this.addme(a, olda);
                b = this.addme(b, oldb);
                c = this.addme(c, oldc);
                d = this.addme(d, oldd);
                i += 16;
            }
            return [a, b, c, d];
        },
        __class__: haxe_crypto_Md5
    };
    var haxe_ds_GenericCell = function(elt, next) {
        this.elt = elt;
        this.next = next;
    };
    $hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
    haxe_ds_GenericCell.__name__ = ["haxe", "ds", "GenericCell"];
    haxe_ds_GenericCell.prototype = {
        __class__: haxe_ds_GenericCell
    };
    var haxe_ds_GenericStack = function() {};
    $hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
    haxe_ds_GenericStack.__name__ = ["haxe", "ds", "GenericStack"];
    haxe_ds_GenericStack.prototype = {
        add: function(item) {
            this.head = new haxe_ds_GenericCell(item, this.head);
        },
        pop: function() {
            var k = this.head;
            if (k == null) return null;
            else {
                this.head = k.next;
                return k.elt;
            }
        },
        __class__: haxe_ds_GenericStack
    };
    var haxe_ds_IntMap = function() {
        this.h = {};
    };
    $hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
    haxe_ds_IntMap.__name__ = ["haxe", "ds", "IntMap"];
    haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
    haxe_ds_IntMap.prototype = {
        set: function(key, value) {
            this.h[key] = value;
        },
        get: function(key) {
            return this.h[key];
        },
        exists: function(key) {
            return this.h.hasOwnProperty(key);
        },
        remove: function(key) {
            if (!this.h.hasOwnProperty(key)) return false;
            delete(this.h[key]);
            return true;
        },
        keys: function() {
            var a = [];
            for (var key in this.h) {
                if (this.h.hasOwnProperty(key)) a.push(key | 0);
            }
            return HxOverrides.iter(a);
        },
        iterator: function() {
            return {
                ref: this.h,
                it: this.keys(),
                hasNext: function() {
                    return this.it.hasNext();
                },
                next: function() {
                    var i = this.it.next();
                    return this.ref[i];
                }
            };
        },
        __class__: haxe_ds_IntMap
    };
    var haxe_ds_ObjectMap = function() {
        this.h = {};
        this.h.__keys__ = {};
    };
    $hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
    haxe_ds_ObjectMap.__name__ = ["haxe", "ds", "ObjectMap"];
    haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
    haxe_ds_ObjectMap.prototype = {
        set: function(key, value) {
            var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
            this.h[id] = value;
            this.h.__keys__[id] = key;
        },
        get: function(key) {
            return this.h[key.__id__];
        },
        exists: function(key) {
            return this.h.__keys__[key.__id__] != null;
        },
        remove: function(key) {
            var id = key.__id__;
            if (this.h.__keys__[id] == null) return false;
            delete(this.h[id]);
            delete(this.h.__keys__[id]);
            return true;
        },
        keys: function() {
            var a = [];
            for (var key in this.h.__keys__) {
                if (this.h.hasOwnProperty(key)) a.push(this.h.__keys__[key]);
            }
            return HxOverrides.iter(a);
        },
        __class__: haxe_ds_ObjectMap
    };
    var haxe_ds__$StringMap_StringMapIterator = function(map, keys) {
        this.map = map;
        this.keys = keys;
        this.index = 0;
        this.count = keys.length;
    };
    $hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
    haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe", "ds", "_StringMap", "StringMapIterator"];
    haxe_ds__$StringMap_StringMapIterator.prototype = {
        hasNext: function() {
            return this.index < this.count;
        },
        next: function() {
            return this.map.get(this.keys[this.index++]);
        },
        __class__: haxe_ds__$StringMap_StringMapIterator
    };
    var haxe_ds_StringMap = function() {
        this.h = {};
    };
    $hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
    haxe_ds_StringMap.__name__ = ["haxe", "ds", "StringMap"];
    haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
    haxe_ds_StringMap.prototype = {
        set: function(key, value) {
            if (__map_reserved[key] != null) this.setReserved(key, value);
            else this.h[key] = value;
        },
        get: function(key) {
            if (__map_reserved[key] != null) return this.getReserved(key);
            return this.h[key];
        },
        exists: function(key) {
            if (__map_reserved[key] != null) return this.existsReserved(key);
            return this.h.hasOwnProperty(key);
        },
        setReserved: function(key, value) {
            if (this.rh == null) this.rh = {};
            this.rh["$" + key] = value;
        },
        getReserved: function(key) {
            if (this.rh == null) return null;
            else return this.rh["$" + key];
        },
        existsReserved: function(key) {
            if (this.rh == null) return false;
            return this.rh.hasOwnProperty("$" + key);
        },
        remove: function(key) {
            if (__map_reserved[key] != null) {
                key = "$" + key;
                if (this.rh == null || !this.rh.hasOwnProperty(key)) return false;
                delete(this.rh[key]);
                return true;
            } else {
                if (!this.h.hasOwnProperty(key)) return false;
                delete(this.h[key]);
                return true;
            }
        },
        keys: function() {
            var _this = this.arrayKeys();
            return HxOverrides.iter(_this);
        },
        arrayKeys: function() {
            var out = [];
            for (var key in this.h) {
                if (this.h.hasOwnProperty(key)) out.push(key);
            }
            if (this.rh != null) {
                for (var key in this.rh) {
                    if (key.charCodeAt(0) == 36) out.push(key.substr(1));
                }
            }
            return out;
        },
        iterator: function() {
            return new haxe_ds__$StringMap_StringMapIterator(this, this.arrayKeys());
        },
        __class__: haxe_ds_StringMap
    };
    var haxe_ds__$Vector_Vector_$Impl_$ = {};
    $hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
    haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe", "ds", "_Vector", "Vector_Impl_"];
    haxe_ds__$Vector_Vector_$Impl_$.blit = function(src, srcPos, dest, destPos, len) {
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            dest[destPos + i] = src[srcPos + i];
        }
    };
    haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
        var a = [];
        var len = this1.length;
        var _g = 0;
        while (_g < len) {
            var i = _g++;
            a[i] = this1[i];
        }
        return a;
    };
    var haxe_io_BytesBuffer = function() {
        this.b = [];
    };
    $hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
    haxe_io_BytesBuffer.__name__ = ["haxe", "io", "BytesBuffer"];
    haxe_io_BytesBuffer.prototype = {
        addBytes: function(src, pos, len) {
            if (pos < 0 || len < 0 || pos + len > src.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            var b1 = this.b;
            var b2 = src.b;
            var _g1 = pos;
            var _g = pos + len;
            while (_g1 < _g) {
                var i = _g1++;
                this.b.push(b2[i]);
            }
        },
        getBytes: function() {
            var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
            this.b = null;
            return bytes;
        },
        __class__: haxe_io_BytesBuffer
    };
    var haxe_io_Input = function() {};
    $hxClasses["haxe.io.Input"] = haxe_io_Input;
    haxe_io_Input.__name__ = ["haxe", "io", "Input"];
    haxe_io_Input.prototype = {
        readByte: function() {
            throw new js__$Boot_HaxeError("Not implemented");
        },
        readBytes: function(s, pos, len) {
            var k = len;
            var b = s.b;
            if (pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            while (k > 0) {
                b[pos] = this.readByte();
                pos++;
                k--;
            }
            return len;
        },
        close: function() {},
        readAll: function(bufsize) {
            if (bufsize == null) bufsize = 16384;
            var buf = haxe_io_Bytes.alloc(bufsize);
            var total = new haxe_io_BytesBuffer();
            try {
                while (true) {
                    var len = this.readBytes(buf, 0, bufsize);
                    if (len == 0) throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
                    total.addBytes(buf, 0, len);
                }
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                if (js_Boot.__instanceof(e, haxe_io_Eof)) {} else throw (e);
            }
            return total.getBytes();
        },
        readFullBytes: function(s, pos, len) {
            while (len > 0) {
                var k = this.readBytes(s, pos, len);
                pos += k;
                len -= k;
            }
        },
        readInt16: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            var n;
            if (this.bigEndian) n = ch2 | ch1 << 8;
            else n = ch1 | ch2 << 8;
            if ((n & 32768) != 0) return n - 65536;
            return n;
        },
        readUInt16: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            if (this.bigEndian) return ch2 | ch1 << 8;
            else return ch1 | ch2 << 8;
        },
        readUInt24: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            var ch3 = this.readByte();
            if (this.bigEndian) return ch3 | ch2 << 8 | ch1 << 16;
            else return ch1 | ch2 << 8 | ch3 << 16;
        },
        readInt32: function() {
            var ch1 = this.readByte();
            var ch2 = this.readByte();
            var ch3 = this.readByte();
            var ch4 = this.readByte();
            if (this.bigEndian) return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
            else return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
        },
        readString: function(len) {
            var b = haxe_io_Bytes.alloc(len);
            this.readFullBytes(b, 0, len);
            return b.toString();
        },
        __class__: haxe_io_Input
    };
    var haxe_io_BytesInput = function(b, pos, len) {
        if (pos == null) pos = 0;
        if (len == null) len = b.length - pos;
        if (pos < 0 || len < 0 || pos + len > b.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
        this.b = b.b;
        this.pos = pos;
        this.len = len;
        this.totlen = len;
    };
    $hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
    haxe_io_BytesInput.__name__ = ["haxe", "io", "BytesInput"];
    haxe_io_BytesInput.__super__ = haxe_io_Input;
    haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype, {
        readByte: function() {
            if (this.len == 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
            this.len--;
            return this.b[this.pos++];
        },
        readBytes: function(buf, pos, len) {
            if (pos < 0 || len < 0 || pos + len > buf.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            if (this.len == 0 && len > 0) throw new js__$Boot_HaxeError(new haxe_io_Eof());
            if (this.len < len) len = this.len;
            var b1 = this.b;
            var b2 = buf.b;
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                b2[pos + i] = b1[this.pos + i];
            }
            this.pos += len;
            this.len -= len;
            return len;
        },
        __class__: haxe_io_BytesInput
    });
    var haxe_io_Output = function() {};
    $hxClasses["haxe.io.Output"] = haxe_io_Output;
    haxe_io_Output.__name__ = ["haxe", "io", "Output"];
    haxe_io_Output.prototype = {
        writeByte: function(c) {
            throw new js__$Boot_HaxeError("Not implemented");
        },
        writeBytes: function(s, pos, len) {
            var k = len;
            var b = s.b.bufferValue;
            if (pos < 0 || len < 0 || pos + len > s.length) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
            while (k > 0) {
                this.writeByte(b[pos]);
                pos++;
                k--;
            }
            return len;
        },
        flush: function() {},
        close: function() {},
        writeFullBytes: function(s, pos, len) {
            while (len > 0) {
                var k = this.writeBytes(s, pos, len);
                pos += k;
                len -= k;
            }
        },
        writeInt16: function(x) {
            if (x < -32768 || x >= 32768) throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
            this.writeUInt16(x & 65535);
        },
        writeUInt16: function(x) {
            if (x < 0 || x >= 65536) throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
            if (this.bigEndian) {
                this.writeByte(x >> 8);
                this.writeByte(x & 255);
            } else {
                this.writeByte(x & 255);
                this.writeByte(x >> 8);
            }
        },
        writeUInt24: function(x) {
            if (x < 0 || x >= 16777216) throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
            if (this.bigEndian) {
                this.writeByte(x >> 16);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x & 255);
            } else {
                this.writeByte(x & 255);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x >> 16);
            }
        },
        writeInt32: function(x) {
            if (this.bigEndian) {
                this.writeByte(x >>> 24);
                this.writeByte(x >> 16 & 255);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x & 255);
            } else {
                this.writeByte(x & 255);
                this.writeByte(x >> 8 & 255);
                this.writeByte(x >> 16 & 255);
                this.writeByte(x >>> 24);
            }
        },
        __class__: haxe_io_Output
    };
    var haxe_io_BytesOutput = function() {
        this.b = new haxe_io_BytesBuffer();
    };
    $hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
    haxe_io_BytesOutput.__name__ = ["haxe", "io", "BytesOutput"];
    haxe_io_BytesOutput.__super__ = haxe_io_Output;
    haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype, {
        writeByte: function(c) {
            this.b.b.push(c);
        },
        writeBytes: function(buf, pos, len) {
            this.b.addBytes(buf, pos, len);
            return len;
        },
        getBytes: function() {
            return this.b.getBytes();
        },
        __class__: haxe_io_BytesOutput
    });
    var haxe_io_Eof = function() {};
    $hxClasses["haxe.io.Eof"] = haxe_io_Eof;
    haxe_io_Eof.__name__ = ["haxe", "io", "Eof"];
    haxe_io_Eof.prototype = {
        toString: function() {
            return "Eof";
        },
        __class__: haxe_io_Eof
    };
    var haxe_io_Error = $hxClasses["haxe.io.Error"] = {
        __ename__: ["haxe", "io", "Error"],
        __constructs__: ["Blocked", "Overflow", "OutsideBounds", "Custom"]
    };
    haxe_io_Error.Blocked = ["Blocked", 0];
    haxe_io_Error.Blocked.toString = $estr;
    haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
    haxe_io_Error.Overflow = ["Overflow", 1];
    haxe_io_Error.Overflow.toString = $estr;
    haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
    haxe_io_Error.OutsideBounds = ["OutsideBounds", 2];
    haxe_io_Error.OutsideBounds.toString = $estr;
    haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
    haxe_io_Error.Custom = function(e) {
        var $x = ["Custom", 3, e];
        $x.__enum__ = haxe_io_Error;
        $x.toString = $estr;
        return $x;
    };
    var haxe_io_FPHelper = function() {};
    $hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
    haxe_io_FPHelper.__name__ = ["haxe", "io", "FPHelper"];
    haxe_io_FPHelper.i32ToFloat = function(i) {
        var sign = 1 - (i >>> 31 << 1);
        var exp = i >>> 23 & 255;
        var sig = i & 8388607;
        if (sig == 0 && exp == 0) return 0.0;
        return sign * (1 + Math.pow(2, -23) * sig) * Math.pow(2, exp - 127);
    };
    haxe_io_FPHelper.floatToI32 = function(f) {
        if (f == 0) return 0;
        var af;
        if (f < 0) af = -f;
        else af = f;
        var exp = Math.floor(Math.log(af) / 0.6931471805599453);
        if (exp < -127) exp = -127;
        else if (exp > 128) exp = 128;
        var sig = Math.round((af / Math.pow(2, exp) - 1) * 8388608) & 8388607;
        return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
    };
    haxe_io_FPHelper.i64ToDouble = function(low, high) {
        var sign = 1 - (high >>> 31 << 1);
        var exp = (high >> 20 & 2047) - 1023;
        var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
        if (sig == 0 && exp == -1023) return 0.0;
        return sign * (1.0 + Math.pow(2, -52) * sig) * Math.pow(2, exp);
    };
    haxe_io_FPHelper.doubleToI64 = function(v) {
        var i64 = haxe_io_FPHelper.i64tmp;
        if (v == 0) {
            i64.low = 0;
            i64.high = 0;
        } else {
            var av;
            if (v < 0) av = -v;
            else av = v;
            var exp = Math.floor(Math.log(av) / 0.6931471805599453);
            var sig;
            var v1 = (av / Math.pow(2, exp) - 1) * 4503599627370496.;
            sig = Math.round(v1);
            var sig_l = sig | 0;
            var sig_h = sig / 4294967296.0 | 0;
            i64.low = sig_l;
            i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
        }
        return i64;
    };
    var haxe_io_Path = function(path) {
        switch (path) {
        case ".":
        case "..":
            this.dir = path;
            this.file = "";
            return;
        }
        var c1 = path.lastIndexOf("/");
        var c2 = path.lastIndexOf("\\");
        if (c1 < c2) {
            this.dir = HxOverrides.substr(path, 0, c2);
            path = HxOverrides.substr(path, c2 + 1, null);
            this.backslash = true;
        } else if (c2 < c1) {
            this.dir = HxOverrides.substr(path, 0, c1);
            path = HxOverrides.substr(path, c1 + 1, null);
        } else this.dir = null;
        var cp = path.lastIndexOf(".");
        if (cp != -1) {
            this.ext = HxOverrides.substr(path, cp + 1, null);
            this.file = HxOverrides.substr(path, 0, cp);
        } else {
            this.ext = null;
            this.file = path;
        }
    };
    $hxClasses["haxe.io.Path"] = haxe_io_Path;
    haxe_io_Path.__name__ = ["haxe", "io", "Path"];
    haxe_io_Path.withoutExtension = function(path) {
        var s = new haxe_io_Path(path);
        s.ext = null;
        return s.toString();
    };
    haxe_io_Path.prototype = {
        toString: function() {
            return (this.dir == null ? "": this.dir + (this.backslash ? "\\": "/")) + this.file + (this.ext == null ? "": "." + this.ext);
        },
        __class__: haxe_io_Path
    };
    var haxe_io_StringInput = function(s) {
        haxe_io_BytesInput.call(this, haxe_io_Bytes.ofString(s));
    };
    $hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
    haxe_io_StringInput.__name__ = ["haxe", "io", "StringInput"];
    haxe_io_StringInput.__super__ = haxe_io_BytesInput;
    haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype, {
        __class__: haxe_io_StringInput
    });
    var haxe_xml_Parser = function() {};
    $hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
    haxe_xml_Parser.__name__ = ["haxe", "xml", "Parser"];
    haxe_xml_Parser.parse = function(str, strict) {
        if (strict == null) strict = false;
        var doc = Xml.createDocument();
        haxe_xml_Parser.doParse(str, strict, 0, doc);
        return doc;
    };
    haxe_xml_Parser.doParse = function(str, strict, p, parent) {
        if (p == null) p = 0;
        var xml = null;
        var state = 1;
        var next = 1;
        var aname = null;
        var start = 0;
        var nsubs = 0;
        var nbrackets = 0;
        var c = str.charCodeAt(p);
        var buf = new StringBuf();
        var escapeNext = 1;
        var attrValQuote = -1;
        while (! (c != c)) {
            switch (state) {
            case 0:
                switch (c) {
                case 10:
                case 13:
                case 9:
                case 32:
                    break;
                default:
                    state = next;
                    continue;
                }
                break;
            case 1:
                switch (c) {
                case 60:
                    state = 0;
                    next = 2;
                    break;
                default:
                    start = p;
                    state = 13;
                    continue;
                }
                break;
            case 13:
                if (c == 60) {
                    buf.addSub(str, start, p - start);
                    var child = Xml.createPCData(buf.b);
                    buf = new StringBuf();
                    parent.addChild(child);
                    nsubs++;
                    state = 0;
                    next = 2;
                } else if (c == 38) {
                    buf.addSub(str, start, p - start);
                    state = 18;
                    escapeNext = 13;
                    start = p + 1;
                }
                break;
            case 17:
                if (c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
                    var child1 = Xml.createCData(HxOverrides.substr(str, start, p - start));
                    parent.addChild(child1);
                    nsubs++;
                    p += 2;
                    state = 1;
                }
                break;
            case 2:
                switch (c) {
                case 33:
                    if (str.charCodeAt(p + 1) == 91) {
                        p += 2;
                        if (HxOverrides.substr(str, p, 6).toUpperCase() != "CDATA[") throw new js__$Boot_HaxeError("Expected <![CDATA[");
                        p += 5;
                        state = 17;
                        start = p + 1;
                    } else if (str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
                        if (HxOverrides.substr(str, p + 2, 6).toUpperCase() != "OCTYPE") throw new js__$Boot_HaxeError("Expected <!DOCTYPE");
                        p += 8;
                        state = 16;
                        start = p + 1;
                    } else if (str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) throw new js__$Boot_HaxeError("Expected <!--");
                    else {
                        p += 2;
                        state = 15;
                        start = p + 1;
                    }
                    break;
                case 63:
                    state = 14;
                    start = p;
                    break;
                case 47:
                    if (parent == null) throw new js__$Boot_HaxeError("Expected node name");
                    start = p + 1;
                    state = 0;
                    next = 10;
                    break;
                default:
                    state = 3;
                    start = p;
                    continue;
                }
                break;
            case 3:
                if (! (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                    if (p == start) throw new js__$Boot_HaxeError("Expected node name");
                    xml = Xml.createElement(HxOverrides.substr(str, start, p - start));
                    parent.addChild(xml);
                    nsubs++;
                    state = 0;
                    next = 4;
                    continue;
                }
                break;
            case 4:
                switch (c) {
                case 47:
                    state = 11;
                    break;
                case 62:
                    state = 9;
                    break;
                default:
                    state = 5;
                    start = p;
                    continue;
                }
                break;
            case 5:
                if (! (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                    var tmp;
                    if (start == p) throw new js__$Boot_HaxeError("Expected attribute name");
                    tmp = HxOverrides.substr(str, start, p - start);
                    aname = tmp;
                    if (xml.exists(aname)) throw new js__$Boot_HaxeError("Duplicate attribute");
                    state = 0;
                    next = 6;
                    continue;
                }
                break;
            case 6:
                switch (c) {
                case 61:
                    state = 0;
                    next = 7;
                    break;
                default:
                    throw new js__$Boot_HaxeError("Expected =");
                }
                break;
            case 7:
                switch (c) {
                case 34:
                case 39:
                    buf = new StringBuf();
                    state = 8;
                    start = p + 1;
                    attrValQuote = c;
                    break;
                default:
                    throw new js__$Boot_HaxeError("Expected \"");
                }
                break;
            case 8:
                switch (c) {
                case 38:
                    buf.addSub(str, start, p - start);
                    state = 18;
                    escapeNext = 8;
                    start = p + 1;
                    break;
                case 62:
                    if (strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value");
                    else if (c == attrValQuote) {
                        buf.addSub(str, start, p - start);
                        var val = buf.b;
                        buf = new StringBuf();
                        xml.set(aname, val);
                        state = 0;
                        next = 4;
                    }
                    break;
                case 60:
                    if (strict) throw new js__$Boot_HaxeError("Invalid unescaped " + String.fromCharCode(c) + " in attribute value");
                    else if (c == attrValQuote) {
                        buf.addSub(str, start, p - start);
                        var val1 = buf.b;
                        buf = new StringBuf();
                        xml.set(aname, val1);
                        state = 0;
                        next = 4;
                    }
                    break;
                default:
                    if (c == attrValQuote) {
                        buf.addSub(str, start, p - start);
                        var val2 = buf.b;
                        buf = new StringBuf();
                        xml.set(aname, val2);
                        state = 0;
                        next = 4;
                    }
                }
                break;
            case 9:
                p = haxe_xml_Parser.doParse(str, strict, p, xml);
                start = p;
                state = 1;
                break;
            case 11:
                switch (c) {
                case 62:
                    state = 1;
                    break;
                default:
                    throw new js__$Boot_HaxeError("Expected >");
                }
                break;
            case 12:
                switch (c) {
                case 62:
                    if (nsubs == 0) parent.addChild(Xml.createPCData(""));
                    return p;
                default:
                    throw new js__$Boot_HaxeError("Expected >");
                }
                break;
            case 10:
                if (! (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
                    if (start == p) throw new js__$Boot_HaxeError("Expected node name");
                    var v = HxOverrides.substr(str, start, p - start);
                    if (v != (function($this) {
                        var $r;
                        if (parent.nodeType != Xml.Element) throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
                        $r = parent.nodeName;
                        return $r;
                    } (this))) throw new js__$Boot_HaxeError("Expected </" + (function($this) {
                        var $r;
                        if (parent.nodeType != Xml.Element) throw "Bad node type, expected Element but found " + parent.nodeType;
                        $r = parent.nodeName;
                        return $r;
                    } (this)) + ">");
                    state = 0;
                    next = 12;
                    continue;
                }
                break;
            case 15:
                if (c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
                    var xml1 = Xml.createComment(HxOverrides.substr(str, start, p - start));
                    parent.addChild(xml1);
                    nsubs++;
                    p += 2;
                    state = 1;
                }
                break;
            case 16:
                if (c == 91) nbrackets++;
                else if (c == 93) nbrackets--;
                else if (c == 62 && nbrackets == 0) {
                    var xml2 = Xml.createDocType(HxOverrides.substr(str, start, p - start));
                    parent.addChild(xml2);
                    nsubs++;
                    state = 1;
                }
                break;
            case 14:
                if (c == 63 && str.charCodeAt(p + 1) == 62) {
                    p++;
                    var str1 = HxOverrides.substr(str, start + 1, p - start - 2);
                    var xml3 = Xml.createProcessingInstruction(str1);
                    parent.addChild(xml3);
                    nsubs++;
                    state = 1;
                }
                break;
            case 18:
                if (c == 59) {
                    var s = HxOverrides.substr(str, start, p - start);
                    if (s.charCodeAt(0) == 35) {
                        var c1;
                        if (s.charCodeAt(1) == 120) c1 = Std.parseInt("0" + HxOverrides.substr(s, 1, s.length - 1));
                        else c1 = Std.parseInt(HxOverrides.substr(s, 1, s.length - 1));
                        buf.b += String.fromCharCode(c1);
                    } else if (!haxe_xml_Parser.escapes.exists(s)) {
                        if (strict) throw new js__$Boot_HaxeError("Undefined entity: " + s);
                        buf.b += Std.string("&" + s + ";");
                    } else buf.add(haxe_xml_Parser.escapes.get(s));
                    start = p + 1;
                    state = escapeNext;
                } else if (! (c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
                    if (strict) throw new js__$Boot_HaxeError("Invalid character in entity: " + String.fromCharCode(c));
                    buf.b += "&";
                    buf.addSub(str, start, p - start);
                    p--;
                    start = p + 1;
                    state = escapeNext;
                }
                break;
            }
            c = StringTools.fastCodeAt(str, ++p);
        }
        if (state == 1) {
            start = p;
            state = 13;
        }
        if (state == 13) {
            if (p != start || nsubs == 0) {
                buf.addSub(str, start, p - start);
                var xml4 = Xml.createPCData(buf.b);
                parent.addChild(xml4);
                nsubs++;
            }
            return p;
        }
        if (!strict && state == 18 && escapeNext == 13) {
            buf.b += "&";
            buf.addSub(str, start, p - start);
            var xml5 = Xml.createPCData(buf.b);
            parent.addChild(xml5);
            nsubs++;
            return p;
        }
        throw new js__$Boot_HaxeError("Unexpected end");
    };
    var hscript_Const = $hxClasses["hscript.Const"] = {
        __ename__: ["hscript", "Const"],
        __constructs__: ["CInt", "CFloat", "CString"]
    };
    hscript_Const.CInt = function(v) {
        var $x = ["CInt", 0, v];
        $x.__enum__ = hscript_Const;
        $x.toString = $estr;
        return $x;
    };
    hscript_Const.CFloat = function(f) {
        var $x = ["CFloat", 1, f];
        $x.__enum__ = hscript_Const;
        $x.toString = $estr;
        return $x;
    };
    hscript_Const.CString = function(s) {
        var $x = ["CString", 2, s];
        $x.__enum__ = hscript_Const;
        $x.toString = $estr;
        return $x;
    };
    var hscript_Expr = $hxClasses["hscript.Expr"] = {
        __ename__: ["hscript", "Expr"],
        __constructs__: ["EConst", "EIdent", "EVar", "EParent", "EBlock", "EField", "EBinop", "EUnop", "ECall", "EIf", "EWhile", "EFor", "EBreak", "EContinue", "EFunction", "EReturn", "EArray", "EArrayDecl", "ENew", "EThrow", "ETry", "EObject", "ETernary", "ESwitch"]
    };
    hscript_Expr.EConst = function(c) {
        var $x = ["EConst", 0, c];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EIdent = function(v) {
        var $x = ["EIdent", 1, v];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EVar = function(n, t, e) {
        var $x = ["EVar", 2, n, t, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EParent = function(e) {
        var $x = ["EParent", 3, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EBlock = function(e) {
        var $x = ["EBlock", 4, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EField = function(e, f) {
        var $x = ["EField", 5, e, f];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EBinop = function(op, e1, e2) {
        var $x = ["EBinop", 6, op, e1, e2];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EUnop = function(op, prefix, e) {
        var $x = ["EUnop", 7, op, prefix, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.ECall = function(e, params) {
        var $x = ["ECall", 8, e, params];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EIf = function(cond, e1, e2) {
        var $x = ["EIf", 9, cond, e1, e2];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EWhile = function(cond, e) {
        var $x = ["EWhile", 10, cond, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EFor = function(v, it, e) {
        var $x = ["EFor", 11, v, it, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EBreak = ["EBreak", 12];
    hscript_Expr.EBreak.toString = $estr;
    hscript_Expr.EBreak.__enum__ = hscript_Expr;
    hscript_Expr.EContinue = ["EContinue", 13];
    hscript_Expr.EContinue.toString = $estr;
    hscript_Expr.EContinue.__enum__ = hscript_Expr;
    hscript_Expr.EFunction = function(args, e, name, ret) {
        var $x = ["EFunction", 14, args, e, name, ret];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EReturn = function(e) {
        var $x = ["EReturn", 15, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EArray = function(e, index) {
        var $x = ["EArray", 16, e, index];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EArrayDecl = function(e) {
        var $x = ["EArrayDecl", 17, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.ENew = function(cl, params) {
        var $x = ["ENew", 18, cl, params];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EThrow = function(e) {
        var $x = ["EThrow", 19, e];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.ETry = function(e, v, t, ecatch) {
        var $x = ["ETry", 20, e, v, t, ecatch];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.EObject = function(fl) {
        var $x = ["EObject", 21, fl];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.ETernary = function(cond, e1, e2) {
        var $x = ["ETernary", 22, cond, e1, e2];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    hscript_Expr.ESwitch = function(e, cases, defaultExpr) {
        var $x = ["ESwitch", 23, e, cases, defaultExpr];
        $x.__enum__ = hscript_Expr;
        $x.toString = $estr;
        return $x;
    };
    var hscript_CType = $hxClasses["hscript.CType"] = {
        __ename__: ["hscript", "CType"],
        __constructs__: ["CTPath", "CTFun", "CTAnon", "CTParent"]
    };
    hscript_CType.CTPath = function(path, params) {
        var $x = ["CTPath", 0, path, params];
        $x.__enum__ = hscript_CType;
        $x.toString = $estr;
        return $x;
    };
    hscript_CType.CTFun = function(args, ret) {
        var $x = ["CTFun", 1, args, ret];
        $x.__enum__ = hscript_CType;
        $x.toString = $estr;
        return $x;
    };
    hscript_CType.CTAnon = function(fields) {
        var $x = ["CTAnon", 2, fields];
        $x.__enum__ = hscript_CType;
        $x.toString = $estr;
        return $x;
    };
    hscript_CType.CTParent = function(t) {
        var $x = ["CTParent", 3, t];
        $x.__enum__ = hscript_CType;
        $x.toString = $estr;
        return $x;
    };
    var hscript_Error = $hxClasses["hscript.Error"] = {
        __ename__: ["hscript", "Error"],
        __constructs__: ["EInvalidChar", "EUnexpected", "EUnterminatedString", "EUnterminatedComment", "EUnknownVariable", "EInvalidIterator", "EInvalidOp", "EInvalidAccess"]
    };
    hscript_Error.EInvalidChar = function(c) {
        var $x = ["EInvalidChar", 0, c];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    hscript_Error.EUnexpected = function(s) {
        var $x = ["EUnexpected", 1, s];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    hscript_Error.EUnterminatedString = ["EUnterminatedString", 2];
    hscript_Error.EUnterminatedString.toString = $estr;
    hscript_Error.EUnterminatedString.__enum__ = hscript_Error;
    hscript_Error.EUnterminatedComment = ["EUnterminatedComment", 3];
    hscript_Error.EUnterminatedComment.toString = $estr;
    hscript_Error.EUnterminatedComment.__enum__ = hscript_Error;
    hscript_Error.EUnknownVariable = function(v) {
        var $x = ["EUnknownVariable", 4, v];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    hscript_Error.EInvalidIterator = function(v) {
        var $x = ["EInvalidIterator", 5, v];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    hscript_Error.EInvalidOp = function(op) {
        var $x = ["EInvalidOp", 6, op];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    hscript_Error.EInvalidAccess = function(f) {
        var $x = ["EInvalidAccess", 7, f];
        $x.__enum__ = hscript_Error;
        $x.toString = $estr;
        return $x;
    };
    var hscript__$Interp_Stop = $hxClasses["hscript._Interp.Stop"] = {
        __ename__: ["hscript", "_Interp", "Stop"],
        __constructs__: ["SBreak", "SContinue", "SReturn"]
    };
    hscript__$Interp_Stop.SBreak = ["SBreak", 0];
    hscript__$Interp_Stop.SBreak.toString = $estr;
    hscript__$Interp_Stop.SBreak.__enum__ = hscript__$Interp_Stop;
    hscript__$Interp_Stop.SContinue = ["SContinue", 1];
    hscript__$Interp_Stop.SContinue.toString = $estr;
    hscript__$Interp_Stop.SContinue.__enum__ = hscript__$Interp_Stop;
    hscript__$Interp_Stop.SReturn = function(v) {
        var $x = ["SReturn", 2, v];
        $x.__enum__ = hscript__$Interp_Stop;
        $x.toString = $estr;
        return $x;
    };
    var hscript_Interp = function(v) {
        if (v == null) {
            this.variables = new haxe_ds_StringMap();
            this.variables.set("null", null);
            this.variables.set("true", true);
            this.variables.set("false", false);
            this.variables.set("trace",
            function(e) {
                haxe_Log.trace(Std.string(e), {
                    fileName: "hscript",
                    lineNumber: 0
                });
            });
        } else this.variables = v;
        this.initOps();
    };
    $hxClasses["hscript.Interp"] = hscript_Interp;
    hscript_Interp.__name__ = ["hscript", "Interp"];
    hscript_Interp.prototype = {
        initOps: function() {
            var me = this;
            this.binops = new haxe_ds_StringMap();
            this.binops.set("+",
            function(e1, e2) {
                return me.expr(e1) + me.expr(e2);
            });
            this.binops.set("-",
            function(e11, e21) {
                return me.expr(e11) - me.expr(e21);
            });
            this.binops.set("*",
            function(e12, e22) {
                return me.expr(e12) * me.expr(e22);
            });
            this.binops.set("/",
            function(e13, e23) {
                return me.expr(e13) / me.expr(e23);
            });
            this.binops.set("%",
            function(e14, e24) {
                return me.expr(e14) % me.expr(e24);
            });
            this.binops.set("&",
            function(e15, e25) {
                return me.expr(e15) & me.expr(e25);
            });
            this.binops.set("|",
            function(e16, e26) {
                return me.expr(e16) | me.expr(e26);
            });
            this.binops.set("^",
            function(e17, e27) {
                return me.expr(e17) ^ me.expr(e27);
            });
            this.binops.set("<<",
            function(e18, e28) {
                return me.expr(e18) << me.expr(e28);
            });
            this.binops.set(">>",
            function(e19, e29) {
                return me.expr(e19) >> me.expr(e29);
            });
            this.binops.set(">>>",
            function(e110, e210) {
                return me.expr(e110) >>> me.expr(e210);
            });
            this.binops.set("==",
            function(e111, e211) {
                return me.expr(e111) == me.expr(e211);
            });
            this.binops.set("!=",
            function(e112, e212) {
                return me.expr(e112) != me.expr(e212);
            });
            this.binops.set(">=",
            function(e113, e213) {
                return me.expr(e113) >= me.expr(e213);
            });
            this.binops.set("<=",
            function(e114, e214) {
                return me.expr(e114) <= me.expr(e214);
            });
            this.binops.set(">",
            function(e115, e215) {
                return me.expr(e115) > me.expr(e215);
            });
            this.binops.set("<",
            function(e116, e216) {
                return me.expr(e116) < me.expr(e216);
            });
            this.binops.set("||",
            function(e117, e217) {
                return me.expr(e117) == true || me.expr(e217) == true;
            });
            this.binops.set("&&",
            function(e118, e218) {
                return me.expr(e118) == true && me.expr(e218) == true;
            });
            this.binops.set("=", $bind(this, this.assign));
            this.binops.set("...",
            function(e119, e219) {
                return new IntIterator(me.expr(e119), me.expr(e219));
            });
            this.assignOp("+=",
            function(v1, v2) {
                return v1 + v2;
            });
            this.assignOp("-=",
            function(v11, v21) {
                return v11 - v21;
            });
            this.assignOp("*=",
            function(v12, v22) {
                return v12 * v22;
            });
            this.assignOp("/=",
            function(v13, v23) {
                return v13 / v23;
            });
            this.assignOp("%=",
            function(v14, v24) {
                return v14 % v24;
            });
            this.assignOp("&=",
            function(v15, v25) {
                return v15 & v25;
            });
            this.assignOp("|=",
            function(v16, v26) {
                return v16 | v26;
            });
            this.assignOp("^=",
            function(v17, v27) {
                return v17 ^ v27;
            });
            this.assignOp("<<=",
            function(v18, v28) {
                return v18 << v28;
            });
            this.assignOp(">>=",
            function(v19, v29) {
                return v19 >> v29;
            });
            this.assignOp(">>>=",
            function(v110, v210) {
                return v110 >>> v210;
            });
        },
        assign: function(e1, e2) {
            var v = this.expr(e2);
            switch (e1[1]) {
            case 1:
                var id = e1[2];
                var l = this.locals.get(id);
                if (l == null) this.variables.set(id, v);
                else l.r = v;
                break;
            case 5:
                var f = e1[3];
                var e = e1[2];
                v = this.set(this.expr(e), f, v);
                break;
            case 16:
                var index = e1[3];
                var e3 = e1[2];
                this.expr(e3)[this.expr(index)] = v;
                break;
            default:
                this.error(hscript_Error.EInvalidOp("="));
            }
            return v;
        },
        assignOp: function(op, fop) {
            var me = this;
            this.binops.set(op,
            function(e1, e2) {
                return me.evalAssignOp(op, fop, e1, e2);
            });
        },
        evalAssignOp: function(op, fop, e1, e2) {
            var v;
            switch (e1[1]) {
            case 1:
                var id = e1[2];
                var l = this.locals.get(id);
                v = fop(this.expr(e1), this.expr(e2));
                if (l == null) this.variables.set(id, v);
                else l.r = v;
                break;
            case 5:
                var f = e1[3];
                var e = e1[2];
                var obj = this.expr(e);
                v = fop(this.get(obj, f), this.expr(e2));
                v = this.set(obj, f, v);
                break;
            case 16:
                var index = e1[3];
                var e3 = e1[2];
                var arr = this.expr(e3);
                var index1 = this.expr(index);
                v = fop(arr[index1], this.expr(e2));
                arr[index1] = v;
                break;
            default:
                return this.error(hscript_Error.EInvalidOp(op));
            }
            return v;
        },
        increment: function(e, prefix, delta) {
            switch (e[1]) {
            case 1:
                var id = e[2];
                var l = this.locals.get(id);
                var v;
                if (l == null) v = this.variables.get(id);
                else v = l.r;
                if (prefix) {
                    v += delta;
                    if (l == null) this.variables.set(id, v);
                    else l.r = v;
                } else if (l == null) this.variables.set(id, v + delta);
                else l.r = v + delta;
                return v;
            case 5:
                var f = e[3];
                var e1 = e[2];
                var obj = this.expr(e1);
                var v1 = this.get(obj, f);
                if (prefix) {
                    v1 += delta;
                    this.set(obj, f, v1);
                } else this.set(obj, f, v1 + delta);
                return v1;
            case 16:
                var index = e[3];
                var e2 = e[2];
                var arr = this.expr(e2);
                var index1 = this.expr(index);
                var v2 = arr[index1];
                if (prefix) {
                    v2 += delta;
                    arr[index1] = v2;
                } else arr[index1] = v2 + delta;
                return v2;
            default:
                return this.error(hscript_Error.EInvalidOp(delta > 0 ? "++": "--"));
            }
        },
        execute: function(expr) {
            this.depth = 0;
            this.locals = new haxe_ds_StringMap();
            this.declared = [];
            return this.exprReturn(expr);
        },
        exprReturn: function(e) {
            try {
                return this.expr(e);
            } catch(e1) {
                haxe_CallStack.lastException = e1;
                if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
                if (js_Boot.__instanceof(e1, hscript__$Interp_Stop)) {
                    switch (e1[1]) {
                    case 0:
                        throw new js__$Boot_HaxeError("Invalid break");
                        break;
                    case 1:
                        throw new js__$Boot_HaxeError("Invalid continue");
                        break;
                    case 2:
                        var v = e1[2];
                        return v;
                    }
                } else throw (e1);
            }
            return null;
        },
        duplicate: function(h) {
            var h2 = new haxe_ds_StringMap();
            var $it0 = h.keys();
            while ($it0.hasNext()) {
                var k = $it0.next();
                var value;
                value = __map_reserved[k] != null ? h.getReserved(k) : h.h[k];
                if (__map_reserved[k] != null) h2.setReserved(k, value);
                else h2.h[k] = value;
            }
            return h2;
        },
        restore: function(old) {
            while (this.declared.length > old) {
                var d = this.declared.pop();
                this.locals.set(d.n, d.old);
            }
        },
        edef: function(e) {
            return e;
        },
        error: function(e) {
            throw new js__$Boot_HaxeError(e);
            return null;
        },
        resolve: function(id) {
            var l = this.locals.get(id);
            if (l != null) return l.r;
            var v = this.variables.get(id);
            if (v == null && !this.variables.exists(id)) this.error(hscript_Error.EUnknownVariable(id));
            return v;
        },
        expr: function(e) {
            switch (e[1]) {
            case 0:
                var c = e[2];
                switch (c[1]) {
                case 0:
                    var v = c[2];
                    return v;
                case 1:
                    var f = c[2];
                    return f;
                case 2:
                    var s = c[2];
                    return s;
                }
                break;
            case 1:
                var id = e[2];
                return this.resolve(id);
            case 2:
                var e1 = e[4];
                var n = e[2];
                this.declared.push({
                    n: n,
                    old: this.locals.get(n)
                });
                var value = {
                    r: e1 == null ? null: this.expr(e1)
                };
                this.locals.set(n, value);
                return null;
            case 3:
                var e2 = e[2];
                return this.expr(e2);
            case 4:
                var exprs = e[2];
                var old = this.declared.length;
                var v1 = null;
                var _g = 0;
                while (_g < exprs.length) {
                    var e3 = exprs[_g]; ++_g;
                    v1 = this.expr(e3);
                }
                this.restore(old);
                return v1;
            case 5:
                var f1 = e[3];
                var e4 = e[2];
                return this.get(this.expr(e4), f1);
            case 6:
                var e21 = e[4];
                var e11 = e[3];
                var op = e[2];
                var fop = this.binops.get(op);
                if (fop == null) this.error(hscript_Error.EInvalidOp(op));
                return fop(e11, e21);
            case 7:
                var e5 = e[4];
                var prefix = e[3];
                var op1 = e[2];
                switch (op1) {
                case "!":
                    return this.expr(e5) != true;
                case "-":
                    return - this.expr(e5);
                case "++":
                    return this.increment(e5, prefix, 1);
                case "--":
                    return this.increment(e5, prefix, -1);
                case "~":
                    return~this.expr(e5);
                default:
                    this.error(hscript_Error.EInvalidOp(op1));
                }
                break;
            case 8:
                var params = e[3];
                var e6 = e[2];
                var args = [];
                var _g1 = 0;
                while (_g1 < params.length) {
                    var p = params[_g1]; ++_g1;
                    args.push(this.expr(p));
                }
                switch (e6[1]) {
                case 5:
                    var f2 = e6[3];
                    var e7 = e6[2];
                    var obj = this.expr(e7);
                    if (obj == null) this.error(hscript_Error.EInvalidAccess(f2));
                    return this.fcall(obj, f2, args);
                default:
                    return this.call(null, this.expr(e6), args);
                }
                break;
            case 9:
                var e22 = e[4];
                var e12 = e[3];
                var econd = e[2];
                if (this.expr(econd) == true) return this.expr(e12);
                else if (e22 == null) return null;
                else return this.expr(e22);
                break;
            case 10:
                var e8 = e[3];
                var econd1 = e[2];
                this.whileLoop(econd1, e8);
                return null;
            case 11:
                var e9 = e[4];
                var it = e[3];
                var v2 = e[2];
                this.forLoop(v2, it, e9);
                return null;
            case 12:
                throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SBreak);
                break;
            case 13:
                throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SContinue);
                break;
            case 15:
                var e10 = e[2];
                throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SReturn(e10 == null ? null: this.expr(e10)));
                break;
            case 14:
                var name = e[4];
                var fexpr = e[3];
                var params1 = e[2];
                var capturedLocals = this.duplicate(this.locals);
                var me = this;
                var hasOpt = false;
                var minParams = 0;
                var _g4 = 0;
                while (_g4 < params1.length) {
                    var p2 = params1[_g4]; ++_g4;
                    if (p2.opt) hasOpt = true;
                    else minParams++;
                }
                var f3 = function(args1) {
                    if (args1.length != params1.length) {
                        if (args1.length < minParams) {
                            var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
                            if (name != null) str += " for function '" + name + "'";
                            throw new js__$Boot_HaxeError(str);
                        }
                        var args2 = [];
                        var extraParams = args1.length - minParams;
                        var pos = 0;
                        var _g2 = 0;
                        while (_g2 < params1.length) {
                            var p1 = params1[_g2]; ++_g2;
                            if (p1.opt) {
                                if (extraParams > 0) {
                                    args2.push(args1[pos++]);
                                    extraParams--;
                                } else args2.push(null);
                            } else args2.push(args1[pos++]);
                        }
                        args1 = args2;
                    }
                    var old1 = me.locals;
                    var depth = me.depth;
                    me.depth++;
                    me.locals = me.duplicate(capturedLocals);
                    var _g11 = 0;
                    var _g3 = params1.length;
                    while (_g11 < _g3) {
                        var i = _g11++;
                        me.locals.set(params1[i].name, {
                            r: args1[i]
                        });
                    }
                    var r = null;
                    try {
                        r = me.exprReturn(fexpr);
                    } catch(e13) {
                        haxe_CallStack.lastException = e13;
                        if (e13 instanceof js__$Boot_HaxeError) e13 = e13.val;
                        me.locals = old1;
                        me.depth = depth;
                        throw new js__$Boot_HaxeError(e13);
                    }
                    me.locals = old1;
                    me.depth = depth;
                    return r;
                };
                var f4 = Reflect.makeVarArgs(f3);
                if (name != null) {
                    if (this.depth == 0) this.variables.set(name, f4);
                    else {
                        this.declared.push({
                            n: name,
                            old: this.locals.get(name)
                        });
                        var ref = {
                            r: f4
                        };
                        this.locals.set(name, ref);
                        if (__map_reserved[name] != null) capturedLocals.setReserved(name, ref);
                        else capturedLocals.h[name] = ref;
                    }
                }
                return f4;
            case 17:
                var arr = e[2];
                var a = [];
                var _g5 = 0;
                while (_g5 < arr.length) {
                    var e14 = arr[_g5]; ++_g5;
                    a.push(this.expr(e14));
                }
                return a;
            case 16:
                var index = e[3];
                var e15 = e[2];
                return this.expr(e15)[this.expr(index)];
            case 18:
                var params2 = e[3];
                var cl = e[2];
                var a1 = [];
                var _g6 = 0;
                while (_g6 < params2.length) {
                    var e16 = params2[_g6]; ++_g6;
                    a1.push(this.expr(e16));
                }
                return this.cnew(cl, a1);
            case 19:
                var e17 = e[2];
                throw new js__$Boot_HaxeError(this.expr(e17));
                break;
            case 20:
                var ecatch = e[5];
                var n1 = e[3];
                var e18 = e[2];
                var old2 = this.declared.length;
                try {
                    var v3 = this.expr(e18);
                    this.restore(old2);
                    return v3;
                } catch($e0) {
                    haxe_CallStack.lastException = $e0;
                    if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
                    if (js_Boot.__instanceof($e0, hscript__$Interp_Stop)) {
                        var err = $e0;
                        throw new js__$Boot_HaxeError(err);
                    } else {
                        var err1 = $e0;
                        this.restore(old2);
                        this.declared.push({
                            n: n1,
                            old: this.locals.get(n1)
                        });
                        this.locals.set(n1, {
                            r: err1
                        });
                        var v4 = this.expr(ecatch);
                        this.restore(old2);
                        return v4;
                    }
                }
                break;
            case 21:
                var fl = e[2];
                var o = {};
                var _g7 = 0;
                while (_g7 < fl.length) {
                    var f5 = fl[_g7]; ++_g7;
                    this.set(o, f5.name, this.expr(f5.e));
                }
                return o;
            case 22:
                var e23 = e[4];
                var e19 = e[3];
                var econd2 = e[2];
                if (this.expr(econd2) == true) return this.expr(e19);
                else return this.expr(e23);
                break;
            case 23:
                var def = e[4];
                var cases = e[3];
                var e20 = e[2];
                var val = this.expr(e20);
                var match = false;
                var _g8 = 0;
                while (_g8 < cases.length) {
                    var c1 = cases[_g8]; ++_g8;
                    var _g12 = 0;
                    var _g21 = c1.values;
                    while (_g12 < _g21.length) {
                        var v5 = _g21[_g12]; ++_g12;
                        if (this.expr(v5) == val) {
                            match = true;
                            break;
                        }
                    }
                    if (match) {
                        val = this.expr(c1.expr);
                        break;
                    }
                }
                if (!match) if (def == null) val = null;
                else val = this.expr(def);
                return val;
            }
            return null;
        },
        whileLoop: function(econd, e) {
            var old = this.declared.length;
            try {
                while (this.expr(econd) == true) try {
                    this.expr(e);
                } catch(err) {
                    haxe_CallStack.lastException = err;
                    if (err instanceof js__$Boot_HaxeError) err = err.val;
                    if (js_Boot.__instanceof(err, hscript__$Interp_Stop)) {
                        switch (err[1]) {
                        case 1:
                            break;
                        case 0:
                            throw "__break__";
                            break;
                        case 2:
                            throw new js__$Boot_HaxeError(err);
                            break;
                        }
                    } else throw (err);
                }
            } catch(e) {
                if (e != "__break__") throw e;
            }
            this.restore(old);
        },
        makeIterator: function(v) {
            try {
                v = $iterator(v)();
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
            }
            if (v.hasNext == null || v.next == null) this.error(hscript_Error.EInvalidIterator(v));
            return v;
        },
        forLoop: function(n, it, e) {
            var old = this.declared.length;
            this.declared.push({
                n: n,
                old: this.locals.get(n)
            });
            var it1 = this.makeIterator(this.expr(it));
            try {
                while (it1.hasNext()) {
                    var value = {
                        r: it1.next()
                    };
                    this.locals.set(n, value);
                    try {
                        this.expr(e);
                    } catch(err) {
                        haxe_CallStack.lastException = err;
                        if (err instanceof js__$Boot_HaxeError) err = err.val;
                        if (js_Boot.__instanceof(err, hscript__$Interp_Stop)) {
                            switch (err[1]) {
                            case 1:
                                break;
                            case 0:
                                throw "__break__";
                                break;
                            case 2:
                                throw new js__$Boot_HaxeError(err);
                                break;
                            }
                        } else throw (err);
                    }
                }
            } catch(e) {
                if (e != "__break__") throw e;
            }
            this.restore(old);
        },
        get: function(o, f) {
            if (o == null) this.error(hscript_Error.EInvalidAccess(f));
            return Reflect.getProperty(o, f);
        },
        set: function(o, f, v) {
            if (o == null) this.error(hscript_Error.EInvalidAccess(f));
            Reflect.setProperty(o, f, v);
            return v;
        },
        fcall: function(o, f, args) {
            return this.call(o, Reflect.getProperty(o, f), args);
        },
        call: function(o, f, args) {
            return Reflect.callMethod(o, f, args);
        },
        cnew: function(cl, args) {
            var c = Type.resolveClass(cl);
            if (c == null) c = this.resolve(cl);
            return Type.createInstance(c, args);
        },
        __class__: hscript_Interp
    };
    var hscript_Token = $hxClasses["hscript.Token"] = {
        __ename__: ["hscript", "Token"],
        __constructs__: ["TEof", "TConst", "TId", "TOp", "TPOpen", "TPClose", "TBrOpen", "TBrClose", "TDot", "TComma", "TSemicolon", "TBkOpen", "TBkClose", "TQuestion", "TDoubleDot"]
    };
    hscript_Token.TEof = ["TEof", 0];
    hscript_Token.TEof.toString = $estr;
    hscript_Token.TEof.__enum__ = hscript_Token;
    hscript_Token.TConst = function(c) {
        var $x = ["TConst", 1, c];
        $x.__enum__ = hscript_Token;
        $x.toString = $estr;
        return $x;
    };
    hscript_Token.TId = function(s) {
        var $x = ["TId", 2, s];
        $x.__enum__ = hscript_Token;
        $x.toString = $estr;
        return $x;
    };
    hscript_Token.TOp = function(s) {
        var $x = ["TOp", 3, s];
        $x.__enum__ = hscript_Token;
        $x.toString = $estr;
        return $x;
    };
    hscript_Token.TPOpen = ["TPOpen", 4];
    hscript_Token.TPOpen.toString = $estr;
    hscript_Token.TPOpen.__enum__ = hscript_Token;
    hscript_Token.TPClose = ["TPClose", 5];
    hscript_Token.TPClose.toString = $estr;
    hscript_Token.TPClose.__enum__ = hscript_Token;
    hscript_Token.TBrOpen = ["TBrOpen", 6];
    hscript_Token.TBrOpen.toString = $estr;
    hscript_Token.TBrOpen.__enum__ = hscript_Token;
    hscript_Token.TBrClose = ["TBrClose", 7];
    hscript_Token.TBrClose.toString = $estr;
    hscript_Token.TBrClose.__enum__ = hscript_Token;
    hscript_Token.TDot = ["TDot", 8];
    hscript_Token.TDot.toString = $estr;
    hscript_Token.TDot.__enum__ = hscript_Token;
    hscript_Token.TComma = ["TComma", 9];
    hscript_Token.TComma.toString = $estr;
    hscript_Token.TComma.__enum__ = hscript_Token;
    hscript_Token.TSemicolon = ["TSemicolon", 10];
    hscript_Token.TSemicolon.toString = $estr;
    hscript_Token.TSemicolon.__enum__ = hscript_Token;
    hscript_Token.TBkOpen = ["TBkOpen", 11];
    hscript_Token.TBkOpen.toString = $estr;
    hscript_Token.TBkOpen.__enum__ = hscript_Token;
    hscript_Token.TBkClose = ["TBkClose", 12];
    hscript_Token.TBkClose.toString = $estr;
    hscript_Token.TBkClose.__enum__ = hscript_Token;
    hscript_Token.TQuestion = ["TQuestion", 13];
    hscript_Token.TQuestion.toString = $estr;
    hscript_Token.TQuestion.__enum__ = hscript_Token;
    hscript_Token.TDoubleDot = ["TDoubleDot", 14];
    hscript_Token.TDoubleDot.toString = $estr;
    hscript_Token.TDoubleDot.__enum__ = hscript_Token;
    var hscript_Parser = function() {
        this.line = 1;
        this.opChars = "+*/-=!><&|^%~";
        this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
        var priorities = [["%"], ["*", "/"], ["+", "-"], ["<<", ">>", ">>>"], ["|", "&", "^"], ["==", "!=", ">", "<", ">=", "<="], ["..."], ["&&"], ["||"], ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "&=", "^="]];
        this.opPriority = new haxe_ds_StringMap();
        this.opRightAssoc = new haxe_ds_StringMap();
        this.unops = new haxe_ds_StringMap();
        var _g1 = 0;
        var _g = priorities.length;
        while (_g1 < _g) {
            var i = _g1++;
            var _g2 = 0;
            var _g3 = priorities[i];
            while (_g2 < _g3.length) {
                var x = _g3[_g2]; ++_g2;
                this.opPriority.set(x, i);
                if (i == 9) this.opRightAssoc.set(x, true);
            }
        }
        var _g4 = 0;
        var _g11 = ["!", "++", "--", "-", "~"];
        while (_g4 < _g11.length) {
            var x1 = _g11[_g4]; ++_g4;
            this.unops.set(x1, x1 == "++" || x1 == "--");
        }
    };
    $hxClasses["hscript.Parser"] = hscript_Parser;
    hscript_Parser.__name__ = ["hscript", "Parser"];
    hscript_Parser.prototype = {
        error: function(err, pmin, pmax) {
            throw new js__$Boot_HaxeError(err);
        },
        invalidChar: function(c) {
            this.error(hscript_Error.EInvalidChar(c), 0, 0);
        },
        parseString: function(s) {
            this.line = 1;
            return this.parse(new haxe_io_StringInput(s));
        },
        parse: function(s) {
            this.tokens = new haxe_ds_GenericStack();
            this["char"] = -1;
            this.input = s;
            this.ops = [];
            this.idents = [];
            var _g1 = 0;
            var _g = this.opChars.length;
            while (_g1 < _g) {
                var i = _g1++;
                this.ops[HxOverrides.cca(this.opChars, i)] = true;
            }
            var _g11 = 0;
            var _g2 = this.identChars.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                this.idents[HxOverrides.cca(this.identChars, i1)] = true;
            }
            var a = [];
            while (true) {
                var tk = this.token();
                if (tk == hscript_Token.TEof) break;
                this.tokens.add(tk);
                a.push(this.parseFullExpr());
            }
            if (a.length == 1) return a[0];
            else return this.mk(hscript_Expr.EBlock(a), 0, null);
        },
        unexpected: function(tk) {
            this.error(hscript_Error.EUnexpected(this.tokenString(tk)), 0, 0);
            return null;
        },
        push: function(tk) {
            this.tokens.add(tk);
        },
        ensure: function(tk) {
            var t = this.token();
            if (t != tk) this.unexpected(t);
        },
        expr: function(e) {
            return e;
        },
        pmin: function(e) {
            return 0;
        },
        pmax: function(e) {
            return 0;
        },
        mk: function(e, pmin, pmax) {
            return e;
        },
        isBlock: function(e) {
            switch (e[1]) {
            case 4:
            case 21:
            case 23:
                return true;
            case 14:
                var e1 = e[3];
                return this.isBlock(e1);
            case 2:
                var e2 = e[4];
                return e2 != null && this.isBlock(e2);
            case 9:
                var e21 = e[4];
                var e11 = e[3];
                if (e21 != null) return this.isBlock(e21);
                else return this.isBlock(e11);
                break;
            case 6:
                var e3 = e[4];
                return this.isBlock(e3);
            case 7:
                var e4 = e[4];
                var prefix = e[3];
                return ! prefix && this.isBlock(e4);
            case 10:
                var e5 = e[3];
                return this.isBlock(e5);
            case 11:
                var e6 = e[4];
                return this.isBlock(e6);
            case 15:
                var e7 = e[2];
                return e7 != null && this.isBlock(e7);
            default:
                return false;
            }
        },
        parseFullExpr: function() {
            var e = this.parseExpr();
            var tk = this.token();
            if (tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
                if (this.isBlock(e)) this.tokens.add(tk);
                else this.unexpected(tk);
            }
            return e;
        },
        parseObject: function(p1) {
            var fl = [];
            try {
                while (true) {
                    var tk = this.token();
                    var id = null;
                    switch (tk[1]) {
                    case 2:
                        var i = tk[2];
                        id = i;
                        break;
                    case 1:
                        var c = tk[2];
                        if (!this.allowJSON) this.unexpected(tk);
                        switch (c[1]) {
                        case 2:
                            var s = c[2];
                            id = s;
                            break;
                        default:
                            this.unexpected(tk);
                        }
                        break;
                    case 7:
                        throw "__break__";
                        break;
                    default:
                        this.unexpected(tk);
                    }
                    this.ensure(hscript_Token.TDoubleDot);
                    fl.push({
                        name:
                        id,
                        e: this.parseExpr()
                    });
                    tk = this.token();
                    switch (tk[1]) {
                    case 7:
                        throw "__break__";
                        break;
                    case 9:
                        break;
                    default:
                        this.unexpected(tk);
                    }
                }
            } catch(e) {
                if (e != "__break__") throw e;
            }
            return this.parseExprNext(this.mk(hscript_Expr.EObject(fl), p1, null));
        },
        parseExpr: function() {
            var tk = this.token();
            switch (tk[1]) {
            case 2:
                var id = tk[2];
                var e = this.parseStructure(id);
                if (e == null) e = this.mk(hscript_Expr.EIdent(id), null, null);
                return this.parseExprNext(e);
            case 1:
                var c = tk[2];
                return this.parseExprNext(this.mk(hscript_Expr.EConst(c), null, null));
            case 4:
                var e1 = this.parseExpr();
                this.ensure(hscript_Token.TPClose);
                return this.parseExprNext(this.mk(hscript_Expr.EParent(e1), 0, 0));
            case 6:
                tk = this.token();
                switch (tk[1]) {
                case 7:
                    return this.parseExprNext(this.mk(hscript_Expr.EObject([]), 0, null));
                case 2:
                    var tk2 = this.token();
                    this.tokens.add(tk2);
                    this.tokens.add(tk);
                    switch (tk2[1]) {
                    case 14:
                        return this.parseExprNext(this.parseObject(0));
                    default:
                    }
                    break;
                case 1:
                    var c1 = tk[2];
                    if (this.allowJSON) switch (c1[1]) {
                    case 2:
                        var tk21 = this.token();
                        this.tokens.add(tk21);
                        this.tokens.add(tk);
                        switch (tk21[1]) {
                        case 14:
                            return this.parseExprNext(this.parseObject(0));
                        default:
                        }
                        break;
                    default:
                        this.tokens.add(tk);
                    } else this.tokens.add(tk);
                    break;
                default:
                    this.tokens.add(tk);
                }
                var a = [];
                while (true) {
                    a.push(this.parseFullExpr());
                    tk = this.token();
                    if (tk == hscript_Token.TBrClose) break;
                    this.tokens.add(tk);
                }
                return this.mk(hscript_Expr.EBlock(a), 0, null);
            case 3:
                var op = tk[2];
                if (this.unops.exists(op)) return this.makeUnop(op, this.parseExpr());
                return this.unexpected(tk);
            case 11:
                var a1 = [];
                tk = this.token();
                while (tk != hscript_Token.TBkClose) {
                    this.tokens.add(tk);
                    a1.push(this.parseExpr());
                    tk = this.token();
                    if (tk == hscript_Token.TComma) tk = this.token();
                }
                return this.parseExprNext(this.mk(hscript_Expr.EArrayDecl(a1), 0, null));
            default:
                return this.unexpected(tk);
            }
        },
        makeUnop: function(op, e) {
            switch (e[1]) {
            case 6:
                var e2 = e[4];
                var e1 = e[3];
                var bop = e[2];
                return this.mk(hscript_Expr.EBinop(bop, this.makeUnop(op, e1), e2), 0, 0);
            case 22:
                var e3 = e[4];
                var e21 = e[3];
                var e11 = e[2];
                return this.mk(hscript_Expr.ETernary(this.makeUnop(op, e11), e21, e3), 0, 0);
            default:
                return this.mk(hscript_Expr.EUnop(op, true, e), 0, 0);
            }
        },
        makeBinop: function(op, e1, e) {
            switch (e[1]) {
            case 6:
                var e3 = e[4];
                var e2 = e[3];
                var op2 = e[2];
                if (this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) return this.mk(hscript_Expr.EBinop(op2, this.makeBinop(op, e1, e2), e3), 0, 0);
                else return this.mk(hscript_Expr.EBinop(op, e1, e), 0, 0);
                break;
            case 22:
                var e4 = e[4];
                var e31 = e[3];
                var e21 = e[2];
                if (this.opRightAssoc.exists(op)) return this.mk(hscript_Expr.EBinop(op, e1, e), 0, 0);
                else return this.mk(hscript_Expr.ETernary(this.makeBinop(op, e1, e21), e31, e4), 0, 0);
                break;
            default:
                return this.mk(hscript_Expr.EBinop(op, e1, e), 0, 0);
            }
        },
        parseStructure: function(id) {
            switch (id) {
            case "if":
                var cond = this.parseExpr();
                var e1 = this.parseExpr();
                var e2 = null;
                var semic = false;
                var tk = this.token();
                if (tk == hscript_Token.TSemicolon) {
                    semic = true;
                    tk = this.token();
                }
                if (Type.enumEq(tk, hscript_Token.TId("else"))) e2 = this.parseExpr();
                else {
                    this.tokens.add(tk);
                    if (semic) this.tokens.add(hscript_Token.TSemicolon);
                }
                return this.mk(hscript_Expr.EIf(cond, e1, e2), 0, e2 == null ? 0 : 0);
            case "var":
                var tk1 = this.token();
                var ident = null;
                switch (tk1[1]) {
                case 2:
                    var id1 = tk1[2];
                    ident = id1;
                    break;
                default:
                    this.unexpected(tk1);
                }
                tk1 = this.token();
                var t = null;
                if (tk1 == hscript_Token.TDoubleDot && this.allowTypes) {
                    t = this.parseType();
                    tk1 = this.token();
                }
                var e = null;
                if (Type.enumEq(tk1, hscript_Token.TOp("="))) e = this.parseExpr();
                else this.tokens.add(tk1);
                return this.mk(hscript_Expr.EVar(ident, t, e), 0, e == null ? 0 : 0);
            case "while":
                var econd = this.parseExpr();
                var e3 = this.parseExpr();
                return this.mk(hscript_Expr.EWhile(econd, e3), 0, 0);
            case "for":
                this.ensure(hscript_Token.TPOpen);
                var tk2 = this.token();
                var vname = null;
                switch (tk2[1]) {
                case 2:
                    var id2 = tk2[2];
                    vname = id2;
                    break;
                default:
                    this.unexpected(tk2);
                }
                tk2 = this.token();
                if (!Type.enumEq(tk2, hscript_Token.TId("in"))) this.unexpected(tk2);
                var eiter = this.parseExpr();
                this.ensure(hscript_Token.TPClose);
                var e4 = this.parseExpr();
                return this.mk(hscript_Expr.EFor(vname, eiter, e4), 0, 0);
            case "break":
                return hscript_Expr.EBreak;
            case "continue":
                return hscript_Expr.EContinue;
            case "else":
                return this.unexpected(hscript_Token.TId(id));
            case "function":
                var tk3 = this.token();
                var name = null;
                switch (tk3[1]) {
                case 2:
                    var id3 = tk3[2];
                    name = id3;
                    break;
                default:
                    this.tokens.add(tk3);
                }
                this.ensure(hscript_Token.TPOpen);
                var args = [];
                tk3 = this.token();
                if (tk3 != hscript_Token.TPClose) {
                    var done = false;
                    while (!done) {
                        var name1 = null;
                        var opt = false;
                        switch (tk3[1]) {
                        case 13:
                            opt = true;
                            tk3 = this.token();
                            break;
                        default:
                        }
                        switch (tk3[1]) {
                        case 2:
                            var id4 = tk3[2];
                            name1 = id4;
                            break;
                        default:
                            this.unexpected(tk3);
                        }
                        tk3 = this.token();
                        var arg = {
                            name: name1
                        };
                        args.push(arg);
                        if (opt) arg.opt = true;
                        if (tk3 == hscript_Token.TDoubleDot && this.allowTypes) {
                            arg.t = this.parseType();
                            tk3 = this.token();
                        }
                        switch (tk3[1]) {
                        case 9:
                            tk3 = this.token();
                            break;
                        case 5:
                            done = true;
                            break;
                        default:
                            this.unexpected(tk3);
                        }
                    }
                }
                var ret = null;
                if (this.allowTypes) {
                    tk3 = this.token();
                    if (tk3 != hscript_Token.TDoubleDot) this.tokens.add(tk3);
                    else ret = this.parseType();
                }
                var body = this.parseExpr();
                return this.mk(hscript_Expr.EFunction(args, body, name, ret), 0, 0);
            case "return":
                var tk4 = this.token();
                this.tokens.add(tk4);
                var e5;
                if (tk4 == hscript_Token.TSemicolon) e5 = null;
                else e5 = this.parseExpr();
                return this.mk(hscript_Expr.EReturn(e5), 0, e5 == null ? 0 : 0);
            case "new":
                var a = [];
                var tk5 = this.token();
                switch (tk5[1]) {
                case 2:
                    var id5 = tk5[2];
                    a.push(id5);
                    break;
                default:
                    this.unexpected(tk5);
                }
                var next = true;
                while (next) {
                    tk5 = this.token();
                    switch (tk5[1]) {
                    case 8:
                        tk5 = this.token();
                        switch (tk5[1]) {
                        case 2:
                            var id6 = tk5[2];
                            a.push(id6);
                            break;
                        default:
                            this.unexpected(tk5);
                        }
                        break;
                    case 4:
                        next = false;
                        break;
                    default:
                        this.unexpected(tk5);
                    }
                }
                var args1 = this.parseExprList(hscript_Token.TPClose);
                return this.mk(hscript_Expr.ENew(a.join("."), args1), 0, null);
            case "throw":
                var e6 = this.parseExpr();
                return this.mk(hscript_Expr.EThrow(e6), 0, 0);
            case "try":
                var e7 = this.parseExpr();
                var tk6 = this.token();
                if (!Type.enumEq(tk6, hscript_Token.TId("catch"))) this.unexpected(tk6);
                this.ensure(hscript_Token.TPOpen);
                tk6 = this.token();
                var vname1;
                switch (tk6[1]) {
                case 2:
                    var id7 = tk6[2];
                    vname1 = id7;
                    break;
                default:
                    vname1 = this.unexpected(tk6);
                }
                this.ensure(hscript_Token.TDoubleDot);
                var t1 = null;
                if (this.allowTypes) t1 = this.parseType();
                else {
                    tk6 = this.token();
                    if (!Type.enumEq(tk6, hscript_Token.TId("Dynamic"))) this.unexpected(tk6);
                }
                this.ensure(hscript_Token.TPClose);
                var ec = this.parseExpr();
                return this.mk(hscript_Expr.ETry(e7, vname1, t1, ec), 0, 0);
            case "switch":
                var e8 = this.parseExpr();
                var def = null;
                var cases = [];
                this.ensure(hscript_Token.TBrOpen);
                try {
                    while (true) {
                        var tk7 = this.token();
                        switch (tk7[1]) {
                        case 2:
                            switch (tk7[2]) {
                            case "case":
                                var c = {
                                    values: [],
                                    expr: null
                                };
                                cases.push(c);
                                try {
                                    while (true) {
                                        var e9 = this.parseExpr();
                                        c.values.push(e9);
                                        tk7 = this.token();
                                        switch (tk7[1]) {
                                        case 9:
                                            break;
                                        case 14:
                                            throw "__break__";
                                            break;
                                        default:
                                            this.unexpected(tk7);
                                        }
                                    }
                                } catch(e) {
                                    if (e != "__break__") throw e;
                                }
                                c.expr = this.parseFullExpr();
                                break;
                            case "default":
                                if (def != null) this.unexpected(tk7);
                                this.ensure(hscript_Token.TSemicolon);
                                def = this.parseExpr();
                                break;
                            default:
                                this.unexpected(tk7);
                            }
                            break;
                        case 7:
                            throw "__break__";
                            break;
                        default:
                            this.unexpected(tk7);
                        }
                    }
                } catch(e) {
                    if (e != "__break__") throw e;
                }
                return this.mk(hscript_Expr.ESwitch(e8, cases, def), 0, 0);
            default:
                return null;
            }
        },
        parseExprNext: function(e1) {
            var tk = this.token();
            switch (tk[1]) {
            case 3:
                var op = tk[2];
                if (this.unops.get(op)) {
                    if (this.isBlock(e1) || (function($this) {
                        var $r;
                        switch (e1[1]) {
                        case 3:
                            $r = true;
                            break;
                        default:
                            $r = false;
                        }
                        return $r;
                    } (this))) {
                        this.tokens.add(tk);
                        return e1;
                    }
                    return this.parseExprNext(this.mk(hscript_Expr.EUnop(op, false, e1), 0, null));
                }
                return this.makeBinop(op, e1, this.parseExpr());
            case 8:
                tk = this.token();
                var field = null;
                switch (tk[1]) {
                case 2:
                    var id = tk[2];
                    field = id;
                    break;
                default:
                    this.unexpected(tk);
                }
                return this.parseExprNext(this.mk(hscript_Expr.EField(e1, field), 0, null));
            case 4:
                return this.parseExprNext(this.mk(hscript_Expr.ECall(e1, this.parseExprList(hscript_Token.TPClose)), 0, null));
            case 11:
                var e2 = this.parseExpr();
                this.ensure(hscript_Token.TBkClose);
                return this.parseExprNext(this.mk(hscript_Expr.EArray(e1, e2), 0, null));
            case 13:
                var e21 = this.parseExpr();
                this.ensure(hscript_Token.TDoubleDot);
                var e3 = this.parseExpr();
                return this.mk(hscript_Expr.ETernary(e1, e21, e3), 0, 0);
            default:
                this.tokens.add(tk);
                return e1;
            }
        },
        parseType: function() {
            var t = this.token();
            switch (t[1]) {
            case 2:
                var v = t[2];
                var path = [v];
                while (true) {
                    t = this.token();
                    if (t != hscript_Token.TDot) break;
                    t = this.token();
                    switch (t[1]) {
                    case 2:
                        var v1 = t[2];
                        path.push(v1);
                        break;
                    default:
                        this.unexpected(t);
                    }
                }
                var params = null;
                switch (t[1]) {
                case 3:
                    var op = t[2];
                    if (op == "<") {
                        params = [];
                        try {
                            while (true) {
                                params.push(this.parseType());
                                t = this.token();
                                switch (t[1]) {
                                case 9:
                                    continue;
                                    break;
                                case 3:
                                    var op1 = t[2];
                                    if (op1 == ">") throw "__break__";
                                    break;
                                default:
                                }
                                this.unexpected(t);
                            }
                        } catch(e) {
                            if (e != "__break__") throw e;
                        }
                    }
                    break;
                default:
                    this.tokens.add(t);
                }
                return this.parseTypeNext(hscript_CType.CTPath(path, params));
            case 4:
                var t1 = this.parseType();
                this.ensure(hscript_Token.TPClose);
                return this.parseTypeNext(hscript_CType.CTParent(t1));
            case 6:
                var fields = [];
                try {
                    while (true) {
                        t = this.token();
                        switch (t[1]) {
                        case 7:
                            throw "__break__";
                            break;
                        case 2:
                            var name = t[2];
                            this.ensure(hscript_Token.TDoubleDot);
                            fields.push({
                                name: name,
                                t: this.parseType()
                            });
                            t = this.token();
                            switch (t[1]) {
                            case 9:
                                break;
                            case 7:
                                throw "__break__";
                                break;
                            default:
                                this.unexpected(t);
                            }
                            break;
                        default:
                            this.unexpected(t);
                        }
                    }
                } catch(e) {
                    if (e != "__break__") throw e;
                }
                return this.parseTypeNext(hscript_CType.CTAnon(fields));
            default:
                return this.unexpected(t);
            }
        },
        parseTypeNext: function(t) {
            var tk = this.token();
            switch (tk[1]) {
            case 3:
                var op = tk[2];
                if (op != "->") {
                    this.tokens.add(tk);
                    return t;
                }
                break;
            default:
                this.tokens.add(tk);
                return t;
            }
            var t2 = this.parseType();
            switch (t2[1]) {
            case 1:
                var args = t2[2];
                args.unshift(t);
                return t2;
            default:
                return hscript_CType.CTFun([t], t2);
            }
        },
        parseExprList: function(etk) {
            var args = [];
            var tk = this.token();
            if (tk == etk) return args;
            this.tokens.add(tk);
            try {
                while (true) {
                    args.push(this.parseExpr());
                    tk = this.token();
                    switch (tk[1]) {
                    case 9:
                        break;
                    default:
                        if (tk == etk) throw "__break__";
                        this.unexpected(tk);
                    }
                }
            } catch(e) {
                if (e != "__break__") throw e;
            }
            return args;
        },
        incPos: function() {},
        readChar: function() {
            try {
                return this.input.readByte();
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                return 0;
            }
        },
        readString: function(until) {
            var c = 0;
            var b = new haxe_io_BytesOutput();
            var esc = false;
            var old = this.line;
            var s = this.input;
            while (true) {
                try {
                    c = s.readByte();
                } catch(e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) e = e.val;
                    this.line = old;
                    throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
                }
                if (esc) {
                    esc = false;
                    switch (c) {
                    case 110:
                        b.writeByte(10);
                        break;
                    case 114:
                        b.writeByte(13);
                        break;
                    case 116:
                        b.writeByte(9);
                        break;
                    case 39:
                    case 34:
                    case 92:
                        b.writeByte(c);
                        break;
                    case 47:
                        if (this.allowJSON) b.writeByte(c);
                        else this.invalidChar(c);
                        break;
                    case 117:
                        if (!this.allowJSON) this.invalidChar(c);
                        var code = null;
                        try {
                            code = s.readString(4);
                        } catch(e1) {
                            haxe_CallStack.lastException = e1;
                            if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
                            this.line = old;
                            throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
                        }
                        var k = 0;
                        var _g = 0;
                        while (_g < 4) {
                            var i = _g++;
                            k <<= 4;
                            var $char = HxOverrides.cca(code, i);
                            if ($char != null) switch ($char) {
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                                k += $char - 48;
                                break;
                            case 65:
                            case 66:
                            case 67:
                            case 68:
                            case 69:
                            case 70:
                                k += $char - 55;
                                break;
                            case 97:
                            case 98:
                            case 99:
                            case 100:
                            case 101:
                            case 102:
                                k += $char - 87;
                                break;
                            default:
                                this.invalidChar($char);
                            } else this.invalidChar($char);
                        }
                        if (k <= 127) b.writeByte(k);
                        else if (k <= 2047) {
                            b.writeByte(192 | k >> 6);
                            b.writeByte(128 | k & 63);
                        } else {
                            b.writeByte(224 | k >> 12);
                            b.writeByte(128 | k >> 6 & 63);
                            b.writeByte(128 | k & 63);
                        }
                        break;
                    default:
                        this.invalidChar(c);
                    }
                } else if (c == 92) esc = true;
                else if (c == until) break;
                else {
                    if (c == 10) this.line++;
                    b.writeByte(c);
                }
            }
            return b.getBytes().toString();
        },
        token: function() {
            if (! (this.tokens.head == null)) return this.tokens.pop();
            var $char;
            if (this["char"] < 0) $char = this.readChar();
            else {
                $char = this["char"];
                this["char"] = -1;
            }
            while (true) {
                switch ($char) {
                case 0:
                    return hscript_Token.TEof;
                case 32:
                case 9:
                case 13:
                    break;
                case 10:
                    this.line++;
                    break;
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                    var n = ($char - 48) * 1.0;
                    var exp = 0.;
                    while (true) {
                        $char = this.readChar();
                        exp *= 10;
                        switch ($char) {
                        case 48:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            n = n * 10 + ($char - 48);
                            break;
                        case 46:
                            if (exp > 0) {
                                if (exp == 10 && this.readChar() == 46) {
                                    this.push(hscript_Token.TOp("..."));
                                    var i = n | 0;
                                    return hscript_Token.TConst(i == n ? hscript_Const.CInt(i) : hscript_Const.CFloat(n));
                                }
                                this.invalidChar($char);
                            }
                            exp = 1.;
                            break;
                        case 120:
                            if (n > 0 || exp > 0) this.invalidChar($char);
                            var n1 = 0;
                            while (true) {
                                $char = this.readChar();
                                switch ($char) {
                                case 48:
                                case 49:
                                case 50:
                                case 51:
                                case 52:
                                case 53:
                                case 54:
                                case 55:
                                case 56:
                                case 57:
                                    n1 = (n1 << 4) + $char - 48;
                                    break;
                                case 65:
                                case 66:
                                case 67:
                                case 68:
                                case 69:
                                case 70:
                                    n1 = (n1 << 4) + ($char - 55);
                                    break;
                                case 97:
                                case 98:
                                case 99:
                                case 100:
                                case 101:
                                case 102:
                                    n1 = (n1 << 4) + ($char - 87);
                                    break;
                                default:
                                    this["char"] = $char;
                                    return hscript_Token.TConst(hscript_Const.CInt(n1));
                                }
                            }
                            break;
                        default:
                            this["char"] = $char;
                            var i1 = n | 0;
                            return hscript_Token.TConst(exp > 0 ? hscript_Const.CFloat(n * 10 / exp) : i1 == n ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n));
                        }
                    }
                    break;
                case 59:
                    return hscript_Token.TSemicolon;
                case 40:
                    return hscript_Token.TPOpen;
                case 41:
                    return hscript_Token.TPClose;
                case 44:
                    return hscript_Token.TComma;
                case 46:
                    $char = this.readChar();
                    switch ($char) {
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        var n2 = $char - 48;
                        var exp1 = 1;
                        while (true) {
                            $char = this.readChar();
                            exp1 *= 10;
                            switch ($char) {
                            case 48:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                            case 56:
                            case 57:
                                n2 = n2 * 10 + ($char - 48);
                                break;
                            default:
                                this["char"] = $char;
                                return hscript_Token.TConst(hscript_Const.CFloat(n2 / exp1));
                            }
                        }
                        break;
                    case 46:
                        $char = this.readChar();
                        if ($char != 46) this.invalidChar($char);
                        return hscript_Token.TOp("...");
                    default:
                        this["char"] = $char;
                        return hscript_Token.TDot;
                    }
                    break;
                case 123:
                    return hscript_Token.TBrOpen;
                case 125:
                    return hscript_Token.TBrClose;
                case 91:
                    return hscript_Token.TBkOpen;
                case 93:
                    return hscript_Token.TBkClose;
                case 39:
                    return hscript_Token.TConst(hscript_Const.CString(this.readString(39)));
                case 34:
                    return hscript_Token.TConst(hscript_Const.CString(this.readString(34)));
                case 63:
                    return hscript_Token.TQuestion;
                case 58:
                    return hscript_Token.TDoubleDot;
                default:
                    if (this.ops[$char]) {
                        var op = String.fromCharCode($char);
                        while (true) {
                            $char = this.readChar();
                            if (!this.ops[$char]) {
                                if (HxOverrides.cca(op, 0) == 47) return this.tokenComment(op, $char);
                                this["char"] = $char;
                                return hscript_Token.TOp(op);
                            }
                            op += String.fromCharCode($char);
                        }
                    }
                    if (this.idents[$char]) {
                        var id = String.fromCharCode($char);
                        while (true) {
                            $char = this.readChar();
                            if (!this.idents[$char]) {
                                this["char"] = $char;
                                return hscript_Token.TId(id);
                            }
                            id += String.fromCharCode($char);
                        }
                    }
                    this.invalidChar($char);
                }
                $char = this.readChar();
            }
            return null;
        },
        tokenComment: function(op, $char) {
            var c = HxOverrides.cca(op, 1);
            var s = this.input;
            if (c == 47) {
                try {
                    while ($char != 10 && $char != 13) $char = s.readByte();
                    this["char"] = $char;
                } catch(e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) e = e.val;
                }
                return this.token();
            }
            if (c == 42) {
                var old = this.line;
                try {
                    while (true) {
                        while ($char != 42) {
                            if ($char == 10) this.line++;
                            $char = s.readByte();
                        }
                        $char = s.readByte();
                        if ($char == 47) break;
                    }
                } catch(e1) {
                    haxe_CallStack.lastException = e1;
                    if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
                    this.line = old;
                    throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
                }
                return this.token();
            }
            this["char"] = $char;
            return hscript_Token.TOp(op);
        },
        constString: function(c) {
            switch (c[1]) {
            case 0:
                var v = c[2];
                if (v == null) return "null";
                else return "" + v;
                break;
            case 1:
                var f = c[2];
                if (f == null) return "null";
                else return "" + f;
                break;
            case 2:
                var s = c[2];
                return s;
            }
        },
        tokenString: function(t) {
            switch (t[1]) {
            case 0:
                return "<eof>";
            case 1:
                var c = t[2];
                return this.constString(c);
            case 2:
                var s = t[2];
                return s;
            case 3:
                var s1 = t[2];
                return s1;
            case 4:
                return "(";
            case 5:
                return ")";
            case 6:
                return "{";
            case 7:
                return "}";
            case 8:
                return ".";
            case 9:
                return ",";
            case 10:
                return ";";
            case 11:
                return "[";
            case 12:
                return "]";
            case 13:
                return "?";
            case 14:
                return ":";
            }
        },
        __class__: hscript_Parser
    };
    var js__$Boot_HaxeError = function(val) {
        Error.call(this);
        this.val = val;
        this.message = String(val);
        if (Error.captureStackTrace) Error.captureStackTrace(this, js__$Boot_HaxeError);
    };
    $hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
    js__$Boot_HaxeError.__name__ = ["js", "_Boot", "HaxeError"];
    js__$Boot_HaxeError.__super__ = Error;
    js__$Boot_HaxeError.prototype = $extend(Error.prototype, {
        __class__: js__$Boot_HaxeError
    });
    var js_Boot = function() {};
    $hxClasses["js.Boot"] = js_Boot;
    js_Boot.__name__ = ["js", "Boot"];
    js_Boot.__unhtml = function(s) {
        return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
    };
    js_Boot.__trace = function(v, i) {
        var msg;
        if (i != null) msg = i.fileName + ":" + i.lineNumber + ": ";
        else msg = "";
        msg += js_Boot.__string_rec(v, "");
        if (i != null && i.customParams != null) {
            var _g = 0;
            var _g1 = i.customParams;
            while (_g < _g1.length) {
                var v1 = _g1[_g]; ++_g;
                msg += "," + js_Boot.__string_rec(v1, "");
            }
        }
        var d;
        if (typeof(document) != "undefined" && (d = document.getElementById("haxe:trace")) != null) d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
        else if (typeof console != "undefined" && console.log != null) console.log(msg);
    };
    js_Boot.getClass = function(o) {
        if ((o instanceof Array) && o.__enum__ == null) return Array;
        else {
            var cl = o.__class__;
            if (cl != null) return cl;
            var name = js_Boot.__nativeClassName(o);
            if (name != null) return js_Boot.__resolveNativeClass(name);
            return null;
        }
    };
    js_Boot.__string_rec = function(o, s) {
        if (o == null) return "null";
        if (s.length >= 5) return "<...>";
        var t = typeof(o);
        if (t == "function" && (o.__name__ || o.__ename__)) t = "object";
        switch (t) {
        case "object":
            if (o instanceof Array) {
                if (o.__enum__) {
                    if (o.length == 2) return o[0];
                    var str2 = o[0] + "(";
                    s += "\t";
                    var _g1 = 2;
                    var _g = o.length;
                    while (_g1 < _g) {
                        var i1 = _g1++;
                        if (i1 != 2) str2 += "," + js_Boot.__string_rec(o[i1], s);
                        else str2 += js_Boot.__string_rec(o[i1], s);
                    }
                    return str2 + ")";
                }
                var l = o.length;
                var i;
                var str1 = "[";
                s += "\t";
                var _g2 = 0;
                while (_g2 < l) {
                    var i2 = _g2++;
                    str1 += (i2 > 0 ? ",": "") + js_Boot.__string_rec(o[i2], s);
                }
                str1 += "]";
                return str1;
            }
            var tostr;
            try {
                tostr = o.toString;
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                return "???";
            }
            if (tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
                var s2 = o.toString();
                if (s2 != "[object Object]") return s2;
            }
            var k = null;
            var str = "{\n";
            s += "\t";
            var hasp = o.hasOwnProperty != null;
            for (var k in o) {
                if (hasp && !o.hasOwnProperty(k)) {
                    continue;
                }
                if (k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
                    continue;
                }
                if (str.length != 2) str += ", \n";
                str += s + k + " : " + js_Boot.__string_rec(o[k], s);
            }
            s = s.substring(1);
            str += "\n" + s + "}";
            return str;
        case "function":
            return "<function>";
        case "string":
            return o;
        default:
            return String(o);
        }
    };
    js_Boot.__interfLoop = function(cc, cl) {
        if (cc == null) return false;
        if (cc == cl) return true;
        var intf = cc.__interfaces__;
        if (intf != null) {
            var _g1 = 0;
            var _g = intf.length;
            while (_g1 < _g) {
                var i = _g1++;
                var i1 = intf[i];
                if (i1 == cl || js_Boot.__interfLoop(i1, cl)) return true;
            }
        }
        return js_Boot.__interfLoop(cc.__super__, cl);
    };
    js_Boot.__instanceof = function(o, cl) {
        if (cl == null) return false;
        switch (cl) {
        case Int:
            return (o | 0) === o;
        case Float:
            return typeof(o) == "number";
        case Bool:
            return typeof(o) == "boolean";
        case String:
            return typeof(o) == "string";
        case Array:
            return (o instanceof Array) && o.__enum__ == null;
        case Dynamic:
            return true;
        default:
            if (o != null) {
                if (typeof(cl) == "function") {
                    if (o instanceof cl) return true;
                    if (js_Boot.__interfLoop(js_Boot.getClass(o), cl)) return true;
                } else if (typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
                    if (o instanceof cl) return true;
                }
            } else return false;
            if (cl == Class && o.__name__ != null) return true;
            if (cl == Enum && o.__ename__ != null) return true;
            return o.__enum__ == cl;
        }
    };
    js_Boot.__cast = function(o, t) {
        if (js_Boot.__instanceof(o, t)) return o;
        else throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
    };
    js_Boot.__nativeClassName = function(o) {
        var name = js_Boot.__toStr.call(o).slice(8, -1);
        if (name == "Object" || name == "Function" || name == "Math" || name == "JSON") return null;
        return name;
    };
    js_Boot.__isNativeObj = function(o) {
        return js_Boot.__nativeClassName(o) != null;
    };
    js_Boot.__resolveNativeClass = function(name) {
        return $global[name];
    };
    var js_Browser = function() {};
    $hxClasses["js.Browser"] = js_Browser;
    js_Browser.__name__ = ["js", "Browser"];
    js_Browser.getLocalStorage = function() {
        try {
            var s = window.localStorage;
            s.getItem("");
            return s;
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            return null;
        }
    };
    js_Browser.alert = function(v) {
        window.alert(js_Boot.__string_rec(v, ""));
    };
    var js_html__$CanvasElement_CanvasUtil = function() {};
    $hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
    js_html__$CanvasElement_CanvasUtil.__name__ = ["js", "html", "_CanvasElement", "CanvasUtil"];
    js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas, attribs) {
        var _g = 0;
        var _g1 = ["webgl", "experimental-webgl"];
        while (_g < _g1.length) {
            var name = _g1[_g]; ++_g;
            var ctx = canvas.getContext(name, attribs);
            if (ctx != null) return ctx;
        }
        return null;
    };
    var js_html_compat_ArrayBuffer = function(a) {
        if ((a instanceof Array) && a.__enum__ == null) {
            this.a = a;
            this.byteLength = a.length;
        } else {
            var len = a;
            this.a = [];
            var _g = 0;
            while (_g < len) {
                var i = _g++;
                this.a[i] = 0;
            }
            this.byteLength = len;
        }
    };
    $hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
    js_html_compat_ArrayBuffer.__name__ = ["js", "html", "compat", "ArrayBuffer"];
    js_html_compat_ArrayBuffer.sliceImpl = function(begin, end) {
        var u = new Uint8Array(this, begin, end == null ? null: end - begin);
        var result = new ArrayBuffer(u.byteLength);
        var resultArray = new Uint8Array(result);
        resultArray.set(u);
        return result;
    };
    js_html_compat_ArrayBuffer.prototype = {
        slice: function(begin, end) {
            return new js_html_compat_ArrayBuffer(this.a.slice(begin, end));
        },
        __class__: js_html_compat_ArrayBuffer
    };
    var js_html_compat_DataView = function(buffer, byteOffset, byteLength) {
        this.buf = buffer;
        if (byteOffset == null) this.offset = 0;
        else this.offset = byteOffset;
        if (byteLength == null) this.length = buffer.byteLength - this.offset;
        else this.length = byteLength;
        if (this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
    };
    $hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
    js_html_compat_DataView.__name__ = ["js", "html", "compat", "DataView"];
    js_html_compat_DataView.prototype = {
        getInt8: function(byteOffset) {
            var v = this.buf.a[this.offset + byteOffset];
            if (v >= 128) return v - 256;
            else return v;
        },
        getUint8: function(byteOffset) {
            return this.buf.a[this.offset + byteOffset];
        },
        getInt16: function(byteOffset, littleEndian) {
            var v = this.getUint16(byteOffset, littleEndian);
            if (v >= 32768) return v - 65536;
            else return v;
        },
        getUint16: function(byteOffset, littleEndian) {
            if (littleEndian) return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
            else return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
        },
        getInt32: function(byteOffset, littleEndian) {
            var p = this.offset + byteOffset;
            var a = this.buf.a[p++];
            var b = this.buf.a[p++];
            var c = this.buf.a[p++];
            var d = this.buf.a[p++];
            if (littleEndian) return a | b << 8 | c << 16 | d << 24;
            else return d | c << 8 | b << 16 | a << 24;
        },
        getUint32: function(byteOffset, littleEndian) {
            var v = this.getInt32(byteOffset, littleEndian);
            if (v < 0) return v + 4294967296.;
            else return v;
        },
        getFloat32: function(byteOffset, littleEndian) {
            return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset, littleEndian));
        },
        getFloat64: function(byteOffset, littleEndian) {
            var a = this.getInt32(byteOffset, littleEndian);
            var b = this.getInt32(byteOffset + 4, littleEndian);
            return haxe_io_FPHelper.i64ToDouble(littleEndian ? a: b, littleEndian ? b: a);
        },
        setInt8: function(byteOffset, value) {
            if (value < 0) this.buf.a[byteOffset + this.offset] = value + 128 & 255;
            else this.buf.a[byteOffset + this.offset] = value & 255;
        },
        setUint8: function(byteOffset, value) {
            this.buf.a[byteOffset + this.offset] = value & 255;
        },
        setInt16: function(byteOffset, value, littleEndian) {
            this.setUint16(byteOffset, value < 0 ? value + 65536 : value, littleEndian);
        },
        setUint16: function(byteOffset, value, littleEndian) {
            var p = byteOffset + this.offset;
            if (littleEndian) {
                this.buf.a[p] = value & 255;
                this.buf.a[p++] = value >> 8 & 255;
            } else {
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p] = value & 255;
            }
        },
        setInt32: function(byteOffset, value, littleEndian) {
            this.setUint32(byteOffset, value, littleEndian);
        },
        setUint32: function(byteOffset, value, littleEndian) {
            var p = byteOffset + this.offset;
            if (littleEndian) {
                this.buf.a[p++] = value & 255;
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p++] = value >> 16 & 255;
                this.buf.a[p++] = value >>> 24;
            } else {
                this.buf.a[p++] = value >>> 24;
                this.buf.a[p++] = value >> 16 & 255;
                this.buf.a[p++] = value >> 8 & 255;
                this.buf.a[p++] = value & 255;
            }
        },
        setFloat32: function(byteOffset, value, littleEndian) {
            this.setUint32(byteOffset, haxe_io_FPHelper.floatToI32(value), littleEndian);
        },
        setFloat64: function(byteOffset, value, littleEndian) {
            var i64 = haxe_io_FPHelper.doubleToI64(value);
            if (littleEndian) {
                this.setUint32(byteOffset, i64.low);
                this.setUint32(byteOffset, i64.high);
            } else {
                this.setUint32(byteOffset, i64.high);
                this.setUint32(byteOffset, i64.low);
            }
        },
        __class__: js_html_compat_DataView
    };
    var js_html_compat_Uint8Array = function() {};
    $hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
    js_html_compat_Uint8Array.__name__ = ["js", "html", "compat", "Uint8Array"];
    js_html_compat_Uint8Array._new = function(arg1, offset, length) {
        var arr;
        if (typeof(arg1) == "number") {
            arr = [];
            var _g = 0;
            while (_g < arg1) {
                var i = _g++;
                arr[i] = 0;
            }
            arr.byteLength = arr.length;
            arr.byteOffset = 0;
            arr.buffer = new js_html_compat_ArrayBuffer(arr);
        } else if (js_Boot.__instanceof(arg1, js_html_compat_ArrayBuffer)) {
            var buffer = arg1;
            if (offset == null) offset = 0;
            if (length == null) length = buffer.byteLength - offset;
            if (offset == 0) arr = buffer.a;
            else arr = buffer.a.slice(offset, offset + length);
            arr.byteLength = arr.length;
            arr.byteOffset = offset;
            arr.buffer = buffer;
        } else if ((arg1 instanceof Array) && arg1.__enum__ == null) {
            arr = arg1.slice();
            arr.byteLength = arr.length;
            arr.byteOffset = 0;
            arr.buffer = new js_html_compat_ArrayBuffer(arr);
        } else throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
        arr.subarray = js_html_compat_Uint8Array._subarray;
        arr.set = js_html_compat_Uint8Array._set;
        return arr;
    };
    js_html_compat_Uint8Array._set = function(arg, offset) {
        var t = this;
        if (js_Boot.__instanceof(arg.buffer, js_html_compat_ArrayBuffer)) {
            var a = arg;
            if (arg.byteLength + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
            var _g1 = 0;
            var _g = arg.byteLength;
            while (_g1 < _g) {
                var i = _g1++;
                t[i + offset] = a[i];
            }
        } else if ((arg instanceof Array) && arg.__enum__ == null) {
            var a1 = arg;
            if (a1.length + offset > t.byteLength) throw new js__$Boot_HaxeError("set() outside of range");
            var _g11 = 0;
            var _g2 = a1.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                t[i1 + offset] = a1[i1];
            }
        } else throw new js__$Boot_HaxeError("TODO");
    };
    js_html_compat_Uint8Array._subarray = function(start, end) {
        var t = this;
        var a = js_html_compat_Uint8Array._new(t.slice(start, end));
        a.byteOffset = start;
        return a;
    };
    var lime_AssetCache = function() {
        this.enabled = true;
        this.audio = new haxe_ds_StringMap();
        this.font = new haxe_ds_StringMap();
        this.image = new haxe_ds_StringMap();
        this.version = Std["int"](Math.random() * 1000000);
    };
    $hxClasses["lime.AssetCache"] = lime_AssetCache;
    lime_AssetCache.__name__ = ["lime", "AssetCache"];
    lime_AssetCache.prototype = {
        clear: function(prefix) {
            if (prefix == null) {
                this.audio = new haxe_ds_StringMap();
                this.font = new haxe_ds_StringMap();
                this.image = new haxe_ds_StringMap();
            } else {
                var keys = this.audio.keys();
                while (keys.hasNext()) {
                    var key = keys.next();
                    if (StringTools.startsWith(key, prefix)) this.audio.remove(key);
                }
                var keys1 = this.font.keys();
                while (keys1.hasNext()) {
                    var key1 = keys1.next();
                    if (StringTools.startsWith(key1, prefix)) this.font.remove(key1);
                }
                var keys2 = this.image.keys();
                while (keys2.hasNext()) {
                    var key2 = keys2.next();
                    if (StringTools.startsWith(key2, prefix)) this.image.remove(key2);
                }
            }
        },
        __class__: lime_AssetCache
    };
    var lime_app_Event_$Void_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
    lime_app_Event_$Void_$Void.__name__ = ["lime", "app", "Event_Void_Void"];
    lime_app_Event_$Void_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function() {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i]();
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Void_$Void
    };
    var lime_Assets = function() {};
    $hxClasses["lime.Assets"] = lime_Assets;
    lime_Assets.__name__ = ["lime", "Assets"];
    lime_Assets.exists = function(id, type) {
        lime_Assets.initialize();
        if (type == null) type = "BINARY";
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) return library.exists(symbolName, type);
        return false;
    };
    lime_Assets.getAudioBuffer = function(id, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
            var audio = lime_Assets.cache.audio.get(id);
            if (lime_Assets.isValidAudio(audio)) return audio;
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "SOUND")) {
                if (library.isLocal(symbolName, "SOUND")) {
                    var audio1 = library.getAudioBuffer(symbolName);
                    if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.audio.set(id, audio1);
                    return audio1;
                } else haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 122,
                    className: "lime.Assets",
                    methodName: "getAudioBuffer"
                });
            } else haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 128,
                className: "lime.Assets",
                methodName: "getAudioBuffer"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 134,
            className: "lime.Assets",
            methodName: "getAudioBuffer"
        });
        return null;
    };
    lime_Assets.getBytes = function(id) {
        lime_Assets.initialize();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "BINARY")) {
                if (library.isLocal(symbolName, "BINARY")) return library.getBytes(symbolName);
                else haxe_Log.trace("[Assets] String or Bytes asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 171,
                    className: "lime.Assets",
                    methodName: "getBytes"
                });
            } else haxe_Log.trace("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 177,
                className: "lime.Assets",
                methodName: "getBytes"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 183,
            className: "lime.Assets",
            methodName: "getBytes"
        });
        return null;
    };
    lime_Assets.getFont = function(id, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.font.exists(id)) return lime_Assets.cache.font.get(id);
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "FONT")) {
                if (library.isLocal(symbolName, "FONT")) {
                    var font = library.getFont(symbolName);
                    if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.font.set(id, font);
                    return font;
                } else haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 234,
                    className: "lime.Assets",
                    methodName: "getFont"
                });
            } else haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 240,
                className: "lime.Assets",
                methodName: "getFont"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 246,
            className: "lime.Assets",
            methodName: "getFont"
        });
        return null;
    };
    lime_Assets.getImage = function(id, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
            var image = lime_Assets.cache.image.get(id);
            if (lime_Assets.isValidImage(image)) return image;
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "IMAGE")) {
                if (library.isLocal(symbolName, "IMAGE")) {
                    var image1 = library.getImage(symbolName);
                    if (useCache && lime_Assets.cache.enabled) lime_Assets.cache.image.set(id, image1);
                    return image1;
                } else haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 304,
                    className: "lime.Assets",
                    methodName: "getImage"
                });
            } else haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 310,
                className: "lime.Assets",
                methodName: "getImage"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 316,
            className: "lime.Assets",
            methodName: "getImage"
        });
        return null;
    };
    lime_Assets.getLibrary = function(name) {
        if (name == null || name == "") name = "default";
        return lime_Assets.libraries.get(name);
    };
    lime_Assets.getPath = function(id) {
        lime_Assets.initialize();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, null)) return library.getPath(symbolName);
            else haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 364,
                className: "lime.Assets",
                methodName: "getPath"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 370,
            className: "lime.Assets",
            methodName: "getPath"
        });
        return null;
    };
    lime_Assets.getText = function(id) {
        lime_Assets.initialize();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "TEXT")) {
                if (library.isLocal(symbolName, "TEXT")) return library.getText(symbolName);
                else haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 407,
                    className: "lime.Assets",
                    methodName: "getText"
                });
            } else haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 413,
                className: "lime.Assets",
                methodName: "getText"
            });
        } else haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 419,
            className: "lime.Assets",
            methodName: "getText"
        });
        return null;
    };
    lime_Assets.initialize = function() {
        if (!lime_Assets.initialized) {
            lime_Assets.registerLibrary("default", new DefaultAssetLibrary());
            lime_Assets.initialized = true;
        }
    };
    lime_Assets.isLocal = function(id, type, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        if (useCache && lime_Assets.cache.enabled) {
            if (type == "IMAGE" || type == null) {
                if (lime_Assets.cache.image.exists(id)) return true;
            }
            if (type == "FONT" || type == null) {
                if (lime_Assets.cache.font.exists(id)) return true;
            }
            if (type == "SOUND" || type == "MUSIC" || type == null) {
                if (lime_Assets.cache.audio.exists(id)) return true;
            }
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) return library.isLocal(symbolName, type);
        return false;
    };
    lime_Assets.isValidAudio = function(buffer) {
        return buffer != null;
    };
    lime_Assets.isValidImage = function(buffer) {
        return true;
    };
    lime_Assets.list = function(type) {
        lime_Assets.initialize();
        var items = [];
        var $it0 = lime_Assets.libraries.iterator();
        while ($it0.hasNext()) {
            var library = $it0.next();
            var libraryItems = library.list(type);
            if (libraryItems != null) items = items.concat(libraryItems);
        }
        return items;
    };
    lime_Assets.loadAudioBuffer = function(id, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.audio.exists(id)) {
            var audio = lime_Assets.cache.audio.get(id);
            if (lime_Assets.isValidAudio(audio)) {
                promise.complete(audio);
                return promise.future;
            }
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "SOUND")) {
                var future = library.loadAudioBuffer(symbolName);
                if (useCache && lime_Assets.cache.enabled) future.onComplete(function(audio1) {
                    lime_Assets.cache.audio.set(id, audio1);
                });
                promise.completeWith(future);
            } else promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    lime_Assets.loadBytes = function(id) {
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "BINARY")) promise.completeWith(library.loadBytes(symbolName));
            else promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    lime_Assets.loadFont = function(id) {
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "FONT")) promise.completeWith(library.loadFont(symbolName));
            else promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    lime_Assets.loadImage = function(id, useCache) {
        if (useCache == null) useCache = true;
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        if (useCache && lime_Assets.cache.enabled && lime_Assets.cache.image.exists(id)) {
            var image = lime_Assets.cache.image.get(id);
            if (lime_Assets.isValidImage(image)) {
                promise.complete(image);
                return promise.future;
            }
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "IMAGE")) {
                var future = library.loadImage(symbolName);
                if (useCache && lime_Assets.cache.enabled) future.onComplete(function(image1) {
                    lime_Assets.cache.image.set(id, image1);
                });
                promise.completeWith(future);
            } else promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    lime_Assets.loadLibrary = function(name) {
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        var data = lime_Assets.getText("libraries/" + name + ".json");
        if (data != null && data != "") {
            var info = JSON.parse(data);
            var library = Type.createInstance(Type.resolveClass(info.type), info.args);
            lime_Assets.libraries.set(name, library);
            library.onChange.add(($_ = lime_Assets.onChange, $bind($_, $_.dispatch)));
            promise.completeWith(library.load());
        } else promise.error("[Assets] There is no asset library named \"" + name + "\"");
        return promise.future;
    };
    lime_Assets.loadText = function(id) {
        lime_Assets.initialize();
        var promise = new lime_app_Promise();
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = lime_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "TEXT")) promise.completeWith(library.loadText(symbolName));
            else promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    lime_Assets.registerLibrary = function(name, library) {
        if (lime_Assets.libraries.exists(name)) {
            if (lime_Assets.libraries.get(name) == library) return;
            else lime_Assets.unloadLibrary(name);
        }
        if (library != null) library.onChange.add(lime_Assets.library_onChange);
        lime_Assets.libraries.set(name, library);
    };
    lime_Assets.unloadLibrary = function(name) {
        lime_Assets.initialize();
        var library = lime_Assets.libraries.get(name);
        if (library != null) {
            lime_Assets.cache.clear(name + ":");
            library.onChange.remove(lime_Assets.library_onChange);
            library.unload();
        }
        lime_Assets.libraries.remove(name);
    };
    lime_Assets.library_onChange = function() {
        lime_Assets.cache.clear();
        lime_Assets.onChange.dispatch();
    };
    var lime__$backend_html5_HTML5Application = function(parent) {
        this.gameDeviceCache = new haxe_ds_IntMap();
        this.parent = parent;
        this.currentUpdate = 0;
        this.lastUpdate = 0;
        this.nextUpdate = 0;
        this.framePeriod = -1;
        lime_audio_AudioManager.init();
    };
    $hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
    lime__$backend_html5_HTML5Application.__name__ = ["lime", "_backend", "html5", "HTML5Application"];
    lime__$backend_html5_HTML5Application.prototype = {
        convertKeyCode: function(keyCode) {
            if (keyCode >= 65 && keyCode <= 90) return keyCode + 32;
            switch (keyCode) {
            case 16:
                return 1073742049;
            case 17:
                return 1073742048;
            case 18:
                return 1073742050;
            case 20:
                return 1073741881;
            case 144:
                return 1073741907;
            case 37:
                return 1073741904;
            case 38:
                return 1073741906;
            case 39:
                return 1073741903;
            case 40:
                return 1073741905;
            case 45:
                return 1073741897;
            case 46:
                return 127;
            case 36:
                return 1073741898;
            case 35:
                return 1073741901;
            case 33:
                return 1073741899;
            case 34:
                return 1073741902;
            case 112:
                return 1073741882;
            case 113:
                return 1073741883;
            case 114:
                return 1073741884;
            case 115:
                return 1073741885;
            case 116:
                return 1073741886;
            case 117:
                return 1073741887;
            case 118:
                return 1073741888;
            case 119:
                return 1073741889;
            case 120:
                return 1073741890;
            case 121:
                return 1073741891;
            case 122:
                return 1073741892;
            case 123:
                return 1073741893;
            case 124:
                return 1073741928;
            case 125:
                return 1073741929;
            case 126:
                return 1073741930;
            case 186:
                return 59;
            case 187:
                return 61;
            case 188:
                return 44;
            case 189:
                return 45;
            case 190:
                return 46;
            case 191:
                return 47;
            case 192:
                return 96;
            case 219:
                return 91;
            case 220:
                return 92;
            case 221:
                return 93;
            case 222:
                return 39;
            }
            return keyCode;
        },
        create: function(config) {},
        exec: function() {
            window.addEventListener("keydown", $bind(this, this.handleKeyEvent), false);
            window.addEventListener("keyup", $bind(this, this.handleKeyEvent), false);
            window.addEventListener("focus", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("blur", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("resize", $bind(this, this.handleWindowEvent), false);
            window.addEventListener("beforeunload", $bind(this, this.handleWindowEvent), false);

            if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
                CanvasRenderingContext2D.prototype.isPointInStroke = function(path, x, y) {
                    return false;
                };
            }

            var lastTime = 0;
            var vendors = ['ms', 'moz', 'webkit', 'o'];
            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
                window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
            }

            if (!window.requestAnimationFrame) window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() {
                    callback(currTime + timeToCall);
                },
                timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

            if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };

            window.requestAnimFrame = window.requestAnimationFrame;;
            this.lastUpdate = new Date().getTime();
            this.handleApplicationEvent();
            return 0;
        },
        exit: function() {},
        getFrameRate: function() {
            if (this.framePeriod < 0) return 60;
            else if (this.framePeriod == 1000) return 0;
            else return 1000 / this.framePeriod;
        },
        handleApplicationEvent: function(__) {
            this.updateGameDevices();
            this.currentUpdate = new Date().getTime();
            if (this.currentUpdate >= this.nextUpdate) {
                this.deltaTime = this.currentUpdate - this.lastUpdate;
                this.parent.onUpdate.dispatch(this.deltaTime | 0);
                if (this.parent.renderers[0] != null) {
                    this.parent.renderers[0].onRender.dispatch();
                    this.parent.renderers[0].flip();
                }
                if (this.framePeriod < 0) {
                    this.nextUpdate = this.currentUpdate;
                    this.nextUpdate = this.currentUpdate;
                } else this.nextUpdate = this.currentUpdate + this.framePeriod;
                this.lastUpdate = this.currentUpdate;
            }
            window.requestAnimationFrame($bind(this, this.handleApplicationEvent));
        },
        handleKeyEvent: function(event) {
            if (this.parent.windows[0] != null) {
                var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode: event.which);
                var modifier;
                modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
                if (event.type == "keydown") {
                    this.parent.windows[0].onKeyDown.dispatch(keyCode, modifier);
                    if (this.parent.windows[0].onKeyDown.canceled) event.preventDefault();
                } else {
                    this.parent.windows[0].onKeyUp.dispatch(keyCode, modifier);
                    if (this.parent.windows[0].onKeyUp.canceled) event.preventDefault();
                }
            }
        },
        handleWindowEvent: function(event) {
            if (this.parent.windows[0] != null) {
                var _g = event.type;
                switch (_g) {
                case "focus":
                    this.parent.windows[0].onFocusIn.dispatch();
                    this.parent.windows[0].onActivate.dispatch();
                    break;
                case "blur":
                    this.parent.windows[0].onFocusOut.dispatch();
                    this.parent.windows[0].onDeactivate.dispatch();
                    break;
                case "resize":
                    var cacheWidth = this.parent.windows[0].__width;
                    var cacheHeight = this.parent.windows[0].__height;
                    this.parent.windows[0].backend.handleResize();
                    if (this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width, this.parent.windows[0].__height);
                    break;
                case "beforeunload":
                    this.parent.windows[0].onClose.dispatch();
                    break;
                }
            }
        },
        setFrameRate: function(value) {
            if (value >= 60) this.framePeriod = -1;
            else if (value > 0) this.framePeriod = 1000 / value;
            else this.framePeriod = 1000;
            return value;
        },
        updateGameDevices: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            if (devices == null) return;
            var id;
            var gamepad;
            var joystick;
            var data;
            var cache;
            var _g1 = 0;
            var _g = devices.length;
            while (_g1 < _g) {
                var i = _g1++;
                id = i;
                data = devices[id];
                if (data == null) continue;
                if (!this.gameDeviceCache.h.hasOwnProperty(id)) {
                    cache = new lime__$backend_html5_GameDeviceData();
                    cache.id = id;
                    cache.connected = data.connected;
                    var _g3 = 0;
                    var _g2 = data.buttons.length;
                    while (_g3 < _g2) {
                        var i1 = _g3++;
                        cache.buttons.push(data.buttons[i1].value);
                    }
                    var _g31 = 0;
                    var _g21 = data.axes.length;
                    while (_g31 < _g21) {
                        var i2 = _g31++;
                        cache.axes.push(data.axes[i2]);
                    }
                    if (data.mapping == "standard") cache.isGamepad = true;
                    this.gameDeviceCache.h[id] = cache;
                    if (data.connected) {
                        lime_ui_Joystick.__connect(id);
                        if (cache.isGamepad) lime_ui_Gamepad.__connect(id);
                    }
                }
                cache = this.gameDeviceCache.h[id];
                joystick = lime_ui_Joystick.devices.h[id];
                gamepad = lime_ui_Gamepad.devices.h[id];
                if (data.connected) {
                    var button;
                    var value;
                    var _g32 = 0;
                    var _g22 = data.buttons.length;
                    while (_g32 < _g22) {
                        var i3 = _g32++;
                        value = data.buttons[i3].value;
                        if (value != cache.buttons[i3]) {
                            if (i3 == 6) {
                                joystick.onAxisMove.dispatch(data.axes.length, value);
                                if (gamepad != null) gamepad.onAxisMove.dispatch(4, value);
                            } else if (i3 == 7) {
                                joystick.onAxisMove.dispatch(data.axes.length + 1, value);
                                if (gamepad != null) gamepad.onAxisMove.dispatch(5, value);
                            } else {
                                if (value > 0) joystick.onButtonDown.dispatch(i3);
                                else joystick.onButtonUp.dispatch(i3);
                                if (gamepad != null) {
                                    switch (i3) {
                                    case 0:
                                        button = 0;
                                        break;
                                    case 1:
                                        button = 1;
                                        break;
                                    case 2:
                                        button = 2;
                                        break;
                                    case 3:
                                        button = 3;
                                        break;
                                    case 4:
                                        button = 9;
                                        break;
                                    case 5:
                                        button = 10;
                                        break;
                                    case 8:
                                        button = 4;
                                        break;
                                    case 9:
                                        button = 6;
                                        break;
                                    case 10:
                                        button = 7;
                                        break;
                                    case 11:
                                        button = 8;
                                        break;
                                    case 12:
                                        button = 11;
                                        break;
                                    case 13:
                                        button = 12;
                                        break;
                                    case 14:
                                        button = 13;
                                        break;
                                    case 15:
                                        button = 14;
                                        break;
                                    case 16:
                                        button = 5;
                                        break;
                                    default:
                                        continue;
                                    }
                                    if (value > 0) gamepad.onButtonDown.dispatch(button);
                                    else gamepad.onButtonUp.dispatch(button);
                                }
                            }
                            cache.buttons[i3] = value;
                        }
                    }
                    var _g33 = 0;
                    var _g23 = data.axes.length;
                    while (_g33 < _g23) {
                        var i4 = _g33++;
                        if (data.axes[i4] != cache.axes[i4]) {
                            joystick.onAxisMove.dispatch(i4, data.axes[i4]);
                            if (gamepad != null) gamepad.onAxisMove.dispatch(i4, data.axes[i4]);
                            cache.axes[i4] = data.axes[i4];
                        }
                    }
                } else if (cache.connected) {
                    cache.connected = false;
                    lime_ui_Joystick.__disconnect(id);
                    lime_ui_Gamepad.__disconnect(id);
                }
            }
        },
        __class__: lime__$backend_html5_HTML5Application
    };
    var lime__$backend_html5_GameDeviceData = function() {
        this.connected = true;
        this.buttons = [];
        this.axes = [];
    };
    $hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
    lime__$backend_html5_GameDeviceData.__name__ = ["lime", "_backend", "html5", "GameDeviceData"];
    lime__$backend_html5_GameDeviceData.prototype = {
        __class__: lime__$backend_html5_GameDeviceData
    };
    var lime__$backend_html5_HTML5Mouse = function() {};
    $hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
    lime__$backend_html5_HTML5Mouse.__name__ = ["lime", "_backend", "html5", "HTML5Mouse"];
    lime__$backend_html5_HTML5Mouse.__cursor = null;
    lime__$backend_html5_HTML5Mouse.__hidden = null;
    lime__$backend_html5_HTML5Mouse.hide = function() {
        if (!lime__$backend_html5_HTML5Mouse.__hidden) {
            lime__$backend_html5_HTML5Mouse.__hidden = true;
            var _g = 0;
            var _g1 = lime_app_Application.current.windows;
            while (_g < _g1.length) {
                var $window = _g1[_g]; ++_g;
                $window.backend.element.style.cursor = "none";
            }
        }
    };
    lime__$backend_html5_HTML5Mouse.show = function() {
        if (lime__$backend_html5_HTML5Mouse.__hidden) {
            lime__$backend_html5_HTML5Mouse.__hidden = false;
            var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
            lime__$backend_html5_HTML5Mouse.__cursor = null;
            lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
        }
    };
    lime__$backend_html5_HTML5Mouse.warp = function(x, y, window) {};
    lime__$backend_html5_HTML5Mouse.get_cursor = function() {
        if (lime__$backend_html5_HTML5Mouse.__cursor == null) return lime_ui_MouseCursor.DEFAULT;
        return lime__$backend_html5_HTML5Mouse.__cursor;
    };
    lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
        if (lime__$backend_html5_HTML5Mouse.__cursor != value) {
            if (!lime__$backend_html5_HTML5Mouse.__hidden) {
                var _g = 0;
                var _g1 = lime_app_Application.current.windows;
                while (_g < _g1.length) {
                    var $window = _g1[_g]; ++_g;
                    switch (value[1]) {
                    case 0:
                        $window.backend.element.style.cursor = "default";
                        break;
                    case 1:
                        $window.backend.element.style.cursor = "crosshair";
                        break;
                    case 3:
                        $window.backend.element.style.cursor = "move";
                        break;
                    case 4:
                        $window.backend.element.style.cursor = "pointer";
                        break;
                    case 5:
                        $window.backend.element.style.cursor = "nesw-resize";
                        break;
                    case 6:
                        $window.backend.element.style.cursor = "ns-resize";
                        break;
                    case 7:
                        $window.backend.element.style.cursor = "nwse-resize";
                        break;
                    case 8:
                        $window.backend.element.style.cursor = "ew-resize";
                        break;
                    case 9:
                        $window.backend.element.style.cursor = "text";
                        break;
                    case 10:
                        $window.backend.element.style.cursor = "wait";
                        break;
                    case 11:
                        $window.backend.element.style.cursor = "wait";
                        break;
                    default:
                        $window.backend.element.style.cursor = "auto";
                    }
                }
            }
            lime__$backend_html5_HTML5Mouse.__cursor = value;
        }
        return lime__$backend_html5_HTML5Mouse.__cursor;
    };
    lime__$backend_html5_HTML5Mouse.get_lock = function() {
        return false;
    };
    lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
        return value;
    };
    var lime__$backend_html5_HTML5Renderer = function(parent) {
        this.parent = parent;
    };
    $hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
    lime__$backend_html5_HTML5Renderer.__name__ = ["lime", "_backend", "html5", "HTML5Renderer"];
    lime__$backend_html5_HTML5Renderer.prototype = {
        create: function() {
            this.createContext(); {
                var _g = this.parent.context;
                switch (_g[1]) {
                case 0:
                    this.parent.window.backend.canvas.addEventListener("webglcontextlost", $bind(this, this.handleEvent), false);
                    this.parent.window.backend.canvas.addEventListener("webglcontextrestored", $bind(this, this.handleEvent), false);
                    break;
                default:
                }
            }
        },
        createContext: function() {
            if (this.parent.window.backend.div != null) {
                this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
                this.parent.type = lime_graphics_RendererType.DOM;
            } else if (this.parent.window.backend.canvas != null) {
                var webgl = null;
                var options = {
                    alpha: false,
                    antialias: Object.prototype.hasOwnProperty.call(this.parent.window.config, "antialiasing") ? this.parent.window.config.antialiasing > 0 : false,
                    depth: Object.prototype.hasOwnProperty.call(this.parent.window.config, "depthBuffer") ? this.parent.window.config.depthBuffer: true,
                    premultipliedAlpha: false,
                    stencil: Object.prototype.hasOwnProperty.call(this.parent.window.config, "stencilBuffer") ? this.parent.window.config.stencilBuffer: false,
                    preserveDrawingBuffer: false
                };
                webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.parent.window.backend.canvas, options);
                if (webgl == null) {
                    this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
                    this.parent.type = lime_graphics_RendererType.CANVAS;
                } else {
                    lime_graphics_opengl_GL.context = webgl;
                    this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
                    this.parent.type = lime_graphics_RendererType.OPENGL;
                }
            }
        },
        flip: function() {},
        handleEvent: function(event) {
            var _g = event.type;
            switch (_g) {
            case "webglcontextlost":
                event.preventDefault();
                this.parent.context = null;
                this.parent.onContextLost.dispatch();
                break;
            case "webglcontextrestored":
                this.createContext();
                this.parent.onContextRestored.dispatch(this.parent.context);
                break;
            default:
            }
        },
        readPixels: function(rect) {
            if (this.parent.window.backend.canvas != null) {
                if (rect == null) rect = new lime_math_Rectangle(0, 0, this.parent.window.backend.canvas.width, this.parent.window.backend.canvas.height);
                else rect.__contract(0, 0, this.parent.window.backend.canvas.width, this.parent.window.backend.canvas.height);
                if (rect.width > 0 && rect.height > 0) {
                    var canvas = window.document.createElement("canvas");
                    canvas.width = rect.width | 0;
                    canvas.height = rect.height | 0;
                    var context = canvas.getContext("2d");
                    context.drawImage(this.parent.window.backend.canvas, -rect.x, -rect.y);
                    return lime_graphics_Image.fromCanvas(canvas);
                }
            }
            return null;
        },
        render: function() {},
        __class__: lime__$backend_html5_HTML5Renderer
    };
    var lime__$backend_html5_HTML5Window = function(parent) {
        this.unusedTouchesPool = new List();
        this.currentTouches = new haxe_ds_IntMap();
        this.parent = parent;
        if (parent.config != null && Object.prototype.hasOwnProperty.call(parent.config, "element")) this.element = parent.config.element;
    };
    $hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
    lime__$backend_html5_HTML5Window.__name__ = ["lime", "_backend", "html5", "HTML5Window"];
    lime__$backend_html5_HTML5Window.textInput = null;
    lime__$backend_html5_HTML5Window.prototype = {
        alert: function(message, title) {
            if (message != null) js_Browser.alert(message);
        },
        close: function() {
            this.parent.application.removeWindow(this.parent);
        },
        create: function(application) {
            this.setWidth = this.parent.__width;
            this.setHeight = this.parent.__height;
            this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
            if (js_Boot.__instanceof(this.element, HTMLCanvasElement)) this.canvas = this.element;
            else this.canvas = window.document.createElement("canvas");
            if (this.canvas != null) {
                var style = this.canvas.style;
                style.setProperty("-webkit-transform", "translateZ(0)", null);
                style.setProperty("transform", "translateZ(0)", null);
            } else if (this.div != null) {
                var style1 = this.div.style;
                style1.setProperty("-webkit-transform", "translate3D(0,0,0)", null);
                style1.setProperty("transform", "translate3D(0,0,0)", null);
                style1.position = "relative";
                style1.overflow = "hidden";
                style1.setProperty("-webkit-user-select", "none", null);
                style1.setProperty("-moz-user-select", "none", null);
                style1.setProperty("-ms-user-select", "none", null);
                style1.setProperty("-o-user-select", "none", null);
            }
            if (this.parent.__width == 0 && this.parent.__height == 0) {
                if (this.element != null) {
                    this.parent.set_width(this.element.clientWidth);
                    this.parent.set_height(this.element.clientHeight);
                } else {
                    this.parent.set_width(window.innerWidth);
                    this.parent.set_height(window.innerHeight);
                }
                this.parent.set_fullscreen(true);
            }
            if (this.canvas != null) {
                this.canvas.width = this.parent.__width;
                this.canvas.height = this.parent.__height;
            } else {
                this.div.style.width = this.parent.__width + "px";
                this.div.style.height = this.parent.__height + "px";
            }
            this.handleResize();
            if (this.element != null) {
                if (this.canvas != null) {
                    if (this.element != this.canvas) this.element.appendChild(this.canvas);
                } else this.element.appendChild(this.div);
                var events = ["mousedown", "mouseenter", "mouseleave", "mousemove", "mouseup", "wheel"];
                var _g = 0;
                while (_g < events.length) {
                    var event = events[_g]; ++_g;
                    this.element.addEventListener(event, $bind(this, this.handleMouseEvent), true);
                }
                window.document.addEventListener("dragstart",
                function(e) {
                    if (e.target.nodeName.toLowerCase() == "img") {
                        e.preventDefault();
                        return false;
                    }
                    return true;
                },
                false);
                this.element.addEventListener("touchstart", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("touchmove", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("touchend", $bind(this, this.handleTouchEvent), true);
                this.element.addEventListener("gamepadconnected", $bind(this, this.handleGamepadEvent), true);
                this.element.addEventListener("gamepaddisconnected", $bind(this, this.handleGamepadEvent), true);
            }
        },
        focus: function() {},
        getDisplay: function() {
            return lime_system_System.getDisplay(0);
        },
        getEnableTextEvents: function() {
            return this.enableTextEvents;
        },
        handleFocusEvent: function(event) {
            if (this.enableTextEvents) haxe_Timer.delay(function() {
                lime__$backend_html5_HTML5Window.textInput.focus();
            },
            20);
        },
        handleGamepadEvent: function(event) {
            var _g = event.type;
            switch (_g) {
            case "gamepadconnected":
                lime_ui_Joystick.__connect(event.gamepad.index);
                if (event.gamepad.mapping == "standard") lime_ui_Gamepad.__connect(event.gamepad.index);
                break;
            case "gamepaddisconnected":
                lime_ui_Joystick.__disconnect(event.gamepad.index);
                lime_ui_Gamepad.__disconnect(event.gamepad.index);
                break;
            default:
            }
        },
        handleInputEvent: function(event) {
            if (lime__$backend_html5_HTML5Window.textInput.value != "") {
                this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
                lime__$backend_html5_HTML5Window.textInput.value = "";
            }
        },
        handleMouseEvent: function(event) {
            var x = 0.0;
            var y = 0.0;
            if (event.type != "wheel") {
                if (this.element != null) {
                    if (this.canvas != null) {
                        var rect = this.canvas.getBoundingClientRect();
                        x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
                        y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
                    } else if (this.div != null) {
                        var rect1 = this.div.getBoundingClientRect();
                        x = event.clientX - rect1.left;
                        y = event.clientY - rect1.top;
                    } else {
                        var rect2 = this.element.getBoundingClientRect();
                        x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
                        y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
                    }
                } else {
                    x = event.clientX;
                    y = event.clientY;
                }
                var _g = event.type;
                switch (_g) {
                case "mousedown":
                    this.parent.onMouseDown.dispatch(x, y, event.button);
                    break;
                case "mouseenter":
                    this.parent.onEnter.dispatch();
                    break;
                case "mouseleave":
                    this.parent.onLeave.dispatch();
                    break;
                case "mouseup":
                    this.parent.onMouseUp.dispatch(x, y, event.button);
                    break;
                case "mousemove":
                    this.parent.onMouseMove.dispatch(x, y);
                    break;
                default:
                }
            } else this.parent.onMouseWheel.dispatch(event.deltaX, -event.deltaY);
        },
        handleResize: function() {
            var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
            if (this.element != null && (this.div == null || this.div != null && stretch)) {
                if (stretch) {
                    if (this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
                        this.parent.set_width(this.element.clientWidth);
                        this.parent.set_height(this.element.clientHeight);
                        if (this.canvas != null) {
                            if (this.element != this.canvas) {
                                this.canvas.width = this.element.clientWidth;
                                this.canvas.height = this.element.clientHeight;
                            }
                        } else {
                            this.div.style.width = this.element.clientWidth + "px";
                            this.div.style.height = this.element.clientHeight + "px";
                        }
                    }
                } else {
                    var scaleX = this.element.clientWidth / this.setWidth;
                    var scaleY = this.element.clientHeight / this.setHeight;
                    var currentRatio = scaleX / scaleY;
                    var targetRatio = Math.min(scaleX, scaleY);
                    if (this.canvas != null) {
                        if (this.element != this.canvas) {
                            this.canvas.style.width = this.setWidth * targetRatio + "px";
                            this.canvas.style.height = this.setHeight * targetRatio + "px";
                            this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
                            this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
                        }
                    } else {
                        this.div.style.width = this.setWidth * targetRatio + "px";
                        this.div.style.height = this.setHeight * targetRatio + "px";
                        this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
                        this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
                    }
                }
            }
        },
        handleTouchEvent: function(event) {
            event.preventDefault();
            var rect = null;
            if (this.element != null) {
                if (this.canvas != null) rect = this.canvas.getBoundingClientRect();
                else if (this.div != null) rect = this.div.getBoundingClientRect();
                else rect = this.element.getBoundingClientRect();
            }
            var windowWidth = this.setWidth;
            var windowHeight = this.setHeight;
            if (windowWidth == 0 || windowHeight == 0) {
                if (rect != null) {
                    windowWidth = rect.width;
                    windowHeight = rect.height;
                } else {
                    windowWidth = 1;
                    windowHeight = 1;
                }
            }
            var _g = 0;
            var _g1 = event.changedTouches;
            while (_g < _g1.length) {
                var data = _g1[_g]; ++_g;
                var x = 0.0;
                var y = 0.0;
                if (rect != null) {
                    x = (data.clientX - rect.left) * (windowWidth / rect.width);
                    y = (data.clientY - rect.top) * (windowHeight / rect.height);
                } else {
                    x = data.clientX;
                    y = data.clientY;
                }
                var _g2 = event.type;
                switch (_g2) {
                case "touchstart":
                    var touch = this.unusedTouchesPool.pop();
                    if (touch == null) touch = new lime_ui_Touch(x / windowWidth, y / windowHeight, data.identifier, 0, 0, data.force, this.parent.id);
                    else {
                        touch.x = x / windowWidth;
                        touch.y = y / windowHeight;
                        touch.id = data.identifier;
                        touch.dx = 0;
                        touch.dy = 0;
                        touch.pressure = data.force;
                        touch.device = this.parent.id;
                    }
                    this.currentTouches.h[data.identifier] = touch;
                    lime_ui_Touch.onStart.dispatch(touch);
                    if (this.primaryTouch == null) this.primaryTouch = touch;
                    if (touch == this.primaryTouch) this.parent.onMouseDown.dispatch(x, y, 0);
                    break;
                case "touchend":
                    var touch1 = this.currentTouches.h[data.identifier];
                    if (touch1 != null) {
                        var cacheX = touch1.x;
                        var cacheY = touch1.y;
                        touch1.x = x / windowWidth;
                        touch1.y = y / windowHeight;
                        touch1.dx = touch1.x - cacheX;
                        touch1.dy = touch1.y - cacheY;
                        touch1.pressure = data.force;
                        lime_ui_Touch.onEnd.dispatch(touch1);
                        this.currentTouches.remove(data.identifier);
                        this.unusedTouchesPool.add(touch1);
                        if (touch1 == this.primaryTouch) {
                            this.parent.onMouseUp.dispatch(x, y, 0);
                            this.primaryTouch = null;
                        }
                    }
                    break;
                case "touchmove":
                    var touch2 = this.currentTouches.h[data.identifier];
                    if (touch2 != null) {
                        var cacheX1 = touch2.x;
                        var cacheY1 = touch2.y;
                        touch2.x = x / windowWidth;
                        touch2.y = y / windowHeight;
                        touch2.dx = touch2.x - cacheX1;
                        touch2.dy = touch2.y - cacheY1;
                        touch2.pressure = data.force;
                        lime_ui_Touch.onMove.dispatch(touch2);
                        if (touch2 == this.primaryTouch) this.parent.onMouseMove.dispatch(x, y);
                    }
                    break;
                default:
                }
            }
        },
        move: function(x, y) {},
        resize: function(width, height) {},
        setBorderless: function(value) {
            return value;
        },
        setEnableTextEvents: function(value) {
            if (value) {
                if (lime__$backend_html5_HTML5Window.textInput == null) {
                    lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
                    lime__$backend_html5_HTML5Window.textInput.type = "text";
                    lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
                    lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
                    lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
                    lime__$backend_html5_HTML5Window.textInput.value = "";
                    lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
                    lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
                    lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
                    lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
                    lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
                    if (new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)) {
                        lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
                        lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
                        lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
                    } else {
                        lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
                        lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
                    }
                    lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
                    lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
                    window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
                }
                if (!this.enableTextEvents) {
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("input", $bind(this, this.handleInputEvent), true);
                    lime__$backend_html5_HTML5Window.textInput.addEventListener("blur", $bind(this, this.handleFocusEvent), true);
                }
                lime__$backend_html5_HTML5Window.textInput.focus();
            } else if (lime__$backend_html5_HTML5Window.textInput != null) {
                lime__$backend_html5_HTML5Window.textInput.removeEventListener("input", $bind(this, this.handleInputEvent), true);
                lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur", $bind(this, this.handleFocusEvent), true);
                lime__$backend_html5_HTML5Window.textInput.blur();
            }
            return this.enableTextEvents = value;
        },
        setFullscreen: function(value) {
            return false;
        },
        setIcon: function(image) {},
        setMaximized: function(value) {
            return false;
        },
        setMinimized: function(value) {
            return false;
        },
        setResizable: function(value) {
            return value;
        },
        setTitle: function(value) {
            return value;
        },
        __class__: lime__$backend_html5_HTML5Window
    };
    var lime_app_IModule = function() {};
    $hxClasses["lime.app.IModule"] = lime_app_IModule;
    lime_app_IModule.__name__ = ["lime", "app", "IModule"];
    lime_app_IModule.prototype = {
        __class__: lime_app_IModule
    };
    var lime_app_Module = function() {
        this.onExit = new lime_app_Event_$Int_$Void();
    };
    $hxClasses["lime.app.Module"] = lime_app_Module;
    lime_app_Module.__name__ = ["lime", "app", "Module"];
    lime_app_Module.__interfaces__ = [lime_app_IModule];
    lime_app_Module.prototype = {
        onGamepadAxisMove: function(gamepad, axis, value) {},
        onGamepadButtonDown: function(gamepad, button) {},
        onGamepadButtonUp: function(gamepad, button) {},
        onGamepadConnect: function(gamepad) {
            haxe_Log.trace("onGamepadConnect (module)", {
                fileName: "Module.hx",
                lineNumber: 64,
                className: "lime.app.Module",
                methodName: "onGamepadConnect"
            });
        },
        onGamepadDisconnect: function(gamepad) {},
        onJoystickAxisMove: function(joystick, axis, value) {},
        onJoystickButtonDown: function(joystick, button) {},
        onJoystickButtonUp: function(joystick, button) {},
        onJoystickConnect: function(joystick) {},
        onJoystickDisconnect: function(joystick) {},
        onJoystickHatMove: function(joystick, hat, position) {},
        onJoystickTrackballMove: function(joystick, trackball, value) {},
        onKeyDown: function(window, keyCode, modifier) {},
        onKeyUp: function(window, keyCode, modifier) {},
        onModuleExit: function(code) {},
        onMouseDown: function(window, x, y, button) {},
        onMouseMove: function(window, x, y) {},
        onMouseMoveRelative: function(window, x, y) {},
        onMouseUp: function(window, x, y, button) {},
        onMouseWheel: function(window, deltaX, deltaY) {},
        onPreloadComplete: function() {},
        onPreloadProgress: function(loaded, total) {},
        onRenderContextLost: function(renderer) {},
        onRenderContextRestored: function(renderer, context) {},
        onTextEdit: function(window, text, start, length) {},
        onTextInput: function(window, text) {},
        onTouchEnd: function(touch) {},
        onTouchMove: function(touch) {},
        onTouchStart: function(touch) {},
        onWindowActivate: function(window) {},
        onWindowClose: function(window) {},
        onWindowCreate: function(window) {},
        onWindowDeactivate: function(window) {},
        onWindowDropFile: function(window, file) {},
        onWindowEnter: function(window) {},
        onWindowFocusIn: function(window) {},
        onWindowFocusOut: function(window) {},
        onWindowFullscreen: function(window) {},
        onWindowLeave: function(window) {},
        onWindowMove: function(window, x, y) {},
        onWindowMinimize: function(window) {},
        onWindowResize: function(window, width, height) {},
        onWindowRestore: function(window) {},
        render: function(renderer) {},
        update: function(deltaTime) {},
        __class__: lime_app_Module
    };
    var lime_app_Application = function() {
        this.onUpdate = new lime_app_Event_$Int_$Void();
        lime_app_Module.call(this);
        if (lime_app_Application.current == null) lime_app_Application.current = this;
        this.modules = [];
        this.renderers = [];
        this.windows = [];
        this.windowByID = new haxe_ds_IntMap();
        this.backend = new lime__$backend_html5_HTML5Application(this);
        this.onExit.add($bind(this, this.onModuleExit));
        this.onUpdate.add($bind(this, this.update));
        lime_ui_Gamepad.onConnect.add($bind(this, this.__onGamepadConnect));
        lime_ui_Joystick.onConnect.add($bind(this, this.__onJoystickConnect));
        lime_ui_Touch.onStart.add($bind(this, this.onTouchStart));
        lime_ui_Touch.onMove.add($bind(this, this.onTouchMove));
        lime_ui_Touch.onEnd.add($bind(this, this.onTouchEnd));
    };
    $hxClasses["lime.app.Application"] = lime_app_Application;
    lime_app_Application.__name__ = ["lime", "app", "Application"];
    lime_app_Application.current = null;
    lime_app_Application.__super__ = lime_app_Module;
    lime_app_Application.prototype = $extend(lime_app_Module.prototype, {
        addModule: function(module) {
            this.modules.push(module);
            if (this.windows.length > 0) {
                var _g = 0;
                var _g1 = this.windows;
                while (_g < _g1.length) {
                    var $window = _g1[_g]; ++_g;
                    module.onWindowCreate($window);
                }
                if (this.preloader == null || this.preloader.complete) module.onPreloadComplete();
            }
        },
        addRenderer: function(renderer) {
            renderer.onRender.add((function(f, a1) {
                return function() {
                    f(a1);
                };
            })($bind(this, this.render), renderer));
            renderer.onContextLost.add((function(f1, a11) {
                return function() {
                    f1(a11);
                };
            })($bind(this, this.onRenderContextLost), renderer));
            renderer.onContextRestored.add((function(f2, a12) {
                return function(a2) {
                    f2(a12, a2);
                };
            })($bind(this, this.onRenderContextRestored), renderer));
            this.renderers.push(renderer);
        },
        create: function(config) {
            this.config = config;
            this.backend.create(config);
            if (config != null) {
                if (Object.prototype.hasOwnProperty.call(config, "fps")) this.backend.setFrameRate(config.fps);
                if (Object.prototype.hasOwnProperty.call(config, "windows")) {
                    var _g = 0;
                    var _g1 = config.windows;
                    while (_g < _g1.length) {
                        var windowConfig = _g1[_g]; ++_g;
                        var $window = new lime_ui_Window(windowConfig);
                        this.createWindow($window);
                        break;
                    }
                }
                if (this.preloader == null || this.preloader.complete) this.onPreloadComplete();
            }
        },
        createWindow: function(window) {
            window.onActivate.add((function(f, a1) {
                return function() {
                    f(a1);
                };
            })($bind(this, this.onWindowActivate), window));
            window.onClose.add((function(f1, a11) {
                return function() {
                    f1(a11);
                };
            })($bind(this, this.onWindowClose), window));
            window.onCreate.add((function(f2, a12) {
                return function() {
                    f2(a12);
                };
            })($bind(this, this.onWindowCreate), window));
            window.onDeactivate.add((function(f3, a13) {
                return function() {
                    f3(a13);
                };
            })($bind(this, this.onWindowDeactivate), window));
            window.onDropFile.add((function(f4, a14) {
                return function(a2) {
                    f4(a14, a2);
                };
            })($bind(this, this.onWindowDropFile), window));
            window.onEnter.add((function(f5, a15) {
                return function() {
                    f5(a15);
                };
            })($bind(this, this.onWindowEnter), window));
            window.onFocusIn.add((function(f6, a16) {
                return function() {
                    f6(a16);
                };
            })($bind(this, this.onWindowFocusIn), window));
            window.onFocusOut.add((function(f7, a17) {
                return function() {
                    f7(a17);
                };
            })($bind(this, this.onWindowFocusOut), window));
            window.onFullscreen.add((function(f8, a18) {
                return function() {
                    f8(a18);
                };
            })($bind(this, this.onWindowFullscreen), window));
            window.onKeyDown.add((function(f9, a19) {
                return function(a21, a3) {
                    f9(a19, a21, a3);
                };
            })($bind(this, this.onKeyDown), window));
            window.onKeyUp.add((function(f10, a110) {
                return function(a22, a31) {
                    f10(a110, a22, a31);
                };
            })($bind(this, this.onKeyUp), window));
            window.onLeave.add((function(f11, a111) {
                return function() {
                    f11(a111);
                };
            })($bind(this, this.onWindowLeave), window));
            window.onMinimize.add((function(f12, a112) {
                return function() {
                    f12(a112);
                };
            })($bind(this, this.onWindowMinimize), window));
            window.onMouseDown.add((function(f13, a113) {
                return function(x, y, a23) {
                    f13(a113, x, y, a23);
                };
            })($bind(this, this.onMouseDown), window));
            window.onMouseMove.add((function(f14, a114) {
                return function(x1, y1) {
                    f14(a114, x1, y1);
                };
            })($bind(this, this.onMouseMove), window));
            window.onMouseMoveRelative.add((function(f15, a115) {
                return function(x2, y2) {
                    f15(a115, x2, y2);
                };
            })($bind(this, this.onMouseMoveRelative), window));
            window.onMouseUp.add((function(f16, a116) {
                return function(x3, y3, a24) {
                    f16(a116, x3, y3, a24);
                };
            })($bind(this, this.onMouseUp), window));
            window.onMouseWheel.add((function(f17, a117) {
                return function(a25, a32) {
                    f17(a117, a25, a32);
                };
            })($bind(this, this.onMouseWheel), window));
            window.onMove.add((function(f18, a118) {
                return function(x4, y4) {
                    f18(a118, x4, y4);
                };
            })($bind(this, this.onWindowMove), window));
            window.onResize.add((function(f19, a119) {
                return function(a26, a33) {
                    f19(a119, a26, a33);
                };
            })($bind(this, this.onWindowResize), window));
            window.onRestore.add((function(f20, a120) {
                return function() {
                    f20(a120);
                };
            })($bind(this, this.onWindowRestore), window));
            window.onTextEdit.add((function(f21, a121) {
                return function(a27, a34, a4) {
                    f21(a121, a27, a34, a4);
                };
            })($bind(this, this.onTextEdit), window));
            window.onTextInput.add((function(f22, a122) {
                return function(a28) {
                    f22(a122, a28);
                };
            })($bind(this, this.onTextInput), window));
            if (window.renderer == null) {
                var renderer = new lime_graphics_Renderer(window);
                this.addRenderer(renderer);
            }
            window.create(this);
            this.windows.push(window);
            this.windowByID.h[window.id] = window;
            window.onCreate.dispatch();
        },
        exec: function() {
            lime_app_Application.current = this;
            return this.backend.exec();
        },
        onGamepadAxisMove: function(gamepad, axis, value) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onGamepadAxisMove(gamepad, axis, value);
            }
        },
        onGamepadButtonDown: function(gamepad, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onGamepadButtonDown(gamepad, button);
            }
        },
        onGamepadButtonUp: function(gamepad, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onGamepadButtonUp(gamepad, button);
            }
        },
        onGamepadConnect: function(gamepad) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onGamepadConnect(gamepad);
            }
        },
        onGamepadDisconnect: function(gamepad) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onGamepadDisconnect(gamepad);
            }
        },
        onJoystickAxisMove: function(joystick, axis, value) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickAxisMove(joystick, axis, value);
            }
        },
        onJoystickButtonDown: function(joystick, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickButtonDown(joystick, button);
            }
        },
        onJoystickButtonUp: function(joystick, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickButtonUp(joystick, button);
            }
        },
        onJoystickConnect: function(joystick) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickConnect(joystick);
            }
        },
        onJoystickDisconnect: function(joystick) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickDisconnect(joystick);
            }
        },
        onJoystickHatMove: function(joystick, hat, position) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickHatMove(joystick, hat, position);
            }
        },
        onJoystickTrackballMove: function(joystick, trackball, value) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onJoystickTrackballMove(joystick, trackball, value);
            }
        },
        onKeyDown: function(window, keyCode, modifier) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onKeyDown(window, keyCode, modifier);
            }
        },
        onKeyUp: function(window, keyCode, modifier) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onKeyUp(window, keyCode, modifier);
            }
        },
        onModuleExit: function(code) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onModuleExit(code);
            }
            this.backend.exit();
        },
        onMouseDown: function(window, x, y, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onMouseDown(window, x, y, button);
            }
        },
        onMouseMove: function(window, x, y) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onMouseMove(window, x, y);
            }
        },
        onMouseMoveRelative: function(window, x, y) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onMouseMoveRelative(window, x, y);
            }
        },
        onMouseUp: function(window, x, y, button) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onMouseUp(window, x, y, button);
            }
        },
        onMouseWheel: function(window, deltaX, deltaY) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onMouseWheel(window, deltaX, deltaY);
            }
        },
        onPreloadComplete: function() {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onPreloadComplete();
            }
        },
        onPreloadProgress: function(loaded, total) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onPreloadProgress(loaded, total);
            }
        },
        onRenderContextLost: function(renderer) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onRenderContextLost(renderer);
            }
        },
        onRenderContextRestored: function(renderer, context) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onRenderContextRestored(renderer, context);
            }
        },
        onTextEdit: function(window, text, start, length) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onTextEdit(window, text, start, length);
            }
        },
        onTextInput: function(window, text) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onTextInput(window, text);
            }
        },
        onTouchEnd: function(touch) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onTouchEnd(touch);
            }
        },
        onTouchMove: function(touch) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onTouchMove(touch);
            }
        },
        onTouchStart: function(touch) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onTouchStart(touch);
            }
        },
        onWindowActivate: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowActivate(window);
            }
        },
        onWindowClose: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowClose(window);
            }
            this.removeWindow(window);
        },
        onWindowCreate: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowCreate(window);
            }
        },
        onWindowDeactivate: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowDeactivate(window);
            }
        },
        onWindowDropFile: function(window, file) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowDropFile(window, file);
            }
        },
        onWindowEnter: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowEnter(window);
            }
        },
        onWindowFocusIn: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowFocusIn(window);
            }
        },
        onWindowFocusOut: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowFocusOut(window);
            }
        },
        onWindowFullscreen: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowFullscreen(window);
            }
        },
        onWindowLeave: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowLeave(window);
            }
        },
        onWindowMinimize: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowMinimize(window);
            }
        },
        onWindowMove: function(window, x, y) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowMove(window, x, y);
            }
        },
        onWindowResize: function(window, width, height) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowResize(window, width, height);
            }
        },
        onWindowRestore: function(window) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.onWindowRestore(window);
            }
        },
        removeModule: function(module) {
            if (module != null) {
                module.onModuleExit(0);
                HxOverrides.remove(this.modules, module);
            }
        },
        removeRenderer: function(renderer) {
            if (renderer != null && HxOverrides.indexOf(this.renderers, renderer, 0) > -1) HxOverrides.remove(this.renderers, renderer);
        },
        removeWindow: function(window) {
            if (window != null && this.windowByID.h.hasOwnProperty(window.id)) {
                HxOverrides.remove(this.windows, window);
                this.windowByID.remove(window.id);
                window.close();
                if (this.windows[0] == window) this.window = null;
            }
        },
        render: function(renderer) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.render(renderer);
            }
        },
        setPreloader: function(preloader) {
            if (this.preloader != null) {
                this.preloader.onProgress.remove($bind(this, this.onPreloadProgress));
                this.preloader.onComplete.remove($bind(this, this.onPreloadComplete));
            }
            this.preloader = preloader;
            if (preloader.complete) this.onPreloadComplete();
            else {
                preloader.onProgress.add($bind(this, this.onPreloadProgress));
                preloader.onComplete.add($bind(this, this.onPreloadComplete));
            }
        },
        update: function(deltaTime) {
            var _g = 0;
            var _g1 = this.modules;
            while (_g < _g1.length) {
                var module = _g1[_g]; ++_g;
                module.update(deltaTime);
            }
        },
        __onGamepadConnect: function(gamepad) {
            this.onGamepadConnect(gamepad);
            gamepad.onAxisMove.add((function(f, a1) {
                return function(a2, a3) {
                    f(a1, a2, a3);
                };
            })($bind(this, this.onGamepadAxisMove), gamepad));
            gamepad.onButtonDown.add((function(f1, a11) {
                return function(a21) {
                    f1(a11, a21);
                };
            })($bind(this, this.onGamepadButtonDown), gamepad));
            gamepad.onButtonUp.add((function(f2, a12) {
                return function(a22) {
                    f2(a12, a22);
                };
            })($bind(this, this.onGamepadButtonUp), gamepad));
            gamepad.onDisconnect.add((function(f3, a13) {
                return function() {
                    f3(a13);
                };
            })($bind(this, this.onGamepadDisconnect), gamepad));
        },
        __onJoystickConnect: function(joystick) {
            this.onJoystickConnect(joystick);
            joystick.onAxisMove.add((function(f, a1) {
                return function(a2, a3) {
                    f(a1, a2, a3);
                };
            })($bind(this, this.onJoystickAxisMove), joystick));
            joystick.onButtonDown.add((function(f1, a11) {
                return function(a21) {
                    f1(a11, a21);
                };
            })($bind(this, this.onJoystickButtonDown), joystick));
            joystick.onButtonUp.add((function(f2, a12) {
                return function(a22) {
                    f2(a12, a22);
                };
            })($bind(this, this.onJoystickButtonUp), joystick));
            joystick.onDisconnect.add((function(f3, a13) {
                return function() {
                    f3(a13);
                };
            })($bind(this, this.onJoystickDisconnect), joystick));
            joystick.onHatMove.add((function(f4, a14) {
                return function(a23, a31) {
                    f4(a14, a23, a31);
                };
            })($bind(this, this.onJoystickHatMove), joystick));
            joystick.onTrackballMove.add((function(f5, a15) {
                return function(a24, a32) {
                    f5(a15, a24, a32);
                };
            })($bind(this, this.onJoystickTrackballMove), joystick));
        },
        get_frameRate: function() {
            return this.backend.getFrameRate();
        },
        set_frameRate: function(value) {
            return this.backend.setFrameRate(value);
        },
        get_renderer: function() {
            return this.renderers[0];
        },
        get_window: function() {
            return this.windows[0];
        },
        __class__: lime_app_Application,
        __properties__: {
            get_window: "get_window",
            get_renderer: "get_renderer",
            set_frameRate: "set_frameRate",
            get_frameRate: "get_frameRate"
        }
    });
    var lime_app_Event = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event"] = lime_app_Event;
    lime_app_Event.__name__ = ["lime", "app", "Event"];
    lime_app_Event.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        __class__: lime_app_Event
    };
    var lime_app_Event_$Dynamic_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
    lime_app_Event_$Dynamic_$Void.__name__ = ["lime", "app", "Event_Dynamic_Void"];
    lime_app_Event_$Dynamic_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Dynamic_$Void
    };
    var lime_app_Event_$Float_$Float_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
    lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime", "app", "Event_Float_Float_Int_Void"];
    lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1, a2) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1, a2);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Float_$Float_$Int_$Void
    };
    var lime_app_Event_$Float_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
    lime_app_Event_$Float_$Float_$Void.__name__ = ["lime", "app", "Event_Float_Float_Void"];
    lime_app_Event_$Float_$Float_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Float_$Float_$Void
    };
    var lime_app_Event_$Int_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
    lime_app_Event_$Int_$Float_$Void.__name__ = ["lime", "app", "Event_Int_Float_Void"];
    lime_app_Event_$Int_$Float_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Int_$Float_$Void
    };
    var lime_app_Event_$Int_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
    lime_app_Event_$Int_$Int_$Void.__name__ = ["lime", "app", "Event_Int_Int_Void"];
    lime_app_Event_$Int_$Int_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Int_$Int_$Void
    };
    var lime_app_Event_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
    lime_app_Event_$Int_$Void.__name__ = ["lime", "app", "Event_Int_Void"];
    lime_app_Event_$Int_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Int_$Void
    };
    var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
    lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime", "app", "Event_Int_lime_ui_JoystickHatPosition_Void"];
    lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
    };
    var lime_app_Event_$String_$Int_$Int_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
    lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime", "app", "Event_String_Int_Int_Void"];
    lime_app_Event_$String_$Int_$Int_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1, a2) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1, a2);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$String_$Int_$Int_$Void
    };
    var lime_app_Event_$String_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
    lime_app_Event_$String_$Void.__name__ = ["lime", "app", "Event_String_Void"];
    lime_app_Event_$String_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$String_$Void
    };
    var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
    lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime", "app", "Event_lime_graphics_RenderContext_Void"];
    lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
    };
    var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
    lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime", "app", "Event_lime_ui_GamepadAxis_Float_Void"];
    lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
    };
    var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
    lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime", "app", "Event_lime_ui_GamepadButton_Void"];
    lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
    };
    var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
    lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime", "app", "Event_lime_ui_Gamepad_Void"];
    lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
    };
    var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
    lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime", "app", "Event_lime_ui_Joystick_Void"];
    lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$Joystick_$Void
    };
    var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
    lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime", "app", "Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
    lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a, a1) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a, a1);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
    };
    var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
        this.canceled = false;
        this.__listeners = [];
        this.__priorities = [];
        this.__repeat = [];
    };
    $hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
    lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime", "app", "Event_lime_ui_Touch_Void"];
    lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
        add: function(listener, once, priority) {
            if (priority == null) priority = 0;
            if (once == null) once = false;
            var _g1 = 0;
            var _g = this.__priorities.length;
            while (_g1 < _g) {
                var i = _g1++;
                if (priority > this.__priorities[i]) {
                    this.__listeners.splice(i, 0, listener);
                    this.__priorities.splice(i, 0, priority);
                    this.__repeat.splice(i, 0, !once);
                    return;
                }
            }
            this.__listeners.push(listener);
            this.__priorities.push(priority);
            this.__repeat.push(!once);
        },
        cancel: function() {
            this.canceled = true;
        },
        has: function(listener) {
            var _g = 0;
            var _g1 = this.__listeners;
            while (_g < _g1.length) {
                var l = _g1[_g]; ++_g;
                if (Reflect.compareMethods(l, listener)) return true;
            }
            return false;
        },
        remove: function(listener) {
            var i = this.__listeners.length;
            while (--i >= 0) if (Reflect.compareMethods(this.__listeners[i], listener)) {
                this.__listeners.splice(i, 1);
                this.__priorities.splice(i, 1);
                this.__repeat.splice(i, 1);
            }
        },
        dispatch: function(a) {
            this.canceled = false;
            var listeners = this.__listeners;
            var repeat = this.__repeat;
            var i = 0;
            while (i < listeners.length) {
                listeners[i](a);
                if (!repeat[i]) this.remove(listeners[i]);
                else i++;
                if (this.canceled) break;
            }
        },
        __class__: lime_app_Event_$lime_$ui_$Touch_$Void
    };
    var lime_app_Future = function(work) {
        if (work != null) {
            if (lime_app_Future.__threadPool == null) {
                lime_app_Future.__threadPool = new lime_system_ThreadPool();
                lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
                lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
                lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
            }
            var promise = new lime_app_Promise();
            promise.future = this;
            lime_app_Future.__threadPool.queue({
                promise: promise,
                work: work
            });
        }
    };
    $hxClasses["lime.app.Future"] = lime_app_Future;
    lime_app_Future.__name__ = ["lime", "app", "Future"];
    lime_app_Future.__threadPool = null;
    lime_app_Future.threadPool_doWork = function(state) {
        try {
            var result = state.work();
            lime_app_Future.__threadPool.sendComplete({
                promise: state.promise,
                result: result
            });
        } catch(e) {
            haxe_CallStack.lastException = e;
            if (e instanceof js__$Boot_HaxeError) e = e.val;
            lime_app_Future.__threadPool.sendError({
                promise: state.promise,
                error: e
            });
        }
    };
    lime_app_Future.threadPool_onComplete = function(state) {
        state.promise.complete(state.result);
    };
    lime_app_Future.threadPool_onError = function(state) {
        state.promise.error(state.error);
    };
    lime_app_Future.prototype = {
        onComplete: function(listener) {
            if (listener != null) {
                if (this.__completed) listener(this.value);
                else if (!this.__errored) {
                    if (this.__completeListeners == null) this.__completeListeners = [];
                    this.__completeListeners.push(listener);
                }
            }
            return this;
        },
        onError: function(listener) {
            if (listener != null) {
                if (this.__errored) listener(this.__errorMessage);
                else if (!this.__completed) {
                    if (this.__errorListeners == null) this.__errorListeners = [];
                    this.__errorListeners.push(listener);
                }
            }
            return this;
        },
        onProgress: function(listener) {
            if (listener != null) {
                if (this.__progressListeners == null) this.__progressListeners = [];
                this.__progressListeners.push(listener);
            }
            return this;
        },
        then: function(next) {
            if (this.__completed) return next(this.value);
            else if (this.__errored) {
                var future = new lime_app_Future();
                future.onError(this.__errorMessage);
                return future;
            } else {
                var promise = new lime_app_Promise();
                this.onError($bind(promise, promise.error));
                this.onProgress($bind(promise, promise.progress));
                this.onComplete(function(val) {
                    var future1 = next(val);
                    future1.onError($bind(promise, promise.error));
                    future1.onComplete($bind(promise, promise.complete));
                });
                return promise.future;
            }
        },
        get_isCompleted: function() {
            return this.__completed || this.__errored;
        },
        __class__: lime_app_Future,
        __properties__: {
            get_isCompleted: "get_isCompleted"
        }
    };
    var lime_app_Preloader = function() {
        this.total = 0;
        this.loaded = 0;
        this.onProgress = new lime_app_Event_$Int_$Int_$Void();
        this.onComplete = new lime_app_Event_$Void_$Void();
        this.onProgress.add($bind(this, this.update));
    };
    $hxClasses["lime.app.Preloader"] = lime_app_Preloader;
    lime_app_Preloader.__name__ = ["lime", "app", "Preloader"];
    lime_app_Preloader.prototype = {
        create: function(config) {},
        load: function(urls, types) {
            var url = null;
            var cacheVersion = lime_Assets.cache.version;
            var _g1 = 0;
            var _g = urls.length;
            while (_g1 < _g) {
                var i = _g1++;
                url = urls[i];
                var _g2 = types[i];
                switch (_g2) {
                case "IMAGE":
                    if (!lime_app_Preloader.images.exists(url)) {
                        var image = new Image();
                        lime_app_Preloader.images.set(url, image);
                        image.onload = $bind(this, this.image_onLoad);
                        image.src = url + "?" + cacheVersion;
                        this.total++;
                    }
                    break;
                case "BINARY":
                    if (!lime_app_Preloader.loaders.exists(url)) {
                        var loader = new lime_net_HTTPRequest();
                        lime_app_Preloader.loaders.set(url, loader);
                        this.total++;
                    }
                    break;
                case "TEXT":
                    if (!lime_app_Preloader.loaders.exists(url)) {
                        var loader1 = new lime_net_HTTPRequest();
                        lime_app_Preloader.loaders.set(url, loader1);
                        this.total++;
                    }
                    break;
                case "FONT":
                    this.total++;
                    this.loadFont(url);
                    break;
                default:
                }
            }
            var $it0 = lime_app_Preloader.loaders.keys();
            while ($it0.hasNext()) {
                var url1 = $it0.next();
                var loader2 = lime_app_Preloader.loaders.get(url1);
                var future = loader2.load(url1 + "?" + cacheVersion);
                future.onComplete($bind(this, this.loader_onComplete));
            }
            if (this.total == 0) this.start();
        },
        loadFont: function(font) {
            var _g = this;
            if (window.document.fonts && ($_ = window.document.fonts, $bind($_, $_.load))) window.document.fonts.load("1em '" + font + "'").then(function(_) {
                _g.loaded++;
                _g.onProgress.dispatch(_g.loaded, _g.total);
                if (_g.loaded == _g.total) _g.start();
            });
            else {
                var node = window.document.createElement("span");
                node.innerHTML = "giItT1WQy@!-/#";
                var style = node.style;
                style.position = "absolute";
                style.left = "-10000px";
                style.top = "-10000px";
                style.fontSize = "300px";
                style.fontFamily = "sans-serif";
                style.fontVariant = "normal";
                style.fontStyle = "normal";
                style.fontWeight = "normal";
                style.letterSpacing = "0";
                window.document.body.appendChild(node);
                var width = node.offsetWidth;
                style.fontFamily = "'" + font + "', sans-serif";
                var interval = null;
                var found = false;
                var checkFont = function() {
                    if (node.offsetWidth != width) {
                        if (!found) {
                            found = true;
                            return false;
                        }
                        _g.loaded++;
                        if (interval != null) window.clearInterval(interval);
                        node.parentNode.removeChild(node);
                        node = null;
                        _g.onProgress.dispatch(_g.loaded, _g.total);
                        if (_g.loaded == _g.total) _g.start();
                        return true;
                    }
                    return false;
                };
                if (!checkFont()) interval = window.setInterval(checkFont, 50);
            }
        },
        start: function() {
            this.complete = true;
            this.onComplete.dispatch();
        },
        update: function(loaded, total) {},
        image_onLoad: function(_) {
            this.loaded++;
            this.onProgress.dispatch(this.loaded, this.total);
            if (this.loaded == this.total) this.start();
        },
        loader_onComplete: function(_) {
            this.loaded++;
            this.onProgress.dispatch(this.loaded, this.total);
            if (this.loaded == this.total) this.start();
        },
        __class__: lime_app_Preloader
    };
    var lime_app_Promise = function() {
        this.future = new lime_app_Future();
    };
    $hxClasses["lime.app.Promise"] = lime_app_Promise;
    lime_app_Promise.__name__ = ["lime", "app", "Promise"];
    lime_app_Promise.prototype = {
        complete: function(data) {
            if (!this.future.__errored) {
                this.future.__completed = true;
                this.future.value = data;
                if (this.future.__completeListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__completeListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g]; ++_g;
                        listener(data);
                    }
                    this.future.__completeListeners = null;
                }
            }
            return this;
        },
        completeWith: function(future) {
            future.onComplete($bind(this, this.complete));
            future.onError($bind(this, this.error));
            future.onProgress($bind(this, this.progress));
            return this;
        },
        error: function(msg) {
            if (!this.future.__completed) {
                this.future.__errored = true;
                this.future.__errorMessage = msg;
                if (this.future.__errorListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__errorListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g]; ++_g;
                        listener(msg);
                    }
                    this.future.__errorListeners = null;
                }
            }
            return this;
        },
        progress: function(progress) {
            if (!this.future.__errored && !this.future.__completed) {
                if (this.future.__progressListeners != null) {
                    var _g = 0;
                    var _g1 = this.future.__progressListeners;
                    while (_g < _g1.length) {
                        var listener = _g1[_g]; ++_g;
                        listener(progress);
                    }
                }
            }
            return this;
        },
        get_isCompleted: function() {
            return this.future.get_isCompleted();
        },
        __class__: lime_app_Promise,
        __properties__: {
            get_isCompleted: "get_isCompleted"
        }
    };
    var lime_audio_ALAudioContext = function() {
        this.EXPONENT_DISTANCE_CLAMPED = 53254;
        this.EXPONENT_DISTANCE = 53253;
        this.LINEAR_DISTANCE_CLAMPED = 53252;
        this.LINEAR_DISTANCE = 53251;
        this.INVERSE_DISTANCE_CLAMPED = 53250;
        this.INVERSE_DISTANCE = 53249;
        this.DISTANCE_MODEL = 53248;
        this.DOPPLER_VELOCITY = 49153;
        this.SPEED_OF_SOUND = 49155;
        this.DOPPLER_FACTOR = 49152;
        this.EXTENSIONS = 45060;
        this.RENDERER = 45059;
        this.VERSION = 45058;
        this.VENDOR = 45057;
        this.OUT_OF_MEMORY = 40965;
        this.INVALID_OPERATION = 40964;
        this.INVALID_VALUE = 40963;
        this.INVALID_ENUM = 40962;
        this.INVALID_NAME = 40961;
        this.NO_ERROR = 0;
        this.SIZE = 8196;
        this.CHANNELS = 8195;
        this.BITS = 8194;
        this.FREQUENCY = 8193;
        this.FORMAT_STEREO16 = 4355;
        this.FORMAT_STEREO8 = 4354;
        this.FORMAT_MONO16 = 4353;
        this.FORMAT_MONO8 = 4352;
        this.UNDETERMINED = 4144;
        this.STREAMING = 4137;
        this.STATIC = 4136;
        this.SOURCE_TYPE = 4135;
        this.BYTE_OFFSET = 4134;
        this.SAMPLE_OFFSET = 4133;
        this.SEC_OFFSET = 4132;
        this.MAX_DISTANCE = 4131;
        this.CONE_OUTER_GAIN = 4130;
        this.ROLLOFF_FACTOR = 4129;
        this.REFERENCE_DISTANCE = 4128;
        this.BUFFERS_PROCESSED = 4118;
        this.BUFFERS_QUEUED = 4117;
        this.STOPPED = 4116;
        this.PAUSED = 4115;
        this.PLAYING = 4114;
        this.INITIAL = 4113;
        this.SOURCE_STATE = 4112;
        this.ORIENTATION = 4111;
        this.MAX_GAIN = 4110;
        this.MIN_GAIN = 4109;
        this.GAIN = 4106;
        this.BUFFER = 4105;
        this.LOOPING = 4103;
        this.VELOCITY = 4102;
        this.DIRECTION = 4101;
        this.POSITION = 4100;
        this.PITCH = 4099;
        this.CONE_OUTER_ANGLE = 4098;
        this.CONE_INNER_ANGLE = 4097;
        this.SOURCE_RELATIVE = 514;
        this.TRUE = 1;
        this.FALSE = 0;
        this.NONE = 0;
    };
    $hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
    lime_audio_ALAudioContext.__name__ = ["lime", "audio", "ALAudioContext"];
    lime_audio_ALAudioContext.prototype = {
        bufferData: function(buffer, format, data, size, freq) {
            lime_audio_openal_AL.bufferData(buffer, format, data, size, freq);
        },
        buffer3f: function(buffer, param, value1, value2, value3) {
            lime_audio_openal_AL.buffer3f(buffer, param, value1, value2, value3);
        },
        buffer3i: function(buffer, param, value1, value2, value3) {
            lime_audio_openal_AL.buffer3i(buffer, param, value1, value2, value3);
        },
        bufferf: function(buffer, param, value) {
            lime_audio_openal_AL.bufferf(buffer, param, value);
        },
        bufferfv: function(buffer, param, values) {
            lime_audio_openal_AL.bufferfv(buffer, param, values);
        },
        bufferi: function(buffer, param, value) {
            lime_audio_openal_AL.bufferi(buffer, param, value);
        },
        bufferiv: function(buffer, param, values) {
            lime_audio_openal_AL.bufferiv(buffer, param, values);
        },
        deleteBuffer: function(buffer) {
            lime_audio_openal_AL.deleteBuffer(buffer);
        },
        deleteBuffers: function(buffers) {
            lime_audio_openal_AL.deleteBuffers(buffers);
        },
        deleteSource: function(source) {
            lime_audio_openal_AL.deleteSource(source);
        },
        deleteSources: function(sources) {
            lime_audio_openal_AL.deleteSources(sources);
        },
        disable: function(capability) {
            lime_audio_openal_AL.disable(capability);
        },
        distanceModel: function(distanceModel) {
            lime_audio_openal_AL.distanceModel(distanceModel);
        },
        dopplerFactor: function(value) {
            lime_audio_openal_AL.dopplerFactor(value);
        },
        dopplerVelocity: function(value) {
            lime_audio_openal_AL.dopplerVelocity(value);
        },
        enable: function(capability) {
            lime_audio_openal_AL.enable(capability);
        },
        genSource: function() {
            return lime_audio_openal_AL.genSource();
        },
        genSources: function(n) {
            return lime_audio_openal_AL.genSources(n);
        },
        genBuffer: function() {
            return lime_audio_openal_AL.genBuffer();
        },
        genBuffers: function(n) {
            return lime_audio_openal_AL.genBuffers(n);
        },
        getBoolean: function(param) {
            return lime_audio_openal_AL.getBoolean(param);
        },
        getBooleanv: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getBooleanv(param, count);
        },
        getBuffer3f: function(buffer, param) {
            return lime_audio_openal_AL.getBuffer3f(buffer, param);
        },
        getBuffer3i: function(buffer, param) {
            return lime_audio_openal_AL.getBuffer3i(buffer, param);
        },
        getBufferf: function(buffer, param) {
            return lime_audio_openal_AL.getBufferf(buffer, param);
        },
        getBufferfv: function(buffer, param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getBufferfv(buffer, param, count);
        },
        getBufferi: function(buffer, param) {
            return lime_audio_openal_AL.getBufferi(buffer, param);
        },
        getBufferiv: function(buffer, param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getBufferiv(buffer, param, count);
        },
        getDouble: function(param) {
            return lime_audio_openal_AL.getDouble(param);
        },
        getDoublev: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getDoublev(param, count);
        },
        getEnumValue: function(ename) {
            return lime_audio_openal_AL.getEnumValue(ename);
        },
        getError: function() {
            return lime_audio_openal_AL.getError();
        },
        getErrorString: function() {
            return lime_audio_openal_AL.getErrorString();
        },
        getFloat: function(param) {
            return lime_audio_openal_AL.getFloat(param);
        },
        getFloatv: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getFloatv(param, count);
        },
        getInteger: function(param) {
            return lime_audio_openal_AL.getInteger(param);
        },
        getIntegerv: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getIntegerv(param, count);
        },
        getListener3f: function(param) {
            return lime_audio_openal_AL.getListener3f(param);
        },
        getListener3i: function(param) {
            return lime_audio_openal_AL.getListener3i(param);
        },
        getListenerf: function(param) {
            return lime_audio_openal_AL.getListenerf(param);
        },
        getListenerfv: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getListenerfv(param, count);
        },
        getListeneri: function(param) {
            return lime_audio_openal_AL.getListeneri(param);
        },
        getListeneriv: function(param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getListeneriv(param, count);
        },
        getProcAddress: function(fname) {
            return lime_audio_openal_AL.getProcAddress(fname);
        },
        getSource3f: function(source, param) {
            return lime_audio_openal_AL.getSource3f(source, param);
        },
        getSourcef: function(source, param) {
            return lime_audio_openal_AL.getSourcef(source, param);
        },
        getSource3i: function(source, param) {
            return lime_audio_openal_AL.getSource3i(source, param);
        },
        getSourcefv: function(source, param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getSourcefv(source, param);
        },
        getSourcei: function(source, param) {
            return lime_audio_openal_AL.getSourcei(source, param);
        },
        getSourceiv: function(source, param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_AL.getSourceiv(source, param, count);
        },
        getString: function(param) {
            return lime_audio_openal_AL.getString(param);
        },
        isBuffer: function(buffer) {
            return lime_audio_openal_AL.isBuffer(buffer);
        },
        isEnabled: function(capability) {
            return lime_audio_openal_AL.isEnabled(capability);
        },
        isExtensionPresent: function(extname) {
            return lime_audio_openal_AL.isExtensionPresent(extname);
        },
        isSource: function(source) {
            return lime_audio_openal_AL.isSource(source);
        },
        listener3f: function(param, value1, value2, value3) {
            lime_audio_openal_AL.listener3f(param, value1, value2, value3);
        },
        listener3i: function(param, value1, value2, value3) {
            lime_audio_openal_AL.listener3i(param, value1, value2, value3);
        },
        listenerf: function(param, value) {
            lime_audio_openal_AL.listenerf(param, value);
        },
        listenerfv: function(param, values) {
            lime_audio_openal_AL.listenerfv(param, values);
        },
        listeneri: function(param, value) {
            lime_audio_openal_AL.listeneri(param, value);
        },
        listeneriv: function(param, values) {
            lime_audio_openal_AL.listeneriv(param, values);
        },
        source3f: function(source, param, value1, value2, value3) {
            lime_audio_openal_AL.source3f(source, param, value1, value2, value3);
        },
        source3i: function(source, param, value1, value2, value3) {
            lime_audio_openal_AL.source3i(source, param, value1, value2, value3);
        },
        sourcef: function(source, param, value) {
            lime_audio_openal_AL.sourcef(source, param, value);
        },
        sourcefv: function(source, param, values) {
            lime_audio_openal_AL.sourcefv(source, param, values);
        },
        sourcei: function(source, param, value) {
            lime_audio_openal_AL.sourcei(source, param, value);
        },
        sourceiv: function(source, param, values) {
            lime_audio_openal_AL.sourceiv(source, param, values);
        },
        sourcePlay: function(source) {
            lime_audio_openal_AL.sourcePlay(source);
        },
        sourcePlayv: function(sources) {
            lime_audio_openal_AL.sourcePlayv(sources);
        },
        sourceStop: function(source) {
            lime_audio_openal_AL.sourceStop(source);
        },
        sourceStopv: function(sources) {
            lime_audio_openal_AL.sourceStopv(sources);
        },
        sourceRewind: function(source) {
            lime_audio_openal_AL.sourceRewind(source);
        },
        sourceRewindv: function(sources) {
            lime_audio_openal_AL.sourceRewindv(sources);
        },
        sourcePause: function(source) {
            lime_audio_openal_AL.sourcePause(source);
        },
        sourcePausev: function(sources) {
            lime_audio_openal_AL.sourcePausev(sources);
        },
        sourceQueueBuffer: function(source, buffer) {
            lime_audio_openal_AL.sourceQueueBuffer(source, buffer);
        },
        sourceQueueBuffers: function(source, nb, buffers) {
            lime_audio_openal_AL.sourceQueueBuffers(source, nb, buffers);
        },
        sourceUnqueueBuffer: function(source) {
            return lime_audio_openal_AL.sourceUnqueueBuffer(source);
        },
        sourceUnqueueBuffers: function(source, nb) {
            return lime_audio_openal_AL.sourceUnqueueBuffers(source, nb);
        },
        speedOfSound: function(value) {
            lime_audio_openal_AL.speedOfSound(value);
        },
        __class__: lime_audio_ALAudioContext
    };
    var lime_audio_ALCAudioContext = function() {
        this.ALL_DEVICES_SPECIFIER = 4115;
        this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
        this.ENUMERATE_ALL_EXT = 1;
        this.EXTENSIONS = 4102;
        this.DEVICE_SPECIFIER = 4101;
        this.DEFAULT_DEVICE_SPECIFIER = 4100;
        this.ALL_ATTRIBUTES = 4099;
        this.ATTRIBUTES_SIZE = 4098;
        this.OUT_OF_MEMORY = 40965;
        this.INVALID_VALUE = 40964;
        this.INVALID_ENUM = 40963;
        this.INVALID_CONTEXT = 40962;
        this.INVALID_DEVICE = 40961;
        this.NO_ERROR = 0;
        this.STEREO_SOURCES = 4113;
        this.MONO_SOURCES = 4112;
        this.SYNC = 4105;
        this.REFRESH = 4104;
        this.FREQUENCY = 4103;
        this.TRUE = 1;
        this.FALSE = 0;
    };
    $hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
    lime_audio_ALCAudioContext.__name__ = ["lime", "audio", "ALCAudioContext"];
    lime_audio_ALCAudioContext.prototype = {
        closeDevice: function(device) {
            return lime_audio_openal_ALC.closeDevice(device);
        },
        createContext: function(device, attrlist) {
            return lime_audio_openal_ALC.createContext(device, attrlist);
        },
        destroyContext: function(context) {
            lime_audio_openal_ALC.destroyContext(context);
        },
        getContextsDevice: function(context) {
            return lime_audio_openal_ALC.getContextsDevice(context);
        },
        getCurrentContext: function() {
            return lime_audio_openal_ALC.getCurrentContext();
        },
        getError: function(device) {
            return lime_audio_openal_ALC.getError(device);
        },
        getErrorString: function(device) {
            return lime_audio_openal_ALC.getErrorString(device);
        },
        getIntegerv: function(device, param, count) {
            if (count == null) count = 1;
            return lime_audio_openal_ALC.getIntegerv(device, param, count);
        },
        getString: function(device, param) {
            return lime_audio_openal_ALC.getString(device, param);
        },
        makeContextCurrent: function(context) {
            return lime_audio_openal_ALC.makeContextCurrent(context);
        },
        openDevice: function(deviceName) {
            return lime_audio_openal_ALC.openDevice(deviceName);
        },
        processContext: function(context) {
            lime_audio_openal_ALC.processContext(context);
        },
        suspendContext: function(context) {
            lime_audio_openal_ALC.suspendContext(context);
        },
        __class__: lime_audio_ALCAudioContext
    };
    var lime_audio_AudioBuffer = function() {
        this.id = 0;
    };
    $hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
    lime_audio_AudioBuffer.__name__ = ["lime", "audio", "AudioBuffer"];
    lime_audio_AudioBuffer.fromBytes = function(bytes) {
        return null;
    };
    lime_audio_AudioBuffer.fromFile = function(path) {
        return null;
    };
    lime_audio_AudioBuffer.fromURL = function(url, handler) {
        if (url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) handler(lime_audio_AudioBuffer.fromFile(url));
        else {}
    };
    lime_audio_AudioBuffer.prototype = {
        dispose: function() {},
        __class__: lime_audio_AudioBuffer
    };
    var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = {
        __ename__: ["lime", "audio", "AudioContext"],
        __constructs__: ["OPENAL", "HTML5", "WEB", "FLASH", "CUSTOM"]
    };
    lime_audio_AudioContext.OPENAL = function(alc, al) {
        var $x = ["OPENAL", 0, alc, al];
        $x.__enum__ = lime_audio_AudioContext;
        $x.toString = $estr;
        return $x;
    };
    lime_audio_AudioContext.HTML5 = function(context) {
        var $x = ["HTML5", 1, context];
        $x.__enum__ = lime_audio_AudioContext;
        $x.toString = $estr;
        return $x;
    };
    lime_audio_AudioContext.WEB = function(context) {
        var $x = ["WEB", 2, context];
        $x.__enum__ = lime_audio_AudioContext;
        $x.toString = $estr;
        return $x;
    };
    lime_audio_AudioContext.FLASH = function(context) {
        var $x = ["FLASH", 3, context];
        $x.__enum__ = lime_audio_AudioContext;
        $x.toString = $estr;
        return $x;
    };
    lime_audio_AudioContext.CUSTOM = function(data) {
        var $x = ["CUSTOM", 4, data];
        $x.__enum__ = lime_audio_AudioContext;
        $x.toString = $estr;
        return $x;
    };
    var lime_audio_AudioManager = function() {};
    $hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
    lime_audio_AudioManager.__name__ = ["lime", "audio", "AudioManager"];
    lime_audio_AudioManager.context = null;
    lime_audio_AudioManager.init = function(context) {
        if (lime_audio_AudioManager.context == null) {
            if (context == null) try {
                window.AudioContext = window.AudioContext || window.webkitAudioContext;;
                lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext());
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
            } else lime_audio_AudioManager.context = context;
        }
    };
    lime_audio_AudioManager.resume = function() {
        if (lime_audio_AudioManager.context != null) {
            var _g = lime_audio_AudioManager.context;
            switch (_g[1]) {
            case 0:
                var al = _g[3];
                var alc = _g[2];
                alc.processContext(alc.getCurrentContext());
                break;
            default:
            }
        }
    };
    lime_audio_AudioManager.shutdown = function() {
        if (lime_audio_AudioManager.context != null) {
            var _g = lime_audio_AudioManager.context;
            switch (_g[1]) {
            case 0:
                var al = _g[3];
                var alc = _g[2];
                var currentContext = alc.getCurrentContext();
                if (currentContext != null) {
                    var device = alc.getContextsDevice(currentContext);
                    alc.makeContextCurrent(null);
                    alc.destroyContext(currentContext);
                    alc.closeDevice(device);
                }
                break;
            default:
            }
        }
    };
    lime_audio_AudioManager.suspend = function() {
        if (lime_audio_AudioManager.context != null) {
            var _g = lime_audio_AudioManager.context;
            switch (_g[1]) {
            case 0:
                var al = _g[3];
                var alc = _g[2];
                alc.suspendContext(alc.getCurrentContext());
                break;
            default:
            }
        }
    };
    var lime_audio_AudioSource = function(buffer, offset, length, loops) {
        if (loops == null) loops = 0;
        if (offset == null) offset = 0;
        this.onComplete = new lime_app_Event_$Void_$Void();
        this.buffer = buffer;
        this.offset = offset;
        if (length != null && length != 0) this.set_length(length);
        this.set_loops(loops);
        this.id = 0;
        if (buffer != null) this.init();
    };
    $hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
    lime_audio_AudioSource.__name__ = ["lime", "audio", "AudioSource"];
    lime_audio_AudioSource.prototype = {
        dispose: function() {
            {
                var _g = lime_audio_AudioManager.context;
                switch (_g[1]) {
                case 0:
                    var al = _g[3];
                    var alc = _g[2];
                    if (this.id != 0) al.deleteSource(this.id);
                    break;
                default:
                }
            }
        },
        init: function() {
            {
                var _g = lime_audio_AudioManager.context;
                switch (_g[1]) {
                case 0:
                    var al = _g[3];
                    var alc = _g[2];
                    if (this.buffer.id == 0) {
                        this.buffer.id = al.genBuffer();
                        var format = 0;
                        if (this.buffer.channels == 1) {
                            if (this.buffer.bitsPerSample == 8) format = al.FORMAT_MONO8;
                            else if (this.buffer.bitsPerSample == 16) format = al.FORMAT_MONO16;
                        } else if (this.buffer.channels == 2) {
                            if (this.buffer.bitsPerSample == 8) format = al.FORMAT_STEREO8;
                            else if (this.buffer.bitsPerSample == 16) format = al.FORMAT_STEREO16;
                        }
                        if (this.buffer.data != null) al.bufferData(this.buffer.id, format, this.buffer.data, this.buffer.data.length, this.buffer.sampleRate);
                    }
                    this.id = al.genSource();
                    al.sourcei(this.id, al.BUFFER, this.buffer.id);
                    break;
                default:
                }
            }
        },
        play: function() {},
        pause: function() {},
        stop: function() {},
        timer_onRun: function() {},
        get_currentTime: function() {
            return 0;
        },
        set_currentTime: function(value) {
            return this.pauseTime = value;
        },
        get_gain: function() {
            return 1;
        },
        set_gain: function(value) {
            return 1;
        },
        get_length: function() {
            if (this.__length != null) return this.__length;
            return 0;
        },
        set_length: function(value) {
            return this.__length = value;
        },
        get_loops: function() {
            return this.__loops;
        },
        set_loops: function(loops) {
            return this.__loops = loops;
        },
        __class__: lime_audio_AudioSource,
        __properties__: {
            set_loops: "set_loops",
            get_loops: "get_loops",
            set_length: "set_length",
            get_length: "get_length",
            set_gain: "set_gain",
            get_gain: "get_gain",
            set_currentTime: "set_currentTime",
            get_currentTime: "get_currentTime"
        }
    };
    var lime_audio_FlashAudioContext = function() {};
    $hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
    lime_audio_FlashAudioContext.__name__ = ["lime", "audio", "FlashAudioContext"];
    lime_audio_FlashAudioContext.prototype = {
        createBuffer: function(stream, context) {
            return null;
        },
        getBytesLoaded: function(buffer) {
            return 0;
        },
        getBytesTotal: function(buffer) {
            return 0;
        },
        getID3: function(buffer) {
            return null;
        },
        getIsBuffering: function(buffer) {
            return false;
        },
        getIsURLInaccessible: function(buffer) {
            return false;
        },
        getLength: function(buffer) {
            return 0;
        },
        getURL: function(buffer) {
            return null;
        },
        close: function(buffer) {},
        extract: function(buffer, target, length, startPosition) {
            if (startPosition == null) startPosition = -1;
            return 0;
        },
        load: function(buffer, stream, context) {},
        loadCompressedDataFromByteArray: function(buffer, bytes, bytesLength) {},
        loadPCMFromByteArray: function(buffer, bytes, samples, format, stereo, sampleRate) {
            if (sampleRate == null) sampleRate = 44100;
            if (stereo == null) stereo = true;
        },
        play: function(buffer, startTime, loops, sndTransform) {
            if (loops == null) loops = 0;
            if (startTime == null) startTime = 0;
            return null;
        },
        __class__: lime_audio_FlashAudioContext
    };
    var lime_audio_HTML5AudioContext = function() {
        this.NETWORK_NO_SOURCE = 3;
        this.NETWORK_LOADING = 2;
        this.NETWORK_IDLE = 1;
        this.NETWORK_EMPTY = 0;
        this.HAVE_NOTHING = 0;
        this.HAVE_METADATA = 1;
        this.HAVE_FUTURE_DATA = 3;
        this.HAVE_ENOUGH_DATA = 4;
        this.HAVE_CURRENT_DATA = 2;
    };
    $hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
    lime_audio_HTML5AudioContext.__name__ = ["lime", "audio", "HTML5AudioContext"];
    lime_audio_HTML5AudioContext.prototype = {
        canPlayType: function(buffer, type) {
            if (buffer.src != null) return buffer.src.canPlayType(type);
            return null;
        },
        createBuffer: function(urlString) {
            var buffer = new lime_audio_AudioBuffer();
            buffer.src = new Audio();
            buffer.src.src = urlString;
            return buffer;
        },
        getAutoplay: function(buffer) {
            if (buffer.src != null) return buffer.src.autoplay;
            return false;
        },
        getBuffered: function(buffer) {
            if (buffer.src != null) return buffer.src.buffered;
            return null;
        },
        getCurrentSrc: function(buffer) {
            if (buffer.src != null) return buffer.src.currentSrc;
            return null;
        },
        getCurrentTime: function(buffer) {
            if (buffer.src != null) return buffer.src.currentTime;
            return 0;
        },
        getDefaultPlaybackRate: function(buffer) {
            if (buffer.src != null) return buffer.src.defaultPlaybackRate;
            return 1;
        },
        getDuration: function(buffer) {
            if (buffer.src != null) return buffer.src.duration;
            return 0;
        },
        getEnded: function(buffer) {
            if (buffer.src != null) return buffer.src.ended;
            return false;
        },
        getError: function(buffer) {
            if (buffer.src != null) return buffer.src.error;
            return null;
        },
        getLoop: function(buffer) {
            if (buffer.src != null) return buffer.src.loop;
            return false;
        },
        getMuted: function(buffer) {
            if (buffer.src != null) return buffer.src.muted;
            return false;
        },
        getNetworkState: function(buffer) {
            if (buffer.src != null) return buffer.src.networkState;
            return 0;
        },
        getPaused: function(buffer) {
            if (buffer.src != null) return buffer.src.paused;
            return false;
        },
        getPlaybackRate: function(buffer) {
            if (buffer.src != null) return buffer.src.playbackRate;
            return 1;
        },
        getPlayed: function(buffer) {
            if (buffer.src != null) return buffer.src.played;
            return null;
        },
        getPreload: function(buffer) {
            if (buffer.src != null) return buffer.src.preload;
            return null;
        },
        getReadyState: function(buffer) {
            if (buffer.src != null) return buffer.src.readyState;
            return 0;
        },
        getSeekable: function(buffer) {
            if (buffer.src != null) return buffer.src.seekable;
            return null;
        },
        getSeeking: function(buffer) {
            if (buffer.src != null) return buffer.src.seeking;
            return false;
        },
        getSrc: function(buffer) {
            if (buffer.src != null) return buffer.src.src;
            return null;
        },
        getStartTime: function(buffer) {
            if (buffer.src != null) return buffer.src.playbackRate;
            return 0;
        },
        getVolume: function(buffer) {
            if (buffer.src != null) return buffer.src.volume;
            return 1;
        },
        load: function(buffer) {
            if (buffer.src != null) return buffer.src.load();
        },
        pause: function(buffer) {
            if (buffer.src != null) return buffer.src.pause();
        },
        play: function(buffer) {
            if (buffer.src != null) return buffer.src.play();
        },
        setAutoplay: function(buffer, value) {
            if (buffer.src != null) buffer.src.autoplay = value;
        },
        setCurrentTime: function(buffer, value) {
            if (buffer.src != null) buffer.src.currentTime = value;
        },
        setDefaultPlaybackRate: function(buffer, value) {
            if (buffer.src != null) buffer.src.defaultPlaybackRate = value;
        },
        setLoop: function(buffer, value) {
            if (buffer.src != null) buffer.src.loop = value;
        },
        setMuted: function(buffer, value) {
            if (buffer.src != null) buffer.src.muted = value;
        },
        setPlaybackRate: function(buffer, value) {
            if (buffer.src != null) buffer.src.playbackRate = value;
        },
        setPreload: function(buffer, value) {
            if (buffer.src != null) buffer.src.preload = value;
        },
        setSrc: function(buffer, value) {
            if (buffer.src != null) buffer.src.src = value;
        },
        setVolume: function(buffer, value) {
            if (buffer.src != null) buffer.src.volume = value;
        },
        __class__: lime_audio_HTML5AudioContext
    };
    var lime_audio_openal_AL = function() {};
    $hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
    lime_audio_openal_AL.__name__ = ["lime", "audio", "openal", "AL"];
    lime_audio_openal_AL.bufferData = function(buffer, format, data, size, freq) {};
    lime_audio_openal_AL.buffer3f = function(buffer, param, value1, value2, value3) {};
    lime_audio_openal_AL.buffer3i = function(buffer, param, value1, value2, value3) {};
    lime_audio_openal_AL.bufferf = function(buffer, param, value) {};
    lime_audio_openal_AL.bufferfv = function(buffer, param, values) {};
    lime_audio_openal_AL.bufferi = function(buffer, param, value) {};
    lime_audio_openal_AL.bufferiv = function(buffer, param, values) {};
    lime_audio_openal_AL.deleteBuffer = function(buffer) {};
    lime_audio_openal_AL.deleteBuffers = function(buffers) {};
    lime_audio_openal_AL.deleteSource = function(source) {};
    lime_audio_openal_AL.deleteSources = function(sources) {};
    lime_audio_openal_AL.disable = function(capability) {};
    lime_audio_openal_AL.distanceModel = function(distanceModel) {};
    lime_audio_openal_AL.dopplerFactor = function(value) {};
    lime_audio_openal_AL.dopplerVelocity = function(value) {};
    lime_audio_openal_AL.enable = function(capability) {};
    lime_audio_openal_AL.genSource = function() {
        return 0;
    };
    lime_audio_openal_AL.genSources = function(n) {
        return null;
    };
    lime_audio_openal_AL.genBuffer = function() {
        return 0;
    };
    lime_audio_openal_AL.genBuffers = function(n) {
        return null;
    };
    lime_audio_openal_AL.getBoolean = function(param) {
        return false;
    };
    lime_audio_openal_AL.getBooleanv = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getBuffer3f = function(buffer, param) {
        return null;
    };
    lime_audio_openal_AL.getBuffer3i = function(buffer, param) {
        return null;
    };
    lime_audio_openal_AL.getBufferf = function(buffer, param) {
        return 0;
    };
    lime_audio_openal_AL.getBufferfv = function(buffer, param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getBufferi = function(buffer, param) {
        return 0;
    };
    lime_audio_openal_AL.getBufferiv = function(buffer, param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getDouble = function(param) {
        return 0;
    };
    lime_audio_openal_AL.getDoublev = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getEnumValue = function(ename) {
        return 0;
    };
    lime_audio_openal_AL.getError = function() {
        return 0;
    };
    lime_audio_openal_AL.getErrorString = function() {
        var _g = lime_audio_openal_AL.getError();
        switch (_g) {
        case 40961:
            return "INVALID_NAME: Invalid parameter name";
        case 40962:
            return "INVALID_ENUM: Invalid enum value";
        case 40963:
            return "INVALID_VALUE: Invalid parameter value";
        case 40964:
            return "INVALID_OPERATION: Illegal operation or call";
        case 40965:
            return "OUT_OF_MEMORY: OpenAL has run out of memory";
        default:
            return "";
        }
    };
    lime_audio_openal_AL.getFloat = function(param) {
        return 0;
    };
    lime_audio_openal_AL.getFloatv = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getInteger = function(param) {
        return 0;
    };
    lime_audio_openal_AL.getIntegerv = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getListener3f = function(param) {
        return null;
    };
    lime_audio_openal_AL.getListener3i = function(param) {
        return null;
    };
    lime_audio_openal_AL.getListenerf = function(param) {
        return 0;
    };
    lime_audio_openal_AL.getListenerfv = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getListeneri = function(param) {
        return 0;
    };
    lime_audio_openal_AL.getListeneriv = function(param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getProcAddress = function(fname) {
        return null;
    };
    lime_audio_openal_AL.getSource3f = function(source, param) {
        return null;
    };
    lime_audio_openal_AL.getSourcef = function(source, param) {
        return 0;
    };
    lime_audio_openal_AL.getSource3i = function(source, param) {
        return null;
    };
    lime_audio_openal_AL.getSourcefv = function(source, param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getSourcei = function(source, param) {
        return 0;
    };
    lime_audio_openal_AL.getSourceiv = function(source, param, count) {
        if (count == null) count = 1;
        return null;
    };
    lime_audio_openal_AL.getString = function(param) {
        return null;
    };
    lime_audio_openal_AL.isBuffer = function(buffer) {
        return false;
    };
    lime_audio_openal_AL.isEnabled = function(capability) {
        return false;
    };
    lime_audio_openal_AL.isExtensionPresent = function(extname) {
        return false;
    };
    lime_audio_openal_AL.isSource = function(source) {
        return false;
    };
    lime_audio_openal_AL.listener3f = function(param, value1, value2, value3) {};
    lime_audio_openal_AL.listener3i = function(param, value1, value2, value3) {};
    lime_audio_openal_AL.listenerf = function(param, value) {};
    lime_audio_openal_AL.listenerfv = function(param, values) {};
    lime_audio_openal_AL.listeneri = function(param, value) {};
    lime_audio_openal_AL.listeneriv = function(param, values) {};
    lime_audio_openal_AL.source3f = function(source, param, value1, value2, value3) {};
    lime_audio_openal_AL.source3i = function(source, param, value1, value2, value3) {};
    lime_audio_openal_AL.sourcef = function(source, param, value) {};
    lime_audio_openal_AL.sourcefv = function(source, param, values) {};
    lime_audio_openal_AL.sourcei = function(source, param, value) {};
    lime_audio_openal_AL.sourceiv = function(source, param, values) {};
    lime_audio_openal_AL.sourcePlay = function(source) {};
    lime_audio_openal_AL.sourcePlayv = function(sources) {};
    lime_audio_openal_AL.sourceStop = function(source) {};
    lime_audio_openal_AL.sourceStopv = function(sources) {};
    lime_audio_openal_AL.sourceRewind = function(source) {};
    lime_audio_openal_AL.sourceRewindv = function(sources) {};
    lime_audio_openal_AL.sourcePause = function(source) {};
    lime_audio_openal_AL.sourcePausev = function(sources) {};
    lime_audio_openal_AL.sourceQueueBuffer = function(source, buffer) {};
    lime_audio_openal_AL.sourceQueueBuffers = function(source, nb, buffers) {};
    lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
        return 0;
    };
    lime_audio_openal_AL.sourceUnqueueBuffers = function(source, nb) {
        return null;
    };
    lime_audio_openal_AL.speedOfSound = function(value) {};
    var lime_audio_openal_ALC = function() {};
    $hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
    lime_audio_openal_ALC.__name__ = ["lime", "audio", "openal", "ALC"];
    lime_audio_openal_ALC.closeDevice = function(device) {
        return false;
    };
    lime_audio_openal_ALC.createContext = function(device, attrlist) {
        return null;
    };
    lime_audio_openal_ALC.destroyContext = function(context) {};
    lime_audio_openal_ALC.getContextsDevice = function(context) {
        return null;
    };
    lime_audio_openal_ALC.getCurrentContext = function() {
        return null;
    };
    lime_audio_openal_ALC.getError = function(device) {
        return 0;
    };
    lime_audio_openal_ALC.getErrorString = function(device) {
        var _g = lime_audio_openal_ALC.getError(device);
        switch (_g) {
        case 40961:
            return "INVALID_DEVICE: Invalid device (or no device?)";
        case 40962:
            return "INVALID_CONTEXT: Invalid context (or no context?)";
        case 40963:
            return "INVALID_ENUM: Invalid enum value";
        case 40964:
            return "INVALID_VALUE: Invalid param value";
        case 40965:
            return "OUT_OF_MEMORY: OpenAL has run out of memory";
        default:
            return "";
        }
    };
    lime_audio_openal_ALC.getIntegerv = function(device, param, size) {
        return null;
    };
    lime_audio_openal_ALC.getString = function(device, param) {
        return null;
    };
    lime_audio_openal_ALC.makeContextCurrent = function(context) {
        return false;
    };
    lime_audio_openal_ALC.openDevice = function(deviceName) {
        return null;
    };
    lime_audio_openal_ALC.processContext = function(context) {};
    lime_audio_openal_ALC.suspendContext = function(context) {};
    var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
    $hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
    lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime", "audio", "openal", "_ALContext", "ALContext_Impl_"];
    lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
        return handle;
    };
    var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
    $hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
    lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime", "audio", "openal", "_ALDevice", "ALDevice_Impl_"];
    lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
        return handle;
    };
    var lime_graphics_ConsoleRenderContext = function() {};
    $hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
    lime_graphics_ConsoleRenderContext.__name__ = ["lime", "graphics", "ConsoleRenderContext"];
    lime_graphics_ConsoleRenderContext.prototype = {
        createIndexBuffer: function(indices, count) {
            return new lime_graphics_console_IndexBuffer();
        },
        createVertexBuffer: function(decl, count) {
            return new lime_graphics_console_VertexBuffer();
        },
        lookupShader: function(name) {
            return new lime_graphics_console_Shader();
        },
        clear: function(r, g, b, a, depth, stencil) {
            if (stencil == null) stencil = 0;
            if (depth == null) depth = 1.0;
        },
        bindShader: function(shader) {},
        setViewport: function(x, y, width, height, nearPlane, farPlane) {
            if (farPlane == null) farPlane = 1.0;
            if (nearPlane == null) nearPlane = 0.0;
        },
        setVertexShaderConstantF: function(startRegister, vec4, vec4count) {},
        setVertexSource: function(vb) {},
        setIndexSource: function(ib) {},
        draw: function(primitive, startVertex, primitiveCount) {},
        drawIndexed: function(primitive, vertexCount, startIndex, primitiveCount) {},
        get_width: function() {
            return 0;
        },
        get_height: function() {
            return 0;
        },
        __class__: lime_graphics_ConsoleRenderContext,
        __properties__: {
            get_height: "get_height",
            get_width: "get_width"
        }
    };
    var lime_graphics_FlashRenderContext = function() {};
    $hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
    lime_graphics_FlashRenderContext.__name__ = ["lime", "graphics", "FlashRenderContext"];
    lime_graphics_FlashRenderContext.prototype = {
        addChild: function(child) {
            return null;
        },
        addChildAt: function(child, index) {
            return null;
        },
        addEventListener: function(type, listener, useCapture, priority, useWeakReference) {
            if (useWeakReference == null) useWeakReference = false;
            if (priority == null) priority = 0;
            if (useCapture == null) useCapture = false;
        },
        areInaccessibleObjectsUnderPoint: function(point) {
            return false;
        },
        contains: function(child) {
            return false;
        },
        dispatchEvent: function(event) {
            return false;
        },
        getBounds: function(targetCoordinateSpace) {
            return null;
        },
        getChildAt: function(index) {
            return null;
        },
        getChildByName: function(name) {
            return null;
        },
        getChildIndex: function(child) {
            return 0;
        },
        getObjectsUnderPoint: function(point) {
            return null;
        },
        getRect: function(targetCoordinateSpace) {
            return null;
        },
        globalToLocal: function(point) {
            return null;
        },
        globalToLocal3D: function(point) {
            return null;
        },
        hasEventListener: function(type) {
            return false;
        },
        hitTestObject: function(obj) {
            return false;
        },
        hitTestPoint: function(x, y, shapeFlag) {
            if (shapeFlag == null) shapeFlag = false;
            return false;
        },
        local3DToGlobal: function(point3d) {
            return null;
        },
        localToGlobal: function(point) {
            return null;
        },
        removeChild: function(child) {
            return null;
        },
        removeChildAt: function(index) {
            return null;
        },
        removeChildren: function(beginIndex, endIndex) {
            if (endIndex == null) endIndex = 2147483647;
            if (beginIndex == null) beginIndex = 0;
        },
        removeEventListener: function(type, listener, useCapture) {
            if (useCapture == null) useCapture = false;
        },
        requestSoftKeyboard: function() {
            return false;
        },
        setChildIndex: function(child, index) {},
        startDrag: function(lockCenter, bounds) {
            if (lockCenter == null) lockCenter = false;
        },
        startTouchDrag: function(touchPointID, lockCenter, bounds) {
            if (lockCenter == null) lockCenter = false;
        },
        stopAllMovieClips: function() {},
        stopDrag: function() {},
        stopTouchDrag: function(touchPointID) {},
        swapChildren: function(child1, child2) {},
        swapChildrenAt: function(index1, index2) {},
        toString: function() {
            return null;
        },
        willTrigger: function(type) {
            return false;
        },
        __class__: lime_graphics_FlashRenderContext
    };
    var lime_graphics_Image = function(buffer, offsetX, offsetY, width, height, color, type) {
        if (height == null) height = -1;
        if (width == null) width = -1;
        if (offsetY == null) offsetY = 0;
        if (offsetX == null) offsetX = 0;
        this.offsetX = offsetX;
        this.offsetY = offsetY;
        this.width = width;
        this.height = height;
        if (type == null) {
            if (lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
                var _g = lime_app_Application.current.renderers[0].context;
                switch (_g[1]) {
                case 2:
                case 1:
                    this.type = lime_graphics_ImageType.CANVAS;
                    break;
                case 3:
                    this.type = lime_graphics_ImageType.FLASH;
                    break;
                default:
                    this.type = lime_graphics_ImageType.DATA;
                }
            } else this.type = lime_graphics_ImageType.DATA;
        } else this.type = type;
        if (buffer == null) {
            if (width > 0 && height > 0) {
                var _g1 = this.type;
                switch (_g1[1]) {
                case 0:
                    this.buffer = new lime_graphics_ImageBuffer(null, width, height);
                    lime_graphics_utils_ImageCanvasUtil.createCanvas(this, width, height);
                    if (color != null) this.fillRect(new lime_math_Rectangle(0, 0, width, height), color);
                    break;
                case 1:
                    this.buffer = new lime_graphics_ImageBuffer((function($this) {
                        var $r;
                        var elements = width * height * 4;
                        var this1;
                        if (elements != null) this1 = new Uint8Array(elements);
                        else this1 = null;
                        $r = this1;
                        return $r;
                    } (this)), width, height);
                    if (color != null) this.fillRect(new lime_math_Rectangle(0, 0, width, height), color);
                    break;
                case 2:
                    break;
                default:
                }
            }
        } else this.__fromImageBuffer(buffer);
    };
    $hxClasses["lime.graphics.Image"] = lime_graphics_Image;
    lime_graphics_Image.__name__ = ["lime", "graphics", "Image"];
    lime_graphics_Image.__base64Encoder = null;
    lime_graphics_Image.fromBase64 = function(base64, type, onload) {
        if (base64 == null) return null;
        var image = new lime_graphics_Image();
        image.__fromBase64(base64, type, onload);
        return image;
    };
    lime_graphics_Image.fromBitmapData = function(bitmapData) {
        if (bitmapData == null) return null;
        return bitmapData.image;
    };
    lime_graphics_Image.fromBytes = function(bytes, onload) {
        if (bytes == null) return null;
        var image = new lime_graphics_Image();
        image.__fromBytes(bytes, onload);
        return image;
    };
    lime_graphics_Image.fromCanvas = function(canvas) {
        if (canvas == null) return null;
        var buffer = new lime_graphics_ImageBuffer(null, canvas.width, canvas.height);
        buffer.set_src(canvas);
        return new lime_graphics_Image(buffer);
    };
    lime_graphics_Image.fromFile = function(path, onload, onerror) {
        var image = new lime_graphics_Image();
        image.__fromFile(path, onload, onerror);
        return image;
    };
    lime_graphics_Image.fromImageElement = function(image) {
        if (image == null) return null;
        var buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
        buffer.set_src(image);
        return new lime_graphics_Image(buffer);
    };
    lime_graphics_Image.__base64Encode = function(bytes) {
        var extension;
        var _g = bytes.length % 3;
        switch (_g) {
        case 1:
            extension = "==";
            break;
        case 2:
            extension = "=";
            break;
        default:
            extension = "";
        }
        if (lime_graphics_Image.__base64Encoder == null) lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
        return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
    };
    lime_graphics_Image.__isJPG = function(bytes) {
        return bytes.b[0] == 255 && bytes.b[1] == 216;
    };
    lime_graphics_Image.__isPNG = function(bytes) {
        return bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26 && bytes.b[7] == 10;
    };
    lime_graphics_Image.__isGIF = function(bytes) {
        if (bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
            var b = bytes.b[4];
            return (b == 55 || b == 57) && bytes.b[5] == 97;
        }
        return false;
    };
    lime_graphics_Image.prototype = {
        clone: function() {
            if (this.buffer != null) {
                if (this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
                    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                    lime_graphics_utils_ImageCanvasUtil.sync(this, true);
                }
                var image = new lime_graphics_Image(this.buffer.clone(), this.offsetX, this.offsetY, this.width, this.height, null, this.type);
                image.dirty = this.dirty;
                return image;
            } else return new lime_graphics_Image(null, this.offsetX, this.offsetY, this.width, this.height, null, this.type);
        },
        colorTransform: function(rect, colorMatrix) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.colorTransform(this, rect, colorMatrix);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.colorTransform(this, rect, colorMatrix);
                break;
            case 2:
                rect.offset(this.offsetX, this.offsetY);
                this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(), lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
                break;
            default:
            }
        },
        copyChannel: function(sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
            sourceRect = this.__clipRect(sourceRect);
            if (this.buffer == null || sourceRect == null) return;
            if (destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) return;
            if (sourceRect.width <= 0 || sourceRect.height <= 0) return;
            if (sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
            if (sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.copyChannel(this, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
                break;
            case 2:
                var srcChannel;
                switch (sourceChannel[1]) {
                case 0:
                    srcChannel = 1;
                    break;
                case 1:
                    srcChannel = 2;
                    break;
                case 2:
                    srcChannel = 4;
                    break;
                case 3:
                    srcChannel = 8;
                    break;
                }
                var dstChannel;
                switch (destChannel[1]) {
                case 0:
                    dstChannel = 1;
                    break;
                case 1:
                    dstChannel = 2;
                    break;
                case 2:
                    dstChannel = 4;
                    break;
                case 3:
                    dstChannel = 8;
                    break;
                }
                sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                destPoint.offset(this.offsetX, this.offsetY);
                this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(), sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), srcChannel, dstChannel);
                break;
            default:
            }
        },
        copyPixels: function(sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
            if (mergeAlpha == null) mergeAlpha = false;
            if (this.buffer == null || sourceImage == null) return;
            if (sourceRect.width <= 0 || sourceRect.height <= 0) return;
            if (this.width <= 0 || this.height <= 0) return;
            if (sourceRect.x + sourceRect.width > sourceImage.width) sourceRect.width = sourceImage.width - sourceRect.x;
            if (sourceRect.y + sourceRect.height > sourceImage.height) sourceRect.height = sourceImage.height - sourceRect.y;
            if (sourceRect.x < 0) {
                sourceRect.width += sourceRect.x;
                sourceRect.x = 0;
            }
            if (sourceRect.y < 0) {
                sourceRect.height += sourceRect.y;
                sourceRect.y = 0;
            }
            if (destPoint.x + sourceRect.width > this.width) sourceRect.width = this.width - destPoint.x;
            if (destPoint.y + sourceRect.height > this.height) sourceRect.height = this.height - destPoint.y;
            if (destPoint.x < 0) {
                sourceRect.width += destPoint.x;
                sourceRect.x = -destPoint.x;
                destPoint.x = 0;
            }
            if (destPoint.y < 0) {
                sourceRect.height += destPoint.y;
                sourceRect.y = -destPoint.y;
                destPoint.y = 0;
            }
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                lime_graphics_utils_ImageCanvasUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                lime_graphics_utils_ImageDataUtil.copyPixels(this, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha);
                break;
            case 2:
                sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                destPoint.offset(this.offsetX, this.offsetY);
                if (alphaImage != null && alphaPoint != null) alphaPoint.offset(alphaImage.offsetX, alphaImage.offsetY);
                this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), alphaImage != null ? alphaImage.buffer.get_src() : null, alphaPoint != null ? alphaPoint.__toFlashPoint() : null, mergeAlpha);
                break;
            default:
            }
        },
        encode: function(format, quality) {
            if (quality == null) quality = 90;
            if (format == null) format = "png";
            switch (format) {
            case "png":
                return lime_graphics_format_PNG.encode(this);
            case "jpg":
            case "jpeg":
                return lime_graphics_format_JPEG.encode(this, quality);
            case "bmp":
                return lime_graphics_format_BMP.encode(this);
            default:
            }
            return null;
        },
        fillRect: function(rect, color, format) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.fillRect(this, rect, color, format);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                if (this.buffer.data.length == 0) return;
                lime_graphics_utils_ImageDataUtil.fillRect(this, rect, color, format);
                break;
            case 2:
                rect.offset(this.offsetX, this.offsetY);
                var argb;
                if (format != null) switch (format) {
                case 1:
                    argb = color;
                    break;
                case 2:
                    {
                        var bgra = color;
                        var argb1 = 0;
                        argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                        argb = argb1;
                    }
                    break;
                default:
                    {
                        var rgba = color;
                        var argb2 = 0;
                        argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                        argb = argb2;
                    }
                } else {
                    var rgba1 = color;
                    var argb3 = 0;
                    argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                    argb = argb3;
                }
                this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(), argb);
                break;
            default:
            }
        },
        floodFill: function(x, y, color, format) {
            if (this.buffer == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.floodFill(this, x, y, color, format);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.floodFill(this, x, y, color, format);
                break;
            case 2:
                var argb;
                if (format != null) switch (format) {
                case 1:
                    argb = color;
                    break;
                case 2:
                    {
                        var bgra = color;
                        var argb1 = 0;
                        argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                        argb = argb1;
                    }
                    break;
                default:
                    {
                        var rgba = color;
                        var argb2 = 0;
                        argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                        argb = argb2;
                    }
                } else {
                    var rgba1 = color;
                    var argb3 = 0;
                    argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                    argb = argb3;
                }
                this.buffer.__srcBitmapData.floodFill(x + this.offsetX, y + this.offsetY, argb);
                break;
            default:
            }
        },
        getColorBoundsRect: function(mask, color, findColor, format) {
            if (findColor == null) findColor = true;
            if (this.buffer == null) return null;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
            case 1:
                return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this, mask, color, findColor, format);
            case 2:
                var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask, color, findColor);
                return new lime_math_Rectangle(rect.x, rect.y, rect.width, rect.height);
            default:
                return null;
            }
        },
        getPixel: function(x, y, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                return lime_graphics_utils_ImageCanvasUtil.getPixel(this, x, y, format);
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                return lime_graphics_utils_ImageDataUtil.getPixel(this, x, y, format);
            case 2:
                var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX, y + this.offsetY);
                if (format != null) switch (format) {
                case 1:
                    return color;
                case 2:
                    var bgra; {
                        var bgra1 = 0;
                        bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        bgra = bgra1;
                    }
                    return bgra;
                default:
                    var rgba; {
                        var rgba1 = 0;
                        rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba = rgba1;
                    }
                    return rgba;
                } else {
                    var rgba2; {
                        var rgba3 = 0;
                        rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba2 = rgba3;
                    }
                    return rgba2;
                }
                break;
            default:
                return 0;
            }
        },
        getPixel32: function(x, y, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return 0;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                return lime_graphics_utils_ImageCanvasUtil.getPixel32(this, x, y, format);
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                return lime_graphics_utils_ImageDataUtil.getPixel32(this, x, y, format);
            case 2:
                var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX, y + this.offsetY);
                if (format != null) switch (format) {
                case 1:
                    return color;
                case 2:
                    var bgra; {
                        var bgra1 = 0;
                        bgra1 = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        bgra = bgra1;
                    }
                    return bgra;
                default:
                    var rgba; {
                        var rgba1 = 0;
                        rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba = rgba1;
                    }
                    return rgba;
                } else {
                    var rgba2; {
                        var rgba3 = 0;
                        rgba3 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
                        rgba2 = rgba3;
                    }
                    return rgba2;
                }
                break;
            default:
                return 0;
            }
        },
        getPixels: function(rect, format) {
            if (this.buffer == null) return null;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                return lime_graphics_utils_ImageCanvasUtil.getPixels(this, rect, format);
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                return lime_graphics_utils_ImageDataUtil.getPixels(this, rect, format);
            case 2:
                return null;
            default:
                return null;
            }
        },
        merge: function(sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
            if (this.buffer == null || sourceImage == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                lime_graphics_utils_ImageCanvasUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
                lime_graphics_utils_ImageDataUtil.merge(this, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                break;
            case 2:
                sourceRect.offset(this.offsetX, this.offsetY);
                this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData, sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
                break;
            default:
                return null;
            }
        },
        resize: function(newWidth, newHeight) {
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.resize(this, newWidth, newHeight);
                break;
            case 1:
                lime_graphics_utils_ImageDataUtil.resize(this, newWidth, newHeight);
                break;
            case 2:
                break;
            default:
            }
            this.buffer.width = newWidth;
            this.buffer.height = newHeight;
            this.offsetX = 0;
            this.offsetY = 0;
            this.width = newWidth;
            this.height = newHeight;
        },
        scroll: function(x, y) {
            if (this.buffer == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.scroll(this, x, y);
                break;
            case 1:
                this.copyPixels(this, this.get_rect(), new lime_math_Vector2(x, y));
                break;
            case 2:
                this.buffer.__srcBitmapData.scroll(x + this.offsetX, y + this.offsetX);
                break;
            default:
            }
        },
        setPixel: function(x, y, color, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.setPixel(this, x, y, color, format);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.setPixel(this, x, y, color, format);
                break;
            case 2:
                var argb;
                if (format != null) switch (format) {
                case 1:
                    argb = color;
                    break;
                case 2:
                    {
                        var bgra = color;
                        var argb1 = 0;
                        argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                        argb = argb1;
                    }
                    break;
                default:
                    {
                        var rgba = color;
                        var argb2 = 0;
                        argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                        argb = argb2;
                    }
                } else {
                    var rgba1 = color;
                    var argb3 = 0;
                    argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                    argb = argb3;
                }
                this.buffer.__srcBitmapData.setPixel(x + this.offsetX, y + this.offsetX, argb);
                break;
            default:
            }
        },
        setPixel32: function(x, y, color, format) {
            if (this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.setPixel32(this, x, y, color, format);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.setPixel32(this, x, y, color, format);
                break;
            case 2:
                var argb;
                if (format != null) switch (format) {
                case 1:
                    argb = color;
                    break;
                case 2:
                    {
                        var bgra = color;
                        var argb1 = 0;
                        argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                        argb = argb1;
                    }
                    break;
                default:
                    {
                        var rgba = color;
                        var argb2 = 0;
                        argb2 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                        argb = argb2;
                    }
                } else {
                    var rgba1 = color;
                    var argb3 = 0;
                    argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                    argb = argb3;
                }
                this.buffer.__srcBitmapData.setPixel32(x + this.offsetX, y + this.offsetY, argb);
                break;
            default:
            }
        },
        setPixels: function(rect, bytes, format) {
            rect = this.__clipRect(rect);
            if (this.buffer == null || rect == null) return;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
                lime_graphics_utils_ImageCanvasUtil.setPixels(this, rect, bytes, format);
                break;
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                lime_graphics_utils_ImageDataUtil.setPixels(this, rect, bytes, format);
                break;
            case 2:
                break;
            default:
            }
        },
        threshold: function(sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format) {
            if (copySource == null) copySource = false;
            if (mask == null) mask = -1;
            if (color == null) color = 0;
            if (this.buffer == null || sourceImage == null || sourceRect == null) return 0;
            var _g = this.type;
            switch (_g[1]) {
            case 0:
            case 1:
                lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                return lime_graphics_utils_ImageDataUtil.threshold(this, sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format);
            case 2:
                var _color;
                if (format != null) switch (format) {
                case 1:
                    _color = color;
                    break;
                case 2:
                    {
                        var bgra = color;
                        var argb = 0;
                        argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
                        _color = argb;
                    }
                    break;
                default:
                    {
                        var rgba = color;
                        var argb1 = 0;
                        argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
                        _color = argb1;
                    }
                } else {
                    var rgba1 = color;
                    var argb2 = 0;
                    argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
                    _color = argb2;
                }
                var _mask;
                if (format != null) switch (format) {
                case 1:
                    _mask = mask;
                    break;
                case 2:
                    {
                        var bgra1 = mask;
                        var argb3 = 0;
                        argb3 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
                        _mask = argb3;
                    }
                    break;
                default:
                    {
                        var rgba2 = mask;
                        var argb4 = 0;
                        argb4 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
                        _mask = argb4;
                    }
                } else {
                    var rgba3 = mask;
                    var argb5 = 0;
                    argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
                    _mask = argb5;
                }
                sourceRect.offset(sourceImage.offsetX, sourceImage.offsetY);
                destPoint.offset(this.offsetX, this.offsetY);
                return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(), sourceRect.__toFlashRectangle(), destPoint.__toFlashPoint(), operation, threshold, _color, _mask, copySource);
            default:
            }
            return 0;
        },
        __clipRect: function(r) {
            if (r == null) return null;
            if (r.x < 0) {
                r.width -= -r.x;
                r.x = 0;
                if (r.x + r.width <= 0) return null;
            }
            if (r.y < 0) {
                r.height -= -r.y;
                r.y = 0;
                if (r.y + r.height <= 0) return null;
            }
            if (r.x + r.width >= this.width) {
                r.width -= r.x + r.width - this.width;
                if (r.width <= 0) return null;
            }
            if (r.y + r.height >= this.height) {
                r.height -= r.y + r.height - this.height;
                if (r.height <= 0) return null;
            }
            return r;
        },
        __fromBase64: function(base64, type, onload) {
            var _g = this;
            var image = new Image();
            image.crossOrigin = "Anonymous";
            var image_onLoaded = function(event) {
                _g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
                _g.buffer.__srcImage = image;
                _g.offsetX = 0;
                _g.offsetY = 0;
                _g.width = _g.buffer.width;
                _g.height = _g.buffer.height;
                if (onload != null) onload(_g);
            };
            image.addEventListener("load", image_onLoaded, false);
            image.src = "data:" + type + ";base64," + base64;
        },
        __fromBytes: function(bytes, onload) {
            var type = "";
            if (lime_graphics_Image.__isPNG(bytes)) type = "image/png";
            else if (lime_graphics_Image.__isJPG(bytes)) type = "image/jpeg";
            else if (lime_graphics_Image.__isGIF(bytes)) type = "image/gif";
            else throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
            this.__fromBase64(lime_graphics_Image.__base64Encode(bytes), type, onload);
        },
        __fromFile: function(path, onload, onerror) {
            var _g = this;
            var image = new Image();
            image.crossOrigin = "Anonymous";
            image.onload = function(_) {
                _g.buffer = new lime_graphics_ImageBuffer(null, image.width, image.height);
                _g.buffer.__srcImage = image;
                _g.width = image.width;
                _g.height = image.height;
                if (onload != null) onload(_g);
            };
            image.onerror = function(_1) {
                if (onerror != null) onerror();
            };
            image.src = path;
            if (image.complete) {}
        },
        __fromImageBuffer: function(buffer) {
            this.buffer = buffer;
            if (buffer != null) {
                if (this.width == -1) this.width = buffer.width;
                if (this.height == -1) this.height = buffer.height;
            }
        },
        get_data: function() {
            if (this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
                lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
                lime_graphics_utils_ImageCanvasUtil.sync(this, false);
                lime_graphics_utils_ImageCanvasUtil.createImageData(this);
            }
            return this.buffer.data;
        },
        set_data: function(value) {
            return this.buffer.data = value;
        },
        get_format: function() {
            return this.buffer.format;
        },
        set_format: function(value) {
            if (this.buffer.format != value) {
                var _g = this.type;
                switch (_g[1]) {
                case 1:
                    lime_graphics_utils_ImageDataUtil.setFormat(this, value);
                    break;
                default:
                }
            }
            return this.buffer.format = value;
        },
        get_powerOfTwo: function() {
            return this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width && (this.buffer.height != 0 && (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height);
        },
        set_powerOfTwo: function(value) {
            if (value != this.get_powerOfTwo()) {
                var newWidth = 1;
                var newHeight = 1;
                while (newWidth < this.buffer.width) newWidth <<= 1;
                while (newHeight < this.buffer.height) newHeight <<= 1;
                var _g = this.type;
                switch (_g[1]) {
                case 0:
                    break;
                case 1:
                    lime_graphics_utils_ImageDataUtil.resizeBuffer(this, newWidth, newHeight);
                    break;
                case 2:
                    break;
                default:
                }
            }
            return value;
        },
        get_premultiplied: function() {
            return this.buffer.premultiplied;
        },
        set_premultiplied: function(value) {
            if (value && !this.buffer.premultiplied) {
                var _g = this.type;
                switch (_g[1]) {
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
                    break;
                default:
                }
            } else if (!value && this.buffer.premultiplied) {
                var _g1 = this.type;
                switch (_g1[1]) {
                case 1:
                    lime_graphics_utils_ImageCanvasUtil.convertToData(this);
                    lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
                    break;
                default:
                }
            }
            return value;
        },
        get_rect: function() {
            return new lime_math_Rectangle(0, 0, this.width, this.height);
        },
        get_src: function() {
            if (this.buffer.__srcCanvas == null) lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
            return this.buffer.get_src();
        },
        set_src: function(value) {
            return this.buffer.set_src(value);
        },
        get_transparent: function() {
            if (this.buffer == null) return false;
            return this.buffer.transparent;
        },
        set_transparent: function(value) {
            if (this.buffer == null) return false;
            return this.buffer.transparent = value;
        },
        __class__: lime_graphics_Image,
        __properties__: {
            set_transparent: "set_transparent",
            get_transparent: "get_transparent",
            set_src: "set_src",
            get_src: "get_src",
            get_rect: "get_rect",
            set_premultiplied: "set_premultiplied",
            get_premultiplied: "get_premultiplied",
            set_powerOfTwo: "set_powerOfTwo",
            get_powerOfTwo: "get_powerOfTwo",
            set_format: "set_format",
            get_format: "get_format",
            set_data: "set_data",
            get_data: "get_data"
        }
    };
    var lime_graphics_ImageBuffer = function(data, width, height, bitsPerPixel, format) {
        if (bitsPerPixel == null) bitsPerPixel = 32;
        if (height == null) height = 0;
        if (width == null) width = 0;
        this.data = data;
        this.width = width;
        this.height = height;
        this.bitsPerPixel = bitsPerPixel;
        if (format == null) this.format = 0;
        else this.format = format;
        this.transparent = true;
    };
    $hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
    lime_graphics_ImageBuffer.__name__ = ["lime", "graphics", "ImageBuffer"];
    lime_graphics_ImageBuffer.prototype = {
        clone: function() {
            var buffer = new lime_graphics_ImageBuffer(this.data, this.width, this.height, this.bitsPerPixel);
            if (this.data != null) {
                var elements = this.data.byteLength;
                var this1;
                if (elements != null) this1 = new Uint8Array(elements);
                else this1 = null;
                buffer.data = this1;
                var copy;
                var view = this.data;
                var this2;
                if (view != null) this2 = new Uint8Array(view);
                else this2 = null;
                copy = this2;
                buffer.data.set(copy);
            } else if (this.__srcImageData != null) {
                buffer.__srcCanvas = window.document.createElement("canvas");
                buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
                buffer.__srcCanvas.width = this.__srcImageData.width;
                buffer.__srcCanvas.height = this.__srcImageData.height;
                buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width, this.__srcImageData.height);
                var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
                buffer.__srcImageData.data.set(copy1);
            } else if (this.__srcCanvas != null) {
                buffer.__srcCanvas = window.document.createElement("canvas");
                buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
                buffer.__srcCanvas.width = this.__srcCanvas.width;
                buffer.__srcCanvas.height = this.__srcCanvas.height;
                buffer.__srcContext.drawImage(this.__srcCanvas, 0, 0);
            } else buffer.__srcImage = this.__srcImage;
            buffer.bitsPerPixel = this.bitsPerPixel;
            buffer.format = this.format;
            buffer.premultiplied = this.premultiplied;
            buffer.transparent = this.transparent;
            return buffer;
        },
        get_src: function() {
            if (this.__srcImage != null) return this.__srcImage;
            return this.__srcCanvas;
        },
        set_src: function(value) {
            if (js_Boot.__instanceof(value, Image)) this.__srcImage = value;
            else if (js_Boot.__instanceof(value, HTMLCanvasElement)) {
                this.__srcCanvas = value;
                this.__srcContext = this.__srcCanvas.getContext("2d");
            }
            return value;
        },
        get_stride: function() {
            return this.width * 4;
        },
        __class__: lime_graphics_ImageBuffer,
        __properties__: {
            get_stride: "get_stride",
            set_src: "set_src",
            get_src: "get_src"
        }
    };
    var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = {
        __ename__: ["lime", "graphics", "ImageChannel"],
        __constructs__: ["RED", "GREEN", "BLUE", "ALPHA"]
    };
    lime_graphics_ImageChannel.RED = ["RED", 0];
    lime_graphics_ImageChannel.RED.toString = $estr;
    lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.GREEN = ["GREEN", 1];
    lime_graphics_ImageChannel.GREEN.toString = $estr;
    lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.BLUE = ["BLUE", 2];
    lime_graphics_ImageChannel.BLUE.toString = $estr;
    lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
    lime_graphics_ImageChannel.ALPHA = ["ALPHA", 3];
    lime_graphics_ImageChannel.ALPHA.toString = $estr;
    lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
    var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = {
        __ename__: ["lime", "graphics", "ImageType"],
        __constructs__: ["CANVAS", "DATA", "FLASH", "CUSTOM"]
    };
    lime_graphics_ImageType.CANVAS = ["CANVAS", 0];
    lime_graphics_ImageType.CANVAS.toString = $estr;
    lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.DATA = ["DATA", 1];
    lime_graphics_ImageType.DATA.toString = $estr;
    lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.FLASH = ["FLASH", 2];
    lime_graphics_ImageType.FLASH.toString = $estr;
    lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
    lime_graphics_ImageType.CUSTOM = ["CUSTOM", 3];
    lime_graphics_ImageType.CUSTOM.toString = $estr;
    lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
    var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = {
        __ename__: ["lime", "graphics", "RenderContext"],
        __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM", "NONE"]
    };
    lime_graphics_RenderContext.OPENGL = function(gl) {
        var $x = ["OPENGL", 0, gl];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.CANVAS = function(context) {
        var $x = ["CANVAS", 1, context];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.DOM = function(element) {
        var $x = ["DOM", 2, element];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.FLASH = function(stage) {
        var $x = ["FLASH", 3, stage];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.CAIRO = function(cairo) {
        var $x = ["CAIRO", 4, cairo];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.CONSOLE = function(context) {
        var $x = ["CONSOLE", 5, context];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.CUSTOM = function(data) {
        var $x = ["CUSTOM", 6, data];
        $x.__enum__ = lime_graphics_RenderContext;
        $x.toString = $estr;
        return $x;
    };
    lime_graphics_RenderContext.NONE = ["NONE", 7];
    lime_graphics_RenderContext.NONE.toString = $estr;
    lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
    var lime_graphics_Renderer = function(window) {
        this.onRender = new lime_app_Event_$Void_$Void();
        this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
        this.onContextLost = new lime_app_Event_$Void_$Void();
        this.window = window;
        this.backend = new lime__$backend_html5_HTML5Renderer(this);
        this.window.renderer = this;
    };
    $hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
    lime_graphics_Renderer.__name__ = ["lime", "graphics", "Renderer"];
    lime_graphics_Renderer.prototype = {
        create: function() {
            this.backend.create();
        },
        flip: function() {
            this.backend.flip();
        },
        readPixels: function(rect) {
            return this.backend.readPixels(rect);
        },
        render: function() {
            this.backend.render();
        },
        __class__: lime_graphics_Renderer
    };
    var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = {
        __ename__: ["lime", "graphics", "RendererType"],
        __constructs__: ["OPENGL", "CANVAS", "DOM", "FLASH", "CAIRO", "CONSOLE", "CUSTOM"]
    };
    lime_graphics_RendererType.OPENGL = ["OPENGL", 0];
    lime_graphics_RendererType.OPENGL.toString = $estr;
    lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CANVAS = ["CANVAS", 1];
    lime_graphics_RendererType.CANVAS.toString = $estr;
    lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.DOM = ["DOM", 2];
    lime_graphics_RendererType.DOM.toString = $estr;
    lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.FLASH = ["FLASH", 3];
    lime_graphics_RendererType.FLASH.toString = $estr;
    lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CAIRO = ["CAIRO", 4];
    lime_graphics_RendererType.CAIRO.toString = $estr;
    lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CONSOLE = ["CONSOLE", 5];
    lime_graphics_RendererType.CONSOLE.toString = $estr;
    lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
    lime_graphics_RendererType.CUSTOM = ["CUSTOM", 6];
    lime_graphics_RendererType.CUSTOM.toString = $estr;
    lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
    var lime_graphics_cairo_Cairo = function(surface) {
        if (surface != null) {}
    };
    $hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
    lime_graphics_cairo_Cairo.__name__ = ["lime", "graphics", "cairo", "Cairo"];
    lime_graphics_cairo_Cairo.__properties__ = {
        get_versionString: "get_versionString",
        get_version: "get_version"
    }
    lime_graphics_cairo_Cairo.version = null;
    lime_graphics_cairo_Cairo.versionString = null;
    lime_graphics_cairo_Cairo.get_version = function() {
        return 0;
    };
    lime_graphics_cairo_Cairo.get_versionString = function() {
        return "";
    };
    lime_graphics_cairo_Cairo.prototype = {
        arc: function(xc, yc, radius, angle1, angle2) {},
        arcNegative: function(xc, yc, radius, angle1, angle2) {},
        clip: function() {},
        clipExtents: function(x1, y1, x2, y2) {},
        clipPreserve: function() {},
        closePath: function() {},
        copyPage: function() {},
        curveTo: function(x1, y1, x2, y2, x3, y3) {},
        fill: function() {},
        fillExtents: function(x1, y1, x2, y2) {},
        fillPreserve: function() {},
        identityMatrix: function() {},
        inClip: function(x, y) {
            return false;
        },
        inFill: function(x, y) {
            return false;
        },
        inStroke: function(x, y) {
            return false;
        },
        lineTo: function(x, y) {},
        moveTo: function(x, y) {},
        mask: function(pattern) {},
        maskSurface: function(surface, x, y) {},
        newPath: function() {},
        paint: function() {},
        paintWithAlpha: function(alpha) {},
        popGroup: function() {
            return null;
        },
        popGroupToSource: function() {},
        pushGroup: function() {},
        pushGroupWithContent: function(content) {},
        recreate: function(surface) {},
        rectangle: function(x, y, width, height) {},
        relCurveTo: function(dx1, dy1, dx2, dy2, dx3, dy3) {},
        relLineTo: function(dx, dy) {},
        relMoveTo: function(dx, dy) {},
        resetClip: function() {},
        restore: function() {},
        save: function() {},
        setFontSize: function(size) {},
        setSourceRGB: function(r, g, b) {},
        setSourceRGBA: function(r, g, b, a) {},
        setSourceSurface: function(surface, x, y) {},
        showPage: function() {},
        showText: function(utf8) {},
        status: function() {
            return 0;
        },
        stroke: function() {},
        strokeExtents: function(x1, y1, x2, y2) {},
        strokePreserve: function() {},
        transform: function(matrix) {},
        rotate: function(amount) {},
        scale: function(x, y) {},
        translate: function(x, y) {},
        get_antialias: function() {
            return 0;
        },
        set_antialias: function(value) {
            return value;
        },
        get_currentPoint: function() {
            return null;
        },
        get_dash: function() {
            return [];
        },
        set_dash: function(value) {
            return value;
        },
        get_dashCount: function() {
            return 0;
        },
        get_fillRule: function() {
            return 0;
        },
        set_fillRule: function(value) {
            return value;
        },
        get_fontFace: function() {
            return 0;
        },
        set_fontFace: function(value) {
            return value;
        },
        get_fontOptions: function() {
            return null;
        },
        set_fontOptions: function(value) {
            return value;
        },
        get_groupTarget: function() {
            return 0;
        },
        get_hasCurrentPoint: function() {
            return false;
        },
        get_lineCap: function() {
            return 0;
        },
        set_lineCap: function(value) {
            return value;
        },
        get_lineJoin: function() {
            return 0;
        },
        set_lineJoin: function(value) {
            return value;
        },
        get_lineWidth: function() {
            return 0;
        },
        set_lineWidth: function(value) {
            return value;
        },
        get_matrix: function() {
            return null;
        },
        set_matrix: function(value) {
            return value;
        },
        get_miterLimit: function() {
            return 0;
        },
        set_miterLimit: function(value) {
            return value;
        },
        get_operator: function() {
            return 0;
        },
        set_operator: function(value) {
            return value;
        },
        get_source: function() {
            return 0;
        },
        set_source: function(value) {
            return value;
        },
        get_target: function() {
            return 0;
        },
        get_tolerance: function() {
            return 0;
        },
        set_tolerance: function(value) {
            return value;
        },
        __class__: lime_graphics_cairo_Cairo,
        __properties__: {
            set_tolerance: "set_tolerance",
            get_tolerance: "get_tolerance",
            get_target: "get_target",
            set_source: "set_source",
            get_source: "get_source",
            set_operator: "set_operator",
            get_operator: "get_operator",
            set_miterLimit: "set_miterLimit",
            get_miterLimit: "get_miterLimit",
            set_matrix: "set_matrix",
            get_matrix: "get_matrix",
            set_lineWidth: "set_lineWidth",
            get_lineWidth: "get_lineWidth",
            set_lineJoin: "set_lineJoin",
            get_lineJoin: "get_lineJoin",
            set_lineCap: "set_lineCap",
            get_lineCap: "get_lineCap",
            get_hasCurrentPoint: "get_hasCurrentPoint",
            get_groupTarget: "get_groupTarget",
            set_fontOptions: "set_fontOptions",
            get_fontOptions: "get_fontOptions",
            set_fontFace: "set_fontFace",
            get_fontFace: "get_fontFace",
            set_fillRule: "set_fillRule",
            get_fillRule: "get_fillRule",
            get_dashCount: "get_dashCount",
            set_dash: "set_dash",
            get_dash: "get_dash",
            get_currentPoint: "get_currentPoint",
            set_antialias: "set_antialias",
            get_antialias: "get_antialias"
        }
    };
    var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFTFontFace", "CairoFTFontFace_Impl_"];
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
        return 0;
    };
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face, loadFlags) {
        return 0;
    };
    var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontFace", "CairoFontFace_Impl_"];
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
        return null;
    };
    lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
        return 0;
    };
    var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoFontOptions", "CairoFontOptions_Impl_"];
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {
        set_subpixelOrder: "set_subpixelOrder",
        get_subpixelOrder: "get_subpixelOrder",
        set_hintStyle: "set_hintStyle",
        get_hintStyle: "get_hintStyle",
        set_hintMetrics: "set_hintMetrics",
        get_hintMetrics: "get_hintMetrics",
        set_antialias: "set_antialias",
        get_antialias: "get_antialias"
    }
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
        return null;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1, value) {
        return value;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1, value) {
        return value;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1, value) {
        return value;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1, value) {
        return value;
    };
    var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoImageSurface", "CairoImageSurface_Impl_"];
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {
        get_width: "get_width",
        get_stride: "get_stride",
        get_height: "get_height",
        get_format: "get_format",
        get_data: "get_data"
    }
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format, width, height) {
        return 0;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data, format, width, height, stride) {
        return 0;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
        return null;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
        return null;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
        return 0;
    };
    var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoPattern", "CairoPattern_Impl_"];
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {
        set_matrix: "set_matrix",
        get_matrix: "get_matrix",
        set_filter: "set_filter",
        get_filter: "get_filter",
        set_extend: "set_extend",
        get_extend: "get_extend",
        get_colorStopCount: "get_colorStopCount"
    }
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
        return handle;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1, offset, r, g, b) {};
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1, offset, r, g, b, a) {};
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0, y0, x1, y1) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0, cy0, radius0, cx1, cy1, radius1) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r, g, b) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r, g, b, a) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1, value) {
        return value;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
        return 0;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1, value) {
        return value;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
        return null;
    };
    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1, value) {
        return value;
    };
    var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
    $hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
    lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime", "graphics", "cairo", "_CairoSurface", "CairoSurface_Impl_"];
    lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {};
    var lime_graphics_console_IndexBuffer = function() {};
    $hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
    lime_graphics_console_IndexBuffer.__name__ = ["lime", "graphics", "console", "IndexBuffer"];
    lime_graphics_console_IndexBuffer.prototype = {
        __class__: lime_graphics_console_IndexBuffer
    };
    var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = {
        __ename__: ["lime", "graphics", "console", "Primitive"],
        __constructs__: ["Point", "Line", "LineStrip", "Triangle", "TriangleStrip"]
    };
    lime_graphics_console_Primitive.Point = ["Point", 0];
    lime_graphics_console_Primitive.Point.toString = $estr;
    lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.Line = ["Line", 1];
    lime_graphics_console_Primitive.Line.toString = $estr;
    lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.LineStrip = ["LineStrip", 2];
    lime_graphics_console_Primitive.LineStrip.toString = $estr;
    lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.Triangle = ["Triangle", 3];
    lime_graphics_console_Primitive.Triangle.toString = $estr;
    lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
    lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip", 4];
    lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
    lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
    var lime_graphics_console_Shader = function() {};
    $hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
    lime_graphics_console_Shader.__name__ = ["lime", "graphics", "console", "Shader"];
    lime_graphics_console_Shader.prototype = {
        __class__: lime_graphics_console_Shader
    };
    var lime_graphics_console_VertexBuffer = function() {};
    $hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
    lime_graphics_console_VertexBuffer.__name__ = ["lime", "graphics", "console", "VertexBuffer"];
    lime_graphics_console_VertexBuffer.prototype = {
        lock: function() {
            return new lime_graphics_console_VertexOutput();
        },
        unlock: function() {},
        __class__: lime_graphics_console_VertexBuffer
    };
    var lime_graphics_console_VertexOutput = function() {};
    $hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
    lime_graphics_console_VertexOutput.__name__ = ["lime", "graphics", "console", "VertexOutput"];
    lime_graphics_console_VertexOutput.prototype = {
        vec2: function(x, y) {},
        vec3: function(x, y, z) {},
        color: function(r, g, b, a) {},
        __class__: lime_graphics_console_VertexOutput
    };
    var lime_graphics_format_BMP = function() {};
    $hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
    lime_graphics_format_BMP.__name__ = ["lime", "graphics", "format", "BMP"];
    lime_graphics_format_BMP.encode = function(image, type) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0);
        }
        if (type == null) type = lime_graphics_format_BMPType.RGB;
        var fileHeaderLength = 14;
        var infoHeaderLength = 40;
        var pixelValuesLength = image.width * image.height * 4;
        if (type != null) switch (type[1]) {
        case 1:
            infoHeaderLength = 108;
            break;
        case 2:
            fileHeaderLength = 0;
            pixelValuesLength += image.width * image.height;
            break;
        case 0:
            pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
            break;
        default:
        } else {}
        var data = haxe_io_Bytes.alloc(fileHeaderLength + infoHeaderLength + pixelValuesLength);
        var position = 0;
        if (fileHeaderLength > 0) {
            data.set(position++, 66);
            data.set(position++, 77);
            data.setInt32(position, data.length);
            position += 4;
            data.setUInt16(position, 0);
            position += 2;
            data.setUInt16(position, 0);
            position += 2;
            data.setInt32(position, fileHeaderLength + infoHeaderLength);
            position += 4;
        }
        data.setInt32(position, infoHeaderLength);
        position += 4;
        data.setInt32(position, image.width);
        position += 4;
        data.setInt32(position, type == lime_graphics_format_BMPType.ICO ? image.height * 2 : image.height);
        position += 4;
        data.setUInt16(position, 1);
        position += 2;
        data.setUInt16(position, type == lime_graphics_format_BMPType.RGB ? 24 : 32);
        position += 2;
        data.setInt32(position, type == lime_graphics_format_BMPType.BITFIELD ? 3 : 0);
        position += 4;
        data.setInt32(position, pixelValuesLength);
        position += 4;
        data.setInt32(position, 11824);
        position += 4;
        data.setInt32(position, 11824);
        position += 4;
        data.setInt32(position, 0);
        position += 4;
        data.setInt32(position, 0);
        position += 4;
        if (type == lime_graphics_format_BMPType.BITFIELD) {
            data.setInt32(position, 16711680);
            position += 4;
            data.setInt32(position, 65280);
            position += 4;
            data.setInt32(position, 255);
            position += 4;
            data.setInt32(position, -16777216);
            position += 4;
            data.set(position++, 32);
            data.set(position++, 110);
            data.set(position++, 105);
            data.set(position++, 87);
            var _g = 0;
            while (_g < 48) {
                var i = _g++;
                data.set(position++, 0);
            }
        }
        var pixels = image.getPixels(new lime_math_Rectangle(0, 0, image.width, image.height), 1);
        var readPosition = 0;
        var a;
        var r;
        var g;
        var b;
        if (type != null) switch (type[1]) {
        case 1:
            var _g1 = 0;
            var _g2 = image.height;
            while (_g1 < _g2) {
                var y = _g1++;
                readPosition = (image.height - 1 - y) * 4 * image.width;
                var _g3 = 0;
                var _g21 = image.width;
                while (_g3 < _g21) {
                    var x = _g3++;
                    a = pixels.get(readPosition++);
                    r = pixels.get(readPosition++);
                    g = pixels.get(readPosition++);
                    b = pixels.get(readPosition++);
                    data.set(position++, b);
                    data.set(position++, g);
                    data.set(position++, r);
                    data.set(position++, a);
                }
            }
            break;
        case 2:
            var andMask = haxe_io_Bytes.alloc(image.width * image.height);
            var maskPosition = 0;
            var _g11 = 0;
            var _g4 = image.height;
            while (_g11 < _g4) {
                var y1 = _g11++;
                readPosition = (image.height - 1 - y1) * 4 * image.width;
                var _g31 = 0;
                var _g22 = image.width;
                while (_g31 < _g22) {
                    var x1 = _g31++;
                    a = pixels.get(readPosition++);
                    r = pixels.get(readPosition++);
                    g = pixels.get(readPosition++);
                    b = pixels.get(readPosition++);
                    data.set(position++, b);
                    data.set(position++, g);
                    data.set(position++, r);
                    data.set(position++, a);
                    andMask.set(maskPosition++, 0);
                }
            }
            data.blit(position, andMask, 0, image.width * image.height);
            break;
        case 0:
            var _g12 = 0;
            var _g5 = image.height;
            while (_g12 < _g5) {
                var y2 = _g12++;
                readPosition = (image.height - 1 - y2) * 4 * image.width;
                var _g32 = 0;
                var _g23 = image.width;
                while (_g32 < _g23) {
                    var x2 = _g32++;
                    a = pixels.get(readPosition++);
                    r = pixels.get(readPosition++);
                    g = pixels.get(readPosition++);
                    b = pixels.get(readPosition++);
                    data.set(position++, b);
                    data.set(position++, g);
                    data.set(position++, r);
                }
                var _g33 = 0;
                var _g24 = image.width * 3 % 4;
                while (_g33 < _g24) {
                    var i1 = _g33++;
                    data.set(position++, 0);
                }
            }
            break;
        default:
        } else {}
        return data;
    };
    var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = {
        __ename__: ["lime", "graphics", "format", "BMPType"],
        __constructs__: ["RGB", "BITFIELD", "ICO"]
    };
    lime_graphics_format_BMPType.RGB = ["RGB", 0];
    lime_graphics_format_BMPType.RGB.toString = $estr;
    lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
    lime_graphics_format_BMPType.BITFIELD = ["BITFIELD", 1];
    lime_graphics_format_BMPType.BITFIELD.toString = $estr;
    lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
    lime_graphics_format_BMPType.ICO = ["ICO", 2];
    lime_graphics_format_BMPType.ICO.toString = $estr;
    lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
    var lime_graphics_format_JPEG = function() {};
    $hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
    lime_graphics_format_JPEG.__name__ = ["lime", "graphics", "format", "JPEG"];
    lime_graphics_format_JPEG.decodeBytes = function(bytes, decodeData) {
        if (decodeData == null) decodeData = true;
        return null;
    };
    lime_graphics_format_JPEG.decodeFile = function(path, decodeData) {
        if (decodeData == null) decodeData = true;
        return null;
    };
    lime_graphics_format_JPEG.encode = function(image, quality) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0);
        }
        lime_graphics_utils_ImageCanvasUtil.sync(image, false);
        if (image.buffer.__srcCanvas != null) {
            var data = image.buffer.__srcCanvas.toDataURL("image/jpeg", quality / 100);
            var buffer = window.atob(data.split(";base64,")[1]);
            var bytes = haxe_io_Bytes.alloc(buffer.length);
            var _g1 = 0;
            var _g = buffer.length;
            while (_g1 < _g) {
                var i = _g1++;
                bytes.set(i, HxOverrides.cca(buffer, i));
            }
            return bytes;
        }
        return null;
    };
    var lime_graphics_format_PNG = function() {};
    $hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
    lime_graphics_format_PNG.__name__ = ["lime", "graphics", "format", "PNG"];
    lime_graphics_format_PNG.decodeBytes = function(bytes, decodeData) {
        if (decodeData == null) decodeData = true;
        return null;
    };
    lime_graphics_format_PNG.decodeFile = function(path, decodeData) {
        if (decodeData == null) decodeData = true;
        return null;
    };
    lime_graphics_format_PNG.encode = function(image) {
        if (image.get_premultiplied() || image.get_format() != 0) {
            image = image.clone();
            image.set_premultiplied(false);
            image.set_format(0);
        }
        return null;
    };
    var lime_graphics_opengl_GL = function() {};
    $hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
    lime_graphics_opengl_GL.__name__ = ["lime", "graphics", "opengl", "GL"];
    lime_graphics_opengl_GL.__properties__ = {
        get_version: "get_version"
    }
    lime_graphics_opengl_GL.version = null;
    lime_graphics_opengl_GL.context = null;
    lime_graphics_opengl_GL.activeTexture = function(texture) {
        lime_graphics_opengl_GL.context.activeTexture(texture);
    };
    lime_graphics_opengl_GL.attachShader = function(program, shader) {
        lime_graphics_opengl_GL.context.attachShader(program, shader);
    };
    lime_graphics_opengl_GL.bindAttribLocation = function(program, index, name) {
        lime_graphics_opengl_GL.context.bindAttribLocation(program, index, name);
    };
    lime_graphics_opengl_GL.bindBuffer = function(target, buffer) {
        lime_graphics_opengl_GL.context.bindBuffer(target, buffer);
    };
    lime_graphics_opengl_GL.bindFramebuffer = function(target, framebuffer) {
        lime_graphics_opengl_GL.context.bindFramebuffer(target, framebuffer);
    };
    lime_graphics_opengl_GL.bindRenderbuffer = function(target, renderbuffer) {
        lime_graphics_opengl_GL.context.bindRenderbuffer(target, renderbuffer);
    };
    lime_graphics_opengl_GL.bindTexture = function(target, texture) {
        lime_graphics_opengl_GL.context.bindTexture(target, texture);
    };
    lime_graphics_opengl_GL.blendColor = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.blendColor(red, green, blue, alpha);
    };
    lime_graphics_opengl_GL.blendEquation = function(mode) {
        lime_graphics_opengl_GL.context.blendEquation(mode);
    };
    lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB, modeAlpha) {
        lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB, modeAlpha);
    };
    lime_graphics_opengl_GL.blendFunc = function(sfactor, dfactor) {
        lime_graphics_opengl_GL.context.blendFunc(sfactor, dfactor);
    };
    lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB, dstRGB, srcAlpha, dstAlpha) {
        lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);
    };
    lime_graphics_opengl_GL.bufferData = function(target, data, usage) {
        lime_graphics_opengl_GL.context.bufferData(target, data, usage);
    };
    lime_graphics_opengl_GL.bufferSubData = function(target, offset, data) {
        lime_graphics_opengl_GL.context.bufferSubData(target, offset, data);
    };
    lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
        return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
    };
    lime_graphics_opengl_GL.clear = function(mask) {
        lime_graphics_opengl_GL.context.clear(mask);
    };
    lime_graphics_opengl_GL.clearColor = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.clearColor(red, green, blue, alpha);
    };
    lime_graphics_opengl_GL.clearDepth = function(depth) {
        lime_graphics_opengl_GL.context.clearDepth(depth);
    };
    lime_graphics_opengl_GL.clearStencil = function(s) {
        lime_graphics_opengl_GL.context.clearStencil(s);
    };
    lime_graphics_opengl_GL.colorMask = function(red, green, blue, alpha) {
        lime_graphics_opengl_GL.context.colorMask(red, green, blue, alpha);
    };
    lime_graphics_opengl_GL.compileShader = function(shader) {
        lime_graphics_opengl_GL.context.compileShader(shader);
    };
    lime_graphics_opengl_GL.compressedTexImage2D = function(target, level, internalformat, width, height, border, data) {
        lime_graphics_opengl_GL.context.compressedTexImage2D(target, level, internalformat, width, height, border, data);
    };
    lime_graphics_opengl_GL.compressedTexSubImage2D = function(target, level, xoffset, yoffset, width, height, format, data) {
        lime_graphics_opengl_GL.context.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data);
    };
    lime_graphics_opengl_GL.copyTexImage2D = function(target, level, internalformat, x, y, width, height, border) {
        lime_graphics_opengl_GL.context.copyTexImage2D(target, level, internalformat, x, y, width, height, border);
    };
    lime_graphics_opengl_GL.copyTexSubImage2D = function(target, level, xoffset, yoffset, x, y, width, height) {
        lime_graphics_opengl_GL.context.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);
    };
    lime_graphics_opengl_GL.createBuffer = function() {
        return lime_graphics_opengl_GL.context.createBuffer();
    };
    lime_graphics_opengl_GL.createFramebuffer = function() {
        return lime_graphics_opengl_GL.context.createFramebuffer();
    };
    lime_graphics_opengl_GL.createProgram = function() {
        return lime_graphics_opengl_GL.context.createProgram();
    };
    lime_graphics_opengl_GL.createRenderbuffer = function() {
        return lime_graphics_opengl_GL.context.createRenderbuffer();
    };
    lime_graphics_opengl_GL.createShader = function(type) {
        return lime_graphics_opengl_GL.context.createShader(type);
    };
    lime_graphics_opengl_GL.createTexture = function() {
        return lime_graphics_opengl_GL.context.createTexture();
    };
    lime_graphics_opengl_GL.cullFace = function(mode) {
        lime_graphics_opengl_GL.context.cullFace(mode);
    };
    lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
        lime_graphics_opengl_GL.context.deleteBuffer(buffer);
    };
    lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
        lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
    };
    lime_graphics_opengl_GL.deleteProgram = function(program) {
        lime_graphics_opengl_GL.context.deleteProgram(program);
    };
    lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
        lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
    };
    lime_graphics_opengl_GL.deleteShader = function(shader) {
        lime_graphics_opengl_GL.context.deleteShader(shader);
    };
    lime_graphics_opengl_GL.deleteTexture = function(texture) {
        lime_graphics_opengl_GL.context.deleteTexture(texture);
    };
    lime_graphics_opengl_GL.depthFunc = function(func) {
        lime_graphics_opengl_GL.context.depthFunc(func);
    };
    lime_graphics_opengl_GL.depthMask = function(flag) {
        lime_graphics_opengl_GL.context.depthMask(flag);
    };
    lime_graphics_opengl_GL.depthRange = function(zNear, zFar) {
        lime_graphics_opengl_GL.context.depthRange(zNear, zFar);
    };
    lime_graphics_opengl_GL.detachShader = function(program, shader) {
        lime_graphics_opengl_GL.context.detachShader(program, shader);
    };
    lime_graphics_opengl_GL.disable = function(cap) {
        lime_graphics_opengl_GL.context.disable(cap);
    };
    lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
        lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
    };
    lime_graphics_opengl_GL.drawArrays = function(mode, first, count) {
        lime_graphics_opengl_GL.context.drawArrays(mode, first, count);
    };
    lime_graphics_opengl_GL.drawElements = function(mode, count, type, offset) {
        lime_graphics_opengl_GL.context.drawElements(mode, count, type, offset);
    };
    lime_graphics_opengl_GL.enable = function(cap) {
        lime_graphics_opengl_GL.context.enable(cap);
    };
    lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
        lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
    };
    lime_graphics_opengl_GL.finish = function() {
        lime_graphics_opengl_GL.context.finish();
    };
    lime_graphics_opengl_GL.flush = function() {
        lime_graphics_opengl_GL.context.flush();
    };
    lime_graphics_opengl_GL.framebufferRenderbuffer = function(target, attachment, renderbuffertarget, renderbuffer) {
        lime_graphics_opengl_GL.context.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    };
    lime_graphics_opengl_GL.framebufferTexture2D = function(target, attachment, textarget, texture, level) {
        lime_graphics_opengl_GL.context.framebufferTexture2D(target, attachment, textarget, texture, level);
    };
    lime_graphics_opengl_GL.frontFace = function(mode) {
        lime_graphics_opengl_GL.context.frontFace(mode);
    };
    lime_graphics_opengl_GL.generateMipmap = function(target) {
        lime_graphics_opengl_GL.context.generateMipmap(target);
    };
    lime_graphics_opengl_GL.getActiveAttrib = function(program, index) {
        return lime_graphics_opengl_GL.context.getActiveAttrib(program, index);
    };
    lime_graphics_opengl_GL.getActiveUniform = function(program, index) {
        return lime_graphics_opengl_GL.context.getActiveUniform(program, index);
    };
    lime_graphics_opengl_GL.getAttachedShaders = function(program) {
        return lime_graphics_opengl_GL.context.getAttachedShaders(program);
    };
    lime_graphics_opengl_GL.getAttribLocation = function(program, name) {
        return lime_graphics_opengl_GL.context.getAttribLocation(program, name);
    };
    lime_graphics_opengl_GL.getBufferParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.getBufferParameter(target, pname);
    };
    lime_graphics_opengl_GL.getContextAttributes = function() {
        return lime_graphics_opengl_GL.context.getContextAttributes();
    };
    lime_graphics_opengl_GL.getError = function() {
        return lime_graphics_opengl_GL.context.getError();
    };
    lime_graphics_opengl_GL.getExtension = function(name) {
        return lime_graphics_opengl_GL.context.getExtension(name);
    };
    lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target, attachment, pname) {
        return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target, attachment, pname);
    };
    lime_graphics_opengl_GL.getParameter = function(pname) {
        return lime_graphics_opengl_GL.context.getParameter(pname);
    };
    lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
        return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
    };
    lime_graphics_opengl_GL.getProgramParameter = function(program, pname) {
        return lime_graphics_opengl_GL.context.getProgramParameter(program, pname);
    };
    lime_graphics_opengl_GL.getRenderbufferParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.getRenderbufferParameter(target, pname);
    };
    lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
        return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
    };
    lime_graphics_opengl_GL.getShaderParameter = function(shader, pname) {
        return lime_graphics_opengl_GL.context.getShaderParameter(shader, pname);
    };
    lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype, precisiontype) {
        return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype, precisiontype);
    };
    lime_graphics_opengl_GL.getShaderSource = function(shader) {
        return lime_graphics_opengl_GL.context.getShaderSource(shader);
    };
    lime_graphics_opengl_GL.getSupportedExtensions = function() {
        return lime_graphics_opengl_GL.context.getSupportedExtensions();
    };
    lime_graphics_opengl_GL.getTexParameter = function(target, pname) {
        return lime_graphics_opengl_GL.context.getTexParameter(target, pname);
    };
    lime_graphics_opengl_GL.getUniform = function(program, location) {
        return lime_graphics_opengl_GL.context.getUniform(program, location);
    };
    lime_graphics_opengl_GL.getUniformLocation = function(program, name) {
        return lime_graphics_opengl_GL.context.getUniformLocation(program, name);
    };
    lime_graphics_opengl_GL.getVertexAttrib = function(index, pname) {
        return lime_graphics_opengl_GL.context.getVertexAttrib(index, pname);
    };
    lime_graphics_opengl_GL.getVertexAttribOffset = function(index, pname) {
        return lime_graphics_opengl_GL.context.getVertexAttribOffset(index, pname);
    };
    lime_graphics_opengl_GL.hint = function(target, mode) {
        lime_graphics_opengl_GL.context.hint(target, mode);
    };
    lime_graphics_opengl_GL.isBuffer = function(buffer) {
        return lime_graphics_opengl_GL.context.isBuffer(buffer);
    };
    lime_graphics_opengl_GL.isContextLost = function() {
        return lime_graphics_opengl_GL.context.isContextLost();
    };
    lime_graphics_opengl_GL.isEnabled = function(cap) {
        return lime_graphics_opengl_GL.context.isEnabled(cap);
    };
    lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
        return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
    };
    lime_graphics_opengl_GL.isProgram = function(program) {
        return lime_graphics_opengl_GL.context.isProgram(program);
    };
    lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
        return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
    };
    lime_graphics_opengl_GL.isShader = function(shader) {
        return lime_graphics_opengl_GL.context.isShader(shader);
    };
    lime_graphics_opengl_GL.isTexture = function(texture) {
        return lime_graphics_opengl_GL.context.isTexture(texture);
    };
    lime_graphics_opengl_GL.lineWidth = function(width) {
        lime_graphics_opengl_GL.context.lineWidth(width);
    };
    lime_graphics_opengl_GL.linkProgram = function(program) {
        lime_graphics_opengl_GL.context.linkProgram(program);
    };
    lime_graphics_opengl_GL.pixelStorei = function(pname, param) {
        lime_graphics_opengl_GL.context.pixelStorei(pname, param);
    };
    lime_graphics_opengl_GL.polygonOffset = function(factor, units) {
        lime_graphics_opengl_GL.context.polygonOffset(factor, units);
    };
    lime_graphics_opengl_GL.readPixels = function(x, y, width, height, format, type, pixels) {
        lime_graphics_opengl_GL.context.readPixels(x, y, width, height, format, type, pixels);
    };
    lime_graphics_opengl_GL.renderbufferStorage = function(target, internalformat, width, height) {
        lime_graphics_opengl_GL.context.renderbufferStorage(target, internalformat, width, height);
    };
    lime_graphics_opengl_GL.sampleCoverage = function(value, invert) {
        lime_graphics_opengl_GL.context.sampleCoverage(value, invert);
    };
    lime_graphics_opengl_GL.scissor = function(x, y, width, height) {
        lime_graphics_opengl_GL.context.scissor(x, y, width, height);
    };
    lime_graphics_opengl_GL.shaderSource = function(shader, source) {
        lime_graphics_opengl_GL.context.shaderSource(shader, source);
    };
    lime_graphics_opengl_GL.stencilFunc = function(func, ref, mask) {
        lime_graphics_opengl_GL.context.stencilFunc(func, ref, mask);
    };
    lime_graphics_opengl_GL.stencilFuncSeparate = function(face, func, ref, mask) {
        lime_graphics_opengl_GL.context.stencilFuncSeparate(face, func, ref, mask);
    };
    lime_graphics_opengl_GL.stencilMask = function(mask) {
        lime_graphics_opengl_GL.context.stencilMask(mask);
    };
    lime_graphics_opengl_GL.stencilMaskSeparate = function(face, mask) {
        lime_graphics_opengl_GL.context.stencilMaskSeparate(face, mask);
    };
    lime_graphics_opengl_GL.stencilOp = function(fail, zfail, zpass) {
        lime_graphics_opengl_GL.context.stencilOp(fail, zfail, zpass);
    };
    lime_graphics_opengl_GL.stencilOpSeparate = function(face, fail, zfail, zpass) {
        lime_graphics_opengl_GL.context.stencilOpSeparate(face, fail, zfail, zpass);
    };
    lime_graphics_opengl_GL.texImage2D = function(target, level, internalformat, width, height, border, format, type, pixels) {
        lime_graphics_opengl_GL.context.texImage2D(target, level, internalformat, width, height, border, format, type, pixels);
    };
    lime_graphics_opengl_GL.texParameterf = function(target, pname, param) {
        lime_graphics_opengl_GL.context.texParameterf(target, pname, param);
    };
    lime_graphics_opengl_GL.texParameteri = function(target, pname, param) {
        lime_graphics_opengl_GL.context.texParameteri(target, pname, param);
    };
    lime_graphics_opengl_GL.texSubImage2D = function(target, level, xoffset, yoffset, width, height, format, type, pixels) {
        lime_graphics_opengl_GL.context.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels);
    };
    lime_graphics_opengl_GL.uniform1f = function(location, x) {
        lime_graphics_opengl_GL.context.uniform1f(location, x);
    };
    lime_graphics_opengl_GL.uniform1fv = function(location, x) {
        lime_graphics_opengl_GL.context.uniform1fv(location, x);
    };
    lime_graphics_opengl_GL.uniform1i = function(location, x) {
        lime_graphics_opengl_GL.context.uniform1i(location, x);
    };
    lime_graphics_opengl_GL.uniform1iv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform1iv(location, v);
    };
    lime_graphics_opengl_GL.uniform2f = function(location, x, y) {
        lime_graphics_opengl_GL.context.uniform2f(location, x, y);
    };
    lime_graphics_opengl_GL.uniform2fv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform2fv(location, v);
    };
    lime_graphics_opengl_GL.uniform2i = function(location, x, y) {
        lime_graphics_opengl_GL.context.uniform2i(location, x, y);
    };
    lime_graphics_opengl_GL.uniform2iv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform2iv(location, v);
    };
    lime_graphics_opengl_GL.uniform3f = function(location, x, y, z) {
        lime_graphics_opengl_GL.context.uniform3f(location, x, y, z);
    };
    lime_graphics_opengl_GL.uniform3fv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform3fv(location, v);
    };
    lime_graphics_opengl_GL.uniform3i = function(location, x, y, z) {
        lime_graphics_opengl_GL.context.uniform3i(location, x, y, z);
    };
    lime_graphics_opengl_GL.uniform3iv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform3iv(location, v);
    };
    lime_graphics_opengl_GL.uniform4f = function(location, x, y, z, w) {
        lime_graphics_opengl_GL.context.uniform4f(location, x, y, z, w);
    };
    lime_graphics_opengl_GL.uniform4fv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform4fv(location, v);
    };
    lime_graphics_opengl_GL.uniform4i = function(location, x, y, z, w) {
        lime_graphics_opengl_GL.context.uniform4i(location, x, y, z, w);
    };
    lime_graphics_opengl_GL.uniform4iv = function(location, v) {
        lime_graphics_opengl_GL.context.uniform4iv(location, v);
    };
    lime_graphics_opengl_GL.uniformMatrix2fv = function(location, transpose, v) {
        lime_graphics_opengl_GL.context.uniformMatrix2fv(location, transpose, v);
    };
    lime_graphics_opengl_GL.uniformMatrix3fv = function(location, transpose, v) {
        lime_graphics_opengl_GL.context.uniformMatrix3fv(location, transpose, v);
    };
    lime_graphics_opengl_GL.uniformMatrix4fv = function(location, transpose, v) {
        lime_graphics_opengl_GL.context.uniformMatrix4fv(location, transpose, v);
    };
    lime_graphics_opengl_GL.useProgram = function(program) {
        lime_graphics_opengl_GL.context.useProgram(program);
    };
    lime_graphics_opengl_GL.validateProgram = function(program) {
        lime_graphics_opengl_GL.context.validateProgram(program);
    };
    lime_graphics_opengl_GL.vertexAttrib1f = function(indx, x) {
        lime_graphics_opengl_GL.context.vertexAttrib1f(indx, x);
    };
    lime_graphics_opengl_GL.vertexAttrib1fv = function(indx, values) {
        lime_graphics_opengl_GL.context.vertexAttrib1fv(indx, values);
    };
    lime_graphics_opengl_GL.vertexAttrib2f = function(indx, x, y) {
        lime_graphics_opengl_GL.context.vertexAttrib2f(indx, x, y);
    };
    lime_graphics_opengl_GL.vertexAttrib2fv = function(indx, values) {
        lime_graphics_opengl_GL.context.vertexAttrib2fv(indx, values);
    };
    lime_graphics_opengl_GL.vertexAttrib3f = function(indx, x, y, z) {
        lime_graphics_opengl_GL.context.vertexAttrib3f(indx, x, y, z);
    };
    lime_graphics_opengl_GL.vertexAttrib3fv = function(indx, values) {
        lime_graphics_opengl_GL.context.vertexAttrib3fv(indx, values);
    };
    lime_graphics_opengl_GL.vertexAttrib4f = function(indx, x, y, z, w) {
        lime_graphics_opengl_GL.context.vertexAttrib4f(indx, x, y, z, w);
    };
    lime_graphics_opengl_GL.vertexAttrib4fv = function(indx, values) {
        lime_graphics_opengl_GL.context.vertexAttrib4fv(indx, values);
    };
    lime_graphics_opengl_GL.vertexAttribPointer = function(indx, size, type, normalized, stride, offset) {
        lime_graphics_opengl_GL.context.vertexAttribPointer(indx, size, type, normalized, stride, offset);
    };
    lime_graphics_opengl_GL.viewport = function(x, y, width, height) {
        lime_graphics_opengl_GL.context.viewport(x, y, width, height);
    };
    lime_graphics_opengl_GL.get_version = function() {
        return 2;
    };
    var lime_graphics_utils_ImageCanvasUtil = function() {};
    $hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
    lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime", "graphics", "utils", "ImageCanvasUtil"];
    lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image, rect, colorMatrix) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.colorTransform(image, rect, colorMatrix);
    };
    lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
        var buffer = image.buffer;
        if (buffer.__srcImage != null) {
            if (buffer.__srcCanvas == null) {
                lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.__srcImage.width, buffer.__srcImage.height);
                buffer.__srcContext.drawImage(buffer.__srcImage, 0, 0);
            }
            buffer.__srcImage = null;
        } else if (buffer.data != null && buffer.__srcCanvas == null) {
            lime_graphics_utils_ImageCanvasUtil.createCanvas(image, buffer.width, buffer.height);
            lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        } else if (buffer.data == null && buffer.__srcImageData != null) buffer.data = buffer.__srcImageData.data;
    };
    lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
        if (image.buffer.data == null) {
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
            lime_graphics_utils_ImageCanvasUtil.sync(image, false);
            lime_graphics_utils_ImageCanvasUtil.createImageData(image);
            image.buffer.__srcCanvas = null;
            image.buffer.__srcContext = null;
        }
    };
    lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.copyChannel(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel);
    };
    lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
        if (mergeAlpha == null) mergeAlpha = false;
        if (destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) return;
        if (alphaImage != null && alphaImage.get_transparent()) {
            if (alphaPoint == null) alphaPoint = new lime_math_Vector2();
            var tempData = image.clone();
            tempData.copyChannel(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, sourceRect.width, sourceRect.height), new lime_math_Vector2(sourceRect.x, sourceRect.y), lime_graphics_ImageChannel.ALPHA, lime_graphics_ImageChannel.ALPHA);
            sourceImage = tempData;
        }
        lime_graphics_utils_ImageCanvasUtil.sync(image, true);
        if (!mergeAlpha) {
            if (image.get_transparent() && sourceImage.get_transparent()) image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX, destPoint.y + image.offsetY, sourceRect.width + image.offsetX, sourceRect.height + image.offsetY);
        }
        lime_graphics_utils_ImageCanvasUtil.sync(sourceImage, false);
        if (sourceImage.buffer.get_src() != null) image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(), sourceRect.x + sourceImage.offsetX | 0, sourceRect.y + sourceImage.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0, destPoint.x + image.offsetX | 0, destPoint.y + image.offsetY | 0, sourceRect.width | 0, sourceRect.height | 0);
    };
    lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image, width, height) {
        var buffer = image.buffer;
        if (buffer.__srcCanvas == null) {
            buffer.__srcCanvas = window.document.createElement("canvas");
            buffer.__srcCanvas.width = width;
            buffer.__srcCanvas.height = height;
            if (!image.get_transparent()) {
                if (!image.get_transparent()) buffer.__srcCanvas.setAttribute("moz-opaque", "true");
                buffer.__srcContext = buffer.__srcCanvas.getContext("2d", {
                    alpha: false
                });
            } else buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
            buffer.__srcContext.mozImageSmoothingEnabled = false;
            buffer.__srcContext.msImageSmoothingEnabled = false;
            buffer.__srcContext.imageSmoothingEnabled = false;
        }
    };
    lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
        var buffer = image.buffer;
        if (buffer.__srcImageData == null) {
            if (buffer.data == null) buffer.__srcImageData = buffer.__srcContext.getImageData(0, 0, buffer.width, buffer.height);
            else {
                buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width, buffer.height);
                buffer.__srcImageData.data.set(buffer.data);
            }
            var elements = buffer.__srcImageData.data.buffer;
            var this1;
            if (elements != null) this1 = new Uint8Array(elements);
            else this1 = null;
            buffer.data = this1;
        }
    };
    lime_graphics_utils_ImageCanvasUtil.fillRect = function(image, rect, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.sync(image, true);
        if (rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
            if (image.get_transparent() && (color & 255) == 0) {
                image.buffer.__srcCanvas.width = image.buffer.width;
                return;
            }
        }
        var r;
        var g;
        var b;
        var a;
        if (format == 1) {
            r = color >> 16 & 255;
            g = color >> 8 & 255;
            b = color & 255;
            if (image.get_transparent()) a = color >> 24 & 255;
            else a = 255;
        } else {
            r = color >> 24 & 255;
            g = color >> 16 & 255;
            b = color >> 8 & 255;
            if (image.get_transparent()) a = color & 255;
            else a = 255;
        }
        image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
        image.buffer.__srcContext.fillRect(rect.x + image.offsetX, rect.y + image.offsetY, rect.width + image.offsetX, rect.height + image.offsetY);
    };
    lime_graphics_utils_ImageCanvasUtil.floodFill = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.floodFill(image, x, y, color, format);
    };
    lime_graphics_utils_ImageCanvasUtil.getPixel = function(image, x, y, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        return lime_graphics_utils_ImageDataUtil.getPixel(image, x, y, format);
    };
    lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image, x, y, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        return lime_graphics_utils_ImageDataUtil.getPixel32(image, x, y, format);
    };
    lime_graphics_utils_ImageCanvasUtil.getPixels = function(image, rect, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        return lime_graphics_utils_ImageDataUtil.getPixels(image, rect, format);
    };
    lime_graphics_utils_ImageCanvasUtil.merge = function(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.merge(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
    };
    lime_graphics_utils_ImageCanvasUtil.resize = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        if (buffer.__srcCanvas == null) {
            lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
            buffer.__srcContext.drawImage(buffer.get_src(), 0, 0, newWidth, newHeight);
        } else {
            lime_graphics_utils_ImageCanvasUtil.sync(image, true);
            var sourceCanvas = buffer.__srcCanvas;
            buffer.__srcCanvas = null;
            lime_graphics_utils_ImageCanvasUtil.createCanvas(image, newWidth, newHeight);
            buffer.__srcContext.drawImage(sourceCanvas, 0, 0, newWidth, newHeight);
        }
    };
    lime_graphics_utils_ImageCanvasUtil.scroll = function(image, x, y) {
        if (x % image.width == 0 && y % image.height == 0) return;
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.sync(image, true);
        image.buffer.__srcContext.clearRect(x, y, image.width, image.height);
        image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas, x, y);
    };
    lime_graphics_utils_ImageCanvasUtil.setPixel = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.setPixel(image, x, y, color, format);
    };
    lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image, x, y, color, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.setPixel32(image, x, y, color, format);
    };
    lime_graphics_utils_ImageCanvasUtil.setPixels = function(image, rect, bytes, format) {
        lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
        lime_graphics_utils_ImageCanvasUtil.createImageData(image);
        lime_graphics_utils_ImageDataUtil.setPixels(image, rect, bytes, format);
    };
    lime_graphics_utils_ImageCanvasUtil.sync = function(image, clear) {
        if (image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
            image.buffer.__srcContext.putImageData(image.buffer.__srcImageData, 0, 0);
            image.buffer.data = null;
            image.dirty = false;
        }
        if (clear) {
            image.buffer.__srcImageData = null;
            image.buffer.data = null;
        }
    };
    var lime_graphics_utils_ImageDataUtil = function() {};
    $hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
    lime_graphics_utils_ImageDataUtil.__name__ = ["lime", "graphics", "utils", "ImageDataUtil"];
    lime_graphics_utils_ImageDataUtil.colorTransform = function(image, rect, colorMatrix) {
        var data = image.buffer.data;
        if (data == null) return;
        var format = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
        var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
        var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
        var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
        var row;
        var offset;
        var pixel;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                offset = row + x * 4;
                switch (format) {
                case 2:
                    pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 0:
                    pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                    break;
                case 1:
                    pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                    break;
                }
                if (premultiplied) {
                    if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
                        var r;
                        var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
                    }
                }
                pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
                if (premultiplied) {
                    if ((pixel & 255) == 0) {
                        if (pixel != 0) pixel = 0;
                    } else if ((pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                        pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
                    }
                }
                switch (format) {
                case 2:
                    data[offset] = pixel >> 8 & 255;
                    data[offset + 1] = pixel >> 16 & 255;
                    data[offset + 2] = pixel >> 24 & 255;
                    data[offset + 3] = pixel & 255;
                    break;
                case 0:
                    data[offset] = pixel >> 24 & 255;
                    data[offset + 1] = pixel >> 16 & 255;
                    data[offset + 2] = pixel >> 8 & 255;
                    data[offset + 3] = pixel & 255;
                    break;
                case 1:
                    data[offset] = pixel & 255;
                    data[offset + 1] = pixel >> 24 & 255;
                    data[offset + 2] = pixel >> 16 & 255;
                    data[offset + 3] = pixel >> 8 & 255;
                    break;
                }
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.copyChannel = function(image, sourceImage, sourceRect, destPoint, sourceChannel, destChannel) {
        var destIdx;
        switch (destChannel[1]) {
        case 0:
            destIdx = 0;
            break;
        case 1:
            destIdx = 1;
            break;
        case 2:
            destIdx = 2;
            break;
        case 3:
            destIdx = 3;
            break;
        }
        var srcIdx;
        switch (sourceChannel[1]) {
        case 0:
            srcIdx = 0;
            break;
        case 1:
            srcIdx = 1;
            break;
        case 2:
            srcIdx = 2;
            break;
        case 3:
            srcIdx = 3;
            break;
        }
        var srcData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        if (srcData == null || destData == null) return;
        var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, srcView.width, srcView.height));
        var srcFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var srcPremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var srcPosition;
        var destPosition;
        var srcPixel;
        var destPixel;
        var value = 0;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            srcPosition = srcView.offset + srcView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (srcFormat) {
                case 2:
                    srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
                    break;
                case 0:
                    srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
                    break;
                case 1:
                    srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
                    break;
                }
                if (srcPremultiplied) {
                    if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
                        var r;
                        var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
                    }
                }
                switch (destFormat) {
                case 2:
                    destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                    break;
                case 0:
                    destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                    break;
                case 1:
                    destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                    break;
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
                        var r1;
                        var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
                    }
                }
                switch (srcIdx) {
                case 0:
                    value = srcPixel >> 24 & 255;
                    break;
                case 1:
                    value = srcPixel >> 16 & 255;
                    break;
                case 2:
                    value = srcPixel >> 8 & 255;
                    break;
                case 3:
                    value = srcPixel & 255;
                    break;
                }
                switch (destIdx) {
                case 0:
                    destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                    value;
                    break;
                case 1:
                    destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                    value;
                    break;
                case 2:
                    destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
                    value;
                    break;
                case 3:
                    destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
                    value;
                    break;
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) == 0) {
                        if (destPixel != 0) destPixel = 0;
                    } else if ((destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                        destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
                    }
                }
                switch (destFormat) {
                case 2:
                    destData[destPosition] = destPixel >> 8 & 255;
                    destData[destPosition + 1] = destPixel >> 16 & 255;
                    destData[destPosition + 2] = destPixel >> 24 & 255;
                    destData[destPosition + 3] = destPixel & 255;
                    break;
                case 0:
                    destData[destPosition] = destPixel >> 24 & 255;
                    destData[destPosition + 1] = destPixel >> 16 & 255;
                    destData[destPosition + 2] = destPixel >> 8 & 255;
                    destData[destPosition + 3] = destPixel & 255;
                    break;
                case 1:
                    destData[destPosition] = destPixel & 255;
                    destData[destPosition + 1] = destPixel >> 24 & 255;
                    destData[destPosition + 2] = destPixel >> 16 & 255;
                    destData[destPosition + 3] = destPixel >> 8 & 255;
                    break;
                }
                srcPosition += 4;
                destPosition += 4;
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.copyPixels = function(image, sourceImage, sourceRect, destPoint, alphaImage, alphaPoint, mergeAlpha) {
        if (mergeAlpha == null) mergeAlpha = false;
        var sourceData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        if (sourceData == null || destData == null) return;
        var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
        var sourceFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var sourcePremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var sourcePosition;
        var destPosition;
        var sourcePixel;
        if (!mergeAlpha || !sourceImage.get_transparent()) {
            var _g1 = 0;
            var _g = destView.height;
            while (_g1 < _g) {
                var y = _g1++;
                sourcePosition = sourceView.offset + sourceView.stride * y;
                destPosition = destView.offset + destView.stride * y;
                var _g3 = 0;
                var _g2 = destView.width;
                while (_g3 < _g2) {
                    var x = _g3++;
                    switch (sourceFormat) {
                    case 2:
                        sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                        break;
                    case 0:
                        sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                        break;
                    case 1:
                        sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                        break;
                    }
                    if (sourcePremultiplied) {
                        if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
                            var r;
                            var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                            var g;
                            var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                            var b;
                            var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                            sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
                        }
                    }
                    if (destPremultiplied) {
                        if ((sourcePixel & 255) == 0) {
                            if (sourcePixel != 0) sourcePixel = 0;
                        } else if ((sourcePixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
                            sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
                        }
                    }
                    switch (destFormat) {
                    case 2:
                        destData[destPosition] = sourcePixel >> 8 & 255;
                        destData[destPosition + 1] = sourcePixel >> 16 & 255;
                        destData[destPosition + 2] = sourcePixel >> 24 & 255;
                        destData[destPosition + 3] = sourcePixel & 255;
                        break;
                    case 0:
                        destData[destPosition] = sourcePixel >> 24 & 255;
                        destData[destPosition + 1] = sourcePixel >> 16 & 255;
                        destData[destPosition + 2] = sourcePixel >> 8 & 255;
                        destData[destPosition + 3] = sourcePixel & 255;
                        break;
                    case 1:
                        destData[destPosition] = sourcePixel & 255;
                        destData[destPosition + 1] = sourcePixel >> 24 & 255;
                        destData[destPosition + 2] = sourcePixel >> 16 & 255;
                        destData[destPosition + 3] = sourcePixel >> 8 & 255;
                        break;
                    }
                    sourcePosition += 4;
                    destPosition += 4;
                }
            }
        } else {
            var sourceAlpha;
            var destAlpha;
            var oneMinusSourceAlpha;
            var blendAlpha;
            var destPixel;
            if (alphaImage == null) {
                var _g11 = 0;
                var _g4 = destView.height;
                while (_g11 < _g4) {
                    var y1 = _g11++;
                    sourcePosition = sourceView.offset + sourceView.stride * y1;
                    destPosition = destView.offset + destView.stride * y1;
                    var _g31 = 0;
                    var _g21 = destView.width;
                    while (_g31 < _g21) {
                        var x1 = _g31++;
                        switch (sourceFormat) {
                        case 2:
                            sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                            break;
                        case 0:
                            sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                            break;
                        case 1:
                            sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                            break;
                        }
                        if (sourcePremultiplied) {
                            if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
                                var r1;
                                var idx3 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                                var g1;
                                var idx4 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                                var b1;
                                var idx5 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                                sourcePixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | sourcePixel & 255 & 255;
                            }
                        }
                        switch (destFormat) {
                        case 2:
                            destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                            break;
                        case 0:
                            destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                            break;
                        case 1:
                            destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                            break;
                        }
                        if (destPremultiplied) {
                            if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
                                var r2;
                                var idx6 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                r2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx6];
                                var g2;
                                var idx7 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                g2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx7];
                                var b2;
                                var idx8 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                b2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx8];
                                destPixel = (r2 & 255) << 24 | (g2 & 255) << 16 | (b2 & 255) << 8 | destPixel & 255 & 255;
                            }
                        }
                        sourceAlpha = (sourcePixel & 255) / 255.0;
                        destAlpha = (destPixel & 255) / 255.0;
                        oneMinusSourceAlpha = 1 - sourceAlpha;
                        blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
                        if (blendAlpha == 0) destPixel = 0;
                        else {
                            var value;
                            var idx9 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx9];
                            destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                            value;
                            var value1;
                            var idx10 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx10];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                            value1;
                            var value2;
                            var idx11 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx11];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
                            value2;
                            var value3;
                            var idx12 = Math.round(blendAlpha * 255.0);
                            value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx12];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
                            value3;
                        }
                        if (destPremultiplied) {
                            if ((destPixel & 255) == 0) {
                                if (destPixel != 0) destPixel = 0;
                            } else if ((destPixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                                destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
                            }
                        }
                        switch (destFormat) {
                        case 2:
                            destData[destPosition] = destPixel >> 8 & 255;
                            destData[destPosition + 1] = destPixel >> 16 & 255;
                            destData[destPosition + 2] = destPixel >> 24 & 255;
                            destData[destPosition + 3] = destPixel & 255;
                            break;
                        case 0:
                            destData[destPosition] = destPixel >> 24 & 255;
                            destData[destPosition + 1] = destPixel >> 16 & 255;
                            destData[destPosition + 2] = destPixel >> 8 & 255;
                            destData[destPosition + 3] = destPixel & 255;
                            break;
                        case 1:
                            destData[destPosition] = destPixel & 255;
                            destData[destPosition + 1] = destPixel >> 24 & 255;
                            destData[destPosition + 2] = destPixel >> 16 & 255;
                            destData[destPosition + 3] = destPixel >> 8 & 255;
                            break;
                        }
                        sourcePosition += 4;
                        destPosition += 4;
                    }
                }
            } else {
                if (alphaPoint == null) alphaPoint = new lime_math_Vector2();
                var alphaData = alphaImage.buffer.data;
                var alphaFormat = alphaImage.buffer.format;
                var alphaPremultiplied = alphaImage.buffer.premultiplied;
                var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage, new lime_math_Rectangle(alphaPoint.x, alphaPoint.y, destView.width, destView.height));
                var alphaPosition;
                var alphaPixel;
                var _g12 = 0;
                var _g5 = alphaView.height;
                while (_g12 < _g5) {
                    var y2 = _g12++;
                    sourcePosition = sourceView.offset + sourceView.stride * y2;
                    destPosition = destView.offset + destView.stride * y2;
                    alphaPosition = alphaView.offset + alphaView.stride * y2;
                    var _g32 = 0;
                    var _g22 = alphaView.width;
                    while (_g32 < _g22) {
                        var x2 = _g32++;
                        switch (sourceFormat) {
                        case 2:
                            sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                            break;
                        case 0:
                            sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                            break;
                        case 1:
                            sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                            break;
                        }
                        if (sourcePremultiplied) {
                            if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
                                var r3;
                                var idx13 = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                r3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx13];
                                var g3;
                                var idx14 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                g3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx14];
                                var b3;
                                var idx15 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                b3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx15];
                                sourcePixel = (r3 & 255) << 24 | (g3 & 255) << 16 | (b3 & 255) << 8 | sourcePixel & 255 & 255;
                            }
                        }
                        switch (destFormat) {
                        case 2:
                            destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                            break;
                        case 0:
                            destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                            break;
                        case 1:
                            destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                            break;
                        }
                        if (destPremultiplied) {
                            if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
                                var r4;
                                var idx16 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                r4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx16];
                                var g4;
                                var idx17 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                g4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx17];
                                var b4;
                                var idx18 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                b4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx18];
                                destPixel = (r4 & 255) << 24 | (g4 & 255) << 16 | (b4 & 255) << 8 | destPixel & 255 & 255;
                            }
                        }
                        switch (alphaFormat) {
                        case 2:
                            alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
                            break;
                        case 0:
                            alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
                            break;
                        case 1:
                            alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
                            break;
                        }
                        if (alphaPremultiplied) {
                            if ((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
                                var r5;
                                var idx19 = Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                r5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx19];
                                var g5;
                                var idx20 = Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                g5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx20];
                                var b5;
                                var idx21 = Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                                b5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx21];
                                alphaPixel = (r5 & 255) << 24 | (g5 & 255) << 16 | (b5 & 255) << 8 | alphaPixel & 255 & 255;
                            }
                        }
                        sourceAlpha = (alphaPixel & 255) / 255;
                        destAlpha = (destPixel & 255) / 255;
                        oneMinusSourceAlpha = 1 - sourceAlpha;
                        blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
                        if (blendAlpha == 0) destPixel = 0;
                        else {
                            var value4;
                            var idx22 = Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx22];
                            destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                            value4;
                            var value5;
                            var idx23 = Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx23];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                            value5;
                            var value6;
                            var idx24 = Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha);
                            value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx24];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
                            value6;
                            var value7;
                            var idx25 = Math.round(blendAlpha * 255.0);
                            value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx25];
                            destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
                            value7;
                        }
                        if (destPremultiplied) {
                            if ((destPixel & 255) == 0) {
                                if (destPixel != 0) destPixel = 0;
                            } else if ((destPixel & 255) != 255) {
                                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                                destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
                            }
                        }
                        switch (destFormat) {
                        case 2:
                            destData[destPosition] = destPixel >> 8 & 255;
                            destData[destPosition + 1] = destPixel >> 16 & 255;
                            destData[destPosition + 2] = destPixel >> 24 & 255;
                            destData[destPosition + 3] = destPixel & 255;
                            break;
                        case 0:
                            destData[destPosition] = destPixel >> 24 & 255;
                            destData[destPosition + 1] = destPixel >> 16 & 255;
                            destData[destPosition + 2] = destPixel >> 8 & 255;
                            destData[destPosition + 3] = destPixel & 255;
                            break;
                        case 1:
                            destData[destPosition] = destPixel & 255;
                            destData[destPosition + 1] = destPixel >> 24 & 255;
                            destData[destPosition + 2] = destPixel >> 16 & 255;
                            destData[destPosition + 3] = destPixel >> 8 & 255;
                            break;
                        }
                        sourcePosition += 4;
                        destPosition += 4;
                    }
                }
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.fillRect = function(image, rect, color, format) {
        var fillColor;
        switch (format) {
        case 1:
            {
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                fillColor = rgba;
            }
            break;
        case 2:
            {
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                fillColor = rgba1;
            }
            break;
        default:
            fillColor = color;
        }
        if (!image.get_transparent()) {
            fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
            255;
        }
        var data = image.buffer.data;
        if (data == null) return;
        var format1 = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var row;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                var offset = row + x * 4;
                if (premultiplied) {
                    if ((fillColor & 255) == 0) {
                        if (fillColor != 0) fillColor = 0;
                    } else if ((fillColor & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
                        fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
                    }
                }
                switch (format1) {
                case 2:
                    data[offset] = fillColor >> 8 & 255;
                    data[offset + 1] = fillColor >> 16 & 255;
                    data[offset + 2] = fillColor >> 24 & 255;
                    data[offset + 3] = fillColor & 255;
                    break;
                case 0:
                    data[offset] = fillColor >> 24 & 255;
                    data[offset + 1] = fillColor >> 16 & 255;
                    data[offset + 2] = fillColor >> 8 & 255;
                    data[offset + 3] = fillColor & 255;
                    break;
                case 1:
                    data[offset] = fillColor & 255;
                    data[offset + 1] = fillColor >> 24 & 255;
                    data[offset + 2] = fillColor >> 16 & 255;
                    data[offset + 3] = fillColor >> 8 & 255;
                    break;
                }
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.floodFill = function(image, x, y, color, format) {
        var data = image.buffer.data;
        if (data == null) return;
        if (format == 1) color = (color & 16777215) << 8 | color >> 24 & 255;
        var format1 = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var fillColor = color;
        var hitColor;
        var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
        switch (format1) {
        case 2:
            hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (premultiplied) {
            if ((hitColor & 255) != 0 && (hitColor & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
                var r;
                var idx = Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                hitColor = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | hitColor & 255 & 255;
            }
        }
        if (!image.get_transparent()) {
            fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
            255;
            hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
            255;
        }
        if (fillColor == hitColor) return;
        var dx = [0, -1, 1, 0];
        var dy = [ - 1, 0, 0, 1];
        var minX = -image.offsetX;
        var minY = -image.offsetY;
        var maxX = minX + image.width;
        var maxY = minY + image.height;
        var queue = [];
        queue.push(x);
        queue.push(y);
        var curPointX;
        var curPointY;
        var nextPointX;
        var nextPointY;
        var nextPointOffset;
        var readColor;
        while (queue.length > 0) {
            curPointY = queue.pop();
            curPointX = queue.pop();
            var _g = 0;
            while (_g < 4) {
                var i = _g++;
                nextPointX = curPointX + dx[i];
                nextPointY = curPointY + dy[i];
                if (nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) continue;
                nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
                switch (format1) {
                case 2:
                    readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
                    break;
                case 0:
                    readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
                    break;
                case 1:
                    readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
                    break;
                }
                if (premultiplied) {
                    if ((readColor & 255) != 0 && (readColor & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
                        var r1;
                        var idx3 = Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        readColor = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | readColor & 255 & 255;
                    }
                }
                if (readColor == hitColor) {
                    if (premultiplied) {
                        if ((fillColor & 255) == 0) {
                            if (fillColor != 0) fillColor = 0;
                        } else if ((fillColor & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
                            fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
                        }
                    }
                    switch (format1) {
                    case 2:
                        data[nextPointOffset] = fillColor >> 8 & 255;
                        data[nextPointOffset + 1] = fillColor >> 16 & 255;
                        data[nextPointOffset + 2] = fillColor >> 24 & 255;
                        data[nextPointOffset + 3] = fillColor & 255;
                        break;
                    case 0:
                        data[nextPointOffset] = fillColor >> 24 & 255;
                        data[nextPointOffset + 1] = fillColor >> 16 & 255;
                        data[nextPointOffset + 2] = fillColor >> 8 & 255;
                        data[nextPointOffset + 3] = fillColor & 255;
                        break;
                    case 1:
                        data[nextPointOffset] = fillColor & 255;
                        data[nextPointOffset + 1] = fillColor >> 24 & 255;
                        data[nextPointOffset + 2] = fillColor >> 16 & 255;
                        data[nextPointOffset + 3] = fillColor >> 8 & 255;
                        break;
                    }
                    queue.push(nextPointX);
                    queue.push(nextPointY);
                }
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image, mask, color, findColor, format) {
        if (findColor == null) findColor = true;
        var left = image.width + 1;
        var right = 0;
        var top = image.height + 1;
        var bottom = 0;
        var _color;
        var _mask;
        switch (format) {
        case 1:
            {
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                _color = rgba;
            } {
                var argb1 = mask;
                var rgba1 = 0;
                rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
                _mask = rgba1;
            }
            break;
        case 2:
            {
                var bgra = color;
                var rgba2 = 0;
                rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                _color = rgba2;
            } {
                var bgra1 = mask;
                var rgba3 = 0;
                rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
                _mask = rgba3;
            }
            break;
        default:
            _color = color;
            _mask = mask;
        }
        if (!image.get_transparent()) {
            _color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
            255;
            _mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
            255;
        }
        var pixel;
        var hit;
        var _g1 = 0;
        var _g = image.width;
        while (_g1 < _g) {
            var x = _g1++;
            hit = false;
            var _g3 = 0;
            var _g2 = image.height;
            while (_g3 < _g2) {
                var y = _g3++;
                pixel = image.getPixel32(x, y, 0);
                if (findColor) hit = (pixel & _mask) == _color;
                else hit = (pixel & _mask) != _color;
                if (hit) {
                    if (x < left) left = x;
                    break;
                }
            }
            if (hit) break;
        }
        var ix;
        var _g11 = 0;
        var _g4 = image.width;
        while (_g11 < _g4) {
            var x1 = _g11++;
            ix = image.width - 1 - x1;
            hit = false;
            var _g31 = 0;
            var _g21 = image.height;
            while (_g31 < _g21) {
                var y1 = _g31++;
                pixel = image.getPixel32(ix, y1, 0);
                if (findColor) hit = (pixel & _mask) == _color;
                else hit = (pixel & _mask) != _color;
                if (hit) {
                    if (ix > right) right = ix;
                    break;
                }
            }
            if (hit) break;
        }
        var _g12 = 0;
        var _g5 = image.height;
        while (_g12 < _g5) {
            var y2 = _g12++;
            hit = false;
            var _g32 = 0;
            var _g22 = image.width;
            while (_g32 < _g22) {
                var x2 = _g32++;
                pixel = image.getPixel32(x2, y2, 0);
                if (findColor) hit = (pixel & _mask) == _color;
                else hit = (pixel & _mask) != _color;
                if (hit) {
                    if (y2 < top) top = y2;
                    break;
                }
            }
            if (hit) break;
        }
        var iy;
        var _g13 = 0;
        var _g6 = image.height;
        while (_g13 < _g6) {
            var y3 = _g13++;
            iy = image.height - 1 - y3;
            hit = false;
            var _g33 = 0;
            var _g23 = image.width;
            while (_g33 < _g23) {
                var x3 = _g33++;
                pixel = image.getPixel32(x3, iy, 0);
                if (findColor) hit = (pixel & _mask) == _color;
                else hit = (pixel & _mask) != _color;
                if (hit) {
                    if (iy > bottom) bottom = iy;
                    break;
                }
            }
            if (hit) break;
        }
        var w = right - left;
        var h = bottom - top;
        if (w > 0) w++;
        if (h > 0) h++;
        if (w < 0) w = 0;
        if (h < 0) h = 0;
        if (left == right) w = 1;
        if (top == bottom) h = 1;
        if (left > image.width) left = 0;
        if (top > image.height) top = 0;
        return new lime_math_Rectangle(left, top, w, h);
    };
    lime_graphics_utils_ImageDataUtil.getPixel = function(image, x, y, format) {
        var pixel;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
        case 2:
            pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (image.buffer.premultiplied) {
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
            }
        }
        pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
        0;
        switch (format) {
        case 1:
            return (function($this) {
                var $r;
                var argb = 0;
                argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                $r = argb;
                return $r;
            } (this));
        case 2:
            return (function($this) {
                var $r;
                var bgra = 0;
                bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                $r = bgra;
                return $r;
            } (this));
        default:
            return pixel;
        }
    };
    lime_graphics_utils_ImageDataUtil.getPixel32 = function(image, x, y, format) {
        var pixel;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
        case 2:
            pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (image.buffer.premultiplied) {
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
            }
        }
        switch (format) {
        case 1:
            return (function($this) {
                var $r;
                var argb = 0;
                argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                $r = argb;
                return $r;
            } (this));
        case 2:
            return (function($this) {
                var $r;
                var bgra = 0;
                bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                $r = bgra;
                return $r;
            } (this));
        default:
            return pixel;
        }
    };
    lime_graphics_utils_ImageDataUtil.getPixels = function(image, rect, format) {
        if (image.buffer.data == null) return null;
        var length = rect.width * rect.height | 0;
        var bytes = haxe_io_Bytes.alloc(length * 4);
        var data = image.buffer.data;
        var sourceFormat = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var position;
        var argb;
        var bgra;
        var pixel;
        var destPosition = 0;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            position = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (sourceFormat) {
                case 2:
                    pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
                    break;
                case 0:
                    pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
                    break;
                case 1:
                    pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
                    break;
                }
                if (premultiplied) {
                    if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
                        var r;
                        var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
                    }
                }
                switch (format) {
                case 1:
                    {
                        var argb1 = 0;
                        argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
                        argb = argb1;
                    }
                    pixel = argb;
                    break;
                case 2:
                    {
                        var bgra1 = 0;
                        bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
                        bgra = bgra1;
                    }
                    pixel = bgra;
                    break;
                default:
                }
                bytes.set(destPosition++, pixel >> 24 & 255);
                bytes.set(destPosition++, pixel >> 16 & 255);
                bytes.set(destPosition++, pixel >> 8 & 255);
                bytes.set(destPosition++, pixel & 255);
                position += 4;
            }
        }
        return bytes;
    };
    lime_graphics_utils_ImageDataUtil.merge = function(image, sourceImage, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
        if (image.buffer.data == null || sourceImage.buffer.data == null) return;
        var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, sourceView.width, sourceView.height));
        var sourceData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        var sourceFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var sourcePremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var sourcePosition;
        var destPosition;
        var sourcePixel;
        var destPixel;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            sourcePosition = sourceView.offset + sourceView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (sourceFormat) {
                case 2:
                    sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                    break;
                case 0:
                    sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
                    break;
                case 1:
                    sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
                    break;
                }
                if (sourcePremultiplied) {
                    if ((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
                        var r;
                        var idx = Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        sourcePixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | sourcePixel & 255 & 255;
                    }
                }
                switch (destFormat) {
                case 2:
                    destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
                    break;
                case 0:
                    destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
                    break;
                case 1:
                    destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
                    break;
                }
                if (destPremultiplied) {
                    if ((destPixel & 255) != 0 && (destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
                        var r1;
                        var idx3 = Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx3];
                        var g1;
                        var idx4 = Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx4];
                        var b1;
                        var idx5 = Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx5];
                        destPixel = (r1 & 255) << 24 | (g1 & 255) << 16 | (b1 & 255) << 8 | destPixel & 255 & 255;
                    }
                }
                var value = ((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0;
                destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                value;
                var value1 = ((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
                value1;
                var value2 = ((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
                value2;
                var value3 = ((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0;
                destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
                value3;
                if (destPremultiplied) {
                    if ((destPixel & 255) == 0) {
                        if (destPixel != 0) destPixel = 0;
                    } else if ((destPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
                        destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
                    }
                }
                switch (destFormat) {
                case 2:
                    destData[destPosition] = destPixel >> 8 & 255;
                    destData[destPosition + 1] = destPixel >> 16 & 255;
                    destData[destPosition + 2] = destPixel >> 24 & 255;
                    destData[destPosition + 3] = destPixel & 255;
                    break;
                case 0:
                    destData[destPosition] = destPixel >> 24 & 255;
                    destData[destPosition + 1] = destPixel >> 16 & 255;
                    destData[destPosition + 2] = destPixel >> 8 & 255;
                    destData[destPosition + 3] = destPixel & 255;
                    break;
                case 1:
                    destData[destPosition] = destPixel & 255;
                    destData[destPosition + 1] = destPixel >> 24 & 255;
                    destData[destPosition + 2] = destPixel >> 16 & 255;
                    destData[destPosition + 3] = destPixel >> 8 & 255;
                    break;
                }
                sourcePosition += 4;
                destPosition += 4;
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
        var data = image.buffer.data;
        if (data == null || !image.buffer.transparent) return;
        var format = image.buffer.format;
        var length = data.length / 4 | 0;
        var pixel;
        var _g = 0;
        while (_g < length) {
            var i = _g++;
            var offset = i * 4;
            switch (format) {
            case 2:
                pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break;
            }
            var offset1 = i * 4;
            if ((pixel & 255) == 0) {
                if (pixel != 0) pixel = 0;
            } else if ((pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
            }
            switch (format) {
            case 2:
                data[offset1] = pixel >> 8 & 255;
                data[offset1 + 1] = pixel >> 16 & 255;
                data[offset1 + 2] = pixel >> 24 & 255;
                data[offset1 + 3] = pixel & 255;
                break;
            case 0:
                data[offset1] = pixel >> 24 & 255;
                data[offset1 + 1] = pixel >> 16 & 255;
                data[offset1 + 2] = pixel >> 8 & 255;
                data[offset1 + 3] = pixel & 255;
                break;
            case 1:
                data[offset1] = pixel & 255;
                data[offset1 + 1] = pixel >> 24 & 255;
                data[offset1 + 2] = pixel >> 16 & 255;
                data[offset1 + 3] = pixel >> 8 & 255;
                break;
            }
        }
        image.buffer.premultiplied = true;
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.resize = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        if (buffer.width == newWidth && buffer.height == newHeight) return;
        var newBuffer = new lime_graphics_ImageBuffer((function($this) {
            var $r;
            var elements = newWidth * newHeight * 4;
            var this1;
            if (elements != null) this1 = new Uint8Array(elements);
            else this1 = null;
            $r = this1;
            return $r;
        } (this)), newWidth, newHeight);
        var imageWidth = image.width;
        var imageHeight = image.height;
        var data = image.get_data();
        var newData = newBuffer.data;
        var sourceIndex;
        var sourceIndexX;
        var sourceIndexY;
        var sourceIndexXY;
        var index;
        var sourceX;
        var sourceY;
        var u;
        var v;
        var uRatio;
        var vRatio;
        var uOpposite;
        var vOpposite;
        var _g = 0;
        while (_g < newHeight) {
            var y = _g++;
            var _g1 = 0;
            while (_g1 < newWidth) {
                var x = _g1++;
                u = (x + 0.5) / newWidth * imageWidth - 0.5;
                v = (y + 0.5) / newHeight * imageHeight - 0.5;
                sourceX = u | 0;
                sourceY = v | 0;
                sourceIndex = (sourceY * imageWidth + sourceX) * 4;
                if (sourceX < imageWidth - 1) sourceIndexX = sourceIndex + 4;
                else sourceIndexX = sourceIndex;
                if (sourceY < imageHeight - 1) sourceIndexY = sourceIndex + imageWidth * 4;
                else sourceIndexY = sourceIndex;
                if (sourceIndexX != sourceIndex) sourceIndexXY = sourceIndexY + 4;
                else sourceIndexXY = sourceIndexY;
                index = (y * newWidth + x) * 4;
                uRatio = u - sourceX;
                vRatio = v - sourceY;
                uOpposite = 1 - uRatio;
                vOpposite = 1 - vRatio;
                var val = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio);
                newData[index] = val;
                var val1 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio);
                newData[index + 1] = val1;
                var val2 = Std["int"]((_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio);
                newData[index + 2] = val2;
                if (data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) newData[index + 3] = 0;
                else newData[index + 3] = data[sourceIndex + 3];
            }
        }
        buffer.data = newBuffer.data;
        buffer.width = newWidth;
        buffer.height = newHeight;
    };
    lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image, newWidth, newHeight) {
        var buffer = image.buffer;
        var data = image.get_data();
        var newData;
        var elements = newWidth * newHeight * 4;
        var this1;
        if (elements != null) this1 = new Uint8Array(elements);
        else this1 = null;
        newData = this1;
        var sourceIndex;
        var index;
        var _g1 = 0;
        var _g = buffer.height;
        while (_g1 < _g) {
            var y = _g1++;
            var _g3 = 0;
            var _g2 = buffer.width;
            while (_g3 < _g2) {
                var x = _g3++;
                sourceIndex = (y * buffer.width + x) * 4;
                index = (y * newWidth + x) * 4;
                newData[index] = data[sourceIndex];
                newData[index + 1] = data[sourceIndex + 1];
                newData[index + 2] = data[sourceIndex + 2];
                newData[index + 3] = data[sourceIndex + 3];
            }
        }
        buffer.data = newData;
        buffer.width = newWidth;
        buffer.height = newHeight;
    };
    lime_graphics_utils_ImageDataUtil.setFormat = function(image, format) {
        var data = image.buffer.data;
        if (data == null) return;
        var index;
        var a16;
        var length = data.length / 4 | 0;
        var r1;
        var g1;
        var b1;
        var a1;
        var r2;
        var g2;
        var b2;
        var a2;
        var r;
        var g;
        var b;
        var a;
        var _g = image.get_format();
        switch (_g) {
        case 0:
            r1 = 0;
            g1 = 1;
            b1 = 2;
            a1 = 3;
            break;
        case 1:
            r1 = 1;
            g1 = 2;
            b1 = 3;
            a1 = 0;
            break;
        case 2:
            r1 = 2;
            g1 = 1;
            b1 = 0;
            a1 = 3;
            break;
        }
        switch (format) {
        case 0:
            r2 = 0;
            g2 = 1;
            b2 = 2;
            a2 = 3;
            break;
        case 1:
            r2 = 1;
            g2 = 2;
            b2 = 3;
            a2 = 0;
            break;
        case 2:
            r2 = 2;
            g2 = 1;
            b2 = 0;
            a2 = 3;
            break;
        }
        var _g1 = 0;
        while (_g1 < length) {
            var i = _g1++;
            index = i * 4;
            r = data[index + r1];
            g = data[index + g1];
            b = data[index + b1];
            a = data[index + a1];
            data[index + r2] = r;
            data[index + g2] = g;
            data[index + b2] = b;
            data[index + a2] = a;
        }
        image.buffer.format = format;
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.setPixel = function(image, x, y, color, format) {
        var pixel;
        switch (format) {
        case 1:
            {
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                pixel = rgba;
            }
            break;
        case 2:
            {
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                pixel = rgba1;
            }
            break;
        default:
            pixel = color;
        }
        var source = 0;
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        switch (image.buffer.format) {
        case 2:
            source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (image.buffer.premultiplied) {
            if ((source & 255) != 0 && (source & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
                var r;
                var idx = Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                source = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | source & 255 & 255;
            }
        }
        var value = source & 255;
        pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
        value;
        var data1 = image.buffer.data;
        var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        if (image.buffer.premultiplied) {
            if ((pixel & 255) == 0) {
                if (pixel != 0) pixel = 0;
            } else if ((pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
            }
        }
        switch (image.buffer.format) {
        case 2:
            data1[offset1] = pixel >> 8 & 255;
            data1[offset1 + 1] = pixel >> 16 & 255;
            data1[offset1 + 2] = pixel >> 24 & 255;
            data1[offset1 + 3] = pixel & 255;
            break;
        case 0:
            data1[offset1] = pixel >> 24 & 255;
            data1[offset1 + 1] = pixel >> 16 & 255;
            data1[offset1 + 2] = pixel >> 8 & 255;
            data1[offset1 + 3] = pixel & 255;
            break;
        case 1:
            data1[offset1] = pixel & 255;
            data1[offset1 + 1] = pixel >> 24 & 255;
            data1[offset1 + 2] = pixel >> 16 & 255;
            data1[offset1 + 3] = pixel >> 8 & 255;
            break;
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.setPixel32 = function(image, x, y, color, format) {
        var pixel;
        switch (format) {
        case 1:
            {
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                pixel = rgba;
            }
            break;
        case 2:
            {
                var bgra = color;
                var rgba1 = 0;
                rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                pixel = rgba1;
            }
            break;
        default:
            pixel = color;
        }
        if (!image.get_transparent()) {
            pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
            255;
        }
        var data = image.buffer.data;
        var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
        if (image.buffer.premultiplied) {
            if ((pixel & 255) == 0) {
                if (pixel != 0) pixel = 0;
            } else if ((pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
            }
        }
        switch (image.buffer.format) {
        case 2:
            data[offset] = pixel >> 8 & 255;
            data[offset + 1] = pixel >> 16 & 255;
            data[offset + 2] = pixel >> 24 & 255;
            data[offset + 3] = pixel & 255;
            break;
        case 0:
            data[offset] = pixel >> 24 & 255;
            data[offset + 1] = pixel >> 16 & 255;
            data[offset + 2] = pixel >> 8 & 255;
            data[offset + 3] = pixel & 255;
            break;
        case 1:
            data[offset] = pixel & 255;
            data[offset + 1] = pixel >> 24 & 255;
            data[offset + 2] = pixel >> 16 & 255;
            data[offset + 3] = pixel >> 8 & 255;
            break;
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.setPixels = function(image, rect, bytes, format) {
        if (image.buffer.data == null) return;
        var data = image.buffer.data;
        var sourceFormat = image.buffer.format;
        var premultiplied = image.buffer.premultiplied;
        var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, rect);
        var row;
        var color;
        var pixel;
        var transparent = image.get_transparent();
        var dataPosition = 0;
        var _g1 = 0;
        var _g = dataView.height;
        while (_g1 < _g) {
            var y = _g1++;
            row = dataView.offset + dataView.stride * y;
            var _g3 = 0;
            var _g2 = dataView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
                dataPosition += 4;
                switch (format) {
                case 1:
                    {
                        var argb = color;
                        var rgba = 0;
                        rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                        pixel = rgba;
                    }
                    break;
                case 2:
                    {
                        var bgra = color;
                        var rgba1 = 0;
                        rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                        pixel = rgba1;
                    }
                    break;
                default:
                    pixel = color;
                }
                if (!transparent) {
                    pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
                    255;
                }
                var offset = row + x * 4;
                if (premultiplied) {
                    if ((pixel & 255) == 0) {
                        if (pixel != 0) pixel = 0;
                    } else if ((pixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
                        pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
                    }
                }
                switch (sourceFormat) {
                case 2:
                    data[offset] = pixel >> 8 & 255;
                    data[offset + 1] = pixel >> 16 & 255;
                    data[offset + 2] = pixel >> 24 & 255;
                    data[offset + 3] = pixel & 255;
                    break;
                case 0:
                    data[offset] = pixel >> 24 & 255;
                    data[offset + 1] = pixel >> 16 & 255;
                    data[offset + 2] = pixel >> 8 & 255;
                    data[offset + 3] = pixel & 255;
                    break;
                case 1:
                    data[offset] = pixel & 255;
                    data[offset + 1] = pixel >> 24 & 255;
                    data[offset + 2] = pixel >> 16 & 255;
                    data[offset + 3] = pixel >> 8 & 255;
                    break;
                }
            }
        }
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.threshold = function(image, sourceImage, sourceRect, destPoint, operation, threshold, color, mask, copySource, format) {
        var _color;
        var _mask;
        var _threshold;
        switch (format) {
        case 1:
            {
                var argb = color;
                var rgba = 0;
                rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
                _color = rgba;
            } {
                var argb1 = mask;
                var rgba1 = 0;
                rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
                _mask = rgba1;
            } {
                var argb2 = threshold;
                var rgba2 = 0;
                rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
                _threshold = rgba2;
            }
            break;
        case 2:
            {
                var bgra = color;
                var rgba3 = 0;
                rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
                _color = rgba3;
            } {
                var bgra1 = mask;
                var rgba4 = 0;
                rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
                _mask = rgba4;
            } {
                var bgra2 = threshold;
                var rgba5 = 0;
                rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
                _threshold = rgba5;
            }
            break;
        default:
            _color = color;
            _mask = mask;
            _threshold = threshold;
        }
        var _operation;
        switch (operation) {
        case "!=":
            _operation = 0;
            break;
        case "==":
            _operation = 1;
            break;
        case "<":
            _operation = 2;
            break;
        case "<=":
            _operation = 3;
            break;
        case ">":
            _operation = 4;
            break;
        case ">=":
            _operation = 5;
            break;
        default:
            _operation = -1;
        }
        if (_operation == -1) return 0;
        var srcData = sourceImage.buffer.data;
        var destData = image.buffer.data;
        if (srcData == null || destData == null) return 0;
        var hits = 0;
        var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage, sourceRect);
        var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image, new lime_math_Rectangle(destPoint.x, destPoint.y, srcView.width, srcView.height));
        var srcFormat = sourceImage.buffer.format;
        var destFormat = image.buffer.format;
        var srcPremultiplied = sourceImage.buffer.premultiplied;
        var destPremultiplied = image.buffer.premultiplied;
        var srcPosition;
        var destPosition;
        var srcPixel;
        var destPixel;
        var pixelMask;
        var test;
        var value;
        var _g1 = 0;
        var _g = destView.height;
        while (_g1 < _g) {
            var y = _g1++;
            srcPosition = srcView.offset + srcView.stride * y;
            destPosition = destView.offset + destView.stride * y;
            var _g3 = 0;
            var _g2 = destView.width;
            while (_g3 < _g2) {
                var x = _g3++;
                switch (srcFormat) {
                case 2:
                    srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
                    break;
                case 0:
                    srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
                    break;
                case 1:
                    srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
                    break;
                }
                if (srcPremultiplied) {
                    if ((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
                        lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
                        var r;
                        var idx = Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                        var g;
                        var idx1 = Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                        var b;
                        var idx2 = Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                        b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                        srcPixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | srcPixel & 255 & 255;
                    }
                }
                pixelMask = srcPixel & _mask;
                value = lime_graphics_utils_ImageDataUtil.__pixelCompare(pixelMask, _threshold);
                switch (_operation) {
                case 0:
                    test = value != 0;
                    break;
                case 1:
                    test = value == 0;
                    break;
                case 2:
                    test = value == -1;
                    break;
                case 3:
                    test = value == 0 || value == -1;
                    break;
                case 4:
                    test = value == 1;
                    break;
                case 5:
                    test = value == 0 || value == 1;
                    break;
                default:
                    test = false;
                }
                if (test) {
                    if (destPremultiplied) {
                        if ((_color & 255) == 0) {
                            if (_color != 0) _color = 0;
                        } else if ((_color & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
                            _color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
                        }
                    }
                    switch (destFormat) {
                    case 2:
                        destData[destPosition] = _color >> 8 & 255;
                        destData[destPosition + 1] = _color >> 16 & 255;
                        destData[destPosition + 2] = _color >> 24 & 255;
                        destData[destPosition + 3] = _color & 255;
                        break;
                    case 0:
                        destData[destPosition] = _color >> 24 & 255;
                        destData[destPosition + 1] = _color >> 16 & 255;
                        destData[destPosition + 2] = _color >> 8 & 255;
                        destData[destPosition + 3] = _color & 255;
                        break;
                    case 1:
                        destData[destPosition] = _color & 255;
                        destData[destPosition + 1] = _color >> 24 & 255;
                        destData[destPosition + 2] = _color >> 16 & 255;
                        destData[destPosition + 3] = _color >> 8 & 255;
                        break;
                    }
                    hits++;
                } else if (copySource) {
                    if (destPremultiplied) {
                        if ((srcPixel & 255) == 0) {
                            if (srcPixel != 0) srcPixel = 0;
                        } else if ((srcPixel & 255) != 255) {
                            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
                            srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
                        }
                    }
                    switch (destFormat) {
                    case 2:
                        destData[destPosition] = srcPixel >> 8 & 255;
                        destData[destPosition + 1] = srcPixel >> 16 & 255;
                        destData[destPosition + 2] = srcPixel >> 24 & 255;
                        destData[destPosition + 3] = srcPixel & 255;
                        break;
                    case 0:
                        destData[destPosition] = srcPixel >> 24 & 255;
                        destData[destPosition + 1] = srcPixel >> 16 & 255;
                        destData[destPosition + 2] = srcPixel >> 8 & 255;
                        destData[destPosition + 3] = srcPixel & 255;
                        break;
                    case 1:
                        destData[destPosition] = srcPixel & 255;
                        destData[destPosition + 1] = srcPixel >> 24 & 255;
                        destData[destPosition + 2] = srcPixel >> 16 & 255;
                        destData[destPosition + 3] = srcPixel >> 8 & 255;
                        break;
                    }
                }
                srcPosition += 4;
                destPosition += 4;
            }
        }
        if (hits > 0) image.dirty = true;
        return hits;
    };
    lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
        var data = image.buffer.data;
        if (data == null) return;
        var format = image.buffer.format;
        var length = data.length / 4 | 0;
        var pixel;
        var _g = 0;
        while (_g < length) {
            var i = _g++;
            var offset = i * 4;
            switch (format) {
            case 2:
                pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 0:
                pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
                break;
            case 1:
                pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
                break;
            }
            if ((pixel & 255) != 0 && (pixel & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
                var r;
                var idx = Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                pixel = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | pixel & 255 & 255;
            }
            var offset1 = i * 4;
            switch (format) {
            case 2:
                data[offset1] = pixel >> 8 & 255;
                data[offset1 + 1] = pixel >> 16 & 255;
                data[offset1 + 2] = pixel >> 24 & 255;
                data[offset1 + 3] = pixel & 255;
                break;
            case 0:
                data[offset1] = pixel >> 24 & 255;
                data[offset1 + 1] = pixel >> 16 & 255;
                data[offset1 + 2] = pixel >> 8 & 255;
                data[offset1 + 3] = pixel & 255;
                break;
            case 1:
                data[offset1] = pixel & 255;
                data[offset1 + 1] = pixel >> 24 & 255;
                data[offset1 + 2] = pixel >> 16 & 255;
                data[offset1 + 3] = pixel >> 8 & 255;
                break;
            }
        }
        image.buffer.premultiplied = false;
        image.dirty = true;
    };
    lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1, n2) {
        var tmp1;
        var tmp2;
        tmp1 = n1 >> 24 & 255;
        tmp2 = n2 >> 24 & 255;
        if (tmp1 != tmp2) if (tmp1 > tmp2) return 1;
        else return - 1;
        else {
            tmp1 = n1 >> 16 & 255;
            tmp2 = n2 >> 16 & 255;
            if (tmp1 != tmp2) if (tmp1 > tmp2) return 1;
            else return - 1;
            else {
                tmp1 = n1 >> 8 & 255;
                tmp2 = n2 >> 8 & 255;
                if (tmp1 != tmp2) if (tmp1 > tmp2) return 1;
                else return - 1;
                else {
                    tmp1 = n1 & 255;
                    tmp2 = n2 & 255;
                    if (tmp1 != tmp2) if (tmp1 > tmp2) return 1;
                    else return - 1;
                    else return 0;
                }
            }
        }
    };
    var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image, rect) {
        this.image = image;
        if (rect == null) this.rect = image.get_rect();
        else {
            if (rect.x < 0) rect.x = 0;
            if (rect.y < 0) rect.y = 0;
            if (rect.x + rect.width > image.width) rect.width = image.width - rect.x;
            if (rect.y + rect.height > image.height) rect.height = image.height - rect.y;
            if (rect.width < 0) rect.width = 0;
            if (rect.height < 0) rect.height = 0;
            this.rect = rect;
        }
        this.stride = image.buffer.get_stride();
        this.x = Math.ceil(this.rect.x);
        this.y = Math.ceil(this.rect.y);
        this.width = Math.floor(this.rect.width);
        this.height = Math.floor(this.rect.height);
        this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
    };
    $hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
    lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime", "graphics", "utils", "_ImageDataUtil", "ImageDataView"];
    lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
        clip: function(x, y, width, height) {
            this.rect.__contract(x, y, width, height);
            this.x = Math.ceil(this.rect.x);
            this.y = Math.ceil(this.rect.y);
            this.width = Math.floor(this.rect.width);
            this.height = Math.floor(this.rect.height);
            this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
        },
        row: function(y) {
            return this.offset + this.stride * y;
        },
        __class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
    };
    var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
    $hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime", "math", "_ColorMatrix", "ColorMatrix_Impl_"];
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {
        set_redOffset: "set_redOffset",
        get_redOffset: "get_redOffset",
        set_redMultiplier: "set_redMultiplier",
        get_redMultiplier: "get_redMultiplier",
        set_greenOffset: "set_greenOffset",
        get_greenOffset: "get_greenOffset",
        set_greenMultiplier: "set_greenMultiplier",
        get_greenMultiplier: "get_greenMultiplier",
        set_color: "set_color",
        get_color: "get_color",
        set_blueOffset: "set_blueOffset",
        get_blueOffset: "get_blueOffset",
        set_blueMultiplier: "set_blueMultiplier",
        get_blueMultiplier: "get_blueMultiplier",
        set_alphaOffset: "set_alphaOffset",
        get_alphaOffset: "get_alphaOffset",
        set_alphaMultiplier: "set_alphaMultiplier",
        get_alphaMultiplier: "get_alphaMultiplier"
    }
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
        var this1;
        if (data != null && data.length == 20) this1 = data;
        else {
            var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
            var this2;
            if (array != null) this2 = new Float32Array(array);
            else this2 = null;
            this1 = this2;
        }
        return this1;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new((function($this) {
            var $r;
            var this2;
            if (this1 != null) this2 = new Float32Array(this1);
            else this2 = null;
            $r = this2;
            return $r;
        } (this)));
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1, second) {
        var _g = this1;
        _g[0] = _g[0] + second[0];
        var _g1 = this1;
        _g1[6] = _g1[6] + second[6];
        var _g2 = this1;
        _g2[12] = _g2[12] + second[12];
        var _g3 = this1;
        _g3[18] = _g3[18] + second[18];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1, other) {
        this1.set(other);
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
        this1[0] = 1;
        this1[1] = 0;
        this1[2] = 0;
        this1[3] = 0;
        this1[4] = 0;
        this1[5] = 0;
        this1[6] = 1;
        this1[7] = 0;
        this1[8] = 0;
        this1[9] = 0;
        this1[10] = 0;
        this1[11] = 0;
        this1[12] = 1;
        this1[13] = 0;
        this1[14] = 0;
        this1[15] = 0;
        this1[16] = 0;
        this1[17] = 0;
        this1[18] = 1;
        this1[19] = 0;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
        var table;
        var this2;
        this2 = new Uint8Array(256);
        table = this2;
        var multiplier = this1[18];
        var offset = this1[19] * 255;
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * multiplier + offset);
            if (value > 255) value = 255;
            if (value < 0) value = 0;
            table[i] = value;
        }
        return table;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
        var table;
        var this2;
        this2 = new Uint8Array(256);
        table = this2;
        var multiplier = this1[12];
        var offset = this1[14] * 255;
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * multiplier + offset);
            if (value > 255) value = 255;
            if (value < 0) value = 0;
            table[i] = value;
        }
        return table;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
        var table;
        var this2;
        this2 = new Uint8Array(256);
        table = this2;
        var multiplier = this1[6];
        var offset = this1[9] * 255;
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * multiplier + offset);
            if (value > 255) value = 255;
            if (value < 0) value = 0;
            table[i] = value;
        }
        return table;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
        var table;
        var this2;
        this2 = new Uint8Array(256);
        table = this2;
        var multiplier = this1[0];
        var offset = this1[4] * 255;
        var value;
        var _g = 0;
        while (_g < 256) {
            var i = _g++;
            value = Math.floor(i * multiplier + offset);
            if (value > 255) value = 255;
            if (value < 0) value = 0;
            table[i] = value;
        }
        return table;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
        return null;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
        return this1[18];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1, value) {
        return this1[18] = value;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
        return this1[19] * 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1, value) {
        return this1[19] = value / 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
        return this1[12];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1, value) {
        return this1[12] = value;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
        return this1[14] * 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1, value) {
        return this1[14] = value / 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
        return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1, value) {
        this1[4] = (value >> 16 & 255) / 255;
        this1[9] = (value >> 8 & 255) / 255;
        this1[14] = (value & 255) / 255;
        this1[0] = 0;
        this1[6] = 0;
        this1[12] = 0;
        return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
        return this1[6];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1, value) {
        return this1[6] = value;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
        return this1[9] * 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1, value) {
        return this1[9] = value / 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
        return this1[0];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1, value) {
        return this1[0] = value;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
        return this1[4] * 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1, value) {
        return this1[4] = value / 255;
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1, index) {
        return this1[index];
    };
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1, index, value) {
        return this1[index] = value;
    };
    var lime_math_Matrix3 = function(a, b, c, d, tx, ty) {
        if (ty == null) ty = 0;
        if (tx == null) tx = 0;
        if (d == null) d = 1;
        if (c == null) c = 0;
        if (b == null) b = 0;
        if (a == null) a = 1;
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    };
    $hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
    lime_math_Matrix3.__name__ = ["lime", "math", "Matrix3"];
    lime_math_Matrix3.prototype = {
        clone: function() {
            return new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
        },
        concat: function(m) {
            var a1 = this.a * m.a + this.b * m.c;
            this.b = this.a * m.b + this.b * m.d;
            this.a = a1;
            var c1 = this.c * m.a + this.d * m.c;
            this.d = this.c * m.b + this.d * m.d;
            this.c = c1;
            var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
            this.ty = this.tx * m.b + this.ty * m.d + m.ty;
            this.tx = tx1;
        },
        copyColumnFrom: function(column, vector4) {
            if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
            else if (column == 0) {
                this.a = vector4.x;
                this.c = vector4.y;
            } else if (column == 1) {
                this.b = vector4.x;
                this.d = vector4.y;
            } else {
                this.tx = vector4.x;
                this.ty = vector4.y;
            }
        },
        copyColumnTo: function(column, vector4) {
            if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
            else if (column == 0) {
                vector4.x = this.a;
                vector4.y = this.c;
                vector4.z = 0;
            } else if (column == 1) {
                vector4.x = this.b;
                vector4.y = this.d;
                vector4.z = 0;
            } else {
                vector4.x = this.tx;
                vector4.y = this.ty;
                vector4.z = 1;
            }
        },
        copyFrom: function(sourceMatrix3) {
            this.a = sourceMatrix3.a;
            this.b = sourceMatrix3.b;
            this.c = sourceMatrix3.c;
            this.d = sourceMatrix3.d;
            this.tx = sourceMatrix3.tx;
            this.ty = sourceMatrix3.ty;
        },
        copyRowFrom: function(row, vector4) {
            if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
            else if (row == 0) {
                this.a = vector4.x;
                this.c = vector4.y;
            } else if (row == 1) {
                this.b = vector4.x;
                this.d = vector4.y;
            } else {
                this.tx = vector4.x;
                this.ty = vector4.y;
            }
        },
        copyRowTo: function(row, vector4) {
            if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
            else if (row == 0) {
                vector4.x = this.a;
                vector4.y = this.b;
                vector4.z = this.tx;
            } else if (row == 1) {
                vector4.x = this.c;
                vector4.y = this.d;
                vector4.z = this.ty;
            } else {
                vector4.x = 0;
                vector4.y = 0;
                vector4.z = 1;
            }
        },
        createBox: function(scaleX, scaleY, rotation, tx, ty) {
            if (ty == null) ty = 0;
            if (tx == null) tx = 0;
            if (rotation == null) rotation = 0;
            this.a = scaleX;
            this.d = scaleY;
            this.b = rotation;
            this.tx = tx;
            this.ty = ty;
        },
        createGradientBox: function(width, height, rotation, tx, ty) {
            if (ty == null) ty = 0;
            if (tx == null) tx = 0;
            if (rotation == null) rotation = 0;
            this.a = width / 1638.4;
            this.d = height / 1638.4;
            if (rotation != 0) {
                var cos = Math.cos(rotation);
                var sin = Math.sin(rotation);
                this.b = sin * this.d;
                this.c = -sin * this.a;
                this.a *= cos;
                this.d *= cos;
            } else {
                this.b = 0;
                this.c = 0;
            }
            this.tx = tx + width / 2;
            this.ty = ty + height / 2;
        },
        equals: function(Matrix3) {
            return Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c && this.d == Matrix3.d;
        },
        deltaTransformVector2: function(Vector2) {
            return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c, Vector2.x * this.b + Vector2.y * this.d);
        },
        identity: function() {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0;
        },
        invert: function() {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) {
                this.a = this.b = this.c = this.d = 0;
                this.tx = -this.tx;
                this.ty = -this.ty;
            } else {
                norm = 1.0 / norm;
                var a1 = this.d * norm;
                this.d = this.a * norm;
                this.a = a1;
                this.b *= -norm;
                this.c *= -norm;
                var tx1 = -this.a * this.tx - this.c * this.ty;
                this.ty = -this.b * this.tx - this.d * this.ty;
                this.tx = tx1;
            }
            return this;
        },
        mult: function(m) {
            var result = new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
            result.concat(m);
            return result;
        },
        rotate: function(theta) {
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);
            var a1 = this.a * cos - this.b * sin;
            this.b = this.a * sin + this.b * cos;
            this.a = a1;
            var c1 = this.c * cos - this.d * sin;
            this.d = this.c * sin + this.d * cos;
            this.c = c1;
            var tx1 = this.tx * cos - this.ty * sin;
            this.ty = this.tx * sin + this.ty * cos;
            this.tx = tx1;
        },
        scale: function(sx, sy) {
            this.a *= sx;
            this.b *= sy;
            this.c *= sx;
            this.d *= sy;
            this.tx *= sx;
            this.ty *= sy;
        },
        setRotation: function(theta, scale) {
            if (scale == null) scale = 1;
            this.a = Math.cos(theta) * scale;
            this.c = Math.sin(theta) * scale;
            this.b = -this.c;
            this.d = this.a;
        },
        setTo: function(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        },
        to3DString: function(roundPixels) {
            if (roundPixels == null) roundPixels = false;
            if (roundPixels) return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
            else return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
        },
        toMozString: function() {
            return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
        },
        toString: function() {
            return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
        },
        transformVector2: function(pos) {
            return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx, pos.x * this.b + pos.y * this.d + this.ty);
        },
        translate: function(dx, dy) {
            this.tx += dx;
            this.ty += dy;
        },
        __cleanValues: function() {
            this.a = Math.round(this.a * 1000) / 1000;
            this.b = Math.round(this.b * 1000) / 1000;
            this.c = Math.round(this.c * 1000) / 1000;
            this.d = Math.round(this.d * 1000) / 1000;
            this.tx = Math.round(this.tx * 10) / 10;
            this.ty = Math.round(this.ty * 10) / 10;
        },
        __transformX: function(pos) {
            return pos.x * this.a + pos.y * this.c + this.tx;
        },
        __transformY: function(pos) {
            return pos.x * this.b + pos.y * this.d + this.ty;
        },
        __translateTransformed: function(pos) {
            this.tx = pos.x * this.a + pos.y * this.c + this.tx;
            this.ty = pos.x * this.b + pos.y * this.d + this.ty;
        },
        __class__: lime_math_Matrix3
    };
    var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
    $hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
    lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime", "math", "_Matrix4", "Matrix4_Impl_"];
    lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {
        set_position: "set_position",
        get_position: "get_position",
        get_determinant: "get_determinant"
    }
    lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
        var this1;
        if (data != null && data.length == 16) this1 = data;
        else {
            var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
            var this2;
            if (array != null) this2 = new Float32Array(array);
            else this2 = null;
            this1 = this2;
        }
        return this1;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1, lhs) {
        var m111 = this1[0];
        var m121 = this1[4];
        var m131 = this1[8];
        var m141 = this1[12];
        var m112 = this1[1];
        var m122 = this1[5];
        var m132 = this1[9];
        var m142 = this1[13];
        var m113 = this1[2];
        var m123 = this1[6];
        var m133 = this1[10];
        var m143 = this1[14];
        var m114 = this1[3];
        var m124 = this1[7];
        var m134 = this1[11];
        var m144 = this1[15];
        var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 0);
        var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 4);
        var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 8);
        var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 12);
        var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 1);
        var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 5);
        var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 9);
        var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 13);
        var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 2);
        var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 6);
        var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 10);
        var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 14);
        var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 3);
        var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 7);
        var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 11);
        var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs, 15);
        this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
        this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
        this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
        this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
        this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
        this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
        this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
        this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
        this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
        this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
        this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
        this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
        this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
        this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
        this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
        this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1, degrees, axis, pivotPoint) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x, axis.y, axis.z, degrees);
        if (pivotPoint != null) {
            var p = pivotPoint;
            lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, m);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1, xScale, yScale, zScale) {
        lime_math__$Matrix4_Matrix4_$Impl_$.append(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
            var this2;
            if (array != null) this2 = new Float32Array(array);
            else this2 = null;
            $r = this2;
            return $r;
        } (this))));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1, x, y, z) {
        this1[12] = this1[12] + x;
        this1[13] = this1[13] + y;
        this1[14] = this1[14] + z;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var this2;
            if (this1 != null) this2 = new Float32Array(this1);
            else this2 = null;
            $r = this2;
            return $r;
        } (this)));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1, column, vector) {
        switch (column) {
        case 0:
            this1[0] = vector.x;
            this1[1] = vector.y;
            this1[2] = vector.z;
            this1[3] = vector.w;
            break;
        case 1:
            this1[4] = vector.x;
            this1[5] = vector.y;
            this1[6] = vector.z;
            this1[7] = vector.w;
            break;
        case 2:
            this1[8] = vector.x;
            this1[9] = vector.y;
            this1[10] = vector.z;
            this1[11] = vector.w;
            break;
        case 3:
            this1[12] = vector.x;
            this1[13] = vector.y;
            this1[14] = vector.z;
            this1[15] = vector.w;
            break;
        default:
            throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1, column, vector) {
        switch (column) {
        case 0:
            vector.x = this1[0];
            vector.y = this1[1];
            vector.z = this1[2];
            vector.w = this1[3];
            break;
        case 1:
            vector.x = this1[4];
            vector.y = this1[5];
            vector.z = this1[6];
            vector.w = this1[7];
            break;
        case 2:
            vector.x = this1[8];
            vector.y = this1[9];
            vector.z = this1[10];
            vector.w = this1[11];
            break;
        case 3:
            vector.x = this1[12];
            vector.y = this1[13];
            vector.z = this1[14];
            vector.w = this1[15];
            break;
        default:
            throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1, other) {
        this1.set(other);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1, array, index, transposeValues) {
        if (transposeValues == null) transposeValues = false;
        if (index == null) index = 0;
        if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
        var l = array.length - index;
        var _g = 0;
        while (_g < l) {
            var c = _g++;
            this1[c] = array[c + index];
        }
        if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1, array, index, transposeValues) {
        if (transposeValues == null) transposeValues = false;
        if (index == null) index = 0;
        if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
        var l = this1.length;
        var _g = 0;
        while (_g < l) {
            var c = _g++;
            array[c + index] = this1[c];
        }
        if (transposeValues) lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1, row, vector) {
        switch (row) {
        case 0:
            this1[0] = vector.x;
            this1[4] = vector.y;
            this1[8] = vector.z;
            this1[12] = vector.w;
            break;
        case 1:
            this1[1] = vector.x;
            this1[5] = vector.y;
            this1[9] = vector.z;
            this1[13] = vector.w;
            break;
        case 2:
            this1[2] = vector.x;
            this1[6] = vector.y;
            this1[10] = vector.z;
            this1[14] = vector.w;
            break;
        case 3:
            this1[3] = vector.x;
            this1[7] = vector.y;
            this1[11] = vector.z;
            this1[15] = vector.w;
            break;
        default:
            throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x, y, scale, rotation) {
        if (rotation == null) rotation = 0;
        if (scale == null) scale = 1;
        var theta = rotation * Math.PI / 180.0;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [c * scale, -s * scale, 0, 0, s * scale, c * scale, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
            var this1;
            if (array != null) this1 = new Float32Array(array);
            else this1 = null;
            $r = this1;
            return $r;
        } (this)));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a, b, c, d, tx, ty) {
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
            var this1;
            if (array != null) this1 = new Float32Array(array);
            else this1 = null;
            $r = this1;
            return $r;
        } (this)));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0, x1, y0, y1, zNear, zFar) {
        var sx = 1.0 / (x1 - x0);
        var sy = 1.0 / (y1 - y0);
        var sz = 1.0 / (zFar - zNear);
        return lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [2.0 * sx, 0, 0, 0, 0, 2.0 * sy, 0, 0, 0, 0, -2. * sz, 0, -(x0 + x1) * sx, -(y0 + y1) * sy, -(zNear + zFar) * sz, 1];
            var this1;
            if (array != null) this1 = new Float32Array(array);
            else this1 = null;
            $r = this1;
            return $r;
        } (this)));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1, row, vector) {
        switch (row) {
        case 0:
            vector.x = this1[0];
            vector.y = this1[4];
            vector.z = this1[8];
            vector.w = this1[12];
            break;
        case 1:
            vector.x = this1[1];
            vector.y = this1[5];
            vector.z = this1[9];
            vector.w = this1[13];
            break;
        case 2:
            vector.x = this1[2];
            vector.y = this1[6];
            vector.z = this1[10];
            vector.w = this1[14];
            break;
        case 3:
            vector.x = this1[3];
            vector.y = this1[7];
            vector.z = this1[11];
            vector.w = this1[15];
            break;
        default:
            throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1, other) { (js_Boot.__cast(other, Float32Array)).set(this1);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1, v) {
        var x = v.x;
        var y = v.y;
        var z = v.z;
        return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3], x * this1[1] + y * this1[5] + z * this1[9] + this1[7], x * this1[2] + y * this1[6] + z * this1[10] + this1[11], 0);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
        this1[0] = 1;
        this1[1] = 0;
        this1[2] = 0;
        this1[3] = 0;
        this1[4] = 0;
        this1[5] = 1;
        this1[6] = 0;
        this1[7] = 0;
        this1[8] = 0;
        this1[9] = 0;
        this1[10] = 1;
        this1[11] = 0;
        this1[12] = 0;
        this1[13] = 0;
        this1[14] = 0;
        this1[15] = 1;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat, toMat, percent) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        var _g = 0;
        while (_g < 16) {
            var i = _g++;
            lime_math__$Matrix4_Matrix4_$Impl_$.set(m, i, lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat, i)) * percent);
        }
        return m;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1, toMat, percent) {
        var _g = 0;
        while (_g < 16) {
            var i = _g++;
            var val = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat, i) - this1[i]) * percent;
            this1[i] = val;
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
        var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
        var invertable = Math.abs(d) > 0.00000000001;
        if (invertable) {
            d = 1 / d;
            var m11 = this1[0];
            var m21 = this1[4];
            var m31 = this1[8];
            var m41 = this1[12];
            var m12 = this1[1];
            var m22 = this1[5];
            var m32 = this1[9];
            var m42 = this1[13];
            var m13 = this1[2];
            var m23 = this1[6];
            var m33 = this1[10];
            var m43 = this1[14];
            var m14 = this1[3];
            var m24 = this1[7];
            var m34 = this1[11];
            var m44 = this1[15];
            this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
            this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
            this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
            this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
            this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
            this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
            this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
            this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
            this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
            this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
            this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
            this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
            this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
            this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
            this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
            this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
        }
        return invertable;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1, pos, at, up) {
        if (at == null) at = new lime_math_Vector4(0, 0, -1);
        if (up == null) up = new lime_math_Vector4(0, -1, 0);
        var dir = new lime_math_Vector4(at.x - pos.x, at.y - pos.y, at.z - pos.z);
        var vup = new lime_math_Vector4(up.x, up.y, up.z, up.w);
        var right;
        dir.normalize();
        vup.normalize();
        var dir2 = new lime_math_Vector4(dir.x, dir.y, dir.z, dir.w);
        dir2.scaleBy(vup.x * dir.x + vup.y * dir.y + vup.z * dir.z);
        vup = new lime_math_Vector4(vup.x - dir2.x, vup.y - dir2.y, vup.z - dir2.z);
        if (Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) vup.normalize();
        else if (dir.x != 0) vup = new lime_math_Vector4( - dir.y, dir.x, 0);
        else vup = new lime_math_Vector4(1, 0, 0);
        right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y, vup.z * dir.x - vup.x * dir.z, vup.x * dir.y - vup.y * dir.x, 1);
        right.normalize();
        this1[0] = right.x;
        this1[4] = right.y;
        this1[8] = right.z;
        this1[12] = 0.0;
        this1[1] = vup.x;
        this1[5] = vup.y;
        this1[9] = vup.z;
        this1[13] = 0.0;
        this1[2] = dir.x;
        this1[6] = dir.y;
        this1[10] = dir.z;
        this1[14] = 0.0;
        this1[3] = pos.x;
        this1[7] = pos.y;
        this1[11] = pos.z;
        this1[15] = 1.0;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1, rhs) {
        var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 0);
        var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 4);
        var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 8);
        var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 12);
        var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 1);
        var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 5);
        var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 9);
        var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 13);
        var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 2);
        var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 6);
        var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 10);
        var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 14);
        var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 3);
        var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 7);
        var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 11);
        var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs, 15);
        var m211 = this1[0];
        var m221 = this1[4];
        var m231 = this1[8];
        var m241 = this1[12];
        var m212 = this1[1];
        var m222 = this1[5];
        var m232 = this1[9];
        var m242 = this1[13];
        var m213 = this1[2];
        var m223 = this1[6];
        var m233 = this1[10];
        var m243 = this1[14];
        var m214 = this1[3];
        var m224 = this1[7];
        var m234 = this1[11];
        var m244 = this1[15];
        this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
        this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
        this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
        this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
        this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
        this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
        this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
        this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
        this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
        this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
        this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
        this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
        this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
        this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
        this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
        this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1, degrees, axis, pivotPoint) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x, axis.y, axis.z, degrees);
        if (pivotPoint != null) {
            var p = pivotPoint;
            lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m, p.x, p.y, p.z);
        }
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1, xScale, yScale, zScale) {
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, lime_math__$Matrix4_Matrix4_$Impl_$._new((function($this) {
            var $r;
            var array = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
            var this2;
            if (array != null) this2 = new Float32Array(array);
            else this2 = null;
            $r = this2;
            return $r;
        } (this))));
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1, x, y, z) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m, new lime_math_Vector4(x, y, z));
        lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1, m);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1, v) {
        var x = v.x;
        var y = v.y;
        var z = v.z;
        return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12], x * this1[1] + y * this1[5] + z * this1[9] + this1[13], x * this1[2] + y * this1[6] + z * this1[10] + this1[14], x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1, ain, aout) {
        var i = 0;
        while (i + 3 <= ain.length) {
            var x = ain[i];
            var y = ain[i + 1];
            var z = ain[i + 2];
            aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
            aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
            aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
            i += 3;
        }
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
        var othis;
        var this2;
        if (this1 != null) this2 = new Float32Array(this1);
        else this2 = null;
        othis = this2;
        this1[1] = othis[4];
        this1[2] = othis[8];
        this1[3] = othis[12];
        this1[4] = othis[1];
        this1[6] = othis[9];
        this1[7] = othis[13];
        this1[8] = othis[2];
        this1[9] = othis[6];
        this1[11] = othis[14];
        this1[12] = othis[3];
        this1[13] = othis[7];
        this1[14] = othis[11];
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x, y, z, degrees) {
        var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
        var a1 = new lime_math_Vector4(x, y, z);
        var rad = -degrees * (Math.PI / 180);
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var t = 1.0 - c;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 0, c + a1.x * a1.x * t);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 5, c + a1.y * a1.y * t);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 10, c + a1.z * a1.z * t);
        var tmp1 = a1.x * a1.y * t;
        var tmp2 = a1.z * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 4, tmp1 + tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 1, tmp1 - tmp2);
        tmp1 = a1.x * a1.z * t;
        tmp2 = a1.y * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 8, tmp1 - tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 2, tmp1 + tmp2);
        tmp1 = a1.y * a1.z * t;
        tmp2 = a1.x * s;
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 9, tmp1 + tmp2);
        lime_math__$Matrix4_Matrix4_$Impl_$.set(m, 6, tmp1 - tmp2);
        return m;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
        return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
        return new lime_math_Vector4(this1[12], this1[13], this1[14]);
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1, val) {
        this1[12] = val.x;
        this1[13] = val.y;
        this1[14] = val.z;
        return val;
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1, index) {
        return this1[index];
    };
    lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1, index, value) {
        this1[index] = value;
        return value;
    };
    var lime_math_Rectangle = function(x, y, width, height) {
        if (height == null) height = 0;
        if (width == null) width = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    };
    $hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
    lime_math_Rectangle.__name__ = ["lime", "math", "Rectangle"];
    lime_math_Rectangle.prototype = {
        clone: function() {
            return new lime_math_Rectangle(this.x, this.y, this.width, this.height);
        },
        contains: function(x, y) {
            return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
        },
        containsPoint: function(point) {
            return this.contains(point.x, point.y);
        },
        containsRect: function(rect) {
            if (rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom();
            else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
        },
        copyFrom: function(sourceRect) {
            this.x = sourceRect.x;
            this.y = sourceRect.y;
            this.width = sourceRect.width;
            this.height = sourceRect.height;
        },
        equals: function(toCompare) {
            return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
        },
        inflate: function(dx, dy) {
            this.x -= dx;
            this.width += dx * 2;
            this.y -= dy;
            this.height += dy * 2;
        },
        inflatePoint: function(point) {
            this.inflate(point.x, point.y);
        },
        intersection: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) x0 = toIntersect.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right();
            else x1 = this.get_right();
            if (x1 <= x0) return new lime_math_Rectangle();
            var y0;
            if (this.y < toIntersect.y) y0 = toIntersect.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom();
            else y1 = this.get_bottom();
            if (y1 <= y0) return new lime_math_Rectangle();
            return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
        },
        intersects: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) x0 = toIntersect.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right();
            else x1 = this.get_right();
            if (x1 <= x0) return false;
            var y0;
            if (this.y < toIntersect.y) y0 = toIntersect.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom();
            else y1 = this.get_bottom();
            return y1 > y0;
        },
        isEmpty: function() {
            return this.width <= 0 || this.height <= 0;
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy;
        },
        offsetPoint: function(point) {
            this.x += point.x;
            this.y += point.y;
        },
        setEmpty: function() {
            this.x = this.y = this.width = this.height = 0;
        },
        setTo: function(xa, ya, widtha, heighta) {
            this.x = xa;
            this.y = ya;
            this.width = widtha;
            this.height = heighta;
        },
        transform: function(m) {
            var tx0 = m.a * this.x + m.c * this.y;
            var tx1 = tx0;
            var ty0 = m.b * this.x + m.d * this.y;
            var ty1 = ty0;
            var tx = m.a * (this.x + this.width) + m.c * this.y;
            var ty = m.b * (this.x + this.width) + m.d * this.y;
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
            ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            tx = m.a * this.x + m.c * (this.y + this.height);
            ty = m.b * this.x + m.d * (this.y + this.height);
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            return new lime_math_Rectangle(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0);
        },
        union: function(toUnion) {
            if (this.width == 0 || this.height == 0) return toUnion.clone();
            else if (toUnion.width == 0 || toUnion.height == 0) return this.clone();
            var x0;
            if (this.x > toUnion.x) x0 = toUnion.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() < toUnion.get_right()) x1 = toUnion.get_right();
            else x1 = this.get_right();
            var y0;
            if (this.y > toUnion.y) y0 = toUnion.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom();
            else y1 = this.get_bottom();
            return new lime_math_Rectangle(x0, y0, x1 - x0, y1 - y0);
        },
        __contract: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) return;
            if (this.x < x) this.x = x;
            if (this.y < y) this.y = y;
            if (this.get_right() > x + width) this.width = x + width - this.x;
            if (this.get_bottom() > y + height) this.height = y + height - this.y;
        },
        __expand: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                return;
            }
            var cacheRight = this.get_right();
            var cacheBottom = this.get_bottom();
            if (this.x > x) this.x = x;
            if (this.y > y) this.y = y;
            if (cacheRight < x + width) this.width = x + width - this.x;
            if (cacheBottom < y + height) this.height = y + height - this.y;
        },
        __toFlashRectangle: function() {
            return null;
        },
        get_bottom: function() {
            return this.y + this.height;
        },
        set_bottom: function(b) {
            this.height = b - this.y;
            return b;
        },
        get_bottomRight: function() {
            return new lime_math_Vector2(this.x + this.width, this.y + this.height);
        },
        set_bottomRight: function(p) {
            this.width = p.x - this.x;
            this.height = p.y - this.y;
            return p.clone();
        },
        get_left: function() {
            return this.x;
        },
        set_left: function(l) {
            this.width -= l - this.x;
            this.x = l;
            return l;
        },
        get_right: function() {
            return this.x + this.width;
        },
        set_right: function(r) {
            this.width = r - this.x;
            return r;
        },
        get_size: function() {
            return new lime_math_Vector2(this.width, this.height);
        },
        set_size: function(p) {
            this.width = p.x;
            this.height = p.y;
            return p.clone();
        },
        get_top: function() {
            return this.y;
        },
        set_top: function(t) {
            this.height -= t - this.y;
            this.y = t;
            return t;
        },
        get_topLeft: function() {
            return new lime_math_Vector2(this.x, this.y);
        },
        set_topLeft: function(p) {
            this.x = p.x;
            this.y = p.y;
            return p.clone();
        },
        __class__: lime_math_Rectangle,
        __properties__: {
            set_topLeft: "set_topLeft",
            get_topLeft: "get_topLeft",
            set_top: "set_top",
            get_top: "get_top",
            set_size: "set_size",
            get_size: "get_size",
            set_right: "set_right",
            get_right: "get_right",
            set_left: "set_left",
            get_left: "get_left",
            set_bottomRight: "set_bottomRight",
            get_bottomRight: "get_bottomRight",
            set_bottom: "set_bottom",
            get_bottom: "get_bottom"
        }
    };
    var lime_math_Vector2 = function(x, y) {
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.x = x;
        this.y = y;
    };
    $hxClasses["lime.math.Vector2"] = lime_math_Vector2;
    lime_math_Vector2.__name__ = ["lime", "math", "Vector2"];
    lime_math_Vector2.distance = function(pt1, pt2) {
        var dx = pt1.x - pt2.x;
        var dy = pt1.y - pt2.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    lime_math_Vector2.interpolate = function(pt1, pt2, f) {
        return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x), pt2.y + f * (pt1.y - pt2.y));
    };
    lime_math_Vector2.polar = function(len, angle) {
        return new lime_math_Vector2(len * Math.cos(angle), len * Math.sin(angle));
    };
    lime_math_Vector2.prototype = {
        add: function(v) {
            return new lime_math_Vector2(v.x + this.x, v.y + this.y);
        },
        clone: function() {
            return new lime_math_Vector2(this.x, this.y);
        },
        equals: function(toCompare) {
            return toCompare != null && toCompare.x == this.x && toCompare.y == this.y;
        },
        normalize: function(thickness) {
            if (this.x == 0 && this.y == 0) return;
            else {
                var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
                this.x *= norm;
                this.y *= norm;
            }
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy;
        },
        setTo: function(xa, ya) {
            this.x = xa;
            this.y = ya;
        },
        subtract: function(v) {
            return new lime_math_Vector2(this.x - v.x, this.y - v.y);
        },
        __toFlashPoint: function() {
            return null;
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        __class__: lime_math_Vector2,
        __properties__: {
            get_length: "get_length"
        }
    };
    var lime_math_Vector4 = function(x, y, z, w) {
        if (w == null) w = 0.;
        if (z == null) z = 0.;
        if (y == null) y = 0.;
        if (x == null) x = 0.;
        this.w = w;
        this.x = x;
        this.y = y;
        this.z = z;
    };
    $hxClasses["lime.math.Vector4"] = lime_math_Vector4;
    lime_math_Vector4.__name__ = ["lime", "math", "Vector4"];
    lime_math_Vector4.__properties__ = {
        get_Z_AXIS: "get_Z_AXIS",
        get_Y_AXIS: "get_Y_AXIS",
        get_X_AXIS: "get_X_AXIS"
    }
    lime_math_Vector4.X_AXIS = null;
    lime_math_Vector4.Y_AXIS = null;
    lime_math_Vector4.Z_AXIS = null;
    lime_math_Vector4.angleBetween = function(a, b) {
        var a0 = new lime_math_Vector4(a.x, a.y, a.z, a.w);
        a0.normalize();
        var b0 = new lime_math_Vector4(b.x, b.y, b.z, b.w);
        b0.normalize();
        return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
    };
    lime_math_Vector4.distance = function(pt1, pt2) {
        var x = pt2.x - pt1.x;
        var y = pt2.y - pt1.y;
        var z = pt2.z - pt1.z;
        return Math.sqrt(x * x + y * y + z * z);
    };
    lime_math_Vector4.get_X_AXIS = function() {
        return new lime_math_Vector4(1, 0, 0);
    };
    lime_math_Vector4.get_Y_AXIS = function() {
        return new lime_math_Vector4(0, 1, 0);
    };
    lime_math_Vector4.get_Z_AXIS = function() {
        return new lime_math_Vector4(0, 0, 1);
    };
    lime_math_Vector4.prototype = {
        add: function(a) {
            return new lime_math_Vector4(this.x + a.x, this.y + a.y, this.z + a.z);
        },
        clone: function() {
            return new lime_math_Vector4(this.x, this.y, this.z, this.w);
        },
        copyFrom: function(sourceVector4) {
            this.x = sourceVector4.x;
            this.y = sourceVector4.y;
            this.z = sourceVector4.z;
        },
        crossProduct: function(a) {
            return new lime_math_Vector4(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1);
        },
        decrementBy: function(a) {
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z;
        },
        dotProduct: function(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z;
        },
        equals: function(toCompare, allFour) {
            if (allFour == null) allFour = false;
            return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
        },
        incrementBy: function(a) {
            this.x += a.x;
            this.y += a.y;
            this.z += a.z;
        },
        nearEquals: function(toCompare, tolerance, allFour) {
            if (allFour == null) allFour = false;
            return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
        },
        negate: function() {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1;
        },
        normalize: function() {
            var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
            if (l != 0) {
                this.x /= l;
                this.y /= l;
                this.z /= l;
            }
            return l;
        },
        project: function() {
            this.x /= this.w;
            this.y /= this.w;
            this.z /= this.w;
        },
        scaleBy: function(s) {
            this.x *= s;
            this.y *= s;
            this.z *= s;
        },
        setTo: function(xa, ya, za) {
            this.x = xa;
            this.y = ya;
            this.z = za;
        },
        subtract: function(a) {
            return new lime_math_Vector4(this.x - a.x, this.y - a.y, this.z - a.z);
        },
        toString: function() {
            return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        },
        get_lengthSquared: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        },
        __class__: lime_math_Vector4,
        __properties__: {
            get_lengthSquared: "get_lengthSquared",
            get_length: "get_length"
        }
    };
    var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
    $hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
    lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime", "math", "color", "_ARGB", "ARGB_Impl_"];
    lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    }
    lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
    lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
    lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
        if (argb == null) argb = 0;
        return argb;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a, r, g, b) {
        var argb = 0;
        argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
        return argb;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 >> 24 & 255) == 0) this1 = 0;
        else if ((this1 >> 24 & 255) != 255) {
            lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
            this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        switch (format) {
        case 2:
            this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
            break;
        case 0:
            this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        case 1:
            this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
            break;
        }
        if (premultiplied) {
            if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
                lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
                var r;
                var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
            }
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1, a, r, g, b) {
        this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
            lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
            var r;
            var idx = Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var b;
            var idx2 = Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (this1 >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        if (premultiplied) {
            if ((this1 >> 24 & 255) == 0) this1 = 0;
            else if ((this1 >> 24 & 255) != 255) {
                lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
                this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
            }
        }
        switch (format) {
        case 2:
            data[offset] = this1 & 255;
            data[offset + 1] = this1 >> 8 & 255;
            data[offset + 2] = this1 >> 16 & 255;
            data[offset + 3] = this1 >> 24 & 255;
            break;
        case 0:
            data[offset] = this1 >> 16 & 255;
            data[offset + 1] = this1 >> 8 & 255;
            data[offset + 2] = this1 & 255;
            data[offset + 3] = this1 >> 24 & 255;
            break;
        case 1:
            data[offset] = this1 >> 24 & 255;
            data[offset + 1] = this1 >> 16 & 255;
            data[offset + 2] = this1 >> 8 & 255;
            data[offset + 3] = this1 & 255;
            break;
        }
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
        var argb = 0;
        argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
        return argb;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
        var argb = 0;
        argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
        return argb;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
        return this1 >> 24 & 255;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
        return this1 & 255;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
        return this1 >> 8 & 255;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
        return this1 >> 16 & 255;
    };
    lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
    $hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
    lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime", "math", "color", "_BGRA", "BGRA_Impl_"];
    lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    }
    lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
    lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
    lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
        if (bgra == null) bgra = 0;
        return bgra;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b, g, r, a) {
        var bgra = 0;
        bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
        return bgra;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 & 255) == 0) this1 = 0;
        else if ((this1 & 255) != 255) {
            lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
            this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        switch (format) {
        case 2:
            this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (premultiplied) {
            if ((this1 & 255) != 0 && (this1 & 255) != 255) {
                lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
                var b;
                var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var r;
                var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
            }
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1, b, g, r, a) {
        this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 & 255) != 0 && (this1 & 255) != 255) {
            lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
            var b;
            var idx = Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var r;
            var idx2 = Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | this1 & 255 & 255;
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        if (premultiplied) {
            if ((this1 & 255) == 0) this1 = 0;
            else if ((this1 & 255) != 255) {
                lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
            }
        }
        switch (format) {
        case 2:
            data[offset] = this1 >> 24 & 255;
            data[offset + 1] = this1 >> 16 & 255;
            data[offset + 2] = this1 >> 8 & 255;
            data[offset + 3] = this1 & 255;
            break;
        case 0:
            data[offset] = this1 >> 8 & 255;
            data[offset + 1] = this1 >> 16 & 255;
            data[offset + 2] = this1 >> 24 & 255;
            data[offset + 3] = this1 & 255;
            break;
        case 1:
            data[offset] = this1 & 255;
            data[offset + 1] = this1 >> 8 & 255;
            data[offset + 2] = this1 >> 16 & 255;
            data[offset + 3] = this1 >> 24 & 255;
            break;
        }
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
        var bgra = 0;
        bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
        return bgra;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
        var bgra = 0;
        bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
        return bgra;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
        return this1 & 255;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
        return this1 >> 24 & 255;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
        return this1 >> 16 & 255;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
        return this1 >> 8 & 255;
    };
    lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
    $hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
    lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime", "math", "color", "_RGBA", "RGBA_Impl_"];
    lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {
        set_r: "set_r",
        get_r: "get_r",
        set_g: "set_g",
        get_g: "get_g",
        set_b: "set_b",
        get_b: "get_b",
        set_a: "set_a",
        get_a: "get_a"
    }
    lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
    lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
    lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
    lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
    lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
        if (rgba == null) rgba = 0;
        return rgba;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r, g, b, a) {
        var rgba = 0;
        rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
        return rgba;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
        if ((this1 & 255) == 0) {
            if (this1 != 0) this1 = 0;
        } else if ((this1 & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
            this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        switch (format) {
        case 2:
            this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 0:
            this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
            break;
        case 1:
            this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
            break;
        }
        if (premultiplied) {
            if ((this1 & 255) != 0 && (this1 & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
                var r;
                var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
                var g;
                var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
                var b;
                var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
                b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
                this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
            }
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1, r, g, b, a) {
        this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
        if ((this1 & 255) != 0 && (this1 & 255) != 255) {
            lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
            var r;
            var idx = Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            r = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx];
            var g;
            var idx1 = Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            g = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx1];
            var b;
            var idx2 = Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult);
            b = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[idx2];
            this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | this1 & 255 & 255;
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1, data, offset, format, premultiplied) {
        if (premultiplied == null) premultiplied = false;
        if (format == null) format = 0;
        if (premultiplied) {
            if ((this1 & 255) == 0) {
                if (this1 != 0) this1 = 0;
            } else if ((this1 & 255) != 255) {
                lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
                this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
            }
        }
        switch (format) {
        case 2:
            data[offset] = this1 >> 8 & 255;
            data[offset + 1] = this1 >> 16 & 255;
            data[offset + 2] = this1 >> 24 & 255;
            data[offset + 3] = this1 & 255;
            break;
        case 0:
            data[offset] = this1 >> 24 & 255;
            data[offset + 1] = this1 >> 16 & 255;
            data[offset + 2] = this1 >> 8 & 255;
            data[offset + 3] = this1 & 255;
            break;
        case 1:
            data[offset] = this1 & 255;
            data[offset + 1] = this1 >> 24 & 255;
            data[offset + 2] = this1 >> 16 & 255;
            data[offset + 3] = this1 >> 8 & 255;
            break;
        }
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
        var rgba = 0;
        rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
        return rgba;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
        var rgba = 0;
        rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
        return rgba;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
        return this1 & 255;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
        return value;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
        return this1 >> 8 & 255;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
        return this1 >> 16 & 255;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1, value) {
        this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
        return this1 >> 24 & 255;
    };
    lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1, value) {
        this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
        return value;
    };
    var lime_net_HTTPRequest = function() {
        this.promise = new lime_app_Promise();
    };
    $hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
    lime_net_HTTPRequest.__name__ = ["lime", "net", "HTTPRequest"];
    lime_net_HTTPRequest.prototype = {
        load: function(url) {
            var _g = this;
            this.bytesLoaded = 0;
            this.bytesTotal = 0;
            var request = new XMLHttpRequest();
            request.addEventListener("progress", $bind(this, this.request_onProgress), false);
            request.onreadystatechange = function() {
                if (request.readyState != 4) return;
                if (request.status != null && request.status >= 200 && request.status <= 400) {
                    _g.bytes = lime_utils_Bytes.ofData(request.response);
                    _g.promise.complete(_g.bytes);
                } else _g.promise.error(request.status);
            };
            request.open("GET", url, true);
            request.responseType = "arraybuffer";
            request.send("");
            return this.promise.future;
        },
        curl_onProgress: function(dltotal, dlnow, uptotal, upnow) {
            if (upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
                if (upnow > this.bytesLoaded) this.bytesLoaded = upnow | 0;
                if (dlnow > this.bytesLoaded) this.bytesLoaded = dlnow | 0;
                if (uptotal > this.bytesTotal) this.bytesTotal = uptotal | 0;
                if (dltotal > this.bytesTotal) this.bytesTotal = dltotal | 0;
                this.promise.progress(this.bytesLoaded / this.bytesTotal);
            }
            return 0;
        },
        curl_onWrite: function(output, size, nmemb) {
            var cacheBytes = this.bytes;
            this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
            this.bytes.blit(0, cacheBytes, 0, cacheBytes.length);
            this.bytes.blit(cacheBytes.length, output, 0, output.length);
            return size * nmemb;
        },
        request_onProgress: function(event) {
            this.promise.progress(event.loaded / event.total);
        },
        __class__: lime_net_HTTPRequest
    };
    var lime_net_curl__$CURL_CURL_$Impl_$ = {};
    $hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
    lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime", "net", "curl", "_CURL", "CURL_Impl_"];
    lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date, now) {
        return 0;
    };
    lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {};
    lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
        return 0;
    };
    lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
        return null;
    };
    lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
        return null;
    };
    lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a, b) {
        return a > b;
    };
    var lime_net_curl_CURLEasy = function() {};
    $hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
    lime_net_curl_CURLEasy.__name__ = ["lime", "net", "curl", "CURLEasy"];
    lime_net_curl_CURLEasy.cleanup = function(handle) {};
    lime_net_curl_CURLEasy.duphandle = function(handle) {
        return 0;
    };
    lime_net_curl_CURLEasy.escape = function(handle, url, length) {
        return null;
    };
    lime_net_curl_CURLEasy.getinfo = function(handle, info) {
        return null;
    };
    lime_net_curl_CURLEasy.init = function() {
        return 0;
    };
    lime_net_curl_CURLEasy.pause = function(handle, bitMask) {
        return 0;
    };
    lime_net_curl_CURLEasy.perform = function(handle) {
        return 0;
    };
    lime_net_curl_CURLEasy.reset = function(handle) {};
    lime_net_curl_CURLEasy.setopt = function(handle, option, parameter) {
        return 0;
    };
    lime_net_curl_CURLEasy.strerror = function(code) {
        return null;
    };
    lime_net_curl_CURLEasy.unescape = function(handle, url, inLength, outLength) {
        return null;
    };
    lime_net_curl_CURLEasy.__writeCallback = function(callback, output, size, nmemb) {
        return 0;
    };
    var lime_system_BackgroundWorker = function() {
        this.onProgress = new lime_app_Event_$Dynamic_$Void();
        this.onError = new lime_app_Event_$Dynamic_$Void();
        this.onComplete = new lime_app_Event_$Dynamic_$Void();
        this.doWork = new lime_app_Event_$Dynamic_$Void();
    };
    $hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
    lime_system_BackgroundWorker.__name__ = ["lime", "system", "BackgroundWorker"];
    lime_system_BackgroundWorker.prototype = {
        cancel: function() {
            this.canceled = true;
        },
        run: function(message) {
            this.canceled = false;
            this.__runMessage = message;
            this.__doWork();
        },
        sendComplete: function(message) {
            if (!this.canceled) {
                this.canceled = true;
                this.onComplete.dispatch(message);
            }
        },
        sendError: function(message) {
            if (!this.canceled) {
                this.canceled = true;
                this.onError.dispatch(message);
            }
        },
        sendProgress: function(message) {
            if (!this.canceled) this.onProgress.dispatch(message);
        },
        __doWork: function() {
            this.doWork.dispatch(this.__runMessage);
        },
        __update: function(deltaTime) {},
        __class__: lime_system_BackgroundWorker
    };
    var lime_system_CFFI = function() {};
    $hxClasses["lime.system.CFFI"] = lime_system_CFFI;
    lime_system_CFFI.__name__ = ["lime", "system", "CFFI"];
    lime_system_CFFI.available = null;
    lime_system_CFFI.enabled = null;
    lime_system_CFFI.load = function(library, method, args, lazy) {
        if (lazy == null) lazy = false;
        if (args == null) args = 0;
        if (!lime_system_CFFI.enabled) return Reflect.makeVarArgs(function(__) {
            return {};
        });
        var result = null;
        return result;
    };
    lime_system_CFFI.__findHaxelib = function(library) {
        return "";
    };
    lime_system_CFFI.__loaderTrace = function(message) {};
    lime_system_CFFI.__sysName = function() {
        return null;
    };
    lime_system_CFFI.__tryLoad = function(name, library, func, args) {
        return null;
    };
    var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
    $hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime", "system", "_CFFIPointer", "CFFIPointer_Impl_"];
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
        return handle;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
        if (this1 != null) {}
        return 0;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
    };
    lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a, b) {
        return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
    };
    var lime_system_Clipboard = function() {};
    $hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
    lime_system_Clipboard.__name__ = ["lime", "system", "Clipboard"];
    lime_system_Clipboard.__properties__ = {
        set_text: "set_text",
        get_text: "get_text"
    }
    lime_system_Clipboard.get_text = function() {
        return null;
    };
    lime_system_Clipboard.set_text = function(value) {
        return null;
    };
    var lime_system_Display = function() {};
    $hxClasses["lime.system.Display"] = lime_system_Display;
    lime_system_Display.__name__ = ["lime", "system", "Display"];
    lime_system_Display.prototype = {
        __class__: lime_system_Display
    };
    var lime_system_DisplayMode = function(width, height, refreshRate, pixelFormat) {
        this.width = width;
        this.height = height;
        this.refreshRate = refreshRate;
        this.pixelFormat = pixelFormat;
    };
    $hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
    lime_system_DisplayMode.__name__ = ["lime", "system", "DisplayMode"];
    lime_system_DisplayMode.prototype = {
        __class__: lime_system_DisplayMode
    };
    var lime_system_Endian = $hxClasses["lime.system.Endian"] = {
        __ename__: ["lime", "system", "Endian"],
        __constructs__: ["LITTLE_ENDIAN", "BIG_ENDIAN"]
    };
    lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN", 0];
    lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
    lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
    lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN", 1];
    lime_system_Endian.BIG_ENDIAN.toString = $estr;
    lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
    var lime_system_System = function() {};
    $hxClasses["lime.system.System"] = lime_system_System;
    lime_system_System.__name__ = ["lime", "system", "System"];
    lime_system_System.__properties__ = {
        get_userDirectory: "get_userDirectory",
        get_numDisplays: "get_numDisplays",
        get_fontsDirectory: "get_fontsDirectory",
        get_endianness: "get_endianness",
        get_documentsDirectory: "get_documentsDirectory",
        get_desktopDirectory: "get_desktopDirectory",
        get_applicationStorageDirectory: "get_applicationStorageDirectory",
        get_applicationDirectory: "get_applicationDirectory",
        set_allowScreenTimeout: "set_allowScreenTimeout",
        get_allowScreenTimeout: "get_allowScreenTimeout"
    }
    lime_system_System.applicationDirectory = null;
    lime_system_System.applicationStorageDirectory = null;
    lime_system_System.desktopDirectory = null;
    lime_system_System.disableCFFI = null;
    lime_system_System.documentsDirectory = null;
    lime_system_System.endianness = null;
    lime_system_System.fontsDirectory = null;
    lime_system_System.numDisplays = null;
    lime_system_System.userDirectory = null;
    lime_system_System.embed = $hx_exports.lime.embed = function(element, width, height, background, assetsPrefix) {
        var htmlElement = null;
        if (typeof(element) == "string") htmlElement = window.document.getElementById(js_Boot.__cast(element, String));
        else if (element == null) htmlElement = window.document.createElement("div");
        else htmlElement = element;
        var color = null;
        if (background != null) {
            background = StringTools.replace(background, "#", "");
            if (background.indexOf("0x") > -1) color = Std.parseInt(background);
            else color = Std.parseInt("0x" + background);
        }
        if (width == null) width = 0;
        if (height == null) height = 0;
        ApplicationMain.config.windows[0].background = color;
        ApplicationMain.config.windows[0].element = htmlElement;
        ApplicationMain.config.windows[0].width = width;
        ApplicationMain.config.windows[0].height = height;
        ApplicationMain.config.assetsPrefix = assetsPrefix;
        ApplicationMain.create();
    };
    lime_system_System.exit = function(code) {};
    lime_system_System.getDisplay = function(id) {
        if (id == 0) {
            var display = new lime_system_Display();
            display.id = 0;
            display.name = "Generic Display";
            display.dpi = 96;
            display.currentMode = new lime_system_DisplayMode(window.screen.width, window.screen.height, 60, 1);
            display.supportedModes = [display.currentMode];
            display.bounds = new lime_math_Rectangle(0, 0, display.currentMode.width, display.currentMode.height);
            return display;
        }
        return null;
    };
    lime_system_System.getTimer = function() {
        return new Date().getTime();
    };
    lime_system_System.load = function(library, method, args, lazy) {
        if (lazy == null) lazy = false;
        if (args == null) args = 0;
        return lime_system_CFFI.load(library, method, args, lazy);
    };
    lime_system_System.get_allowScreenTimeout = function() {
        return true;
    };
    lime_system_System.set_allowScreenTimeout = function(value) {
        return true;
    };
    lime_system_System.get_applicationDirectory = function() {
        return null;
    };
    lime_system_System.get_applicationStorageDirectory = function() {
        var company = "MyCompany";
        var file = "MyApplication";
        if (lime_app_Application.current != null && lime_app_Application.current.config != null) {
            if (lime_app_Application.current.config.company != null) company = lime_app_Application.current.config.company;
            if (lime_app_Application.current.config.file != null) file = lime_app_Application.current.config.file;
        }
        return null;
    };
    lime_system_System.get_desktopDirectory = function() {
        return null;
    };
    lime_system_System.get_documentsDirectory = function() {
        return null;
    };
    lime_system_System.get_fontsDirectory = function() {
        return null;
    };
    lime_system_System.get_numDisplays = function() {
        return 1;
    };
    lime_system_System.get_userDirectory = function() {
        return null;
    };
    lime_system_System.get_endianness = function() {
        return lime_system_Endian.LITTLE_ENDIAN;
    };
    var lime_system_ThreadPool = function(minThreads, maxThreads) {
        if (maxThreads == null) maxThreads = 1;
        if (minThreads == null) minThreads = 0;
        this.onProgress = new lime_app_Event_$Dynamic_$Void();
        this.onError = new lime_app_Event_$Dynamic_$Void();
        this.onComplete = new lime_app_Event_$Dynamic_$Void();
        this.doWork = new lime_app_Event_$Dynamic_$Void();
        this.minThreads = minThreads;
        this.maxThreads = maxThreads;
        this.currentThreads = 0;
    };
    $hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
    lime_system_ThreadPool.__name__ = ["lime", "system", "ThreadPool"];
    lime_system_ThreadPool.prototype = {
        queue: function(state) {
            this.doWork.dispatch(state);
        },
        sendComplete: function(state) {
            this.onComplete.dispatch(state);
        },
        sendError: function(state) {
            this.onError.dispatch(state);
        },
        sendProgress: function(state) {
            this.onProgress.dispatch(state);
        },
        __class__: lime_system_ThreadPool
    };
    var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = {
        __ename__: ["lime", "system", "_ThreadPool", "ThreadPoolMessageType"],
        __constructs__: ["COMPLETE", "ERROR", "EXIT", "PROGRESS", "WORK"]
    };
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE", 0];
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR", 1];
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT", 2];
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS", 3];
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK", 4];
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
    lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
    var lime_system__$ThreadPool_ThreadPoolMessage = function(type, state) {
        this.type = type;
        this.state = state;
    };
    $hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
    lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime", "system", "_ThreadPool", "ThreadPoolMessage"];
    lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
        __class__: lime_system__$ThreadPool_ThreadPoolMessage
    };
    var lime_text_Font = function(name) {
        if (name != null) this.name = name;
        if (this.__fontPath != null) this.__fromFile(this.__fontPath);
    };
    $hxClasses["lime.text.Font"] = lime_text_Font;
    lime_text_Font.__name__ = ["lime", "text", "Font"];
    lime_text_Font.fromBytes = function(bytes) {
        var font = new lime_text_Font();
        font.__fromBytes(bytes);
        return font;
    };
    lime_text_Font.fromFile = function(path) {
        var font = new lime_text_Font();
        font.__fromFile(path);
        return font;
    };
    lime_text_Font.prototype = {
        decompose: function() {
            return null;
        },
        getGlyph: function(character) {
            return - 1;
        },
        getGlyphs: function(characters) {
            if (characters == null) characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
            return null;
        },
        getGlyphMetrics: function(glyph) {
            return null;
        },
        renderGlyph: function(glyph, fontSize) {
            return null;
        },
        renderGlyphs: function(glyphs, fontSize) {
            return null;
        },
        __fromBytes: function(bytes) {
            this.__fontPath = null;
        },
        __fromFile: function(path) {
            this.__fontPath = path;
        },
        __setSize: function(size) {},
        get_ascender: function() {
            return 0;
        },
        get_descender: function() {
            return 0;
        },
        get_height: function() {
            return 0;
        },
        get_numGlyphs: function() {
            return 0;
        },
        get_underlinePosition: function() {
            return 0;
        },
        get_underlineThickness: function() {
            return 0;
        },
        get_unitsPerEM: function() {
            return 0;
        },
        __class__: lime_text_Font,
        __properties__: {
            get_unitsPerEM: "get_unitsPerEM",
            get_underlineThickness: "get_underlineThickness",
            get_underlinePosition: "get_underlinePosition",
            get_numGlyphs: "get_numGlyphs",
            get_height: "get_height",
            get_descender: "get_descender",
            get_ascender: "get_ascender"
        }
    };
    var lime_text__$Glyph_Glyph_$Impl_$ = {};
    $hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
    lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime", "text", "_Glyph", "Glyph_Impl_"];
    lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
        return i;
    };
    var lime_text_GlyphMetrics = function() {};
    $hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
    lime_text_GlyphMetrics.__name__ = ["lime", "text", "GlyphMetrics"];
    lime_text_GlyphMetrics.prototype = {
        __class__: lime_text_GlyphMetrics
    };
    var lime_text_GlyphPosition = function(glyph, advance, offset) {
        this.glyph = glyph;
        this.advance = advance;
        if (offset != null) this.offset = offset;
        else this.offset = new lime_math_Vector2();
    };
    $hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
    lime_text_GlyphPosition.__name__ = ["lime", "text", "GlyphPosition"];
    lime_text_GlyphPosition.prototype = {
        __class__: lime_text_GlyphPosition
    };
    var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
    $hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
    lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime", "text", "_TextDirection", "TextDirection_Impl_"];
    lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {
        get_vertical: "get_vertical",
        get_horizontal: "get_horizontal",
        get_forward: "get_forward",
        get_backward: "get_backward"
    }
    lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
        this1 = this1 ^ 1;
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
        switch (this1) {
        case 4:
            return "leftToRight";
        case 5:
            return "rightToLeft";
        case 6:
            return "topToBottom";
        case 7:
            return "bottomToTop";
        default:
            return "";
        }
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
        return (this1 & -3) == 5;
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
        return (this1 & -3) == 4;
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
        return (this1 & -2) == 4;
    };
    lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
        return (this1 & -2) == 6;
    };
    var lime_text_TextLayout = function(text, font, size, direction, script, language) {
        if (language == null) language = "en";
        if (script == null) script = "Zyyy";
        if (direction == null) direction = 4;
        if (size == null) size = 12;
        if (text == null) text = "";
        this.set_text(text);
        this.set_font(font);
        this.set_size(size);
        this.__direction = direction;
        this.__script = script;
        this.__language = language;
        this.positions = [];
        this.__dirty = true;
    };
    $hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
    lime_text_TextLayout.__name__ = ["lime", "text", "TextLayout"];
    lime_text_TextLayout.prototype = {
        __position: function() {
            this.positions = [];
        },
        get_positions: function() {
            if (this.__dirty) {
                this.__dirty = false;
                this.__position();
            }
            return this.positions;
        },
        get_direction: function() {
            return this.__direction;
        },
        set_direction: function(value) {
            if (value == this.__direction) return value;
            this.__direction = value;
            this.__dirty = true;
            return value;
        },
        set_font: function(value) {
            if (value == this.font) return value;
            this.font = value;
            this.__dirty = true;
            return value;
        },
        get_glyphs: function() {
            var glyphs = [];
            var _g = 0;
            var _g1 = this.get_positions();
            while (_g < _g1.length) {
                var position = _g1[_g]; ++_g;
                glyphs.push(position.glyph);
            }
            return glyphs;
        },
        get_language: function() {
            return this.__language;
        },
        set_language: function(value) {
            if (value == this.__language) return value;
            this.__language = value;
            this.__dirty = true;
            return value;
        },
        get_script: function() {
            return this.__script;
        },
        set_script: function(value) {
            if (value == this.__script) return value;
            this.__script = value;
            this.__dirty = true;
            return value;
        },
        set_size: function(value) {
            if (value == this.size) return value;
            this.size = value;
            this.__dirty = true;
            return value;
        },
        set_text: function(value) {
            if (value == this.text) return value;
            this.text = value;
            this.__dirty = true;
            return value;
        },
        __class__: lime_text_TextLayout,
        __properties__: {
            set_text: "set_text",
            set_size: "set_size",
            set_script: "set_script",
            get_script: "get_script",
            get_positions: "get_positions",
            set_language: "set_language",
            get_language: "get_language",
            get_glyphs: "get_glyphs",
            set_font: "set_font",
            set_direction: "set_direction",
            get_direction: "get_direction"
        }
    };
    var lime_text__$TextScript_TextScript_$Impl_$ = {};
    $hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
    lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime", "text", "_TextScript", "TextScript_Impl_"];
    lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {
        get_rightToLeft: "get_rightToLeft"
    }
    lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
        switch (this1) {
        case "Hebr":
        case "Arab":
        case "Syrc":
        case "Thaa":
        case "Nkoo":
        case "Samr":
        case "Mand":
        case "Armi":
        case "Phnx":
        case "Lydi":
        case "Cprt":
        case "Khar":
        case "Sarb":
        case "Avst":
        case "Phli":
        case "Phlp":
        case "Orkh":
            return true;
        default:
            return false;
        }
    };
    var lime_ui_Gamepad = function(id) {
        this.onDisconnect = new lime_app_Event_$Void_$Void();
        this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
        this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
        this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
        this.id = id;
        this.connected = true;
    };
    $hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
    lime_ui_Gamepad.__name__ = ["lime", "ui", "Gamepad"];
    lime_ui_Gamepad.addMappings = function(mappings) {};
    lime_ui_Gamepad.__connect = function(id) {
        if (!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
            var gamepad = new lime_ui_Gamepad(id);
            lime_ui_Gamepad.devices.h[id] = gamepad;
            lime_ui_Gamepad.onConnect.dispatch(gamepad);
        }
    };
    lime_ui_Gamepad.__disconnect = function(id) {
        var gamepad = lime_ui_Gamepad.devices.h[id];
        if (gamepad != null) gamepad.connected = false;
        lime_ui_Gamepad.devices.remove(id);
        if (gamepad != null) gamepad.onDisconnect.dispatch();
    };
    lime_ui_Gamepad.prototype = {
        get_guid: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id;
        },
        get_name: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id;
        },
        __class__: lime_ui_Gamepad,
        __properties__: {
            get_name: "get_name",
            get_guid: "get_guid"
        }
    };
    var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
    $hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime", "ui", "_GamepadAxis", "GamepadAxis_Impl_"];
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
        switch (this1) {
        case 0:
            return "LEFT_X";
        case 1:
            return "LEFT_Y";
        case 2:
            return "RIGHT_X";
        case 3:
            return "RIGHT_Y";
        case 4:
            return "TRIGGER_LEFT";
        case 5:
            return "TRIGGER_RIGHT";
        default:
            return "UNKNOWN (" + this1 + ")";
        }
    };
    var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
    $hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime", "ui", "_GamepadButton", "GamepadButton_Impl_"];
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
        switch (this1) {
        case 0:
            return "A";
        case 1:
            return "B";
        case 2:
            return "X";
        case 3:
            return "Y";
        case 4:
            return "BACK";
        case 5:
            return "GUIDE";
        case 6:
            return "START";
        case 7:
            return "LEFT_STICK";
        case 8:
            return "RIGHT_STICK";
        case 9:
            return "LEFT_SHOULDER";
        case 10:
            return "RIGHT_SHOULDER";
        case 11:
            return "DPAD_UP";
        case 12:
            return "DPAD_DOWN";
        case 13:
            return "DPAD_LEFT";
        case 14:
            return "DPAD_RIGHT";
        default:
            return "UNKNOWN (" + this1 + ")";
        }
    };
    var lime_ui_Joystick = function(id) {
        this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
        this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
        this.onDisconnect = new lime_app_Event_$Void_$Void();
        this.onButtonUp = new lime_app_Event_$Int_$Void();
        this.onButtonDown = new lime_app_Event_$Int_$Void();
        this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
        this.id = id;
        this.connected = true;
    };
    $hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
    lime_ui_Joystick.__name__ = ["lime", "ui", "Joystick"];
    lime_ui_Joystick.__connect = function(id) {
        if (!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
            var joystick = new lime_ui_Joystick(id);
            lime_ui_Joystick.devices.h[id] = joystick;
            lime_ui_Joystick.onConnect.dispatch(joystick);
        }
    };
    lime_ui_Joystick.__disconnect = function(id) {
        var joystick = lime_ui_Joystick.devices.h[id];
        if (joystick != null) joystick.connected = false;
        lime_ui_Joystick.devices.remove(id);
        if (joystick != null) joystick.onDisconnect.dispatch();
    };
    lime_ui_Joystick.__getDeviceData = function() {
        if (navigator.getGamepads) return navigator.getGamepads();
        else if (navigator.webkitGetGamepads) return navigator.webkitGetGamepads();
        else return null;
    };
    lime_ui_Joystick.prototype = {
        get_guid: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id;
        },
        get_name: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].id;
        },
        get_numAxes: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].axes.length;
        },
        get_numButtons: function() {
            var devices = lime_ui_Joystick.__getDeviceData();
            return devices[this.id].buttons.length;
        },
        get_numHats: function() {
            return 0;
        },
        get_numTrackballs: function() {
            return 0;
        },
        __class__: lime_ui_Joystick,
        __properties__: {
            get_numTrackballs: "get_numTrackballs",
            get_numHats: "get_numHats",
            get_numButtons: "get_numButtons",
            get_numAxes: "get_numAxes",
            get_name: "get_name",
            get_guid: "get_guid"
        }
    };
    var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
    $hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime", "ui", "_JoystickHatPosition", "JoystickHatPosition_Impl_"];
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {
        set_up: "set_up",
        get_up: "get_up",
        set_right: "set_right",
        get_right: "get_right",
        set_left: "set_left",
        get_left: "get_left",
        set_down: "set_down",
        get_down: "get_down",
        set_center: "set_center",
        get_center: "get_center"
    }
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
        return value;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
        return this1 == 0;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1, value) {
        if (value) this1 = 0;
        return value;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
        return (this1 & 4) > 0;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1, value) {
        if (value) this1 |= 4;
        else this1 &= 268435455 - 4;
        return value;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
        return (this1 & 8) > 0;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1, value) {
        if (value) this1 |= 8;
        else this1 &= 268435455 - 8;
        return value;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
        return (this1 & 2) > 0;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1, value) {
        if (value) this1 |= 2;
        else this1 &= 268435455 - 2;
        return value;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
        return (this1 & 1) > 0;
    };
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1, value) {
        if (value) this1 |= 1;
        else this1 &= 268435455 - 1;
        return value;
    };
    var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
    $hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
    lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime", "ui", "_KeyCode", "KeyCode_Impl_"];
    lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a, b) {
        return a > b;
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a, b) {
        return a >= b;
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a, b) {
        return a < b;
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a, b) {
        return a <= b;
    };
    lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a, b) {
        return a + b;
    };
    var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
    $hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime", "ui", "_KeyModifier", "KeyModifier_Impl_"];
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {
        set_shiftKey: "set_shiftKey",
        get_shiftKey: "get_shiftKey",
        set_numLock: "set_numLock",
        get_numLock: "get_numLock",
        set_metaKey: "set_metaKey",
        get_metaKey: "get_metaKey",
        set_ctrlKey: "set_ctrlKey",
        get_ctrlKey: "get_ctrlKey",
        set_capsLock: "set_capsLock",
        get_capsLock: "get_capsLock",
        set_altKey: "set_altKey",
        get_altKey: "get_altKey"
    }
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
        return (this1 & 256) > 0 || (this1 & 512) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1, value) {
        if (value) this1 |= 768;
        else this1 &= 268435455 - 768;
        return value;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
        return (this1 & 8192) > 0 || (this1 & 8192) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1, value) {
        if (value) this1 |= 8192;
        else this1 &= 268435455 - 8192;
        return value;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
        return (this1 & 64) > 0 || (this1 & 128) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1, value) {
        if (value) this1 |= 192;
        else this1 &= 268435455 - 192;
        return value;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
        return (this1 & 1024) > 0 || (this1 & 2048) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1, value) {
        if (value) this1 |= 3072;
        else this1 &= 268435455 - 3072;
        return value;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
        return (this1 & 4096) > 0 || (this1 & 4096) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1, value) {
        if (value) this1 |= 4096;
        else this1 &= 268435455 - 4096;
        return value;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
        return (this1 & 1) > 0 || (this1 & 2) > 0;
    };
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1, value) {
        if (value) this1 |= 3;
        else this1 &= 268435455 - 3;
        return value;
    };
    var lime_ui_Mouse = function() {};
    $hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
    lime_ui_Mouse.__name__ = ["lime", "ui", "Mouse"];
    lime_ui_Mouse.__properties__ = {
        set_lock: "set_lock",
        get_lock: "get_lock",
        set_cursor: "set_cursor",
        get_cursor: "get_cursor"
    }
    lime_ui_Mouse.hide = function() {
        lime__$backend_html5_HTML5Mouse.hide();
    };
    lime_ui_Mouse.show = function() {
        lime__$backend_html5_HTML5Mouse.show();
    };
    lime_ui_Mouse.warp = function(x, y, window) {
        lime__$backend_html5_HTML5Mouse.warp(x, y, window);
    };
    lime_ui_Mouse.get_cursor = function() {
        return lime__$backend_html5_HTML5Mouse.get_cursor();
    };
    lime_ui_Mouse.set_cursor = function(value) {
        return lime__$backend_html5_HTML5Mouse.set_cursor(value);
    };
    lime_ui_Mouse.get_lock = function() {
        return lime__$backend_html5_HTML5Mouse.get_lock();
    };
    lime_ui_Mouse.set_lock = function(value) {
        return lime__$backend_html5_HTML5Mouse.set_lock(value);
    };
    var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = {
        __ename__: ["lime", "ui", "MouseCursor"],
        __constructs__: ["ARROW", "CROSSHAIR", "DEFAULT", "MOVE", "POINTER", "RESIZE_NESW", "RESIZE_NS", "RESIZE_NWSE", "RESIZE_WE", "TEXT", "WAIT", "WAIT_ARROW", "CUSTOM"]
    };
    lime_ui_MouseCursor.ARROW = ["ARROW", 0];
    lime_ui_MouseCursor.ARROW.toString = $estr;
    lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR", 1];
    lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
    lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.DEFAULT = ["DEFAULT", 2];
    lime_ui_MouseCursor.DEFAULT.toString = $estr;
    lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.MOVE = ["MOVE", 3];
    lime_ui_MouseCursor.MOVE.toString = $estr;
    lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.POINTER = ["POINTER", 4];
    lime_ui_MouseCursor.POINTER.toString = $estr;
    lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW", 5];
    lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS", 6];
    lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE", 7];
    lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
    lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE", 8];
    lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
    lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.TEXT = ["TEXT", 9];
    lime_ui_MouseCursor.TEXT.toString = $estr;
    lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.WAIT = ["WAIT", 10];
    lime_ui_MouseCursor.WAIT.toString = $estr;
    lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW", 11];
    lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
    lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
    lime_ui_MouseCursor.CUSTOM = ["CUSTOM", 12];
    lime_ui_MouseCursor.CUSTOM.toString = $estr;
    lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
    var lime_ui_Touch = function(x, y, id, dx, dy, pressure, device) {
        this.x = x;
        this.y = y;
        this.id = id;
        this.dx = dx;
        this.dy = dy;
        this.pressure = pressure;
        this.device = device;
    };
    $hxClasses["lime.ui.Touch"] = lime_ui_Touch;
    lime_ui_Touch.__name__ = ["lime", "ui", "Touch"];
    lime_ui_Touch.prototype = {
        __class__: lime_ui_Touch
    };
    var lime_ui_Window = function(config) {
        this.onTextInput = new lime_app_Event_$String_$Void();
        this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
        this.onRestore = new lime_app_Event_$Void_$Void();
        this.onResize = new lime_app_Event_$Int_$Int_$Void();
        this.onMove = new lime_app_Event_$Float_$Float_$Void();
        this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
        this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
        this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
        this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
        this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
        this.onMinimize = new lime_app_Event_$Void_$Void();
        this.onLeave = new lime_app_Event_$Void_$Void();
        this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
        this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
        this.onFullscreen = new lime_app_Event_$Void_$Void();
        this.onFocusOut = new lime_app_Event_$Void_$Void();
        this.onFocusIn = new lime_app_Event_$Void_$Void();
        this.onEnter = new lime_app_Event_$Void_$Void();
        this.onDropFile = new lime_app_Event_$String_$Void();
        this.onDeactivate = new lime_app_Event_$Void_$Void();
        this.onCreate = new lime_app_Event_$Void_$Void();
        this.onClose = new lime_app_Event_$Void_$Void();
        this.onActivate = new lime_app_Event_$Void_$Void();
        this.config = config;
        this.__width = 0;
        this.__height = 0;
        this.__fullscreen = false;
        this.__scale = 1;
        this.__x = 0;
        this.__y = 0;
        this.__title = "";
        this.id = -1;
        if (config != null) {
            if (Object.prototype.hasOwnProperty.call(config, "width")) this.__width = config.width;
            if (Object.prototype.hasOwnProperty.call(config, "height")) this.__height = config.height;
            if (Object.prototype.hasOwnProperty.call(config, "x")) this.__x = config.x;
            if (Object.prototype.hasOwnProperty.call(config, "y")) this.__y = config.y;
            if (Object.prototype.hasOwnProperty.call(config, "fullscreen")) this.__fullscreen = config.fullscreen;
            if (Object.prototype.hasOwnProperty.call(config, "borderless")) this.__borderless = config.borderless;
            if (Object.prototype.hasOwnProperty.call(config, "resizable")) this.__resizable = config.resizable;
            if (Object.prototype.hasOwnProperty.call(config, "title")) this.__title = config.title;
        }
        this.backend = new lime__$backend_html5_HTML5Window(this);
    };
    $hxClasses["lime.ui.Window"] = lime_ui_Window;
    lime_ui_Window.__name__ = ["lime", "ui", "Window"];
    lime_ui_Window.prototype = {
        alert: function(message, title) {
            this.backend.alert(message, title);
        },
        close: function() {
            this.backend.close();
        },
        create: function(application) {
            this.application = application;
            this.backend.create(application);
            if (this.renderer != null) this.renderer.create();
        },
        focus: function() {
            this.backend.focus();
        },
        move: function(x, y) {
            this.backend.move(x, y);
            this.__x = x;
            this.__y = y;
        },
        resize: function(width, height) {
            this.backend.resize(width, height);
            this.__width = width;
            this.__height = height;
        },
        setIcon: function(image) {
            if (image == null) return;
            this.backend.setIcon(image);
        },
        toString: function() {
            return "[object Window]";
        },
        get_display: function() {
            return this.backend.getDisplay();
        },
        get_borderless: function() {
            return this.__borderless;
        },
        set_borderless: function(value) {
            return this.__borderless = this.backend.setBorderless(value);
        },
        get_enableTextEvents: function() {
            return this.backend.getEnableTextEvents();
        },
        set_enableTextEvents: function(value) {
            return this.backend.setEnableTextEvents(value);
        },
        get_fullscreen: function() {
            return this.__fullscreen;
        },
        set_fullscreen: function(value) {
            return this.__fullscreen = this.backend.setFullscreen(value);
        },
        get_height: function() {
            return this.__height;
        },
        set_height: function(value) {
            this.resize(this.__width, value);
            return this.__height;
        },
        get_maximized: function() {
            return this.__maximized;
        },
        set_maximized: function(value) {
            this.__minimized = false;
            return this.__maximized = this.backend.setMaximized(value);
        },
        get_minimized: function() {
            return this.__minimized;
        },
        set_minimized: function(value) {
            this.__maximized = false;
            return this.__minimized = this.backend.setMinimized(value);
        },
        get_resizable: function() {
            return this.__resizable;
        },
        set_resizable: function(value) {
            this.__resizable = this.backend.setResizable(value);
            return this.__resizable;
        },
        get_scale: function() {
            return this.__scale;
        },
        get_title: function() {
            return this.__title;
        },
        set_title: function(value) {
            return this.__title = this.backend.setTitle(this.__title);
        },
        get_width: function() {
            return this.__width;
        },
        set_width: function(value) {
            this.resize(value, this.__height);
            return this.__width;
        },
        get_x: function() {
            return this.__x;
        },
        set_x: function(value) {
            this.move(value, this.__y);
            return this.__x;
        },
        get_y: function() {
            return this.__y;
        },
        set_y: function(value) {
            this.move(this.__x, value);
            return this.__y;
        },
        __class__: lime_ui_Window,
        __properties__: {
            set_y: "set_y",
            get_y: "get_y",
            set_x: "set_x",
            get_x: "get_x",
            set_width: "set_width",
            get_width: "get_width",
            set_title: "set_title",
            get_title: "get_title",
            get_scale: "get_scale",
            set_resizable: "set_resizable",
            get_resizable: "get_resizable",
            set_minimized: "set_minimized",
            get_minimized: "get_minimized",
            set_maximized: "set_maximized",
            get_maximized: "get_maximized",
            set_height: "set_height",
            get_height: "get_height",
            set_fullscreen: "set_fullscreen",
            get_fullscreen: "get_fullscreen",
            set_enableTextEvents: "set_enableTextEvents",
            get_enableTextEvents: "get_enableTextEvents",
            get_display: "get_display",
            set_borderless: "set_borderless",
            get_borderless: "get_borderless"
        }
    };
    var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = {
        __ename__: ["lime", "utils", "TAError"],
        __constructs__: ["RangeError"]
    };
    lime_utils_TAError.RangeError = ["RangeError", 0];
    lime_utils_TAError.RangeError.toString = $estr;
    lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
    var lime_utils_Bytes = function(length, bytesData) {
        haxe_io_Bytes.call(this, bytesData);
    };
    $hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
    lime_utils_Bytes.__name__ = ["lime", "utils", "Bytes"];
    lime_utils_Bytes.alloc = function(length) {
        var bytes = haxe_io_Bytes.alloc(length);
        return new lime_utils_Bytes(bytes.length, bytes.b.bufferValue);
    };
    lime_utils_Bytes.fastGet = function(b, pos) {
        return b.bytes[pos];
    };
    lime_utils_Bytes.ofData = function(b) {
        var bytes = haxe_io_Bytes.ofData(b);
        return new lime_utils_Bytes(bytes.length, bytes.b.bufferValue);
    };
    lime_utils_Bytes.ofString = function(s) {
        var bytes = haxe_io_Bytes.ofString(s);
        return new lime_utils_Bytes(bytes.length, bytes.b.bufferValue);
    };
    lime_utils_Bytes.readFile = function(path) {
        return null;
    };
    lime_utils_Bytes.lime_bytes_from_data_pointer = function(data, length) {
        return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data, length);
    };
    lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
        return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
    };
    lime_utils_Bytes.lime_bytes_read_file = function(path) {
        return lime_utils_Bytes.cffi_lime_bytes_read_file(path);
    };
    lime_utils_Bytes.__super__ = haxe_io_Bytes;
    lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype, {
        __class__: lime_utils_Bytes
    });
    var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
    $hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
    lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime", "utils", "_Float32Array", "Float32Array_Impl_"];
    lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) byteOffset = 0;
        if (byteOffset == null) return new Float32Array(bytes.b.bufferValue);
        if (len == null) return new Float32Array(bytes.b.bufferValue, byteOffset);
        return new Float32Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(new Uint8Array(this1.buffer));
    };
    lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var lime_utils_GLUtils = function() {};
    $hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
    lime_utils_GLUtils.__name__ = ["lime", "utils", "GLUtils"];
    lime_utils_GLUtils.compileShader = function(source, type) {
        var shader = lime_graphics_opengl_GL.context.createShader(type);
        lime_graphics_opengl_GL.context.shaderSource(shader, source);
        lime_graphics_opengl_GL.context.compileShader(shader);
        if (lime_graphics_opengl_GL.context.getShaderParameter(shader, 35713) == 0) switch (type) {
        case 35633:
            throw new js__$Boot_HaxeError("Error compiling vertex shader");
            break;
        case 35632:
            throw new js__$Boot_HaxeError("Error compiling fragment shader");
            break;
        default:
            throw new js__$Boot_HaxeError("Error compiling unknown shader type");
        }
        return shader;
    };
    lime_utils_GLUtils.createProgram = function(vertexSource, fragmentSource) {
        var vertexShader = lime_utils_GLUtils.compileShader(vertexSource, 35633);
        var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource, 35632);
        var program = lime_graphics_opengl_GL.context.createProgram();
        lime_graphics_opengl_GL.context.attachShader(program, vertexShader);
        lime_graphics_opengl_GL.context.attachShader(program, fragmentShader);
        lime_graphics_opengl_GL.context.linkProgram(program);
        if (lime_graphics_opengl_GL.context.getProgramParameter(program, 35714) == 0) throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
        return program;
    };
    var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
    $hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
    lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime", "utils", "_Int16Array", "Int16Array_Impl_"];
    lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) byteOffset = 0;
        if (byteOffset == null) return new Int16Array(bytes.b.bufferValue);
        if (len == null) return new Int16Array(bytes.b.bufferValue, byteOffset);
        return new Int16Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(new Uint8Array(this1.buffer));
    };
    lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
    $hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
    lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime", "utils", "_Int32Array", "Int32Array_Impl_"];
    lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) byteOffset = 0;
        if (byteOffset == null) return new Int32Array(bytes.b.bufferValue);
        if (len == null) return new Int32Array(bytes.b.bufferValue, byteOffset);
        return new Int32Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(new Uint8Array(this1.buffer));
    };
    lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var lime_utils_LZMA = function() {};
    $hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
    lime_utils_LZMA.__name__ = ["lime", "utils", "LZMA"];
    lime_utils_LZMA.decode = function(bytes) {
        return null;
    };
    lime_utils_LZMA.encode = function(bytes) {
        return null;
    };
    var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
    $hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime", "utils", "_UInt16Array", "UInt16Array_Impl_"];
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) byteOffset = 0;
        if (byteOffset == null) return new Uint16Array(bytes.b.bufferValue);
        if (len == null) return new Uint16Array(bytes.b.bufferValue, byteOffset);
        return new Uint16Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(new Uint8Array(this1.buffer));
    };
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
    $hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime", "utils", "_UInt32Array", "UInt32Array_Impl_"];
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) byteOffset = 0;
        if (byteOffset == null) return new Uint32Array(bytes.b.bufferValue);
        if (len == null) return new Uint32Array(bytes.b.bufferValue, byteOffset);
        return new Uint32Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(new Uint8Array(this1.buffer));
    };
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
    $hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime", "utils", "_UInt8Array", "UInt8Array_Impl_"];
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1, idx, val) {
        return this1[idx] = val;
    };
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1, idx) {
        return this1[idx];
    };
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes, byteOffset, len) {
        if (byteOffset == null) return new Uint8Array(bytes.b.bufferValue);
        if (len == null) return new Uint8Array(bytes.b.bufferValue, byteOffset);
        return new Uint8Array(bytes.b.bufferValue, byteOffset, len);
    };
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
        return new haxe_io_Bytes(this1.buffer);
    };
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
        if (this1 != null) return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
        else return null;
    };
    var openfl_IAssetCache = function() {};
    $hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
    openfl_IAssetCache.__name__ = ["openfl", "IAssetCache"];
    openfl_IAssetCache.prototype = {
        __class__: openfl_IAssetCache,
        __properties__: {
            set_enabled: "set_enabled",
            get_enabled: "get_enabled"
        }
    };
    var openfl_AssetCache = function() {
        this.__enabled = true;
        this.bitmapData = new haxe_ds_StringMap();
        this.font = new haxe_ds_StringMap();
        this.sound = new haxe_ds_StringMap();
    };
    $hxClasses["openfl.AssetCache"] = openfl_AssetCache;
    openfl_AssetCache.__name__ = ["openfl", "AssetCache"];
    openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
    openfl_AssetCache.prototype = {
        clear: function(prefix) {
            if (prefix == null) {
                this.bitmapData = new haxe_ds_StringMap();
                this.font = new haxe_ds_StringMap();
                this.sound = new haxe_ds_StringMap();
            } else {
                var keys = this.bitmapData.keys();
                while (keys.hasNext()) {
                    var key = keys.next();
                    if (StringTools.startsWith(key, prefix)) this.bitmapData.remove(key);
                }
                var keys1 = this.font.keys();
                while (keys1.hasNext()) {
                    var key1 = keys1.next();
                    if (StringTools.startsWith(key1, prefix)) this.font.remove(key1);
                }
                var keys2 = this.sound.keys();
                while (keys2.hasNext()) {
                    var key2 = keys2.next();
                    if (StringTools.startsWith(key2, prefix)) this.sound.remove(key2);
                }
            }
        },
        getBitmapData: function(id) {
            return this.bitmapData.get(id);
        },
        getFont: function(id) {
            return this.font.get(id);
        },
        getSound: function(id) {
            return this.sound.get(id);
        },
        hasBitmapData: function(id) {
            return this.bitmapData.exists(id);
        },
        hasFont: function(id) {
            return this.font.exists(id);
        },
        hasSound: function(id) {
            return this.sound.exists(id);
        },
        removeBitmapData: function(id) {
            return this.bitmapData.remove(id);
        },
        removeFont: function(id) {
            return this.font.remove(id);
        },
        removeSound: function(id) {
            return this.sound.remove(id);
        },
        setBitmapData: function(id, bitmapData) {
            this.bitmapData.set(id, bitmapData);
        },
        setFont: function(id, font) {
            this.font.set(id, font);
        },
        setSound: function(id, sound) {
            this.sound.set(id, sound);
        },
        get_enabled: function() {
            return this.__enabled;
        },
        set_enabled: function(value) {
            return this.__enabled = value;
        },
        __class__: openfl_AssetCache,
        __properties__: {
            set_enabled: "set_enabled",
            get_enabled: "get_enabled"
        }
    };
    var openfl_Assets = function() {};
    $hxClasses["openfl.Assets"] = openfl_Assets;
    openfl_Assets.__name__ = ["openfl", "Assets"];
    openfl_Assets.addEventListener = function(type, listener, useCapture, priority, useWeakReference) {
        if (useWeakReference == null) useWeakReference = false;
        if (priority == null) priority = 0;
        if (useCapture == null) useCapture = false;
        if (!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
        openfl_Assets.dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);
    };
    openfl_Assets.dispatchEvent = function(event) {
        return openfl_Assets.dispatcher.dispatchEvent(event);
    };
    openfl_Assets.exists = function(id, type) {
        return lime_Assets.exists(id, type);
    };
    openfl_Assets.getBitmapData = function(id, useCache) {
        if (useCache == null) useCache = true;
        if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
            var bitmapData = openfl_Assets.cache.getBitmapData(id);
            if (openfl_Assets.isValidBitmapData(bitmapData)) return bitmapData;
        }
        var image = lime_Assets.getImage(id, false);
        if (image != null) {
            var bitmapData1 = openfl_display_BitmapData.fromImage(image);
            if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id, bitmapData1);
            return bitmapData1;
        }
        return null;
    };
    openfl_Assets.getBytes = function(id) {
        return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
    };
    openfl_Assets.getFont = function(id, useCache) {
        if (useCache == null) useCache = true;
        if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) return openfl_Assets.cache.getFont(id);
        var limeFont = lime_Assets.getFont(id, false);
        if (limeFont != null) {
            var font = openfl_text_Font.__fromLimeFont(limeFont);
            if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id, font);
            return font;
        }
        return new openfl_text_Font();
    };
    openfl_Assets.getLibrary = function(name) {
        return lime_Assets.getLibrary(name);
    };
    openfl_Assets.getMovieClip = function(id) {
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = openfl_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "MOVIE_CLIP")) {
                if (library.isLocal(symbolName, "MOVIE_CLIP")) return library.getMovieClip(symbolName);
                else haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously", {
                    fileName: "Assets.hx",
                    lineNumber: 223,
                    className: "openfl.Assets",
                    methodName: "getMovieClip"
                });
            } else haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"", {
                fileName: "Assets.hx",
                lineNumber: 229,
                className: "openfl.Assets",
                methodName: "getMovieClip"
            });
        } else haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"", {
            fileName: "Assets.hx",
            lineNumber: 235,
            className: "openfl.Assets",
            methodName: "getMovieClip"
        });
        return null;
    };
    openfl_Assets.getMusic = function(id, useCache) {
        if (useCache == null) useCache = true;
        var path = lime_Assets.getPath(id);
        if (path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
        return null;
    };
    openfl_Assets.getPath = function(id) {
        return lime_Assets.getPath(id);
    };
    openfl_Assets.getSound = function(id, useCache) {
        if (useCache == null) useCache = true;
        if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
            var sound = openfl_Assets.cache.getSound(id);
            if (openfl_Assets.isValidSound(sound)) return sound;
        }
        var path = lime_Assets.getPath(id);
        if (path != null) return new openfl_media_Sound(new openfl_net_URLRequest(path));
        return null;
    };
    openfl_Assets.getText = function(id) {
        return lime_Assets.getText(id);
    };
    openfl_Assets.hasEventListener = function(type) {
        return openfl_Assets.dispatcher.hasEventListener(type);
    };
    openfl_Assets.isLocal = function(id, type, useCache) {
        if (useCache == null) useCache = true;
        if (useCache && openfl_Assets.cache.get_enabled()) {
            if (type == "IMAGE" || type == null) {
                if (openfl_Assets.cache.hasBitmapData(id)) return true;
            }
            if (type == "FONT" || type == null) {
                if (openfl_Assets.cache.hasFont(id)) return true;
            }
            if (type == "SOUND" || type == "MUSIC" || type == null) {
                if (openfl_Assets.cache.hasSound(id)) return true;
            }
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = openfl_Assets.getLibrary(libraryName);
        if (library != null) return library.isLocal(symbolName, type);
        return false;
    };
    openfl_Assets.isValidBitmapData = function(bitmapData) {
        return bitmapData != null && bitmapData.image != null;
    };
    openfl_Assets.isValidSound = function(sound) {
        return true;
    };
    openfl_Assets.list = function(type) {
        return lime_Assets.list(type);
    };
    openfl_Assets.loadBitmapData = function(id, useCache, handler) {
        if (useCache == null) useCache = true;
        if (useCache == null) useCache = true;
        var promise = new lime_app_Promise();
        if (handler != null) {
            promise.future.onComplete(handler);
            promise.future.onError(function(_) {
                handler(null);
            });
        }
        if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
            var bitmapData = openfl_Assets.cache.getBitmapData(id);
            if (openfl_Assets.isValidBitmapData(bitmapData)) {
                promise.complete(bitmapData);
                return promise.future;
            }
        }
        lime_Assets.loadImage(id, false).onComplete(function(image) {
            if (image != null) {
                var bitmapData1 = openfl_display_BitmapData.fromImage(image);
                if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setBitmapData(id, bitmapData1);
                promise.complete(bitmapData1);
            } else promise.error("[Assets] Could not load Image \"" + id + "\"");
        }).onError($bind(promise, promise.error)).onProgress($bind(promise, promise.progress));
        return promise.future;
    };
    openfl_Assets.loadBytes = function(id, handler) {
        var promise = new lime_app_Promise();
        var future = lime_Assets.loadBytes(id);
        if (handler != null) {
            promise.future.onComplete(handler);
            promise.future.onError(function(_) {
                handler(null);
            });
            future.onComplete(function(bytes) {
                promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
            });
            future.onProgress(function(progress) {
                promise.progress(progress);
            });
            future.onError(function(msg) {
                promise.error(msg);
            });
        }
        return promise.future;
    };
    openfl_Assets.loadFont = function(id, useCache, handler) {
        if (useCache == null) useCache = true;
        if (useCache == null) useCache = true;
        var promise = new lime_app_Promise();
        if (handler != null) {
            promise.future.onComplete(handler);
            promise.future.onError(function(_) {
                handler(null);
            });
        }
        if (useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
            promise.complete(openfl_Assets.cache.getFont(id));
            return promise.future;
        }
        lime_Assets.loadFont(id).onComplete(function(limeFont) {
            var font = openfl_text_Font.__fromLimeFont(limeFont);
            if (useCache && openfl_Assets.cache.get_enabled()) openfl_Assets.cache.setFont(id, font);
            promise.complete(font);
        }).onError($bind(promise, promise.error)).onProgress($bind(promise, promise.progress));
        return promise.future;
    };
    openfl_Assets.loadLibrary = function(name, handler) {
        var future = lime_Assets.loadLibrary(name);
        if (handler != null) {
            future.onComplete(handler);
            future.onError(function(_) {
                handler(null);
            });
        }
        return future;
    };
    openfl_Assets.loadMusic = function(id, useCache, handler) {
        if (useCache == null) useCache = true;
        if (useCache == null) useCache = true;
        return new lime_app_Future(function() {
            return openfl_Assets.getMusic(id, useCache);
        });
    };
    openfl_Assets.loadMovieClip = function(id, handler) {
        var promise = new lime_app_Promise();
        if (handler != null) {
            promise.future.onComplete(handler);
            promise.future.onError(function(_) {
                handler(null);
            });
        }
        var libraryName = id.substring(0, id.indexOf(":"));
        var symbolName;
        var pos = id.indexOf(":") + 1;
        symbolName = HxOverrides.substr(id, pos, null);
        var library = openfl_Assets.getLibrary(libraryName);
        if (library != null) {
            if (library.exists(symbolName, "MOVIE_CLIP")) promise.completeWith(library.loadMovieClip(symbolName));
            else promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
        } else promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
        return promise.future;
    };
    openfl_Assets.loadSound = function(id, useCache, handler) {
        if (useCache == null) useCache = true;
        if (useCache == null) useCache = true;
        return new lime_app_Future(function() {
            return openfl_Assets.getSound(id, useCache);
        });
    };
    openfl_Assets.loadText = function(id, handler) {
        var future = lime_Assets.loadText(id);
        if (handler != null) {
            future.onComplete(handler);
            future.onError(function(_) {
                handler(null);
            });
        }
        return future;
    };
    openfl_Assets.registerLibrary = function(name, library) {
        lime_Assets.registerLibrary(name, library);
    };
    openfl_Assets.removeEventListener = function(type, listener, capture) {
        if (capture == null) capture = false;
        openfl_Assets.dispatcher.removeEventListener(type, listener, capture);
    };
    openfl_Assets.resolveClass = function(name) {
        return Type.resolveClass(name);
    };
    openfl_Assets.resolveEnum = function(name) {
        var value = Type.resolveEnum(name);
        return value;
    };
    openfl_Assets.unloadLibrary = function(name) {
        lime_Assets.unloadLibrary(name);
    };
    openfl_Assets.LimeAssets_onChange = function() {
        openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
    };
    var openfl_AssetLibrary = function() {
        lime_AssetLibrary.call(this);
    };
    $hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
    openfl_AssetLibrary.__name__ = ["openfl", "AssetLibrary"];
    openfl_AssetLibrary.__super__ = lime_AssetLibrary;
    openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype, {
        getMovieClip: function(id) {
            return null;
        },
        loadMovieClip: function(id) {
            var _g = this;
            return new lime_app_Future(function() {
                return _g.getMovieClip(id);
            });
        },
        __class__: openfl_AssetLibrary
    });
    var openfl_display_MovieClip = function() {
        openfl_display_Sprite.call(this);
        this.__currentFrame = 0;
        this.__currentLabels = [];
        this.__totalFrames = 0;
        this.enabled = true;
    };
    $hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
    openfl_display_MovieClip.__name__ = ["openfl", "display", "MovieClip"];
    openfl_display_MovieClip.__super__ = openfl_display_Sprite;
    openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype, {
        addFrameScript: function(index, method) {
            if (method != null) {
                if (this.__frameScripts == null) this.__frameScripts = new haxe_ds_IntMap();
                this.__frameScripts.h[index] = method;
            } else if (this.__frameScripts != null) this.__frameScripts.remove(index);
        },
        gotoAndPlay: function(frame, scene) {},
        gotoAndStop: function(frame, scene) {},
        nextFrame: function() {},
        play: function() {},
        prevFrame: function() {},
        stop: function() {},
        get_currentFrame: function() {
            return this.__currentFrame;
        },
        get_currentFrameLabel: function() {
            return this.__currentFrameLabel;
        },
        get_currentLabel: function() {
            return this.__currentLabel;
        },
        get_currentLabels: function() {
            return this.__currentLabels;
        },
        get_framesLoaded: function() {
            return this.__totalFrames;
        },
        get_totalFrames: function() {
            return this.__totalFrames;
        },
        __class__: openfl_display_MovieClip,
        __properties__: $extend(openfl_display_Sprite.prototype.__properties__, {
            get_totalFrames: "get_totalFrames",
            get_framesLoaded: "get_framesLoaded",
            get_currentLabels: "get_currentLabels",
            get_currentLabel: "get_currentLabel",
            get_currentFrameLabel: "get_currentFrameLabel",
            get_currentFrame: "get_currentFrame"
        })
    });
    var openfl_display_LoaderInfo = function() {
        openfl_events_EventDispatcher.call(this);
        this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
        this.bytesLoaded = 0;
        this.bytesTotal = 0;
        this.childAllowsParent = true;
        this.parameters = {};
    };
    $hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
    openfl_display_LoaderInfo.__name__ = ["openfl", "display", "LoaderInfo"];
    openfl_display_LoaderInfo.create = function(loader) {
        var loaderInfo = new openfl_display_LoaderInfo();
        loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
        if (loader != null) loaderInfo.loader = loader;
        else loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
        return loaderInfo;
    };
    openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
    openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        __class__: openfl_display_LoaderInfo
    });
    var openfl_system_ApplicationDomain = function(parentDomain) {
        if (parentDomain != null) this.parentDomain = parentDomain;
        else this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
    };
    $hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
    openfl_system_ApplicationDomain.__name__ = ["openfl", "system", "ApplicationDomain"];
    openfl_system_ApplicationDomain.prototype = {
        getDefinition: function(name) {
            return Type.resolveClass(name);
        },
        hasDefinition: function(name) {
            return Type.resolveClass(name) != null;
        },
        __class__: openfl_system_ApplicationDomain
    };
    var openfl_events_UncaughtErrorEvents = function() {
        openfl_events_EventDispatcher.call(this);
    };
    $hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
    openfl_events_UncaughtErrorEvents.__name__ = ["openfl", "events", "UncaughtErrorEvents"];
    openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
    openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        __class__: openfl_events_UncaughtErrorEvents
    });
    var openfl_geom_Matrix = function(a, b, c, d, tx, ty) {
        if (ty == null) ty = 0;
        if (tx == null) tx = 0;
        if (d == null) d = 1;
        if (c == null) c = 0;
        if (b == null) b = 0;
        if (a == null) a = 1;
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = tx;
        this.ty = ty;
    };
    $hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
    openfl_geom_Matrix.__name__ = ["openfl", "geom", "Matrix"];
    openfl_geom_Matrix.prototype = {
        clone: function() {
            return new openfl_geom_Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);
        },
        concat: function(m) {
            var a1 = this.a * m.a + this.b * m.c;
            this.b = this.a * m.b + this.b * m.d;
            this.a = a1;
            var c1 = this.c * m.a + this.d * m.c;
            this.d = this.c * m.b + this.d * m.d;
            this.c = c1;
            var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
            this.ty = this.tx * m.b + this.ty * m.d + m.ty;
            this.tx = tx1;
        },
        copyColumnFrom: function(column, vector3D) {
            if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
            else if (column == 0) {
                this.a = vector3D.x;
                this.c = vector3D.y;
            } else if (column == 1) {
                this.b = vector3D.x;
                this.d = vector3D.y;
            } else {
                this.tx = vector3D.x;
                this.ty = vector3D.y;
            }
        },
        copyColumnTo: function(column, vector3D) {
            if (column > 2) throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
            else if (column == 0) {
                vector3D.x = this.a;
                vector3D.y = this.c;
                vector3D.z = 0;
            } else if (column == 1) {
                vector3D.x = this.b;
                vector3D.y = this.d;
                vector3D.z = 0;
            } else {
                vector3D.x = this.tx;
                vector3D.y = this.ty;
                vector3D.z = 1;
            }
        },
        copyFrom: function(sourceMatrix) {
            this.a = sourceMatrix.a;
            this.b = sourceMatrix.b;
            this.c = sourceMatrix.c;
            this.d = sourceMatrix.d;
            this.tx = sourceMatrix.tx;
            this.ty = sourceMatrix.ty;
        },
        copyRowFrom: function(row, vector3D) {
            if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
            else if (row == 0) {
                this.a = vector3D.x;
                this.c = vector3D.y;
            } else if (row == 1) {
                this.b = vector3D.x;
                this.d = vector3D.y;
            } else {
                this.tx = vector3D.x;
                this.ty = vector3D.y;
            }
        },
        copyRowTo: function(row, vector3D) {
            if (row > 2) throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
            else if (row == 0) {
                vector3D.x = this.a;
                vector3D.y = this.b;
                vector3D.z = this.tx;
            } else if (row == 1) {
                vector3D.x = this.c;
                vector3D.y = this.d;
                vector3D.z = this.ty;
            } else vector3D.setTo(0, 0, 1);
        },
        createBox: function(scaleX, scaleY, rotation, tx, ty) {
            if (ty == null) ty = 0;
            if (tx == null) tx = 0;
            if (rotation == null) rotation = 0;
            if (rotation != 0) {
                var cos = Math.cos(rotation);
                var sin = Math.sin(rotation);
                this.a = cos * scaleX;
                this.b = sin * scaleY;
                this.c = -sin * scaleX;
                this.d = cos * scaleY;
            } else {
                this.a = scaleX;
                this.b = 0;
                this.c = 0;
                this.d = scaleY;
            }
            this.tx = tx;
            this.ty = ty;
        },
        createGradientBox: function(width, height, rotation, tx, ty) {
            if (ty == null) ty = 0;
            if (tx == null) tx = 0;
            if (rotation == null) rotation = 0;
            this.a = width / 1638.4;
            this.d = height / 1638.4;
            if (rotation != 0) {
                var cos = Math.cos(rotation);
                var sin = Math.sin(rotation);
                this.b = sin * this.d;
                this.c = -sin * this.a;
                this.a *= cos;
                this.d *= cos;
            } else {
                this.b = 0;
                this.c = 0;
            }
            this.tx = tx + width / 2;
            this.ty = ty + height / 2;
        },
        deltaTransformPoint: function(point) {
            return new openfl_geom_Point(point.x * this.a + point.y * this.c, point.x * this.b + point.y * this.d);
        },
        equals: function(matrix) {
            return matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c && this.d == matrix.d;
        },
        identity: function() {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.tx = 0;
            this.ty = 0;
        },
        invert: function() {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) {
                this.a = this.b = this.c = this.d = 0;
                this.tx = -this.tx;
                this.ty = -this.ty;
            } else {
                norm = 1.0 / norm;
                var a1 = this.d * norm;
                this.d = this.a * norm;
                this.a = a1;
                this.b *= -norm;
                this.c *= -norm;
                var tx1 = -this.a * this.tx - this.c * this.ty;
                this.ty = -this.b * this.tx - this.d * this.ty;
                this.tx = tx1;
            }
            return this;
        },
        rotate: function(theta) {
            var cos = Math.cos(theta);
            var sin = Math.sin(theta);
            var a1 = this.a * cos - this.b * sin;
            this.b = this.a * sin + this.b * cos;
            this.a = a1;
            var c1 = this.c * cos - this.d * sin;
            this.d = this.c * sin + this.d * cos;
            this.c = c1;
            var tx1 = this.tx * cos - this.ty * sin;
            this.ty = this.tx * sin + this.ty * cos;
            this.tx = tx1;
        },
        scale: function(sx, sy) {
            this.a *= sx;
            this.b *= sy;
            this.c *= sx;
            this.d *= sy;
            this.tx *= sx;
            this.ty *= sy;
        },
        setRotation: function(theta, scale) {
            if (scale == null) scale = 1;
            this.a = Math.cos(theta) * scale;
            this.c = Math.sin(theta) * scale;
            this.b = -this.c;
            this.d = this.a;
        },
        setTo: function(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        },
        to3DString: function(roundPixels) {
            if (roundPixels == null) roundPixels = false;
            if (roundPixels) return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
            else return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
        },
        toMozString: function() {
            return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
        },
        toString: function() {
            return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
        },
        transformPoint: function(pos) {
            return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx, pos.x * this.b + pos.y * this.d + this.ty);
        },
        translate: function(dx, dy) {
            this.tx += dx;
            this.ty += dy;
        },
        toArray: function(transpose) {
            if (transpose == null) transpose = false;
            if (this.__array == null) {
                var this1;
                this1 = new Float32Array(9);
                this.__array = this1;
            }
            if (transpose) {
                this.__array[0] = this.a;
                this.__array[1] = this.b;
                this.__array[2] = 0;
                this.__array[3] = this.c;
                this.__array[4] = this.d;
                this.__array[5] = 0;
                this.__array[6] = this.tx;
                this.__array[7] = this.ty;
                this.__array[8] = 1;
            } else {
                this.__array[0] = this.a;
                this.__array[1] = this.c;
                this.__array[2] = this.tx;
                this.__array[3] = this.b;
                this.__array[4] = this.d;
                this.__array[5] = this.ty;
                this.__array[6] = 0;
                this.__array[7] = 0;
                this.__array[8] = 1;
            }
            return this.__array;
        },
        __cleanValues: function() {
            this.a = Math.round(this.a * 1000) / 1000;
            this.b = Math.round(this.b * 1000) / 1000;
            this.c = Math.round(this.c * 1000) / 1000;
            this.d = Math.round(this.d * 1000) / 1000;
            this.tx = Math.round(this.tx * 10) / 10;
            this.ty = Math.round(this.ty * 10) / 10;
        },
        __toMatrix3: function() {
            return new lime_math_Matrix3(this.a, this.b, this.c, this.d, this.tx, this.ty);
        },
        __transformInversePoint: function(point) {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) {
                point.x = -this.tx;
                point.y = -this.ty;
            } else {
                var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
                point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
                point.x = px;
            }
        },
        __transformInverseX: function(px, py) {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) return - this.tx;
            else return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
        },
        __transformInverseY: function(px, py) {
            var norm = this.a * this.d - this.b * this.c;
            if (norm == 0) return - this.ty;
            else return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
        },
        __transformPoint: function(point) {
            var px = point.x;
            var py = point.y;
            point.x = px * this.a + py * this.c + this.tx;
            point.y = px * this.b + py * this.d + this.ty;
        },
        __transformX: function(px, py) {
            return px * this.a + py * this.c + this.tx;
        },
        __transformY: function(px, py) {
            return px * this.b + py * this.d + this.ty;
        },
        __translateTransformed: function(px, py) {
            this.tx = px * this.a + py * this.c + this.tx;
            this.ty = px * this.b + py * this.d + this.ty;
        },
        __class__: openfl_geom_Matrix
    };
    var openfl_geom_ColorTransform = function(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
        if (alphaOffset == null) alphaOffset = 0;
        if (blueOffset == null) blueOffset = 0;
        if (greenOffset == null) greenOffset = 0;
        if (redOffset == null) redOffset = 0;
        if (alphaMultiplier == null) alphaMultiplier = 1;
        if (blueMultiplier == null) blueMultiplier = 1;
        if (greenMultiplier == null) greenMultiplier = 1;
        if (redMultiplier == null) redMultiplier = 1;
        this.redMultiplier = redMultiplier;
        this.greenMultiplier = greenMultiplier;
        this.blueMultiplier = blueMultiplier;
        this.alphaMultiplier = alphaMultiplier;
        this.redOffset = redOffset;
        this.greenOffset = greenOffset;
        this.blueOffset = blueOffset;
        this.alphaOffset = alphaOffset;
    };
    $hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
    openfl_geom_ColorTransform.__name__ = ["openfl", "geom", "ColorTransform"];
    openfl_geom_ColorTransform.prototype = {
        concat: function(second) {
            this.redMultiplier *= second.redMultiplier;
            this.greenMultiplier *= second.greenMultiplier;
            this.blueMultiplier *= second.blueMultiplier;
            this.alphaMultiplier *= second.alphaMultiplier;
            this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
            this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
            this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
            this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
        },
        toString: function() {
            return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
        },
        __clone: function() {
            return new openfl_geom_ColorTransform(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset);
        },
        __combine: function(ct) {
            this.redMultiplier *= ct.redMultiplier;
            this.greenMultiplier *= ct.greenMultiplier;
            this.blueMultiplier *= ct.blueMultiplier;
            this.alphaMultiplier *= ct.alphaMultiplier;
            this.redOffset += ct.redOffset;
            this.greenOffset += ct.greenOffset;
            this.blueOffset += ct.blueOffset;
            this.alphaOffset += ct.alphaOffset;
        },
        __equals: function(ct, skipAlphaMultiplier) {
            if (skipAlphaMultiplier == null) skipAlphaMultiplier = false;
            return ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset && this.alphaOffset == ct.alphaOffset;
        },
        __isDefault: function() {
            return this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0 && this.alphaOffset == 0;
        },
        get_color: function() {
            return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
        },
        set_color: function(value) {
            this.redOffset = value >> 16 & 255;
            this.greenOffset = value >> 8 & 255;
            this.blueOffset = value & 255;
            this.redMultiplier = 0;
            this.greenMultiplier = 0;
            this.blueMultiplier = 0;
            return this.get_color();
        },
        __toLimeColorMatrix: function() {
            return (function($this) {
                var $r;
                var array = [$this.redMultiplier, 0, 0, 0, $this.redOffset / 255, 0, $this.greenMultiplier, 0, 0, $this.greenOffset / 255, 0, 0, $this.blueMultiplier, 0, $this.blueOffset / 255, 0, 0, 0, $this.alphaMultiplier, $this.alphaOffset / 255];
                var this1;
                if (array != null) this1 = new Float32Array(array);
                else this1 = null;
                $r = this1;
                return $r;
            } (this));
        },
        __class__: openfl_geom_ColorTransform,
        __properties__: {
            set_color: "set_color",
            get_color: "get_color"
        }
    };
    var openfl_Lib = function() {};
    $hxClasses["openfl.Lib"] = openfl_Lib;
    openfl_Lib.__name__ = ["openfl", "Lib"];
    openfl_Lib.application = null;
    openfl_Lib["as"] = function(v, c) {
        if (js_Boot.__instanceof(v, c)) return v;
        else return null;
    };
    openfl_Lib.attach = function(name) {
        return new openfl_display_MovieClip();
    };
    openfl_Lib.embed = $hx_exports.openfl.embed = function(elementName, width, height, background, assetsPrefix) {
        lime_system_System.embed(elementName, width, height, background, assetsPrefix);
    };
    openfl_Lib.getTimer = function() {
        return lime_system_System.getTimer();
    };
    openfl_Lib.getURL = function(request, target) {
        if (target == null) target = "_blank";
        window.open(request.url, target);
    };
    openfl_Lib.notImplemented = function(api) {
        if (!openfl_Lib.__sentWarnings.exists(api)) {
            openfl_Lib.__sentWarnings.set(api, true);
            haxe_Log.trace("Warning: " + api + " is not implemented", {
                fileName: "Lib.hx",
                lineNumber: 113,
                className: "openfl.Lib",
                methodName: "notImplemented"
            });
        }
    };
    openfl_Lib.preventDefaultTouchMove = function() {
        window.document.addEventListener("touchmove",
        function(evt) {
            evt.preventDefault();
        },
        false);
    };
    openfl_Lib.trace = function(arg) {
        haxe_Log.trace(arg, {
            fileName: "Lib.hx",
            lineNumber: 144,
            className: "openfl.Lib",
            methodName: "trace"
        });
    };
    var openfl__$Vector_Vector_$Impl_$ = {};
    $hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
    openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl", "_Vector", "Vector_Impl_"];
    openfl__$Vector_Vector_$Impl_$.__properties__ = {
        set_fixed: "set_fixed",
        get_fixed: "get_fixed",
        set_length: "set_length",
        get_length: "get_length"
    }
    openfl__$Vector_Vector_$Impl_$._new = function(length, fixed) {
        if (fixed == null) fixed = false;
        if (length == null) length = 0;
        var this1;
        this1 = new openfl_VectorData();
        var this2;
        this2 = new Array(length);
        this1.data = this2;
        this1.length = length;
        this1.fixed = fixed;
        return this1;
    };
    openfl__$Vector_Vector_$Impl_$.concat = function(this1, a) {
        var vectorData = new openfl_VectorData();
        if (a != null) vectorData.length = this1.length + a.length;
        else vectorData.length = this1.length;
        vectorData.fixed = false;
        var this2;
        this2 = new Array(vectorData.length);
        vectorData.data = this2;
        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
        if (a != null) haxe_ds__$Vector_Vector_$Impl_$.blit(a.data, 0, vectorData.data, this1.length, a.length);
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
        var vectorData = new openfl_VectorData();
        vectorData.length = this1.length;
        vectorData.fixed = this1.fixed;
        var this2;
        this2 = new Array(this1.length);
        vectorData.data = this2;
        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
        return new openfl_VectorDataIterator(this1);
    };
    openfl__$Vector_Vector_$Impl_$.join = function(this1, sep) {
        var output = "";
        var _g1 = 0;
        var _g = this1.length;
        while (_g1 < _g) {
            var i = _g1++;
            if (i > 0) output += sep;
            output += Std.string(this1.data[i]);
        }
        return output;
    };
    openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
        var value = null;
        if (!this1.fixed) {
            if (this1.length > 0) {
                this1.length--;
                value = this1.data[this1.length];
            }
        }
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.push = function(this1, x) {
        if (!this1.fixed) {
            this1.length++;
            if (this1.data.length < this1.length) {
                var data;
                var this2;
                this2 = new Array(this1.data.length + 10);
                data = this2;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                this1.data = data;
            }
            this1.data[this1.length - 1] = x;
        }
        return this1.length;
    };
    openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
        var data;
        var this2;
        this2 = new Array(this1.length);
        data = this2;
        var _g1 = 0;
        var _g = this1.length;
        while (_g1 < _g) {
            var i = _g1++;
            data[this1.length - 1 - i] = this1.data[i];
        }
        this1.data = data;
    };
    openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
        if (!this1.fixed && this1.length > 0) {
            this1.length--;
            var value = this1.data[0];
            haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 1, this1.data, 0, this1.length);
            return value;
        }
        return null;
    };
    openfl__$Vector_Vector_$Impl_$.unshift = function(this1, x) {
        if (!this1.fixed) {
            this1.length++;
            if (this1.data.length < this1.length) {
                var data;
                var this2;
                this2 = new Array(this1.length + 10);
                data = this2;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 1, this1.data.length);
                this1.data = data;
            } else haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, this1.data, 1, this1.length - 1);
            this1.data[0] = x;
        }
    };
    openfl__$Vector_Vector_$Impl_$.slice = function(this1, pos, end) {
        if (end == null) end = 0;
        if (pos == null) pos = 0;
        if (pos < 0) pos += this1.length;
        if (end <= 0) end += this1.length;
        if (end > this1.length) end = this1.length;
        var length = end - pos;
        if (length <= 0 || length > this1.length) length = this1.length;
        var vectorData = new openfl_VectorData();
        vectorData.length = end - pos;
        vectorData.fixed = true;
        var this2;
        this2 = new Array(length);
        vectorData.data = this2;
        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos, vectorData.data, 0, length);
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.sort = function(this1, f) {
        var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
        array.sort(f);
        var vec;
        var this2;
        this2 = new Array(array.length);
        vec = this2;
        var _g1 = 0;
        var _g = array.length;
        while (_g1 < _g) {
            var i = _g1++;
            vec[i] = array[i];
        }
        this1.data = vec;
    };
    openfl__$Vector_Vector_$Impl_$.splice = function(this1, pos, len) {
        if (pos < 0) pos += this1.length;
        if (pos + len > this1.length) len = this1.length - pos;
        if (len < 0) len = 0;
        var vectorData = new openfl_VectorData();
        vectorData.length = len;
        vectorData.fixed = false;
        var this2;
        this2 = new Array(len);
        vectorData.data = this2;
        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos, vectorData.data, 0, len);
        if (len > 0) {
            this1.length -= len;
            haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, pos + len, this1.data, pos, this1.length - pos);
        }
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
        return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
    };
    openfl__$Vector_Vector_$Impl_$.indexOf = function(this1, x, from) {
        if (from == null) from = 0;
        var value = -1;
        var _g1 = from;
        var _g = this1.length;
        while (_g1 < _g) {
            var i = _g1++;
            if (this1.data[i] == x) {
                value = i;
                break;
            }
        }
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1, x, from) {
        if (from == null) from = 0;
        var value = -1;
        var i = this1.length - 1;
        while (i >= from) {
            if (this1.data[i] == x) {
                value = i;
                break;
            }
            i--;
        }
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
        var vectorData = new openfl_VectorData();
        vectorData.length = a.length;
        vectorData.fixed = true;
        var vec;
        var this1;
        this1 = new Array(a.length);
        vec = this1;
        var _g1 = 0;
        var _g = a.length;
        while (_g1 < _g) {
            var i = _g1++;
            vec[i] = a[i];
        }
        vectorData.data = vec;
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.convert = function(v) {
        return v;
    };
    openfl__$Vector_Vector_$Impl_$.get = function(this1, index) {
        return this1.data[index];
    };
    openfl__$Vector_Vector_$Impl_$.set = function(this1, key, value) {
        if (!this1.fixed) {
            if (key >= this1.length) this1.length = key + 1;
            if (this1.data.length < this1.length) {
                var data;
                var this2;
                this2 = new Array(this1.data.length + 10);
                data = this2;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                this1.data = data;
            }
        }
        return this1.data[key] = value;
    };
    openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
        var vectorData = new openfl_VectorData();
        vectorData.length = value.length;
        vectorData.fixed = true;
        var vec;
        var this1;
        this1 = new Array(value.length);
        vec = this1;
        var _g1 = 0;
        var _g = value.length;
        while (_g1 < _g) {
            var i = _g1++;
            vec[i] = value[i];
        }
        vectorData.data = vec;
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
        var value = [];
        var _g1 = 0;
        var _g = this1.data.length;
        while (_g1 < _g) {
            var i = _g1++;
            value.push(this1.data[i]);
        }
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
        var vectorData = new openfl_VectorData();
        vectorData.length = value.length;
        vectorData.fixed = true;
        vectorData.data = value;
        return vectorData;
    };
    openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
        return this1.data;
    };
    openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
        return this1;
    };
    openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
        return this1.length;
    };
    openfl__$Vector_Vector_$Impl_$.set_length = function(this1, value) {
        if (!this1.fixed) {
            if (value > this1.length) {
                var data;
                var this2;
                this2 = new Array(value);
                data = this2;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, Std["int"](Math.min(this1.data.length, value)));
                this1.data = data;
            }
            this1.length = value;
        }
        return value;
    };
    openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
        return this1.fixed;
    };
    openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1, value) {
        return this1.fixed = value;
    };
    var openfl_VectorData = function() {
        this.length = 0;
    };
    $hxClasses["openfl.VectorData"] = openfl_VectorData;
    openfl_VectorData.__name__ = ["openfl", "VectorData"];
    openfl_VectorData.prototype = {
        __class__: openfl_VectorData
    };
    var openfl_VectorDataIterator = function(data) {
        this.index = 0;
        this.vectorData = data;
    };
    $hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
    openfl_VectorDataIterator.__name__ = ["openfl", "VectorDataIterator"];
    openfl_VectorDataIterator.prototype = {
        hasNext: function() {
            return this.index < this.vectorData.length;
        },
        next: function() {
            var index = this.index++;
            return this.vectorData.data[index];
        },
        __class__: openfl_VectorDataIterator
    };
    var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
        this.renderSession = renderSession;
    };
    $hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
    openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl", "_internal", "renderer", "AbstractMaskManager"];
    openfl__$internal_renderer_AbstractMaskManager.prototype = {
        pushMask: function(mask) {},
        pushRect: function(rect, transform) {},
        popMask: function() {},
        popRect: function() {},
        saveState: function() {},
        restoreState: function() {},
        __class__: openfl__$internal_renderer_AbstractMaskManager
    };
    var openfl__$internal_renderer_AbstractRenderer = function(width, height) {
        this.width = width;
        this.height = height;
    };
    $hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl", "_internal", "renderer", "AbstractRenderer"];
    openfl__$internal_renderer_AbstractRenderer.prototype = {
        render: function(stage) {},
        renderShape: function(shape) {},
        setViewport: function(x, y, width, height) {},
        resize: function(width, height) {},
        __class__: openfl__$internal_renderer_AbstractRenderer
    };
    var openfl__$internal_renderer_DrawCommandBuffer = function() {
        this.types = [];
        this.b = [];
        this.i = [];
        this.f = [];
        this.o = [];
        this.ff = [];
        this.ii = [];
        this.ts = [];
    };
    $hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
    openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl", "_internal", "renderer", "DrawCommandBuffer"];
    openfl__$internal_renderer_DrawCommandBuffer.prototype = {
        append: function(other) {
            var data = new openfl__$internal_renderer_DrawCommandReader(other);
            var _g = 0;
            var _g1 = other.types;
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 0:
                    var c = data.readBeginBitmapFill();
                    this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
                    break;
                case 1:
                    var c1 = data.readBeginFill();
                    this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1), openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
                    break;
                case 2:
                    var c2 = data.readBeginGradientFill();
                    this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
                    break;
                case 3:
                    var c3 = data.readCubicCurveTo();
                    this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
                    break;
                case 4:
                    var c4 = data.readCurveTo();
                    this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
                    break;
                case 5:
                    var c5 = data.readDrawCircle();
                    this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
                    break;
                case 6:
                    var c6 = data.readDrawEllipse();
                    this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
                    break;
                case 7:
                    var c7 = data.readDrawPath();
                    this.drawPath(openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c7), openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c7), openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding(c7));
                    break;
                case 8:
                    var c8 = data.readDrawRect();
                    this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c8), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c8), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c8), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c8));
                    break;
                case 9:
                    var c9 = data.readDrawRoundRect();
                    this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c9), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c9), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c9), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c9), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c9), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c9));
                    break;
                case 10:
                    var c10 = data.readDrawTiles();
                    this.drawTiles(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c10), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c10), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c10), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c10), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader(c10), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c10));
                    break;
                case 11:
                    var c11 = data.readDrawTriangles();
                    this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c11), openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c11), openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c11), openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c11));
                    break;
                case 12:
                    var c12 = data.readEndFill();
                    this.endFill();
                    break;
                case 13:
                    var c13 = data.readLineBitmapStyle();
                    this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c13), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c13), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c13), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c13));
                    break;
                case 14:
                    var c14 = data.readLineGradientStyle();
                    this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c14), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c14));
                    break;
                case 15:
                    var c15 = data.readLineStyle();
                    this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c15), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c15));
                    break;
                case 16:
                    var c16 = data.readLineTo();
                    this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c16), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c16));
                    break;
                case 17:
                    var c17 = data.readMoveTo();
                    this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c17), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c17));
                    break;
                case 18:
                    var c18 = data.readOverrideMatrix();
                    this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(c18));
                    break;
                default:
                }
            }
            data.destroy();
            return other;
        },
        beginBitmapFill: function(bitmap, matrix, repeat, smooth) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
            this.o.push(bitmap);
            this.o.push(matrix);
            this.b.push(repeat);
            this.b.push(smooth);
        },
        beginFill: function(color, alpha) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
            this.i.push(color);
            this.f.push(alpha);
        },
        beginGradientFill: function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
            this.o.push(type);
            this.ii.push(colors);
            this.ff.push(alphas);
            this.ii.push(ratios);
            this.o.push(matrix);
            this.o.push(spreadMethod);
            this.o.push(interpolationMethod);
            this.f.push(focalPointRatio);
        },
        clear: function() {
            this.types.splice(0, this.types.length);
            this.b.splice(0, this.b.length);
            this.i.splice(0, this.i.length);
            this.f.splice(0, this.f.length);
            this.o.splice(0, this.o.length);
            this.ff.splice(0, this.ff.length);
            this.ii.splice(0, this.ii.length);
            this.ts.splice(0, this.ts.length);
        },
        copy: function() {
            var copy = new openfl__$internal_renderer_DrawCommandBuffer();
            copy.append(this);
            return copy;
        },
        cubicCurveTo: function(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
            this.f.push(controlX1);
            this.f.push(controlY1);
            this.f.push(controlX2);
            this.f.push(controlY2);
            this.f.push(anchorX);
            this.f.push(anchorY);
        },
        curveTo: function(controlX, controlY, anchorX, anchorY) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
            this.f.push(controlX);
            this.f.push(controlY);
            this.f.push(anchorX);
            this.f.push(anchorY);
        },
        destroy: function() {
            this.clear();
            this.types = null;
            this.b = null;
            this.i = null;
            this.f = null;
            this.o = null;
            this.ff = null;
            this.ii = null;
            this.ts = null;
        },
        drawCircle: function(x, y, radius) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
            this.f.push(x);
            this.f.push(y);
            this.f.push(radius);
        },
        drawEllipse: function(x, y, width, height) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
            this.f.push(x);
            this.f.push(y);
            this.f.push(width);
            this.f.push(height);
        },
        drawPath: function(commands, data, winding) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
            this.o.push(commands);
            this.o.push(data);
            this.o.push(winding);
        },
        drawRect: function(x, y, width, height) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
            this.f.push(x);
            this.f.push(y);
            this.f.push(width);
            this.f.push(height);
        },
        drawRoundRect: function(x, y, width, height, ellipseWidth, ellipseHeight) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
            this.f.push(x);
            this.f.push(y);
            this.f.push(width);
            this.f.push(height);
            this.f.push(ellipseWidth);
            this.o.push(ellipseHeight);
        },
        drawTiles: function(sheet, tileData, smooth, flags, shader, count) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
            this.ts.push(sheet);
            this.ff.push(tileData);
            this.b.push(smooth);
            this.i.push(flags);
            this.o.push(shader);
            this.i.push(count);
        },
        drawTriangles: function(vertices, indices, uvtData, culling) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
            this.o.push(vertices);
            this.o.push(indices);
            this.o.push(uvtData);
            this.o.push(culling);
        },
        endFill: function() {
            this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
        },
        lineBitmapStyle: function(bitmap, matrix, repeat, smooth) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
            this.o.push(bitmap);
            this.o.push(matrix);
            this.b.push(repeat);
            this.b.push(smooth);
        },
        lineGradientStyle: function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
            this.o.push(type);
            this.ii.push(colors);
            this.ff.push(alphas);
            this.ii.push(ratios);
            this.o.push(matrix);
            this.o.push(spreadMethod);
            this.o.push(interpolationMethod);
            this.f.push(focalPointRatio);
        },
        lineStyle: function(thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
            this.o.push(thickness);
            this.i.push(color);
            this.f.push(alpha);
            this.b.push(pixelHinting);
            this.o.push(scaleMode);
            this.o.push(caps);
            this.o.push(joints);
            this.f.push(miterLimit);
        },
        lineTo: function(x, y) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
            this.f.push(x);
            this.f.push(y);
        },
        moveTo: function(x, y) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
            this.f.push(x);
            this.f.push(y);
        },
        overrideMatrix: function(matrix) {
            this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
            this.o.push(matrix);
        },
        get_length: function() {
            return this.types.length;
        },
        __class__: openfl__$internal_renderer_DrawCommandBuffer,
        __properties__: {
            get_length: "get_length"
        }
    };
    var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
        this.buffer = buffer;
        this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
        this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
    };
    $hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
    openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl", "_internal", "renderer", "DrawCommandReader"];
    openfl__$internal_renderer_DrawCommandReader.prototype = {
        advance: function() {
            var _g = this.prev;
            switch (_g[1]) {
            case 0:
                this.oPos += 2;
                this.bPos += 2;
                break;
            case 1:
                this.iPos += 1;
                this.fPos += 1;
                break;
            case 2:
                this.oPos += 4;
                this.iiPos += 2;
                this.ffPos += 1;
                this.fPos += 1;
                break;
            case 3:
                this.fPos += 6;
                break;
            case 4:
                this.fPos += 4;
                break;
            case 5:
                this.fPos += 3;
                break;
            case 6:
                this.fPos += 4;
                break;
            case 7:
                this.oPos += 3;
                break;
            case 8:
                this.fPos += 4;
                break;
            case 9:
                this.fPos += 5;
                this.oPos += 1;
                break;
            case 10:
                this.tsPos += 1;
                this.ffPos += 1;
                this.bPos += 1;
                this.iPos += 2;
                this.oPos += 1;
                break;
            case 11:
                this.oPos += 4;
                break;
            case 12:
                break;
            case 13:
                this.oPos += 2;
                this.bPos += 2;
                break;
            case 14:
                this.oPos += 4;
                this.iiPos += 2;
                this.ffPos += 1;
                this.fPos += 1;
                break;
            case 15:
                this.oPos += 4;
                this.iPos += 1;
                this.fPos += 2;
                this.bPos += 1;
                break;
            case 16:
                this.fPos += 2;
                break;
            case 17:
                this.fPos += 2;
                break;
            case 18:
                this.oPos += 1;
                break;
            default:
            }
        },
        bool: function(index) {
            return this.buffer.b[this.bPos + index];
        },
        destroy: function() {
            this.buffer = null;
            this.reset();
        },
        fArr: function(index) {
            return this.buffer.ff[this.ffPos + index];
        },
        'float': function(index) {
            return this.buffer.f[this.fPos + index];
        },
        iArr: function(index) {
            return this.buffer.ii[this.iiPos + index];
        },
        'int': function(index) {
            return this.buffer.i[this.iPos + index];
        },
        obj: function(index) {
            return this.buffer.o[this.oPos + index];
        },
        readBeginBitmapFill: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
            return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
        },
        readBeginFill: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
            return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
        },
        readBeginGradientFill: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
            return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
        },
        readCubicCurveTo: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
            return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
        },
        readCurveTo: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
            return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
        },
        readDrawCircle: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
            return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
        },
        readDrawEllipse: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
            return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
        },
        readDrawPath: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
            return openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new(this);
        },
        readDrawRect: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
            return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
        },
        readDrawRoundRect: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
            return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
        },
        readDrawTiles: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
            return openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new(this);
        },
        readDrawTriangles: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
            return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
        },
        readEndFill: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
            return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
        },
        readLineBitmapStyle: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
            return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
        },
        readLineGradientStyle: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
            return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
        },
        readLineStyle: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
            return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
        },
        readLineTo: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
            return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
        },
        readMoveTo: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
            return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
        },
        readOverrideMatrix: function() {
            this.advance();
            this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
            return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
        },
        reset: function() {
            this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
        },
        skip: function(type) {
            this.advance();
            this.prev = type;
        },
        tileSheet: function(index) {
            return this.buffer.ts[this.tsPos + index];
        },
        __class__: openfl__$internal_renderer_DrawCommandReader
    };
    var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginBitmapFillView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {
        get_smooth: "get_smooth",
        get_repeat: "get_repeat",
        get_matrix: "get_matrix",
        get_bitmap: "get_bitmap"
    }
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
        return this1.bool(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
        return this1.bool(1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginFillView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {
        get_alpha: "get_alpha",
        get_color: "get_color"
    }
    openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
        return this1["int"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
        return this1["float"](0);
    };
    var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "BeginGradientFillView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {
        get_focalPointRatio: "get_focalPointRatio",
        get_interpolationMethod: "get_interpolationMethod",
        get_spreadMethod: "get_spreadMethod",
        get_matrix: "get_matrix",
        get_ratios: "get_ratios",
        get_alphas: "get_alphas",
        get_colors: "get_colors",
        get_type: "get_type"
    }
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
        return this1.iArr(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
        return this1.fArr(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
        return this1.iArr(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
        return this1.obj(2);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
        return this1.obj(3);
    };
    openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
        return this1["float"](0);
    };
    var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "CubicCurveToView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {
        get_anchorY: "get_anchorY",
        get_anchorX: "get_anchorX",
        get_controlY2: "get_controlY2",
        get_controlX2: "get_controlX2",
        get_controlY1: "get_controlY1",
        get_controlX1: "get_controlX1"
    }
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
        return this1["float"](2);
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
        return this1["float"](3);
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
        return this1["float"](4);
    };
    openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
        return this1["float"](5);
    };
    var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "CurveToView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {
        get_anchorY: "get_anchorY",
        get_anchorX: "get_anchorX",
        get_controlY: "get_controlY",
        get_controlX: "get_controlX"
    }
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
        return this1["float"](2);
    };
    openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
        return this1["float"](3);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawCircleView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {
        get_radius: "get_radius",
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
        return this1["float"](2);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawEllipseView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {
        get_height: "get_height",
        get_width: "get_width",
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
        return this1["float"](2);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
        return this1["float"](3);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawPathView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {
        get_winding: "get_winding",
        get_data: "get_data",
        get_commands: "get_commands"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
        return this1.obj(2);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawRectView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {
        get_height: "get_height",
        get_width: "get_width",
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
        return this1["float"](2);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
        return this1["float"](3);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawRoundRectView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {
        get_ellipseHeight: "get_ellipseHeight",
        get_ellipseWidth: "get_ellipseWidth",
        get_height: "get_height",
        get_width: "get_width",
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
        return this1["float"](2);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
        return this1["float"](3);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
        return this1["float"](4);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
        return this1.obj(0);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawTilesView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {
        get_count: "get_count",
        get_shader: "get_shader",
        get_flags: "get_flags",
        get_smooth: "get_smooth",
        get_tileData: "get_tileData",
        get_sheet: "get_sheet"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
        return this1.tileSheet(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
        return this1.fArr(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
        return this1.bool(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
        return this1["int"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
        return this1["int"](1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "DrawTrianglesView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {
        get_culling: "get_culling",
        get_uvtData: "get_uvtData",
        get_indices: "get_indices",
        get_vertices: "get_vertices"
    }
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
        return this1.obj(2);
    };
    openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
        return this1.obj(3);
    };
    var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "EndFillView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
        return d;
    };
    var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineBitmapStyleView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {
        get_smooth: "get_smooth",
        get_repeat: "get_repeat",
        get_matrix: "get_matrix",
        get_bitmap: "get_bitmap"
    }
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
        return this1.bool(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
        return this1.bool(1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineGradientStyleView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {
        get_focalPointRatio: "get_focalPointRatio",
        get_interpolationMethod: "get_interpolationMethod",
        get_spreadMethod: "get_spreadMethod",
        get_matrix: "get_matrix",
        get_ratios: "get_ratios",
        get_alphas: "get_alphas",
        get_colors: "get_colors",
        get_type: "get_type"
    }
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
        return this1.iArr(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
        return this1.fArr(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
        return this1.iArr(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
        return this1.obj(2);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
        return this1.obj(3);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
        return this1["float"](0);
    };
    var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineStyleView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {
        get_miterLimit: "get_miterLimit",
        get_joints: "get_joints",
        get_caps: "get_caps",
        get_scaleMode: "get_scaleMode",
        get_pixelHinting: "get_pixelHinting",
        get_alpha: "get_alpha",
        get_color: "get_color",
        get_thickness: "get_thickness"
    }
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
        return this1.obj(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
        return this1["int"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
        return this1.bool(0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
        return this1.obj(1);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
        return this1.obj(2);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
        return this1.obj(3);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
        return this1["float"](1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "LineToView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "MoveToView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {
        get_y: "get_y",
        get_x: "get_x"
    }
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
        return this1["float"](0);
    };
    openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
        return this1["float"](1);
    };
    var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
    $hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
    openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl", "_internal", "renderer", "_DrawCommandReader", "OverrideMatrixView_Impl_"];
    openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {
        get_matrix: "get_matrix"
    }
    openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
        return d;
    };
    openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
        return this1.obj(0);
    };
    var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = {
        __ename__: ["openfl", "_internal", "renderer", "DrawCommandType"],
        __constructs__: ["BEGIN_BITMAP_FILL", "BEGIN_FILL", "BEGIN_GRADIENT_FILL", "CUBIC_CURVE_TO", "CURVE_TO", "DRAW_CIRCLE", "DRAW_ELLIPSE", "DRAW_PATH", "DRAW_RECT", "DRAW_ROUND_RECT", "DRAW_TILES", "DRAW_TRIANGLES", "END_FILL", "LINE_BITMAP_STYLE", "LINE_GRADIENT_STYLE", "LINE_STYLE", "LINE_TO", "MOVE_TO", "OVERRIDE_MATRIX", "UNKNOWN"]
    };
    openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL", 0];
    openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL", 1];
    openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL", 2];
    openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO", 3];
    openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO", 4];
    openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE", 5];
    openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE", 6];
    openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH", 7];
    openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT", 8];
    openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT", 9];
    openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES", 10];
    openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES", 11];
    openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL", 12];
    openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE", 13];
    openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE", 14];
    openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE", 15];
    openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO", 16];
    openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO", 17];
    openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX", 18];
    openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
    openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN", 19];
    openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
    openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
    var openfl__$internal_renderer_GraphicsPaths = function() {};
    $hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
    openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl", "_internal", "renderer", "GraphicsPaths"];
    openfl__$internal_renderer_GraphicsPaths.ellipse = function(points, x, y, rx, ry, segmentCount) {
        var seg = Math.PI * 2 / segmentCount;
        var _g1 = 0;
        var _g = segmentCount + 1;
        while (_g1 < _g) {
            var i = _g1++;
            points.push(x + Math.sin(seg * i) * rx);
            points.push(y + Math.cos(seg * i) * ry);
        }
    };
    openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points, cx, cy, cx2, cy2, x, y) {
        var n = 20;
        var dt = 0;
        var dt2 = 0;
        var dt3 = 0;
        var t2 = 0;
        var t3 = 0;
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        var px = 0;
        var py = 0;
        var tmp = 0;
        var _g1 = 1;
        var _g = n + 1;
        while (_g1 < _g) {
            var i = _g1++;
            tmp = i / n;
            dt = 1 - tmp;
            dt2 = dt * dt;
            dt3 = dt2 * dt;
            t2 = tmp * tmp;
            t3 = t2 * tmp;
            px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
            py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
            points.push(px);
            points.push(py);
        }
    };
    openfl__$internal_renderer_GraphicsPaths.curveTo = function(points, cx, cy, x, y) {
        var xa = 0;
        var ya = 0;
        var n = 20;
        var fromX = points[points.length - 2];
        var fromY = points[points.length - 1];
        var px = 0;
        var py = 0;
        var tmp = 0;
        var _g1 = 1;
        var _g = n + 1;
        while (_g1 < _g) {
            var i = _g1++;
            tmp = i / n;
            xa = fromX + (cx - fromX) * tmp;
            ya = fromY + (cy - fromY) * tmp;
            px = xa + (cx + (x - cx) * tmp - xa) * tmp;
            py = ya + (cy + (y - cy) * tmp - ya) * tmp;
            points.push(px);
            points.push(py);
        }
    };
    openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points, x, y, width, height, rx, ry) {
        var xe = x + width;
        var ye = y + height;
        var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
        var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
        var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
        var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
        points.push(xe);
        points.push(ye - ry);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe, ye + cy2, xe + cx1, ye + cy1);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe + cx2, ye, xe - rx, ye);
        points.push(x + rx);
        points.push(ye);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, x - cx2, ye, x - cx1, ye + cy1);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, x, ye + cy2, x, ye - ry);
        points.push(x);
        points.push(y + ry);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, x, y - cy2, x - cx1, y - cy1);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, x - cx2, y, x + rx, y);
        points.push(xe - rx);
        points.push(y);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe + cx2, y, xe + cx1, y - cy1);
        openfl__$internal_renderer_GraphicsPaths.curveTo(points, xe, y - cy2, xe, y + ry);
        points.push(xe);
        points.push(ye - ry);
    };
    var openfl__$internal_renderer_PolyK = function() {};
    $hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
    openfl__$internal_renderer_PolyK.__name__ = ["openfl", "_internal", "renderer", "PolyK"];
    openfl__$internal_renderer_PolyK.triangulate = function(tgs, p) {
        var sign = true;
        var n = p.length >> 1;
        if (n < 3) return [];
        var avl;
        var _g = [];
        var _g1 = 0;
        while (_g1 < n) {
            var i1 = _g1++;
            _g.push(i1);
        }
        avl = _g;
        var i = 0;
        var al = n;
        var earFound = false;
        while (al > 3) {
            var i0 = avl[i % al];
            var i11 = avl[(i + 1) % al];
            var i2 = avl[(i + 2) % al];
            var ax = p[2 * i0];
            var ay = p[2 * i0 + 1];
            var bx = p[2 * i11];
            var by = p[2 * i11 + 1];
            var cx = p[2 * i2];
            var cy = p[2 * i2 + 1];
            earFound = false;
            if (openfl__$internal_renderer_PolyK._convex(ax, ay, bx, by, cx, cy, sign)) {
                earFound = true;
                var _g11 = 0;
                while (_g11 < al) {
                    var j = _g11++;
                    var vi = avl[j];
                    if (vi == i0 || vi == i11 || vi == i2) continue;
                    if (openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi], p[2 * vi + 1], ax, ay, bx, by, cx, cy)) {
                        earFound = false;
                        break;
                    }
                }
            }
            if (earFound) {
                tgs.push(i0);
                tgs.push(i11);
                tgs.push(i2);
                avl.splice((i + 1) % al, 1);
                al--;
                i = 0;
            } else if (i++>3 * al) {
                if (sign) {
                    tgs = [];
                    var _g12 = [];
                    var _g2 = 0;
                    while (_g2 < n) {
                        var k = _g2++;
                        _g12.push(k);
                    }
                    avl = _g12;
                    i = 0;
                    al = n;
                    sign = false;
                } else {
                    haxe_Log.trace("Warning: shape too complex to fill", {
                        fileName: "PolyK.hx",
                        lineNumber: 104,
                        className: "openfl._internal.renderer.PolyK",
                        methodName: "triangulate"
                    });
                    return [];
                }
            }
        }
        tgs.push(avl[0]);
        tgs.push(avl[1]);
        tgs.push(avl[2]);
        return tgs;
    };
    openfl__$internal_renderer_PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy) {
        var v0x = cx - ax | 0;
        var v0y = cy - ay | 0;
        var v1x = bx - ax | 0;
        var v1y = by - ay | 0;
        var v2x = px - ax | 0;
        var v2y = py - ay | 0;
        var dot00 = v0x * v0x + v0y * v0y;
        var dot01 = v0x * v1x + v0y * v1y;
        var dot02 = v0x * v2x + v0y * v2y;
        var dot11 = v1x * v1x + v1y * v1y;
        var dot12 = v1x * v2x + v1y * v2y;
        var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        return u >= 0 && v >= 0 && u + v < 1;
    };
    openfl__$internal_renderer_PolyK._convex = function(ax, ay, bx, by, cx, cy, sign) {
        return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
    };
    var openfl__$internal_renderer_RenderSession = function() {
        this.activeTextures = 0;
    };
    $hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
    openfl__$internal_renderer_RenderSession.__name__ = ["openfl", "_internal", "renderer", "RenderSession"];
    openfl__$internal_renderer_RenderSession.prototype = {
        __class__: openfl__$internal_renderer_RenderSession
    };
    var openfl__$internal_renderer_cairo_CairoBitmap = function() {};
    $hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
    openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoBitmap"];
    openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap, renderSession) {
        if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
        var cairo = renderSession.cairo;
        if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
            if (bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
            var transform = bitmap.__renderTransform;
            var scrollRect = bitmap.get_scrollRect();
            if (renderSession.roundPixels) {
                var matrix = transform.__toMatrix3();
                matrix.tx = Math.round(matrix.tx);
                matrix.ty = Math.round(matrix.ty);
                cairo.set_matrix(matrix);
            } else cairo.set_matrix(transform.__toMatrix3());
            var surface = bitmap.bitmapData.getSurface();
            if (surface != null) {
                var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
                lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, bitmap.smoothing ? 1 : 3);
                if (scrollRect != null) {
                    cairo.pushGroup();
                    cairo.set_source(pattern);
                    cairo.newPath();
                    cairo.rectangle(scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);
                    cairo.fill();
                    cairo.popGroupToSource();
                } else cairo.set_source(pattern);
                if (bitmap.__worldAlpha == 1) cairo.paint();
                else cairo.paintWithAlpha(bitmap.__worldAlpha);
            }
            if (bitmap.__mask != null) renderSession.maskManager.popMask();
        }
    };
    var openfl__$internal_renderer_cairo_CairoGraphics = function() {};
    $hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
    openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoGraphics"];
    openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
    openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
    openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
    openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
    openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
    openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
    openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
    openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
    openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
    openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
    openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
    openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
    openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
    openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
        if (openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) return;
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
        if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
    };
    openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
        var pattern = null;
        switch (type) {
        case 1:
            if (matrix == null) matrix = new openfl_geom_Matrix();
            var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
            var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
            var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
            pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x, y, 0, x, y, (point.x - matrix.tx) / 2);
            break;
        case 0:
            if (matrix == null) matrix = new openfl_geom_Matrix();
            var point1 = matrix.transformPoint(new openfl_geom_Point( - 819.2, 0));
            var point2 = matrix.transformPoint(new openfl_geom_Point(819.2, 0));
            point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
            point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
            point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
            point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
            pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x, point1.y, point2.x, point2.y);
            break;
        }
        var _g1 = 0;
        var _g = colors.length;
        while (_g1 < _g) {
            var i = _g1++;
            var rgb = colors[i];
            var alpha = alphas[i];
            var r = ((rgb & 16711680) >>> 16) / 255;
            var g = ((rgb & 65280) >>> 8) / 255;
            var b = (rgb & 255) / 255;
            var ratio = ratios[i] / 255;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern, ratio, r, g, b, alpha);
        }
        var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
        mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
        mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
        lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern, mat);
        return pattern;
    };
    openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill, matrix, bitmapRepeat) {
        var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
        if (bitmapRepeat) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern, 1);
        openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
        return pattern;
    };
    openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x, y, width, height, ellipseWidth, ellipseHeight) {
        if (ellipseHeight == null) ellipseHeight = ellipseWidth;
        ellipseWidth *= 0.5;
        ellipseHeight *= 0.5;
        if (ellipseWidth > width / 2) ellipseWidth = width / 2;
        if (ellipseHeight > height / 2) ellipseHeight = height / 2;
        var xe = x + width;
        var ye = y + height;
        var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
        var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
        var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
        var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe, ye - ellipseHeight);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe, ye + cy2, xe + cx1, ye + cy1);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2, ye, xe - ellipseWidth, ye);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth, ye);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2, ye, x - cx1, ye + cy1);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x, ye + cy2, x, ye - ellipseHeight);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x, y + ellipseHeight);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x, y - cy2, x - cx1, y - cy1);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2, y, x + ellipseWidth, y);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth, y);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2, y, xe + cx1, y - cy1);
        openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe, y - cy2, xe, y + ellipseHeight);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe, ye - ellipseHeight);
    };
    openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
        openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands, false);
        openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
    };
    openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
        openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands, true);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
        openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
    };
    openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics, x, y) {
        return false;
    };
    openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1, y1, x2, y2, x3, y3) {
        return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
    };
    openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt, skipT) {
        if (skipT == null) skipT = false;
        var max = -Infinity;
        var tmp = -Infinity;
        var len = uvt.length;
        var _g1 = 1;
        var _g = len + 1;
        while (_g1 < _g) {
            var t = _g1++;
            if (skipT && t % 3 == 0) continue;
            tmp = uvt.data[t - 1];
            if (max < tmp) max = tmp;
        }
        var result;
        var this1;
        this1 = new openfl_VectorData();
        var this2;
        this2 = new Array(0);
        this1.data = this2;
        this1.length = 0;
        this1.fixed = false;
        result = this1;
        var _g11 = 1;
        var _g2 = len + 1;
        while (_g11 < _g2) {
            var t1 = _g11++;
            if (skipT && t1 % 3 == 0) continue;
            if (!result.fixed) {
                result.length++;
                if (result.data.length < result.length) {
                    var data;
                    var this3;
                    this3 = new Array(result.data.length + 10);
                    data = this3;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
                    result.data = data;
                }
                result.data[result.length - 1] = uvt.data[t1 - 1] / max;
            }
            result.length;
        }
        return {
            max: max,
            uvt: result
        };
    };
    openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands, stroke) {
        if (stroke == null) stroke = false;
        if (commands.get_length() == 0) return;
        openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
        var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
        var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
        var positionX = 0.0;
        var positionY = 0.0;
        var closeGap = false;
        var startX = 0.0;
        var startY = 0.0;
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
        var hasPath = false;
        var data = new openfl__$internal_renderer_DrawCommandReader(commands);
        var _g = 0;
        var _g1 = commands.types;
        try {
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 3:
                    var c = data.readCubicCurveTo();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
                    break;
                case 4:
                    var c1 = data.readCurveTo();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
                    break;
                case 5:
                    var c2 = data.readDrawCircle();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), 0, Math.PI * 2);
                    break;
                case 8:
                    var c3 = data.readDrawRect();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c3) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c3) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c3), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c3));
                    break;
                case 6:
                    var c4 = data.readDrawEllipse();
                    hasPath = true;
                    var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c4);
                    var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c4);
                    var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c4);
                    var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c4);
                    x -= offsetX;
                    y -= offsetY;
                    var kappa = .5522848;
                    var ox = width / 2 * kappa;
                    var oy = height / 2 * kappa;
                    var xe = x + width;
                    var ye = y + height;
                    var xm = x + width / 2;
                    var ym = y + height / 2;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x, ym);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x, ym - oy, xm - ox, y, xm, y);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox, y, xe, ym - oy, xe, ym);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox, ye, x, ym + oy, x, ym);
                    break;
                case 9:
                    var c5 = data.readDrawRoundRect();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
                    break;
                case 16:
                    var c6 = data.readLineTo();
                    hasPath = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX, openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
                    break;
                case 17:
                    var c7 = data.readMoveTo();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX, openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
                    closeGap = true;
                    startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
                    startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
                    break;
                case 15:
                    var c8 = data.readLineStyle();
                    if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
                    else {
                        openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) > 0 ? openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c8) : 1);
                        if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
                        else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin((function($this) {
                            var $r;
                            var _g2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c8);
                            $r = (function($this) {
                                var $r;
                                switch (_g2) {
                                case 1:
                                    $r = 0;
                                    break;
                                case 0:
                                    $r = 2;
                                    break;
                                default:
                                    $r = 1;
                                }
                                return $r;
                            } ($this));
                            return $r;
                        } (this)));
                        if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c8) == null) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
                        else openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap((function($this) {
                            var $r;
                            var _g21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c8);
                            $r = (function($this) {
                                var $r;
                                switch (_g21) {
                                case 0:
                                    $r = 0;
                                    break;
                                case 2:
                                    $r = 2;
                                    break;
                                default:
                                    $r = 1;
                                }
                                return $r;
                            } ($this));
                            return $r;
                        } (this)));
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c8));
                        var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 16711680) >>> 16) / 255;
                        var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 65280) >>> 8) / 255;
                        var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c8) & 255) / 255;
                        if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c8) == 1) openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r, g, b);
                        else openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r, g, b, openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c8));
                    }
                    break;
                case 14:
                    var c9 = data.readLineGradientStyle();
                    if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
                    openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c9), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c9));
                    openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
                    break;
                case 13:
                    var c10 = data.readLineBitmapStyle();
                    if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) openfl__$internal_renderer_cairo_CairoGraphics.closePath();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX, positionY - offsetY);
                    openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c10), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c10), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c10));
                    openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
                    break;
                case 0:
                    var c11 = data.readBeginBitmapFill();
                    openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c11), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c11), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c11));
                    openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c11);
                    openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c11);
                    openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
                    break;
                case 1:
                    var c12 = data.readBeginFill();
                    if (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c12) < 0.005) openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
                    else {
                        if (openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
                        openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 16711680) >>> 16) / 255, ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 65280) >>> 8) / 255, (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c12) & 255) / 255, openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c12));
                        openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
                    }
                    openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
                    break;
                case 2:
                    var c13 = data.readBeginGradientFill();
                    if (openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
                    openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c13), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c13));
                    openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
                    openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
                    break;
                case 11:
                    var c14 = data.readDrawTriangles();
                    var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c14);
                    var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c14);
                    var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
                    var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
                    if (colorFill && uvt != null) throw "__break__";
                    var width1 = 0;
                    var height1 = 0;
                    if (!colorFill) {
                        if (uvt == null) {
                            var this1;
                            this1 = new openfl_VectorData();
                            var this2;
                            this2 = new Array(0);
                            this1.data = this2;
                            this1.length = 0;
                            this1.fixed = false;
                            uvt = this1;
                            var _g3 = 0;
                            var _g22 = v.length / 2 | 0;
                            while (_g3 < _g22) {
                                var i1 = _g3++;
                                if (!uvt.fixed) {
                                    uvt.length++;
                                    if (uvt.data.length < uvt.length) {
                                        var data1;
                                        var this3;
                                        this3 = new Array(uvt.data.length + 10);
                                        data1 = this3;
                                        haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data1, 0, uvt.data.length);
                                        uvt.data = data1;
                                    }
                                    uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
                                }
                                uvt.length;
                                if (!uvt.fixed) {
                                    uvt.length++;
                                    if (uvt.data.length < uvt.length) {
                                        var data2;
                                        var this4;
                                        this4 = new Array(uvt.data.length + 10);
                                        data2 = this4;
                                        haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data2, 0, uvt.data.length);
                                        uvt.data = data2;
                                    }
                                    uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
                                }
                                uvt.length;
                            }
                        }
                        var skipT;
                        skipT = (function($this) {
                            var $r;
                            var this5 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
                            $r = this5.length;
                            return $r;
                        } (this)) != v.length;
                        var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt, skipT);
                        var maxUVT = normalizedUVT.max;
                        uvt = normalizedUVT.uvt;
                        if (maxUVT > 1) {
                            width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
                            height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
                        } else {
                            width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
                            height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
                        }
                    }
                    var i = 0;
                    var l = ind.length;
                    var a_;
                    var b_;
                    var c_;
                    var iax;
                    var iay;
                    var ibx;
                    var iby;
                    var icx;
                    var icy;
                    var x1;
                    var y1;
                    var x2;
                    var y2;
                    var x3;
                    var y3;
                    var uvx1;
                    var uvy1;
                    var uvx2;
                    var uvy2;
                    var uvx3;
                    var uvy3;
                    var denom;
                    var t1;
                    var t2;
                    var t3;
                    var t4;
                    var dx;
                    var dy;
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
                    while (i < l) {
                        a_ = i;
                        b_ = i + 1;
                        c_ = i + 2;
                        iax = ind.data[a_] * 2;
                        iay = ind.data[a_] * 2 + 1;
                        ibx = ind.data[b_] * 2;
                        iby = ind.data[b_] * 2 + 1;
                        icx = ind.data[c_] * 2;
                        icy = ind.data[c_] * 2 + 1;
                        x1 = v.data[iax];
                        y1 = v.data[iay];
                        x2 = v.data[ibx];
                        y2 = v.data[iby];
                        x3 = v.data[icx];
                        y3 = v.data[icy];
                        var _g23 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c14);
                        switch (_g23) {
                        case 2:
                            if (! ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
                                i += 3;
                                continue;
                            }
                            break;
                        case 0:
                            if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
                                i += 3;
                                continue;
                            }
                            break;
                        default:
                        }
                        if (colorFill) {
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1, y1);
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2, y2);
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3, y3);
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
                            if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
                            i += 3;
                            continue;
                        }
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x1, y1);
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x2, y2);
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3, y3);
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
                        uvx1 = uvt.data[iax] * width1;
                        uvx2 = uvt.data[ibx] * width1;
                        uvx3 = uvt.data[icx] * width1;
                        uvy1 = uvt.data[iay] * height1;
                        uvy2 = uvt.data[iby] * height1;
                        uvy3 = uvt.data[icy] * height1;
                        denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
                        if (denom == 0) {
                            i += 3;
                            continue;
                        }
                        t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
                        t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
                        t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
                        t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
                        dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
                        dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
                        var matrix = new lime_math_Matrix3(t1, t2, t3, t4, dx, dy);
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix);
                        openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
                        if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
                        i += 3;
                    }
                    break;
                case 10:
                    var c15 = data.readDrawTiles();
                    var useScale = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 1) > 0;
                    var useRotation = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 2) > 0;
                    var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
                    var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
                    var useTransform = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 16) > 0;
                    var useRGB = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 4) > 0;
                    var useAlpha = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 8) > 0;
                    var useRect = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 32) > 0;
                    var useOrigin = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 64) > 0;
                    var useBlendAdd = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 65536) > 0;
                    var useBlendOverlay = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 4194304) > 0;
                    if (useTransform) {
                        useScale = false;
                        useRotation = false;
                    }
                    var scaleIndex = 0;
                    var rotationIndex = 0;
                    var rgbIndex = 0;
                    var alphaIndex = 0;
                    var transformIndex = 0;
                    var numValues = 3;
                    if (useRect) if (useOrigin) numValues = 8;
                    else numValues = 6;
                    if (useScale) {
                        scaleIndex = numValues;
                        numValues++;
                    }
                    if (useRotation) {
                        rotationIndex = numValues;
                        numValues++;
                    }
                    if (useTransform) {
                        transformIndex = numValues;
                        numValues += 4;
                    }
                    if (useRGB) {
                        rgbIndex = numValues;
                        numValues += 3;
                    }
                    if (useAlpha) {
                        alphaIndex = numValues;
                        numValues++;
                    }
                    var totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15).length;
                    if (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15) >= 0 && totalCount > openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15)) totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15);
                    var itemCount = totalCount / numValues | 0;
                    var index = 0;
                    var rect = null;
                    var center = null;
                    var previousTileID = -1;
                    var surface;
                    openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__bitmap.__sync();
                    surface = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__bitmap.getSurface();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
                    if (useBlendAdd) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
                    if (useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
                    while (index < totalCount) {
                        var i2 = Std["int"](openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 2]);
                        var tileID;
                        if (!useRect) tileID = i2;
                        else tileID = -1;
                        if (!useRect && tileID != previousTileID) {
                            rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__tileRects[tileID];
                            center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__centerPoints[tileID];
                            previousTileID = tileID;
                        } else if (useRect) {
                            rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__rectTile;
                            rect.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 2], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 3], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 4], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 5]);
                            center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__point;
                            if (useOrigin) center.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 6], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 7]);
                            else center.setTo(0, 0);
                        }
                        if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
                            if (useTransform) {
                                var matrix1 = new lime_math_Matrix3(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 1], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 2], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 3], 0, 0);
                                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(matrix1);
                            }
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index] - offsetX1, openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 1] - offsetY1);
                            if (useRotation) openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + rotationIndex]);
                            if (useScale) {
                                var scale = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + scaleIndex];
                                openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale, scale);
                            }
                            openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface, 0, 0);
                            if (useAlpha) {
                                if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + alphaIndex]);
                            } else if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
                        }
                        index += numValues;
                    }
                    if (useBlendAdd || useBlendOverlay) openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
                    break;
                default:
                    data.skip(type);
                }
            }
        } catch(e) {
            if (e != "__break__") throw e;
        }
        data.destroy();
        if (hasPath) {
            if (stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
                if (openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX, startY - offsetY);
                else if (closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
                if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
            }
            if (!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate( - openfl__$internal_renderer_cairo_CairoGraphics.bounds.x, -openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
                if (openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
                    var matrix2 = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
                    matrix2.invert();
                    if (openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) matrix2.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
                    lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern, matrix2.__toMatrix3());
                }
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
                if (openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
                    if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
                    openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
                } else if (!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x, openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
                openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
            }
        }
    };
    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx, cy, x, y) {
        var current = null;
        if (!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
            openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx, cy);
            current = new lime_math_Vector2(cx, cy);
        } else current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
        var cx1 = current.x + 0.66666666666666663 * (cx - current.x);
        var cy1 = current.y + 0.66666666666666663 * (cy - current.y);
        var cx2 = x + 0.66666666666666663 * (cx - x);
        var cy2 = y + 0.66666666666666663 * (cy - y);
        openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(cx1, cy1, cx2, cy2, x, y);
    };
    openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics, renderSession) {};
    openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics, renderSession) {
        if (graphics.__commands.get_length() != 0) {
            var cairo = renderSession.cairo;
            var positionX = 0.0;
            var positionY = 0.0;
            var offsetX = 0;
            var offsetY = 0;
            var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
            var _g = 0;
            var _g1 = graphics.__commands.types;
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 3:
                    var c = data.readCubicCurveTo();
                    cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
                    break;
                case 4:
                    var c1 = data.readCurveTo();
                    openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
                    break;
                case 5:
                    var c2 = data.readDrawCircle();
                    cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), 0, Math.PI * 2);
                    break;
                case 6:
                    var c3 = data.readDrawEllipse();
                    var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
                    var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
                    var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
                    var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
                    x -= offsetX;
                    y -= offsetY;
                    var kappa = .5522848;
                    var ox = width / 2 * kappa;
                    var oy = height / 2 * kappa;
                    var xe = x + width;
                    var ye = y + height;
                    var xm = x + width / 2;
                    var ym = y + height / 2;
                    cairo.moveTo(x, ym);
                    cairo.curveTo(x, ym - oy, xm - ox, y, xm, y);
                    cairo.curveTo(xm + ox, y, xe, ym - oy, xe, ym);
                    cairo.curveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                    cairo.curveTo(xm - ox, ye, x, ym + oy, x, ym);
                    break;
                case 8:
                    var c4 = data.readDrawRect();
                    cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
                    break;
                case 9:
                    var c5 = data.readDrawRoundRect();
                    openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
                    break;
                case 16:
                    var c6 = data.readLineTo();
                    cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX, openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
                    break;
                case 17:
                    var c7 = data.readMoveTo();
                    cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX, openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
                    break;
                default:
                    data.skip(type);
                }
            }
            data.destroy();
        }
    };
    var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
        openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
    };
    $hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
    openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoMaskManager"];
    openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
    openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
        pushMask: function(mask) {
            var cairo = this.renderSession.cairo;
            cairo.save();
            var transform = mask.__getWorldTransform();
            cairo.set_matrix(transform.__toMatrix3());
            cairo.newPath();
            mask.__renderCairoMask(this.renderSession);
            cairo.clip();
        },
        pushRect: function(rect, transform) {
            var cairo = this.renderSession.cairo;
            cairo.save();
            cairo.set_matrix(new lime_math_Matrix3(transform.a, transform.c, transform.b, transform.d, transform.tx, transform.ty));
            cairo.newPath();
            cairo.rectangle(rect.x, rect.y, rect.width, rect.height);
            cairo.clip();
        },
        popMask: function() {
            this.renderSession.cairo.restore();
        },
        popRect: function() {
            this.renderSession.cairo.restore();
        },
        __class__: openfl__$internal_renderer_cairo_CairoMaskManager
    });
    var openfl__$internal_renderer_cairo_CairoRenderer = function(width, height, cairo) {
        openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
        this.cairo = cairo;
        this.renderSession = new openfl__$internal_renderer_RenderSession();
        this.renderSession.cairo = cairo;
        this.renderSession.roundPixels = true;
        this.renderSession.renderer = this;
        this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
    };
    $hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
    openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoRenderer"];
    openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
        render: function(stage) {
            this.cairo.identityMatrix();
            if (stage.__clearBeforeRender) {
                this.cairo.setSourceRGB(stage.__colorSplit[0], stage.__colorSplit[1], stage.__colorSplit[2]);
                this.cairo.paint();
            }
            stage.__renderCairo(this.renderSession);
        },
        renderDisplayObject: function(object) {
            this.cairo.identityMatrix();
            object.__renderCairo(this.renderSession);
        },
        __class__: openfl__$internal_renderer_cairo_CairoRenderer
    });
    var openfl__$internal_renderer_cairo_CairoShape = function() {};
    $hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
    openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoShape"];
    openfl__$internal_renderer_cairo_CairoShape.render = function(shape, renderSession) {};
    var openfl__$internal_renderer_cairo_CairoTextField = function() {};
    $hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
    openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl", "_internal", "renderer", "cairo", "CairoTextField"];
    openfl__$internal_renderer_cairo_CairoTextField.render = function(textField, renderSession) {};
    var openfl__$internal_renderer_canvas_CanvasBitmap = function() {};
    $hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
    openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasBitmap"];
    openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap, renderSession) {
        if (!bitmap.__renderable || bitmap.__worldAlpha <= 0) return;
        var context = renderSession.context;
        if (bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
            if (bitmap.__mask != null) renderSession.maskManager.pushMask(bitmap.__mask);
            bitmap.bitmapData.__sync();
            context.globalAlpha = bitmap.__worldAlpha;
            var transform = bitmap.__renderTransform;
            var scrollRect = bitmap.get_scrollRect();
            if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0);
            else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
            if (!bitmap.smoothing) {
                context.mozImageSmoothingEnabled = false;
                context.msImageSmoothingEnabled = false;
                context.imageSmoothingEnabled = false;
            }
            if (scrollRect == null) context.drawImage(bitmap.bitmapData.image.get_src(), 0, 0);
            else context.drawImage(bitmap.bitmapData.image.get_src(), scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height, scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);
            if (!bitmap.smoothing) {
                context.mozImageSmoothingEnabled = true;
                context.msImageSmoothingEnabled = true;
                context.imageSmoothingEnabled = true;
            }
            if (bitmap.__mask != null) renderSession.maskManager.popMask();
        }
    };
    var openfl__$internal_renderer_canvas_CanvasGraphics = function() {};
    $hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
    openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasGraphics"];
    openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
    openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
        if (openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) return;
        openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
        openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
        openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap, bitmapRepeat) {
        bitmap.__sync();
        return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(), bitmapRepeat ? "repeat": "no-repeat");
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
        var gradientFill = null;
        switch (type) {
        case 1:
            if (matrix == null) matrix = new openfl_geom_Matrix();
            var point = matrix.transformPoint(new openfl_geom_Point(1638.4, 0));
            gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx, matrix.ty, 0, matrix.tx, matrix.ty, (point.x - matrix.tx) / 2);
            break;
        case 0:
            var matrix1;
            if (matrix != null) matrix1 = matrix;
            else matrix1 = new openfl_geom_Matrix();
            var point1 = matrix1.transformPoint(new openfl_geom_Point( - 819.2, 0));
            var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2, 0));
            gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x, point1.y, point2.x, point2.y);
            break;
        }
        var _g1 = 0;
        var _g = colors.length;
        while (_g1 < _g) {
            var i = _g1++;
            var rgb = colors[i];
            var alpha = alphas[i];
            var r = (rgb & 16711680) >>> 16;
            var g = (rgb & 65280) >>> 8;
            var b = rgb & 255;
            var ratio = ratios[i] / 255;
            if (ratio < 0) ratio = 0;
            if (ratio > 1) ratio = 1;
            gradientFill.addColorStop(ratio, "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
        }
        return gradientFill;
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap, repeat, width, height) {
        var canvas = window.document.createElement("canvas");
        var context = canvas.getContext("2d");
        canvas.width = width;
        canvas.height = height;
        context.fillStyle = context.createPattern(bitmap.image.get_src(), repeat ? "repeat": "no-repeat");
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(0, height);
        context.lineTo(width, height);
        context.lineTo(width, 0);
        context.lineTo(0, 0);
        context.closePath();
        if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) context.fill();
        return canvas;
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x, y, width, height, ellipseWidth, ellipseHeight) {
        if (ellipseHeight == null) ellipseHeight = ellipseWidth;
        ellipseWidth *= 0.5;
        ellipseHeight *= 0.5;
        if (ellipseWidth > width / 2) ellipseWidth = width / 2;
        if (ellipseHeight > height / 2) ellipseHeight = height / 2;
        var xe = x + width;
        var ye = y + height;
        var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
        var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
        var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
        var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
        openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe, ye - ellipseHeight);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe, ye + cy2, xe + cx1, ye + cy1);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2, ye, xe - ellipseWidth, ye);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth, ye);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2, ye, x - cx1, ye + cy1);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x, ye + cy2, x, ye - ellipseHeight);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x, y + ellipseHeight);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x, y - cy2, x - cx1, y - cy1);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2, y, x + ellipseWidth, y);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth, y);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2, y, xe + cx1, y - cy1);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe, y - cy2, xe, y + ellipseHeight);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe, ye - ellipseHeight);
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
        openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
        openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands, false);
        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
        openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
        openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands, true);
        openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics, x, y) {
        if (graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) return false;
        else {
            openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
            x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
            y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
            if (graphics.__canvas == null) {
                graphics.__canvas = window.document.createElement("canvas");
                graphics.__context = graphics.__canvas.getContext("2d");
            }
            openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
            openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
            openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
            openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
            var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
            var _g = 0;
            var _g1 = graphics.__commands.types;
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 3:
                    var c = data.readCubicCurveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
                    break;
                case 4:
                    var c1 = data.readCurveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
                    break;
                case 16:
                    var c2 = data.readLineTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
                    break;
                case 17:
                    var c3 = data.readMoveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
                    break;
                case 14:
                    var c4 = data.readLineGradientStyle();
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c4), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c4));
                    break;
                case 13:
                    var c5 = data.readLineBitmapStyle();
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c5), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c5), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c5), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c5));
                    break;
                case 15:
                    var c6 = data.readLineStyle();
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c6), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c6), 1, openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c6), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c6), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c6), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c6), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c6));
                    break;
                case 12:
                    data.readEndFill();
                    openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                    openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                    if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) {
                        data.destroy();
                        return true;
                    }
                    if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) {
                        data.destroy();
                        return true;
                    }
                    openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
                    openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
                    break;
                case 0:
                case 1:
                case 2:
                    openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                    openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                    if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) {
                        data.destroy();
                        return true;
                    }
                    if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) {
                        data.destroy();
                        return true;
                    }
                    if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
                        var c7 = data.readBeginBitmapFill();
                        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
                        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
                    } else if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
                        var c8 = data.readBeginGradientFill();
                        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
                        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
                    } else {
                        var c9 = data.readBeginFill();
                        openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9), 1);
                        openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9), 1);
                    }
                    break;
                case 5:
                    var c10 = data.readDrawCircle();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
                    break;
                case 6:
                    var c11 = data.readDrawEllipse();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
                    break;
                case 8:
                    var c12 = data.readDrawRect();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
                    break;
                case 9:
                    var c13 = data.readDrawRoundRect();
                    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
                    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
                    break;
                default:
                    data.skip(type);
                }
            }
            if (openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
            if (openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
            data.destroy();
            if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x, y)) return true;
            if (openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x, y)) return true;
        }
        return false;
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1, y1, x2, y2, x3, y3) {
        return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt, skipT) {
        if (skipT == null) skipT = false;
        var max = -Infinity;
        var tmp = -Infinity;
        var len = uvt.length;
        var _g1 = 1;
        var _g = len + 1;
        while (_g1 < _g) {
            var t = _g1++;
            if (skipT && t % 3 == 0) continue;
            tmp = uvt.data[t - 1];
            if (max < tmp) max = tmp;
        }
        var result;
        var this1;
        this1 = new openfl_VectorData();
        var this2;
        this2 = new Array(0);
        this1.data = this2;
        this1.length = 0;
        this1.fixed = false;
        result = this1;
        var _g11 = 1;
        var _g2 = len + 1;
        while (_g11 < _g2) {
            var t1 = _g11++;
            if (skipT && t1 % 3 == 0) continue;
            if (!result.fixed) {
                result.length++;
                if (result.data.length < result.length) {
                    var data;
                    var this3;
                    this3 = new Array(result.data.length + 10);
                    data = this3;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
                    result.data = data;
                }
                result.data[result.length - 1] = uvt.data[t1 - 1] / max;
            }
            result.length;
        }
        return {
            max: max,
            uvt: result
        };
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands, stroke) {
        if (stroke == null) stroke = false;
        openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
        var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
        var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
        var positionX = 0.0;
        var positionY = 0.0;
        var closeGap = false;
        var startX = 0.0;
        var startY = 0.0;
        var data = new openfl__$internal_renderer_DrawCommandReader(commands);
        var _g = 0;
        var _g1 = commands.types;
        while (_g < _g1.length) {
            var type = _g1[_g]; ++_g;
            switch (type[1]) {
            case 3:
                var c = data.readCubicCurveTo();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
                break;
            case 4:
                var c1 = data.readCurveTo();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
                break;
            case 5:
                var c2 = data.readDrawCircle();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), 0, Math.PI * 2, true);
                break;
            case 6:
                var c3 = data.readDrawEllipse();
                var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
                var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
                var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
                var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
                x -= offsetX;
                y -= offsetY;
                var kappa = .5522848;
                var ox = width / 2 * kappa;
                var oy = height / 2 * kappa;
                var xe = x + width;
                var ye = y + height;
                var xm = x + width / 2;
                var ym = y + height / 2;
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x, ym);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                break;
            case 9:
                var c4 = data.readDrawRoundRect();
                openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c4) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c4) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c4), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c4), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c4), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c4));
                break;
            case 16:
                var c5 = data.readLineTo();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c5) - offsetX, openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c5) - offsetY);
                positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c5);
                positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c5);
                break;
            case 17:
                var c6 = data.readMoveTo();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6) - offsetX, openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6) - offsetY);
                positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6);
                positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6);
                closeGap = true;
                startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c6);
                startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c6);
                break;
            case 15:
                var c7 = data.readLineStyle();
                if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
                    if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
                }
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
                if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
                else {
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7) > 0) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c7);
                    else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = 1;
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = "round";
                    else openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c7)).toLowerCase();
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7) == null) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "round";
                    else {
                        var _g2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7);
                        switch (_g2) {
                        case 0:
                            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = "butt";
                            break;
                        default:
                            openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c7)).toLowerCase();
                        }
                    }
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c7);
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c7) == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 16777215, 6);
                    else {
                        var r = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 16711680) >>> 16;
                        var g = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 65280) >>> 8;
                        var b = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c7) & 255;
                        openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c7) + ")";
                    }
                    openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
                }
                break;
            case 14:
                var c8 = data.readLineGradientStyle();
                if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c8), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c8));
                openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
                break;
            case 13:
                var c9 = data.readLineBitmapStyle();
                if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX, positionY - offsetY);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9));
                openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
                break;
            case 0:
                var c10 = data.readBeginBitmapFill();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c10), true);
                openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
                if (openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10) != null) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10);
                    openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c10).clone();
                    openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
                } else {
                    openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
                    openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
                }
                break;
            case 1:
                var c11 = data.readBeginFill();
                if (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) < 0.005) openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
                else {
                    if (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) == 1) openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11), 6);
                    else {
                        var r1 = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 16711680) >>> 16;
                        var g1 = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 65280) >>> 8;
                        var b1 = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c11) & 255;
                        openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c11) + ")";
                    }
                    openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
                    openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
                }
                break;
            case 2:
                var c12 = data.readBeginGradientFill();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c12), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c12));
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
                openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
                break;
            case 8:
                var c13 = data.readDrawRect();
                var optimizationUsed = false;
                if (openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
                    var st = 0;
                    var sr = 0;
                    var sb = 0;
                    var sl = 0;
                    var canOptimizeMatrix = true;
                    if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
                        if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) canOptimizeMatrix = false;
                        else {
                            var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13)));
                            var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13)));
                            st = stl.y;
                            sl = stl.x;
                            sb = sbr.y;
                            sr = sbr.x;
                        }
                    } else {
                        st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13);
                        sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13);
                        sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13);
                        sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13);
                    }
                    if (canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
                        optimizationUsed = true;
                        if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(), sl, st, sr - sl, sb - st, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13));
                    }
                }
                if (!optimizationUsed) openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c13) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c13) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c13));
                break;
            default:
                data.skip(type);
            }
        }
        data.destroy();
        if (stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
            if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX, startY - offsetY);
            else if (closeGap && positionX == startX && positionY == startY) openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
            if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
        }
        if (!stroke) {
            if (openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
                openfl__$internal_renderer_canvas_CanvasGraphics.context.translate( - openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x, -openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
                if (openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx, openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
                    if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx, openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
                } else if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
                openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
                openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
            }
        }
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics, renderSession) {
        var directRender = false;
        if (graphics.__dirty || directRender) {
            openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
            openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
            openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
            if (!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
                graphics.__canvas = null;
                graphics.__context = null;
                graphics.__bitmap = null;
            } else {
                if (directRender) {
                    openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
                    openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0, 0, openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width, openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
                } else {
                    if (graphics.__canvas == null) {
                        graphics.__canvas = window.document.createElement("canvas");
                        graphics.__context = graphics.__canvas.getContext("2d");
                    }
                    openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
                    graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
                    graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
                }
                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
                openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
                openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
                openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
                var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
                var _g = 0;
                var _g1 = graphics.__commands.types;
                try {
                    while (_g < _g1.length) {
                        var type = _g1[_g]; ++_g;
                        switch (type[1]) {
                        case 3:
                            var c = data.readCubicCurveTo();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
                            break;
                        case 4:
                            var c1 = data.readCurveTo();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
                            break;
                        case 16:
                            var c2 = data.readLineTo();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c2), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c2));
                            break;
                        case 17:
                            var c3 = data.readMoveTo();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c3), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c3));
                            break;
                        case 12:
                            data.readEndFill();
                            openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                            openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                            openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
                            openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
                            break;
                        case 15:
                            var c4 = data.readLineStyle();
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c4), openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c4));
                            break;
                        case 14:
                            var c5 = data.readLineGradientStyle();
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c5), openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c5));
                            break;
                        case 13:
                            var c6 = data.readLineBitmapStyle();
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c6), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c6), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c6), openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c6));
                            break;
                        case 0:
                        case 1:
                        case 2:
                            openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                            openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                            if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
                                var c7 = data.readBeginBitmapFill();
                                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
                                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c7), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c7));
                            } else if (type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
                                var c8 = data.readBeginGradientFill();
                                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
                                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c8), openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c8));
                            } else {
                                var c9 = data.readBeginFill();
                                openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9), openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c9));
                                openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c9), openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c9));
                            }
                            break;
                        case 5:
                            var c10 = data.readDrawCircle();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c10), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c10));
                            break;
                        case 6:
                            var c11 = data.readDrawEllipse();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c11), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c11));
                            break;
                        case 8:
                            var c12 = data.readDrawRect();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c12), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c12));
                            break;
                        case 9:
                            var c13 = data.readDrawRoundRect();
                            openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
                            openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c13), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c13));
                            break;
                        case 11:
                            openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                            openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                            var c14 = data.readDrawTriangles();
                            var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c14);
                            var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c14);
                            var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c14);
                            var pattern = null;
                            var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
                            if (colorFill && uvt != null) throw "__break__";
                            if (!colorFill) {
                                if (uvt == null) {
                                    var this1;
                                    this1 = new openfl_VectorData();
                                    var this2;
                                    this2 = new Array(0);
                                    this1.data = this2;
                                    this1.length = 0;
                                    this1.fixed = false;
                                    uvt = this1;
                                    var _g3 = 0;
                                    var _g2 = v.length / 2 | 0;
                                    while (_g3 < _g2) {
                                        var i1 = _g3++;
                                        if (!uvt.fixed) {
                                            uvt.length++;
                                            if (uvt.data.length < uvt.length) {
                                                var data1;
                                                var this3;
                                                this3 = new Array(uvt.data.length + 10);
                                                data1 = this3;
                                                haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data1, 0, uvt.data.length);
                                                uvt.data = data1;
                                            }
                                            uvt.data[uvt.length - 1] = v.data[i1 * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
                                        }
                                        uvt.length;
                                        if (!uvt.fixed) {
                                            uvt.length++;
                                            if (uvt.data.length < uvt.length) {
                                                var data2;
                                                var this4;
                                                this4 = new Array(uvt.data.length + 10);
                                                data2 = this4;
                                                haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data, 0, data2, 0, uvt.data.length);
                                                uvt.data = data2;
                                            }
                                            uvt.data[uvt.length - 1] = v.data[i1 * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
                                        }
                                        uvt.length;
                                    }
                                }
                                var skipT = uvt.length != v.length;
                                var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt, skipT);
                                var maxUVT = normalizedUVT.max;
                                uvt = normalizedUVT.uvt;
                                if (maxUVT > 1) pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0, openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
                                else pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width, openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
                            }
                            var i = 0;
                            var l = ind.length;
                            var a_;
                            var b_;
                            var c_;
                            var iax;
                            var iay;
                            var ibx;
                            var iby;
                            var icx;
                            var icy;
                            var x1;
                            var y1;
                            var x2;
                            var y2;
                            var x3;
                            var y3;
                            var uvx1;
                            var uvy1;
                            var uvx2;
                            var uvy2;
                            var uvx3;
                            var uvy3;
                            var denom;
                            var t1;
                            var t2;
                            var t3;
                            var t4;
                            var dx;
                            var dy;
                            while (i < l) {
                                a_ = i;
                                b_ = i + 1;
                                c_ = i + 2;
                                iax = ind.data[a_] * 2;
                                iay = ind.data[a_] * 2 + 1;
                                ibx = ind.data[b_] * 2;
                                iby = ind.data[b_] * 2 + 1;
                                icx = ind.data[c_] * 2;
                                icy = ind.data[c_] * 2 + 1;
                                x1 = v.data[iax];
                                y1 = v.data[iay];
                                x2 = v.data[ibx];
                                y2 = v.data[iby];
                                x3 = v.data[icx];
                                y3 = v.data[icy];
                                var _g21 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c14);
                                switch (_g21) {
                                case 2:
                                    if (! ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
                                        i += 3;
                                        continue;
                                    }
                                    break;
                                case 0:
                                    if ((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
                                        i += 3;
                                        continue;
                                    }
                                    break;
                                default:
                                }
                                if (colorFill) {
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1, y1);
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2, y2);
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3, y3);
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
                                    if (!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
                                    i += 3;
                                    continue;
                                }
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1, y1);
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2, y2);
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3, y3);
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
                                uvx1 = uvt.data[iax] * pattern.width;
                                uvx2 = uvt.data[ibx] * pattern.width;
                                uvx3 = uvt.data[icx] * pattern.width;
                                uvy1 = uvt.data[iay] * pattern.height;
                                uvy2 = uvt.data[iby] * pattern.height;
                                uvy3 = uvt.data[icy] * pattern.height;
                                denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
                                if (denom == 0) {
                                    i += 3;
                                    continue;
                                }
                                t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
                                t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
                                t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
                                t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
                                dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
                                dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1, t2, t3, t4, dx, dy);
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern, 0, 0);
                                openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
                                i += 3;
                            }
                            break;
                        case 10:
                            var c15 = data.readDrawTiles();
                            var useScale = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 1) > 0;
                            var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
                            var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
                            var useRotation = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 2) > 0;
                            var useTransform = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 16) > 0;
                            var useRGB = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 4) > 0;
                            var useAlpha = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 8) > 0;
                            var useRect = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 32) > 0;
                            var useOrigin = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 64) > 0;
                            var useBlendAdd = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c15) & 65536) > 0;
                            if (useTransform) {
                                useScale = false;
                                useRotation = false;
                            }
                            var scaleIndex = 0;
                            var rotationIndex = 0;
                            var rgbIndex = 0;
                            var alphaIndex = 0;
                            var transformIndex = 0;
                            var numValues = 3;
                            if (useRect) if (useOrigin) numValues = 8;
                            else numValues = 6;
                            if (useScale) {
                                scaleIndex = numValues;
                                numValues++;
                            }
                            if (useRotation) {
                                rotationIndex = numValues;
                                numValues++;
                            }
                            if (useTransform) {
                                transformIndex = numValues;
                                numValues += 4;
                            }
                            if (useRGB) {
                                rgbIndex = numValues;
                                numValues += 3;
                            }
                            if (useAlpha) {
                                alphaIndex = numValues;
                                numValues++;
                            }
                            var totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15).length;
                            if (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15) >= 0 && totalCount > openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15)) totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c15);
                            var itemCount = totalCount / numValues | 0;
                            var index = 0;
                            var rect = null;
                            var center = null;
                            var previousTileID = -1;
                            var surface;
                            openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__bitmap.__sync();
                            surface = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__bitmap.image.get_src();
                            if (useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
                            while (index < totalCount) {
                                var tileID;
                                if (!useRect) tileID = Std["int"](openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 2]);
                                else tileID = -1;
                                if (!useRect && tileID != previousTileID) {
                                    rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__tileRects[tileID];
                                    center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__centerPoints[tileID];
                                    previousTileID = tileID;
                                } else if (useRect) {
                                    rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__rectTile;
                                    rect.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 2], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 3], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 4], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 5]);
                                    center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c15).__point;
                                    if (useOrigin) center.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 6], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 7]);
                                    else center.setTo(0, 0);
                                }
                                if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index] - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + 1] - offsetY);
                                    if (useRotation) openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + rotationIndex]);
                                    var scale = 1.0;
                                    if (useScale) scale = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + scaleIndex];
                                    if (useTransform) openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 1], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 2], openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + transformIndex + 3], 0, 0);
                                    if (useAlpha) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c15)[index + alphaIndex];
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c15);
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface, rect.x, rect.y, rect.width, rect.height, -center.x * scale, -center.y * scale, rect.width * scale, rect.height * scale);
                                    openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
                                }
                                index += numValues;
                            }
                            if (useBlendAdd) openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
                            break;
                        default:
                            data.skip(type);
                        }
                    }
                } catch(e) {
                    if (e != "__break__") throw e;
                }
                if (openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
                if (openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
                data.destroy();
                graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
            }
            graphics.set___dirty(false);
        }
    };
    openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics, renderSession) {
        if (graphics.__commands.get_length() != 0) {
            openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
            var positionX = 0.0;
            var positionY = 0.0;
            var offsetX = 0;
            var offsetY = 0;
            var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
            var _g = 0;
            var _g1 = graphics.__commands.types;
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 3:
                    var c = data.readCubicCurveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
                    break;
                case 4:
                    var c1 = data.readCurveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1) - offsetY, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1) - offsetX, openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
                    break;
                case 5:
                    var c2 = data.readDrawCircle();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2), 0, Math.PI * 2, true);
                    break;
                case 6:
                    var c3 = data.readDrawEllipse();
                    var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
                    var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
                    var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
                    var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
                    x -= offsetX;
                    y -= offsetY;
                    var kappa = .5522848;
                    var ox = width / 2 * kappa;
                    var oy = height / 2 * kappa;
                    var xe = x + width;
                    var ye = y + height;
                    var xm = x + width / 2;
                    var ym = y + height / 2;
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x, ym);
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
                    break;
                case 8:
                    var c4 = data.readDrawRect();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
                    break;
                case 9:
                    var c5 = data.readDrawRoundRect();
                    openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5) - offsetX, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5) - offsetY, openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5), openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
                    break;
                case 16:
                    var c6 = data.readLineTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6) - offsetX, openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
                    break;
                case 17:
                    var c7 = data.readMoveTo();
                    openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7) - offsetX, openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7) - offsetY);
                    positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
                    positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
                    break;
                default:
                    data.skip(type);
                }
            }
            data.destroy();
        }
    };
    var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
        openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
    };
    $hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
    openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasMaskManager"];
    openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
    openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
        pushMask: function(mask) {
            var context = this.renderSession.context;
            context.save();
            var transform = mask.__getWorldTransform();
            context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
            context.beginPath();
            mask.__renderCanvasMask(this.renderSession);
            context.clip();
        },
        pushRect: function(rect, transform) {
            var context = this.renderSession.context;
            context.save();
            context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
            context.beginPath();
            context.rect(rect.x, rect.y, rect.width, rect.height);
            context.clip();
        },
        popMask: function() {
            this.renderSession.context.restore();
        },
        popRect: function() {
            this.renderSession.context.restore();
        },
        __class__: openfl__$internal_renderer_canvas_CanvasMaskManager
    });
    var openfl__$internal_renderer_canvas_CanvasRenderer = function(width, height, context) {
        openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
        this.context = context;
        this.renderSession = new openfl__$internal_renderer_RenderSession();
        this.renderSession.context = context;
        this.renderSession.roundPixels = true;
        this.renderSession.renderer = this;
        this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
    };
    $hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
    openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasRenderer"];
    openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
        render: function(stage) {
            this.context.setTransform(1, 0, 0, 1, 0, 0);
            this.context.globalAlpha = 1;
            if (!stage.__transparent && stage.__clearBeforeRender) {
                this.context.fillStyle = stage.__colorString;
                this.context.fillRect(0, 0, stage.stageWidth, stage.stageHeight);
            } else if (stage.__transparent && stage.__clearBeforeRender) this.context.clearRect(0, 0, stage.stageWidth, stage.stageHeight);
            stage.__renderCanvas(this.renderSession);
        },
        __class__: openfl__$internal_renderer_canvas_CanvasRenderer
    });
    var openfl__$internal_renderer_canvas_CanvasShape = function() {};
    $hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
    openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasShape"];
    openfl__$internal_renderer_canvas_CanvasShape.render = function(shape, renderSession) {
        if (!shape.__renderable || shape.__worldAlpha <= 0) return;
        var graphics = shape.__graphics;
        if (graphics != null) {
            openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics, renderSession);
            if (graphics.__canvas != null) {
                var context = renderSession.context;
                var scrollRect = shape.get_scrollRect();
                if (graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
                    if (shape.__mask != null) renderSession.maskManager.pushMask(shape.__mask);
                    context.globalAlpha = shape.__worldAlpha;
                    var transform = shape.__renderTransform;
                    if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0);
                    else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
                    if (scrollRect == null) context.drawImage(graphics.__canvas, graphics.__bounds.x, graphics.__bounds.y);
                    else context.drawImage(graphics.__canvas, Math.ceil(graphics.__bounds.x + scrollRect.x), Math.ceil(graphics.__bounds.y + scrollRect.y), scrollRect.width, scrollRect.height, Math.ceil(graphics.__bounds.x + scrollRect.x), Math.ceil(graphics.__bounds.y + scrollRect.y), scrollRect.width, scrollRect.height);
                    if (shape.__mask != null) renderSession.maskManager.popMask();
                }
            }
        }
    };
    var openfl__$internal_renderer_canvas_CanvasTextField = function() {};
    $hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
    openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl", "_internal", "renderer", "canvas", "CanvasTextField"];
    openfl__$internal_renderer_canvas_CanvasTextField.context = null;
    openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {};
    openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
        textEngine.__cursorPosition = -1;
        if (textEngine.__hiddenInput == null) {
            textEngine.__hiddenInput = window.document.createElement("input");
            var hiddenInput = textEngine.__hiddenInput;
            hiddenInput.type = "text";
            hiddenInput.style.position = "absolute";
            hiddenInput.style.opacity = "0";
            hiddenInput.style.color = "transparent";
            hiddenInput.style.left = "0px";
            hiddenInput.style.top = "50%";
            if (new EReg("(iPad|iPhone|iPod).*OS 8_", "gi").match(window.navigator.userAgent)) {
                hiddenInput.style.fontSize = "0px";
                hiddenInput.style.width = "0px";
                hiddenInput.style.height = "0px";
            } else {
                hiddenInput.style.width = "1px";
                hiddenInput.style.height = "1px";
            }
            hiddenInput.style.pointerEvents = "none";
            hiddenInput.style.zIndex = "-10000000";
            if (textEngine.maxChars > 0) hiddenInput.maxLength = textEngine.maxChars;
            window.document.body.appendChild(hiddenInput);
            hiddenInput.value = textEngine.text;
        }
    };
    openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField, renderSession) {
        if (textField.__dirty) {
            var textEngine = textField.__textEngine;
            textField.__updateLayout();
            if ((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
                textField.__graphics.__canvas = null;
                textField.__graphics.__context = null;
                textField.__graphics.set___dirty(false);
                textField.__dirty = false;
            } else {
                var bounds = textEngine.bounds;
                if (textField.__graphics == null || textField.__graphics.__canvas == null) {
                    if (textField.__graphics == null) textField.__graphics = new openfl_display_Graphics();
                    textField.__graphics.__canvas = window.document.createElement("canvas");
                    textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
                    textField.__graphics.__bounds = new openfl_geom_Rectangle(0, 0, bounds.width, bounds.height);
                }
                var graphics = textField.__graphics;
                openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
                if (textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
                    var text = textEngine.text;
                    if (textEngine.displayAsPassword) {
                        var length = text.length;
                        var mask = "";
                        var _g = 0;
                        while (_g < length) {
                            var i = _g++;
                            mask += "*";
                        }
                        text = mask;
                    }
                    graphics.__canvas.width = Math.ceil(bounds.width);
                    graphics.__canvas.height = Math.ceil(bounds.height);
                    if (textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
                        graphics.__context.mozImageSmoothingEnabled = true;
                        graphics.__context.msImageSmoothingEnabled = true;
                        graphics.__context.imageSmoothingEnabled = true;
                    } else {
                        graphics.__context.mozImageSmoothingEnabled = false;
                        graphics.__context.msImageSmoothingEnabled = false;
                        graphics.__context.imageSmoothingEnabled = false;
                    }
                    if (textEngine.border || textEngine.background) {
                        openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5, 0.5, bounds.width - 1, bounds.height - 1);
                        if (textEngine.background) {
                            openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor, 6);
                            openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                        }
                        if (textEngine.border) {
                            openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                            openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor, 6);
                            openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                        }
                    }
                    openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
                    openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
                    var scrollX = -textField.get_scrollH();
                    var scrollY = 0.0;
                    var _g1 = 0;
                    var _g2 = textField.get_scrollV() - 1;
                    while (_g1 < _g2) {
                        var i1 = _g1++;
                        scrollY -= textEngine.lineHeights[i1];
                    }
                    var advance;
                    var offsetY = 0.0;
                    var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)", "g").match(window.navigator.userAgent);
                    var _g3 = 0;
                    var _g11 = textEngine.layoutGroups;
                    while (_g3 < _g11.length) {
                        var group = _g11[_g3]; ++_g3;
                        if (group.lineIndex < textField.get_scrollV() - 1) continue;
                        if (group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) break;
                        openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
                        openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color, 6);
                        if (applyHack) offsetY = group.format.size * 0.185;
                        openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex, group.endIndex), group.offsetX + scrollX, group.offsetY + offsetY + scrollY);
                        if (textField.__caretIndex > -1 && textEngine.selectable) {
                            if (textField.__selectionIndex == textField.__caretIndex) {
                                if (textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
                                    advance = 0.0;
                                    var _g31 = 0;
                                    var _g21 = textField.__caretIndex - group.startIndex;
                                    while (_g31 < _g21) {
                                        var i2 = _g31++;
                                        if (group.advances.length <= i2) break;
                                        advance += group.advances[i2];
                                    }
                                    openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance, group.offsetY, 1, group.height);
                                }
                            } else if (group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
                                var selectionStart = Std["int"](Math.min(textField.__selectionIndex, textField.__caretIndex));
                                var selectionEnd = Std["int"](Math.max(textField.__selectionIndex, textField.__caretIndex));
                                if (group.startIndex > selectionStart) selectionStart = group.startIndex;
                                if (group.endIndex < selectionEnd) selectionEnd = group.endIndex;
                                var start;
                                var end;
                                start = textField.getCharBoundaries(selectionStart);
                                if (selectionEnd >= textEngine.text.length) {
                                    end = textField.getCharBoundaries(textEngine.text.length - 1);
                                    end.x += end.width + 2;
                                } else end = textField.getCharBoundaries(selectionEnd);
                                if (start != null && end != null) {
                                    openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
                                    openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x, start.y, end.x - start.x, group.height);
                                    openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
                                    openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart, selectionEnd), scrollX + start.x, group.offsetY + offsetY + scrollY);
                                }
                            }
                        }
                    }
                } else {
                    graphics.__canvas.width = Math.ceil(bounds.width);
                    graphics.__canvas.height = Math.ceil(bounds.height);
                    if (textEngine.border || textEngine.background) {
                        if (textEngine.border) openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5, 0.5, bounds.width - 1, bounds.height - 1);
                        else openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0, 0, bounds.width, bounds.height);
                        if (textEngine.background) {
                            openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor, 6);
                            openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
                        }
                        if (textEngine.border) {
                            openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
                            openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
                            openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor, 6);
                            openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
                        }
                    }
                }
                graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
                textField.__dirty = false;
                graphics.set___dirty(false);
            }
        }
    };
    var openfl__$internal_renderer_console_ConsoleRenderer = function(width, height, ctx) {
        openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
        throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
    };
    $hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
    openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl", "_internal", "renderer", "console", "ConsoleRenderer"];
    openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
        render: function(stage) {},
        __class__: openfl__$internal_renderer_console_ConsoleRenderer
    });
    var openfl__$internal_renderer_dom_DOMBitmap = function() {};
    $hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
    openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMBitmap"];
    openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap, renderSession) {
        if (bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
            if (bitmap.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap, renderSession);
            else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap, renderSession);
        } else {
            if (bitmap.__image != null) {
                renderSession.element.removeChild(bitmap.__image);
                bitmap.__image = null;
                bitmap.__style = null;
            }
            if (bitmap.__canvas != null) {
                renderSession.element.removeChild(bitmap.__canvas);
                bitmap.__canvas = null;
                bitmap.__style = null;
            }
        }
    };
    openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap, renderSession) {
        if (bitmap.__image != null) {
            renderSession.element.removeChild(bitmap.__image);
            bitmap.__image = null;
        }
        if (bitmap.__canvas == null) {
            bitmap.__canvas = window.document.createElement("canvas");
            bitmap.__context = bitmap.__canvas.getContext("2d");
            if (!bitmap.smoothing) {
                bitmap.__context.mozImageSmoothingEnabled = false;
                bitmap.__context.msImageSmoothingEnabled = false;
                bitmap.__context.imageSmoothingEnabled = false;
            }
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap, bitmap.__canvas, renderSession);
        }
        bitmap.bitmapData.__sync();
        bitmap.__canvas.width = bitmap.bitmapData.width;
        bitmap.__canvas.height = bitmap.bitmapData.height;
        bitmap.__context.globalAlpha = bitmap.__worldAlpha;
        bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas, 0, 0);
        openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap, renderSession, true, false, true);
    };
    openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap, renderSession) {
        if (bitmap.__canvas != null) {
            renderSession.element.removeChild(bitmap.__canvas);
            bitmap.__canvas = null;
        }
        if (bitmap.__image == null) {
            bitmap.__image = window.document.createElement("img");
            bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
            openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap, bitmap.__image, renderSession);
        }
        openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap, renderSession, true, true, true);
    };
    var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
        openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
    };
    $hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
    openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMMaskManager"];
    openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
    openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
        pushMask: function(mask) {},
        pushRect: function(rect, transform) {},
        popMask: function() {},
        __class__: openfl__$internal_renderer_dom_DOMMaskManager
    });
    var openfl__$internal_renderer_dom_DOMRenderer = function(width, height, element) {
        openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
        this.element = element;
        this.renderSession = new openfl__$internal_renderer_RenderSession();
        this.renderSession.element = element;
        this.renderSession.roundPixels = true;
        var prefix = (function() {
            var styles = window.getComputedStyle(document.documentElement, ''),
            pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o']))[1],
            dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
            return {
                dom: dom,
                lowercase: pre,
                css: '-' + pre + '-',
                js: pre[0].toUpperCase() + pre.substr(1)
            };
        })();
        this.renderSession.vendorPrefix = prefix.lowercase;
        if (prefix.lowercase == "webkit") this.renderSession.transformProperty = "-webkit-transform";
        else this.renderSession.transformProperty = "transform";
        if (prefix.lowercase == "webkit") this.renderSession.transformOriginProperty = "-webkit-transform-origin";
        else this.renderSession.transformOriginProperty = "transform-origin";
        this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
        this.renderSession.renderer = this;
    };
    $hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
    openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMRenderer"];
    openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject, renderSession, setTransform, setAlpha, setClip) {
        var style = displayObject.__style;
        if (setTransform && displayObject.__worldTransformChanged) style.setProperty(renderSession.transformProperty, displayObject.__worldTransform.to3DString(renderSession.roundPixels), null);
        if (displayObject.__worldZ != ++renderSession.z) {
            displayObject.__worldZ = renderSession.z;
            style.setProperty("z-index", displayObject.__worldZ == null ? "null": "" + displayObject.__worldZ, null);
        }
        if (setAlpha && displayObject.__worldAlphaChanged) {
            if (displayObject.__worldAlpha < 1) style.setProperty("opacity", displayObject.__worldAlpha == null ? "null": "" + displayObject.__worldAlpha, null);
            else style.removeProperty("opacity");
        }
        if (setClip && displayObject.__worldClipChanged) {
            if (displayObject.__worldClip == null) style.removeProperty("clip");
            else {
                var clip = openfl_geom_Rectangle.__temp;
                var matrix = openfl_geom_Matrix.__temp;
                matrix.copyFrom(displayObject.__worldTransform);
                matrix.invert();
                displayObject.__worldClip.__transform(clip, matrix);
                style.setProperty("clip", "rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)", null);
            }
        }
    };
    openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject, element, renderSession) {
        var style = displayObject.__style = element.style;
        style.setProperty("position", "absolute", null);
        style.setProperty("top", "0", null);
        style.setProperty("left", "0", null);
        style.setProperty(renderSession.transformOriginProperty, "0 0 0", null);
        renderSession.element.appendChild(element);
        displayObject.__worldAlphaChanged = true;
        displayObject.__worldClipChanged = true;
        displayObject.__worldTransformChanged = true;
        displayObject.__worldVisibleChanged = true;
        displayObject.__worldZ = -1;
    };
    openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
        render: function(stage) {
            this.element.style.background = stage.__colorString;
            this.renderSession.z = 1;
            stage.__renderDOM(this.renderSession);
        },
        __class__: openfl__$internal_renderer_dom_DOMRenderer
    });
    var openfl__$internal_renderer_dom_DOMShape = function() {};
    $hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
    openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMShape"];
    openfl__$internal_renderer_dom_DOMShape.render = function(shape, renderSession) {
        var graphics = shape.__graphics;
        if (shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
            if (graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
                openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics, renderSession);
                if (graphics.__canvas != null) {
                    if (shape.__canvas == null) {
                        shape.__canvas = window.document.createElement("canvas");
                        shape.__context = shape.__canvas.getContext("2d");
                        openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape, shape.__canvas, renderSession);
                    }
                    shape.__canvas.width = graphics.__canvas.width;
                    shape.__canvas.height = graphics.__canvas.height;
                    shape.__context.globalAlpha = shape.__worldAlpha;
                    shape.__context.drawImage(graphics.__canvas, 0, 0);
                } else if (shape.__canvas != null) {
                    renderSession.element.removeChild(shape.__canvas);
                    shape.__canvas = null;
                    shape.__style = null;
                }
            }
            if (shape.__canvas != null) {
                if (shape.__worldTransformChanged || graphics.__transformDirty) {
                    graphics.__transformDirty = false;
                    var transform = openfl_geom_Matrix.__temp;
                    transform.identity();
                    transform.translate(graphics.__bounds.x, graphics.__bounds.y);
                    transform.concat(shape.__worldTransform);
                    shape.__style.setProperty(renderSession.transformProperty, renderSession.roundPixels ? "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)": "matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)", null);
                }
                openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape, renderSession, false, false, true);
            }
        } else if (shape.__canvas != null) {
            renderSession.element.removeChild(shape.__canvas);
            shape.__canvas = null;
            shape.__style = null;
        }
    };
    var openfl__$internal_renderer_dom_DOMTextField = function() {};
    $hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
    openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl", "_internal", "renderer", "dom", "DOMTextField"];
    openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
        var textEngine = textField.__textEngine;
        var div = textField.__div;
        if (div == null) {
            div = window.document.createElement("div");
            div.innerHTML = new EReg("\n", "g").replace(textEngine.text, "<br>");
            div.style.setProperty("font", openfl__$internal_text_TextEngine.getFont(textField.__textFormat), null);
            div.style.setProperty("pointer-events", "none", null);
            div.style.position = "absolute";
            div.style.top = "110%";
            window.document.body.appendChild(div);
        }
        textEngine.__measuredWidth = div.clientWidth;
        if (textField.__div == null) div.style.width = Std.string(textEngine.width - 4) + "px";
        textEngine.__measuredHeight = div.clientHeight;
        if (textField.__div == null) window.document.body.removeChild(div);
    };
    openfl__$internal_renderer_dom_DOMTextField.render = function(textField, renderSession) {
        var textEngine = textField.__textEngine;
        if (textField.stage != null && textField.__worldVisible && textField.__renderable) {
            if (textField.__dirty || textField.__div == null) {
                if (textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
                    if (textField.__div == null) {
                        textField.__div = window.document.createElement("div");
                        openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField, textField.__div, renderSession);
                        textField.__style.setProperty("outline", "none", null);
                        textField.__div.addEventListener("input",
                        function(event) {
                            event.preventDefault();
                            if (textField.get_htmlText() != textField.__div.innerHTML) {
                                textField.set_htmlText(textField.__div.innerHTML);
                                textField.__dirty = false;
                            }
                        },
                        true);
                    }
                    if (textEngine.selectable) textField.__style.setProperty("cursor", "text", null);
                    else textField.__style.setProperty("cursor", "inherit", null);
                    textField.__div.contentEditable = textEngine.type == 1;
                    var style = textField.__style;
                    textField.__div.innerHTML = textEngine.text;
                    if (textEngine.background) style.setProperty("background-color", "#" + StringTools.hex(textEngine.backgroundColor, 6), null);
                    else style.removeProperty("background-color");
                    if (textEngine.border) style.setProperty("border", "solid 1px #" + StringTools.hex(textEngine.borderColor, 6), null);
                    else style.removeProperty("border");
                    style.setProperty("font", openfl__$internal_text_TextEngine.getFont(textField.__textFormat), null);
                    style.setProperty("color", "#" + StringTools.hex(textField.__textFormat.color, 6), null);
                    if (textEngine.autoSize != 2) style.setProperty("width", "auto", null);
                    else style.setProperty("width", textEngine.width + "px", null);
                    style.setProperty("height", textEngine.height + "px", null);
                    var _g = textField.__textFormat.align;
                    switch (_g) {
                    case 0:
                        style.setProperty("text-align", "center", null);
                        break;
                    case 4:
                        style.setProperty("text-align", "right", null);
                        break;
                    default:
                        style.setProperty("text-align", "left", null);
                    }
                    textField.__dirty = false;
                } else if (textField.__div != null) {
                    renderSession.element.removeChild(textField.__div);
                    textField.__div = null;
                }
            }
            if (textField.__div != null) openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField, renderSession, true, true, false);
        } else if (textField.__div != null) {
            renderSession.element.removeChild(textField.__div);
            textField.__div = null;
            textField.__style = null;
        }
    };
    var openfl__$internal_renderer_opengl_GLBitmap = function() {};
    $hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
    openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl", "_internal", "renderer", "opengl", "GLBitmap"];
    openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap, renderSession) {
        if (!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) return;
        renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData, bitmap.smoothing, bitmap.__renderTransform, bitmap.__worldColorTransform, bitmap.__worldAlpha, bitmap.__blendMode, bitmap.__shader, bitmap.pixelSnapping);
    };
    openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession, texture, viewPort, smoothing, transparent, clearBuffer, powerOfTwo) {
        if (powerOfTwo == null) powerOfTwo = true;
        if (clearBuffer == null) clearBuffer = false;
        if (transparent == null) transparent = true;
        var gl = renderSession.gl;
        if (gl == null) return null;
        var renderer = renderSession.renderer;
        var spritebatch = renderSession.spriteBatch;
        var x = viewPort.x | 0;
        var y = viewPort.y | 0;
        var width = viewPort.width | 0;
        var height = viewPort.height | 0;
        spritebatch.finish();
        if (openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) openfl__$internal_renderer_opengl_GLBitmap.fbData.push({
            texture: null,
            viewPort: null,
            transparent: renderer.transparent
        });
        if (texture == null) texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl, width, height, smoothing, powerOfTwo);
        texture.resize(width, height);
        renderer.transparent = transparent;
        renderSession.maskManager.saveState();
        gl.bindFramebuffer(gl.FRAMEBUFFER, (texture.__swapped ? texture.__texture1: texture.__texture0).frameBuffer);
        renderer.setViewport(x, y, width, height);
        gl.colorMask(true, true, true, true);
        renderSession.blendModeManager.setBlendMode(10);
        if (clearBuffer)(texture.__swapped ? texture.__texture1: texture.__texture0).clear(0, 0, 0, 0, null);
        openfl__$internal_renderer_opengl_GLBitmap.fbData.push({
            texture: texture,
            viewPort: viewPort,
            transparent: transparent
        });
        return texture;
    };
    openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession, target, source, matrix, colorTransform, blendMode, clipRect) {
        var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
        if (data == null) throw new js__$Boot_HaxeError("No data to draw to");
        var gl = renderSession.gl;
        if (gl == null) return;
        var viewPort = data.viewPort;
        var renderer = renderSession.renderer;
        var spritebatch = renderSession.spriteBatch;
        var drawTarget = target != null;
        var tmpRect;
        if (clipRect == null) tmpRect = new openfl_geom_Rectangle(viewPort.x, viewPort.y, viewPort.width, viewPort.height);
        else tmpRect = clipRect.clone();
        spritebatch.begin(renderSession, drawTarget ? null: tmpRect);
        if (drawTarget) {
            target.__worldTransform.identity();
            openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(target.__worldTransform, viewPort.height);
            target.__renderGL(renderSession);
            spritebatch.stop();
            if (target.__texture != null) gl.deleteTexture(target.__texture);
            target.__texture = null;
            spritebatch.start(tmpRect);
        }
        var ctCache = source.__worldColorTransform;
        var blendModeCache = source.__blendMode;
        var cached = source.__cacheAsBitmap;
        var m;
        if (matrix != null) m = matrix.clone();
        else m = new openfl_geom_Matrix();
        openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m, viewPort.height);
        if (colorTransform != null) source.__worldColorTransform = colorTransform;
        else source.__worldColorTransform = new openfl_geom_ColorTransform();
        source.__blendMode = blendMode;
        openfl_display_DisplayObject.__cacheAsBitmapMode = true;
        source.__updateTransforms(m);
        source.__updateChildren(false);
        source.__cacheAsBitmap = false;
        source.__renderGL(renderSession);
        source.__cacheAsBitmap = cached;
        source.__worldColorTransform = ctCache;
        source.__blendMode = blendModeCache;
        openfl_display_DisplayObject.__cacheAsBitmapMode = false;
        source.__updateTransforms();
        source.__updateChildren(false);
    };
    openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession, image) {
        var gl = renderSession.gl;
        if (gl == null) return;
        renderSession.spriteBatch.finish();
        openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
        var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
        if (data == null) throw new js__$Boot_HaxeError("oh");
        var x;
        var y;
        var width;
        var height;
        if (data.viewPort == null) {
            x = y = 0;
            width = renderSession.renderer.width;
            height = renderSession.renderer.height;
        } else {
            x = Math.floor(data.viewPort.x);
            y = Math.floor(data.viewPort.y);
            width = Math.ceil(data.viewPort.width);
            height = Math.ceil(data.viewPort.height);
        }
        if (image != null) {
            if (image.width != width || image.height != height) image.resize(width, height);
            gl.readPixels(x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, image.buffer.data);
            image.dirty = false;
            image.set_premultiplied(true);
        }
        gl.bindFramebuffer(gl.FRAMEBUFFER, data.texture == null ? renderSession.defaultFramebuffer: data.texture.get_framebuffer());
        renderSession.renderer.setViewport(x, y, width, height);
        renderSession.renderer.transparent = data.transparent;
        renderSession.maskManager.restoreState();
    };
    openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m, height) {
        var tx = m.tx;
        var ty = m.ty;
        m.tx = 0;
        m.ty = 0;
        m.scale(1, -1);
        m.translate(0, height);
        m.tx += tx;
        m.ty -= ty;
    };
    var openfl__$internal_renderer_opengl_GLRenderer = function(width, height, gl, transparent, antialias, preserveDrawingBuffer) {
        if (preserveDrawingBuffer == null) preserveDrawingBuffer = false;
        if (antialias == null) antialias = false;
        if (transparent == null) transparent = false;
        if (height == null) height = 600;
        if (width == null) width = 800;
        this.vpHeight = 0;
        this.vpWidth = 0;
        this.vpY = 0;
        this.vpX = 0;
        openfl__$internal_renderer_AbstractRenderer.call(this, width, height);
        this.transparent = transparent;
        this.preserveDrawingBuffer = preserveDrawingBuffer;
        this.width = width;
        this.height = height;
        this.viewport = new openfl_geom_Rectangle();
        this.options = {
            alpha: transparent,
            antialias: antialias,
            premultipliedAlpha: transparent,
            stencil: true,
            preserveDrawingBuffer: preserveDrawingBuffer
        };
        this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
        this.gl = gl;
        this.defaultFramebuffer = null;
        openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
        this.projectionMatrix = new openfl_geom_Matrix();
        this.projection = new openfl_geom_Point();
        this.projection.x = this.width / 2;
        this.projection.y = -this.height / 2;
        this.offset = new openfl_geom_Point(0, 0);
        this.resize(this.width, this.height);
        this.contextLost = false;
        this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
        this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
        this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl, this.transparent);
        this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
        this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
        this.renderSession = new openfl__$internal_renderer_RenderSession();
        this.renderSession.gl = this.gl;
        this.renderSession.drawCount = 0;
        this.renderSession.shaderManager = this.shaderManager;
        this.renderSession.filterManager = this.filterManager;
        this.renderSession.blendModeManager = this.blendModeManager;
        this.renderSession.spriteBatch = this.spriteBatch;
        this.renderSession.stencilManager = this.stencilManager;
        this.renderSession.renderer = this;
        this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
        this.renderSession.projectionMatrix = this.projectionMatrix;
        this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
        this.renderSession.maskManager = this.maskManager;
        this.shaderManager.setShader(this.shaderManager.defaultShader);
        gl.disable(gl.DEPTH_TEST);
        gl.disable(gl.CULL_FACE);
        gl.enable(gl.BLEND);
        gl.colorMask(true, true, true, this.transparent);
    };
    $hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
    openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl", "_internal", "renderer", "opengl", "GLRenderer"];
    openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape, renderSession, smooth) {
        if (smooth == null) smooth = true;
        if (!shape.__renderable || shape.__worldAlpha <= 0) return;
        if (shape.__graphics == null || shape.__graphics.__bitmap == null) return;
        var rect = openfl_geom_Rectangle.__temp;
        var matrix = openfl_geom_Matrix.__temp;
        rect.setEmpty();
        matrix.identity();
        shape.__getBounds(rect, matrix);
        var bitmap = shape.__graphics.__bitmap;
        matrix.translate(shape.__graphics.__bounds.x, shape.__graphics.__bounds.y);
        matrix.concat(shape.__renderTransform);
        renderSession.spriteBatch.renderBitmapData(bitmap, smooth, matrix, shape.__worldColorTransform, shape.__worldAlpha, shape.__blendMode, null, 0);
    };
    openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
    openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype, {
        destroy: function() {
            openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
            this.projection = null;
            this.offset = null;
            this.shaderManager.destroy();
            this.spriteBatch.destroy();
            this.maskManager.destroy();
            this.filterManager.destroy();
            this.shaderManager = null;
            this.spriteBatch = null;
            this.maskManager = null;
            this.filterManager = null;
            this.gl = null;
            this.renderSession = null;
        },
        setViewport: function(x, y, width, height) {
            if (! (this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
                this.vpX = x;
                this.vpY = y;
                this.vpWidth = width;
                this.vpHeight = height;
                this.gl.viewport(x, y, width, height);
                this.setOrtho(x, y, width, height);
                this.viewport.setTo(x, y, width, height);
            }
        },
        setOrtho: function(x, y, width, height) {
            var o = this.projectionMatrix;
            o.identity();
            o.a = 1 / width * 2;
            o.d = -1 / height * 2;
            o.tx = -1 - x * o.a;
            o.ty = 1 - y * o.d;
        },
        handleContextLost: function(event) {
            event.preventDefault();
            this.contextLost = true;
        },
        handleContextRestored: function() {
            var gl = this.gl;
            openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
            this.shaderManager.setContext(gl);
            this.spriteBatch.setContext(gl);
            this.maskManager.setContext(gl);
            this.filterManager.setContext(gl);
            this.renderSession.gl = gl;
            this.defaultFramebuffer = null;
            gl.disable(gl.DEPTH_TEST);
            gl.disable(gl.CULL_FACE);
            gl.enable(gl.BLEND);
            gl.colorMask(true, true, true, this.transparent);
            this.setViewport(0, 0, this.width, this.height);
            this.contextLost = false;
        },
        render: function(stage) {
            if (this.contextLost) return;
            var gl = this.gl;
            this.setViewport(0, 0, this.width, this.height);
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.defaultFramebuffer);
            if (this.transparent) gl.clearColor(0, 0, 0, 0);
            else gl.clearColor(stage.__colorSplit[0], stage.__colorSplit[1], stage.__colorSplit[2], 1);
            gl.clear(gl.COLOR_BUFFER_BIT);
            this.renderDisplayObject(stage, this.projection);
        },
        renderDisplayObject: function(displayObject, projection, buffer) {
            this.renderSession.blendModeManager.setBlendMode(10);
            this.renderSession.drawCount = 0;
            this.renderSession.currentBlendMode = null;
            this.spriteBatch.begin(this.renderSession);
            this.filterManager.begin(this.renderSession, buffer);
            displayObject.__renderGL(this.renderSession);
            this.spriteBatch.finish();
        },
        resize: function(width, height) {
            this.width = width;
            this.height = height;
            openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this, width, height);
            this.setViewport(0, 0, width, height);
            this.projection.x = width / 2;
            this.projection.y = -height / 2;
        },
        __class__: openfl__$internal_renderer_opengl_GLRenderer
    });
    var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
        this.wrapT = 33071;
        this.wrapS = 33071;
        this.compiled = false;
        this.uniforms = new haxe_ds_StringMap();
        this.attributes = new haxe_ds_StringMap();
        this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
        this.gl = gl;
        this.program = null;
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "Shader"];
    openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl, vertexSrc, fragmentSrc) {
        var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
        var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
        if (__map_reserved[key] != null ? cache.existsReserved(key) : cache.h.hasOwnProperty(key)) return __map_reserved[key] != null ? cache.getReserved(key) : cache.h[key];
        var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl, vertexSrc, gl.VERTEX_SHADER);
        var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl, fragmentSrc, gl.FRAGMENT_SHADER);
        var program = gl.createProgram();
        if (vertexShader != null && fragmentShader != null) {
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            gl.deleteShader(vertexShader);
            gl.deleteShader(fragmentShader);
            if (gl.getProgramParameter(program, gl.LINK_STATUS) == 0) {
                haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program), {
                    fileName: "Shader.hx",
                    lineNumber: 226,
                    className: "openfl._internal.renderer.opengl.shaders2.Shader",
                    methodName: "compileProgram"
                });
                haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc, {
                    fileName: "Shader.hx",
                    lineNumber: 227,
                    className: "openfl._internal.renderer.opengl.shaders2.Shader",
                    methodName: "compileProgram"
                });
                return null;
            }
        }
        if (__map_reserved[key] != null) cache.setReserved(key, program);
        else cache.h[key] = program;
        return program;
    };
    openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl, shaderSrc, type) {
        var src = shaderSrc;
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) == 0) {
            haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader), {
                fileName: "Shader.hx",
                lineNumber: 244,
                className: "openfl._internal.renderer.opengl.shaders2.Shader",
                methodName: "compileShader"
            });
            haxe_Log.trace(shaderSrc, {
                fileName: "Shader.hx",
                lineNumber: 245,
                className: "openfl._internal.renderer.opengl.shaders2.Shader",
                methodName: "compileShader"
            });
            return null;
        }
        return shader;
    };
    openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
        init: function(force) {
            if (force == null) force = false;
            if (this.compiled && !force) return;
            if (this.vertexSrc != null) this.vertexString = this.vertexSrc.join("\n");
            if (this.fragmentSrc != null) this.fragmentString = this.fragmentSrc.join("\n");
            if (this.vertexString == null || this.fragmentString == null) throw new js__$Boot_HaxeError("No vertex or fragment source provided");
            this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl, this.vertexString, this.fragmentString);
            if (this.program != null) this.compiled = true;
        },
        destroy: function() {
            if (this.program != null) this.gl.deleteProgram(this.program);
            this.compiled = false;
            this.attributes = null;
        },
        applyData: function(shaderData, renderSession) {
            if (shaderData == null) return;
            var param;
            var u;
            var v;
            var bd;
            var $it0 = shaderData.keys();
            while ($it0.hasNext()) {
                var key = $it0.next();
                u = this.getUniformLocation(key);
                param = __map_reserved[key] != null ? shaderData.getReserved(key) : shaderData.h[key];
                if (param == null) continue;
                v = param.value;
                bd = param.bitmap;
                if (v == null && bd == null) continue;
                var _g = param.internalType;
                switch (_g) {
                case 1:
                    var _g1 = param.size;
                    switch (_g1) {
                    case 1:
                        this.gl.uniform1i(u, v[0] | 0);
                        break;
                    case 2:
                        this.gl.uniform2i(u, v[0] | 0, v[1] | 0);
                        break;
                    case 3:
                        this.gl.uniform3i(u, v[0] | 0, v[1] | 0, v[2] | 0);
                        break;
                    case 4:
                        this.gl.uniform4i(u, v[0] | 0, v[1] | 0, v[2] | 0, v[3] | 0);
                        break;
                    }
                    break;
                case 2:
                    var _g11 = param.size;
                    switch (_g11) {
                    case 1:
                        this.gl.uniform1f(u, v[0]);
                        break;
                    case 2:
                        this.gl.uniform2f(u, v[0], v[1]);
                        break;
                    case 3:
                        this.gl.uniform3f(u, v[0], v[1], v[2]);
                        break;
                    case 4:
                        this.gl.uniform4f(u, v[0], v[1], v[2], v[3]);
                        break;
                    }
                    break;
                case 3:
                    var _g12 = param.size;
                    switch (_g12) {
                    case 2:
                        this.gl.uniformMatrix2fv(u, param.transpose, (function($this) {
                            var $r;
                            var array = param.value;
                            var this1;
                            if (array != null) this1 = new Float32Array(array);
                            else this1 = null;
                            $r = this1;
                            return $r;
                        } (this)));
                        break;
                    case 3:
                        this.gl.uniformMatrix3fv(u, param.transpose, (function($this) {
                            var $r;
                            var array1 = param.value;
                            var this2;
                            if (array1 != null) this2 = new Float32Array(array1);
                            else this2 = null;
                            $r = this2;
                            return $r;
                        } (this)));
                        break;
                    case 4:
                        this.gl.uniformMatrix4fv(u, param.transpose, (function($this) {
                            var $r;
                            var array2 = param.value;
                            var this3;
                            if (array2 != null) this3 = new Float32Array(array2);
                            else this3 = null;
                            $r = this3;
                            return $r;
                        } (this)));
                        break;
                    }
                    break;
                case 4:
                    if (bd == null || !bd.__isValid) continue;
                    this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
                    this.gl.bindTexture(this.gl.TEXTURE_2D, bd.getTexture(this.gl));
                    this.gl.uniform1i(u, renderSession.activeTextures);
                    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, param.smooth ? this.gl.LINEAR: this.gl.NEAREST);
                    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, param.smooth ? this.gl.LINEAR: this.gl.NEAREST);
                    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, param.repeatX);
                    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, param.repeatY);
                    renderSession.activeTextures++;
                    break;
                default:
                }
            }
        },
        getAttribLocation: function(attribute) {
            if (this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
            if (this.attributes.exists(attribute)) return this.attributes.get(attribute);
            else {
                var location = this.gl.getAttribLocation(this.program, attribute);
                this.attributes.set(attribute, location);
                return location;
            }
        },
        getUniformLocation: function(uniform) {
            if (this.program == null) throw new js__$Boot_HaxeError("Shader isn't initialized");
            if (this.uniforms.exists(uniform)) return this.uniforms.get(uniform);
            else {
                var location = this.gl.getUniformLocation(this.program, uniform);
                this.uniforms.set(uniform, location);
                return location;
            }
        },
        enableVertexAttribute: function(attribute, stride, offset) {
            var location = this.getAttribLocation(attribute.name);
            this.gl.enableVertexAttribArray(location);
            this.gl.vertexAttribPointer(location, attribute.components, attribute.type, attribute.normalized, stride, offset * 4);
        },
        disableVertexAttribute: function(attribute, setDefault) {
            if (setDefault == null) setDefault = true;
            var location = this.getAttribLocation(attribute.name);
            this.gl.disableVertexAttribArray(location);
            if (setDefault) {
                var _g = attribute.components;
                switch (_g) {
                case 1:
                    this.gl.vertexAttrib1fv(location, attribute.defaultValue.subarray(0, 1));
                    break;
                case 2:
                    this.gl.vertexAttrib2fv(location, attribute.defaultValue.subarray(0, 2));
                    break;
                case 3:
                    this.gl.vertexAttrib3fv(location, attribute.defaultValue.subarray(0, 3));
                    break;
                default:
                    this.gl.vertexAttrib4fv(location, attribute.defaultValue.subarray(0, 4));
                }
            }
        },
        bindVertexArray: function(va) {
            var offset = 0;
            var stride = va.get_stride();
            var _g = 0;
            var _g1 = va.attributes;
            while (_g < _g1.length) {
                var attribute = _g1[_g]; ++_g;
                if (attribute.enabled) {
                    this.enableVertexAttribute(attribute, stride, offset);
                    offset += Math.floor(attribute.components * attribute.getElementsBytes() / 4);
                } else this.disableVertexAttribute(attribute, true);
            }
        },
        unbindVertexArray: function(va) {
            var _g = 0;
            var _g1 = va.attributes;
            while (_g < _g1.length) {
                var attribute = _g1[_g]; ++_g;
                this.disableVertexAttribute(attribute, false);
            }
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_Shader
    };
    var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
        openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
        this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
        this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "uniform bool " + "openfl_uUseColorTransform" + ";", "varying vec2 " + "openfl_vTexCoord" + ";", "varying vec4 " + "openfl_vColor" + ";", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "\tif(!" + "openfl_uUseColorTransform" + ") {", "\t\treturn color * tint;", "\t}", "\tvec4 unmultiply;", "\tif (color.a == 0.0) {", "\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);", "\t} else {", "   \tunmultiply = vec4(color.rgb / color.a, color.a);", "\t}", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");", "   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
        this.init();
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
    openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "DefaultShader"];
    openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
        init: function(force) {
            if (force == null) force = false;
            openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
            this.getAttribLocation("openfl_aPosition");
            this.getAttribLocation("openfl_aTexCoord0");
            this.getAttribLocation("openfl_aColor");
            this.getUniformLocation("openfl_uProjectionMatrix");
            this.getUniformLocation("openfl_uSampler0");
            this.getUniformLocation("openfl_uColorMultiplier");
            this.getUniformLocation("openfl_uColorOffset");
            this.getUniformLocation("openfl_uUseColorTransform");
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
    });
    var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
        openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
        this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec2 " + "openfl_aTexCoord0" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "varying vec2 vTexCoord;", "varying vec4 vColor;", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vTexCoord = " + "openfl_aTexCoord0" + ";", "   vColor = " + "openfl_aColor" + ".bgra;", "}"];
        this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec3 " + "openfl_uColor" + ";", "uniform bool " + "openfl_uUseTexture" + ";", "uniform float " + "openfl_uAlpha" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec2 vTexCoord;", "varying vec4 vColor;", "vec4 tmp;", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   if(" + "openfl_uUseTexture" + ") {", "       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);", "   } else {", "       tmp = vec4(" + "openfl_uColor" + ", 1.);", "   }", "   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
        this.init();
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
    openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "DrawTrianglesShader"];
    openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
        init: function(force) {
            if (force == null) force = false;
            openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
            this.getAttribLocation("openfl_aPosition");
            this.getAttribLocation("openfl_aTexCoord0");
            this.getAttribLocation("openfl_aColor");
            this.getUniformLocation("openfl_uSampler0");
            this.getUniformLocation("openfl_uProjectionMatrix");
            this.getUniformLocation("openfl_uColor");
            this.getUniformLocation("openfl_uAlpha");
            this.getUniformLocation("openfl_uUseTexture");
            this.getUniformLocation("openfl_uColorMultiplier");
            this.getUniformLocation("openfl_uColorOffset");
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
    });
    var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
        openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
        this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform vec4 " + "openfl_uColor" + ";", "uniform float " + "openfl_uAlpha" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec4 vColor;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 result = color * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
        this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"];
        this.init();
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
    openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "FillShader"];
    openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
        init: function(force) {
            if (force == null) force = false;
            openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
            this.getAttribLocation("openfl_aPosition");
            this.getUniformLocation("openfl_uTranslationMatrix");
            this.getUniformLocation("openfl_uProjectionMatrix");
            this.getUniformLocation("openfl_uColor");
            this.getUniformLocation("openfl_uColorMultiplier");
            this.getUniformLocation("openfl_uColorOffset");
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_FillShader
    });
    var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
        openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
        this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform mat3 " + "openfl_uPatternMatrix" + ";", "varying vec2 vPosition;", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;", "}"];
        this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "uniform float " + "openfl_uAlpha" + ";", "uniform vec2 " + "openfl_uPatternTL" + ";", "uniform vec2 " + "openfl_uPatternBR" + ";", "uniform sampler2D " + "openfl_uSampler0" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "varying vec2 vPosition;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);", "   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);", "   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
        this.init();
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
    openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "PatternFillShader"];
    openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
        init: function(force) {
            if (force == null) force = false;
            openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
            this.getAttribLocation("openfl_aPosition");
            this.getUniformLocation("openfl_uTranslationMatrix");
            this.getUniformLocation("openfl_uPatternMatrix");
            this.getUniformLocation("openfl_uProjectionMatrix");
            this.getUniformLocation("openfl_uSampler0");
            this.getUniformLocation("openfl_uPatternTL");
            this.getUniformLocation("openfl_uPatternBR");
            this.getUniformLocation("openfl_uAlpha");
            this.getUniformLocation("openfl_uColorMultiplier");
            this.getUniformLocation("openfl_uColorOffset");
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
    });
    var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
        openfl__$internal_renderer_opengl_shaders2_Shader.call(this, gl);
        this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uTranslationMatrix" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform vec4 " + "openfl_uColorMultiplier" + ";", "uniform vec4 " + "openfl_uColorOffset" + ";", "uniform float " + "openfl_uAlpha" + ";", "varying vec4 vColor;", "vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {", "   vec4 result = color * multiplier;", "   result.a *= alpha;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");", "}"];
        this.fragmentSrc = ["#ifdef GL_ES", "precision lowp float;", "#endif", "varying vec4 vColor;", "void main(void) {", "   gl_FragColor = vColor;", "}"];
        this.init();
    };
    $hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
    openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl", "_internal", "renderer", "opengl", "shaders2", "PrimitiveShader"];
    openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
    openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype, {
        init: function(force) {
            if (force == null) force = false;
            openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this, force);
            this.getAttribLocation("openfl_aPosition");
            this.getAttribLocation("openfl_aColor");
            this.getUniformLocation("openfl_uTranslationMatrix");
            this.getUniformLocation("openfl_uProjectionMatrix");
            this.getUniformLocation("openfl_uAlpha");
            this.getUniformLocation("openfl_uColorMultiplier");
            this.getUniformLocation("openfl_uColorOffset");
        },
        __class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
    });
    var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
        this.gl = gl;
        this.currentBlendMode = null;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
    openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "BlendModeManager"];
    openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
        destroy: function() {
            this.gl = null;
        },
        setBlendMode: function(blendMode, force) {
            if (force == null) force = false;
            if (blendMode == null) {
                blendMode = 10;
                force = true;
            }
            if (!force && this.currentBlendMode == blendMode) return false;
            this.currentBlendMode = blendMode;
            switch (blendMode) {
            case 0:
                this.gl.blendEquation(32774);
                this.gl.blendFunc(1, 1);
                break;
            case 9:
                this.gl.blendEquation(32774);
                this.gl.blendFunc(774, 771);
                break;
            case 12:
                this.gl.blendEquation(32774);
                this.gl.blendFunc(1, 769);
                break;
            case 14:
                this.gl.blendEquation(32779);
                this.gl.blendFunc(1, 1);
                break;
            case 3:
                this.gl.blendEquation(32774);
                this.gl.blendFunc(775, 0);
                break;
            default:
                this.gl.blendEquation(32774);
                this.gl.blendFunc(1, 771);
            }
            return true;
        },
        __class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
    };
    var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
        if (makeArray == null) makeArray = true;
        this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
        this.points = null;
        this.winding = 0;
        this.isRemovable = true;
        this.fillIndex = 0;
        this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
        this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
        if (makeArray) this.points = [];
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
    openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "DrawPath"];
    openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics, gl) {
        return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics, gl);
    };
    openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
        update: function(line, fill, fillIndex, winding) {
            this.updateLine(line);
            this.fill = fill;
            this.fillIndex = fillIndex;
            this.winding = winding;
        },
        updateLine: function(line) {
            this.line.width = line.width;
            this.line.color = line.color;
            if (line.alpha == null) this.line.alpha = 1;
            else this.line.alpha = line.alpha;
            if (line.scaleMode == null) this.line.scaleMode = 2;
            else this.line.scaleMode = line.scaleMode;
            if (line.caps == null) this.line.caps = 1;
            else this.line.caps = line.caps;
            if (line.joints == null) this.line.joints = 2;
            else this.line.joints = line.joints;
            this.line.miterLimit = line.miterLimit;
        },
        __class__: openfl__$internal_renderer_opengl_utils_DrawPath
    };
    var openfl__$internal_renderer_opengl_utils_PathBuiler = function() {};
    $hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
    openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "PathBuiler"];
    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
    openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
    openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
    openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
        var l;
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null) l = 0;
        else l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
        if (l <= 0) return;
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
            var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
            var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
            var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
            var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
            if (! (sx == ex && sy == ey)) openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(sx, sy);
        }
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
        openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
        openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x, y) {
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
        else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
        openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x, y) {
        var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
        var push_point = true;
        if (points.length > 1) {
            var lastX = points[points.length - 2];
            var lastY = points[points.length - 1];
            if (lastX == x && lastY == y) push_point = false;
        }
        if (push_point == true) {
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
        }
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx, cy, x, y) {
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
            else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
        }
        openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, x, y);
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx, cy, cx2, cy2, x, y) {
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
            else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
            openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
        }
        openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, cx2, cy2, x, y);
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
        else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
    };
    openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics, gl) {
        var glStack = null;
        var bounds = graphics.__bounds;
        openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
        openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
        openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
        openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
        glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
        if (glStack == null) glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
        if (!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {} else {
            var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
            var _g = 0;
            var _g1 = graphics.__commands.types;
            while (_g < _g1.length) {
                var type = _g1[_g]; ++_g;
                switch (type[1]) {
                case 0:
                    var c = data.readBeginBitmapFill();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
                    if (openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c) != null) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Texture(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c), openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
                        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                        else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    }
                    break;
                case 1:
                    var c1 = data.readBeginFill();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
                    if (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) > 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.Color(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16777215, openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
                        if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                        else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    }
                    break;
                case 3:
                    var c2 = data.readCubicCurveTo();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c2), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c2), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c2), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c2), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c2), openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c2));
                    break;
                case 4:
                    var c3 = data.readCurveTo();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c3), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c3), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c3), openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c3));
                    break;
                case 5:
                    var c4 = data.readDrawCircle();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c4), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c4), openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c4)];
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 6:
                    var c5 = data.readDrawEllipse();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c5), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c5), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c5), openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c5)];
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 8:
                    var c6 = data.readDrawRect();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c6), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c6), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c6), openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c6)];
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 9:
                    var c7 = data.readDrawRoundRect();
                    var x = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c7);
                    var y = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c7);
                    var width = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c7);
                    var height = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c7);
                    var rx = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c7);
                    var ry = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c7);
                    if (ry == null) ry = rx;
                    rx *= 0.5;
                    ry *= 0.5;
                    if (rx > width / 2) rx = width / 2;
                    if (ry > height / 2) ry = height / 2;
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x, y, width, height, rx, ry];
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 12:
                    var c8 = data.readEndFill();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
                    break;
                case 15:
                    var c9 = data.readLineStyle();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
                    if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c9) == null || (function($this) {
                        var $r;
                        var f = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c9);
                        $r = isNaN(f);
                        return $r;
                    } (this)) || openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c9) < 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0;
                    else if (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c9) == 0) openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1;
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c9);
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c9);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 16:
                    var c10 = data.readLineTo();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c10), openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c10));
                    break;
                case 17:
                    var c11 = data.readMoveTo();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c11), openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c11));
                    break;
                case 11:
                    var c12 = data.readDrawTriangles();
                    var uvtData = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c12);
                    var vertices = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c12);
                    var indices = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c12);
                    var culling = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c12);
                    var isColor; {
                        var _g2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
                        switch (_g2[1]) {
                        case 1:
                            isColor = true;
                            break;
                        default:
                            isColor = false;
                        }
                    }
                    if (isColor && uvtData != null) continue;
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    if (uvtData == null) {
                        var this1;
                        this1 = new openfl_VectorData();
                        var this2;
                        this2 = new Array(0);
                        this1.data = this2;
                        this1.length = 0;
                        this1.fixed = false;
                        uvtData = this1; {
                            var _g21 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
                            switch (_g21[1]) {
                            case 2:
                                var b = _g21[2];
                                var _g4 = 0;
                                var _g3 = vertices.length / 2 | 0;
                                while (_g4 < _g3) {
                                    var i = _g4++;
                                    if (!uvtData.fixed) {
                                        uvtData.length++;
                                        if (uvtData.data.length < uvtData.length) {
                                            var data1;
                                            var this3;
                                            this3 = new Array(uvtData.data.length + 10);
                                            data1 = this3;
                                            haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data, 0, data1, 0, uvtData.data.length);
                                            uvtData.data = data1;
                                        }
                                        uvtData.data[uvtData.length - 1] = vertices.data[i * 2] / b.width;
                                    }
                                    uvtData.length;
                                    if (!uvtData.fixed) {
                                        uvtData.length++;
                                        if (uvtData.data.length < uvtData.length) {
                                            var data2;
                                            var this4;
                                            this4 = new Array(uvtData.data.length + 10);
                                            data2 = this4;
                                            haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data, 0, data2, 0, uvtData.data.length);
                                            uvtData.data = data2;
                                        }
                                        uvtData.data[uvtData.length - 1] = vertices.data[i * 2 + 1] / b.height;
                                    }
                                    uvtData.length;
                                }
                                break;
                            default:
                            }
                        }
                    }
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices, indices, uvtData, culling, null, 0);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 10:
                    var c13 = data.readDrawTiles();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c13), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c13), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c13), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c13), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader(c13), openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c13));
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                case 7:
                    var c14 = data.readDrawPath();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    var _g22 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding(c14);
                    switch (_g22) {
                    case "evenOdd":
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
                        break;
                    case "nonZero":
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
                        break;
                    default:
                        openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
                    }
                    var command;
                    var cx;
                    var cy;
                    var cx2;
                    var cy2;
                    var ax;
                    var ay;
                    var idx = 0;
                    var _g31 = 0;
                    var _g23;
                    var this5 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c14);
                    _g23 = this5.length;
                    while (_g31 < _g23) {
                        var i1 = _g31++;
                        var this6 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c14);
                        command = this6.data[i1];
                        switch (command) {
                        case 1:
                            var this7 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this7.data[idx];
                            var this8 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this8.data[idx + 1];
                            idx += 2;
                            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                            else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                            break;
                        case 4:
                            var this9 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this9.data[idx + 2];
                            var this10 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this10.data[idx + 3];
                            idx += 4;
                            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                            else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
                            openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                            break;
                        case 2:
                            var this11 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this11.data[idx];
                            var this12 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this12.data[idx + 1];
                            idx += 2;
                            openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax, ay);
                            break;
                        case 5:
                            var this13 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this13.data[idx + 2];
                            var this14 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this14.data[idx + 3];
                            idx += 4;
                            openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo(ax, ay);
                            break;
                        case 3:
                            var this15 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cx = this15.data[idx];
                            var this16 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cy = this16.data[idx + 1];
                            var this17 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this17.data[idx + 2];
                            var this18 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this18.data[idx + 3];
                            idx += 4;
                            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
                                if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                                else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                            }
                            openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, ax, ay);
                            break;
                        case 6:
                            var this19 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cx = this19.data[idx];
                            var this20 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cy = this20.data[idx + 1];
                            var this21 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cx2 = this21.data[idx + 2];
                            var this22 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            cy2 = this22.data[idx + 3];
                            var this23 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ax = this23.data[idx + 4];
                            var this24 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c14);
                            ay = this24.data[idx + 5];
                            idx += 6;
                            if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
                                if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                                else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
                                openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                            }
                            openfl__$internal_renderer_GraphicsPaths.cubicCurveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points, cx, cy, cx2, cy2, ax, ay);
                            break;
                        default:
                        }
                    }
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
                    break;
                case 18:
                    var c15 = data.readOverrideMatrix();
                    if (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
                    else openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line, openfl__$internal_renderer_opengl_utils_PathBuiler.__fill, openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex, openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(c15));
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
                    openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
                    break;
                default:
                    data.skip(type);
                }
            }
            openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
            data.destroy();
        }
        graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
        return glStack;
    };
    var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
        this.width = 0;
        this.color = 0;
        this.alpha = 1;
        this.scaleMode = 2;
        this.caps = 1;
        this.joints = 2;
        this.miterLimit = 3;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
    openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "LineStyle"];
    openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
        __class__: openfl__$internal_renderer_opengl_utils_LineStyle
    };
    var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = {
        __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "FillType"],
        __constructs__: ["None", "Color", "Texture", "Gradient"]
    };
    openfl__$internal_renderer_opengl_utils_FillType.None = ["None", 0];
    openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
    openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
    openfl__$internal_renderer_opengl_utils_FillType.Color = function(color, alpha) {
        var $x = ["Color", 1, color, alpha];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
        $x.toString = $estr;
        return $x;
    };
    openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap, matrix, repeat, smooth) {
        var $x = ["Texture", 2, bitmap, matrix, repeat, smooth];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
        $x.toString = $estr;
        return $x;
    };
    openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient", 3];
    openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
    openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
    var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl, transparent) {
        this.transparent = transparent;
        this.filterStack = [];
        this.offsetX = 0;
        this.offsetY = 0;
        this.setContext(gl);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
    openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "FilterManager"];
    openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
        applyFilterPass: function(filter, filterArea, width, height) {},
        begin: function(renderSession, buffer) {
            this.renderSession = renderSession;
            this.defaultShader = renderSession.shaderManager.defaultShader;
            this.width = 0;
            this.height = 0;
            this.buffer = buffer;
        },
        destroy: function() {
            var gl = this.gl;
            this.filterStack = null;
            this.offsetX = 0;
            this.offsetY = 0;
            var _g = 0;
            var _g1 = this.texturePool;
            while (_g < _g1.length) {
                var texture = _g1[_g]; ++_g;
                texture.destroy();
            }
            this.texturePool = null;
            gl.deleteBuffer(this.vertexBuffer);
            gl.deleteBuffer(this.uvBuffer);
            gl.deleteBuffer(this.colorBuffer);
            gl.deleteBuffer(this.indexBuffer);
        },
        initShaderBuffers: function() {
            var gl = this.gl;
            this.vertexBuffer = gl.createBuffer();
            this.uvBuffer = gl.createBuffer();
            this.colorBuffer = gl.createBuffer();
            this.indexBuffer = gl.createBuffer();
            var array = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];
            var this1;
            if (array != null) this1 = new Float32Array(array);
            else this1 = null;
            this.vertexArray = this1;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this.vertexArray, gl.STATIC_DRAW);
            var array1 = [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0];
            var this2;
            if (array1 != null) this2 = new Float32Array(array1);
            else this2 = null;
            this.uvArray = this2;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.uvBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this.uvArray, gl.STATIC_DRAW);
            var array2 = [1.0, 16777215, 1.0, 16777215, 1.0, 16777215, 1.0, 16777215];
            var this3;
            if (array2 != null) this3 = new Float32Array(array2);
            else this3 = null;
            this.colorArray = this3;
            gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this.colorArray, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, (function($this) {
                var $r;
                var array3 = [0, 1, 2, 1, 3, 2];
                var this4;
                if (array3 != null) this4 = new Uint16Array(array3);
                else this4 = null;
                $r = this4;
                return $r;
            } (this)), gl.STATIC_DRAW);
        },
        popFilter: function() {},
        pushFilter: function(filterBlock) {},
        setContext: function(gl) {
            this.gl = gl;
            this.texturePool = [];
            this.initShaderBuffers();
        },
        __class__: openfl__$internal_renderer_opengl_utils_FilterManager
    };
    var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
        openfl__$internal_renderer_AbstractMaskManager.call(this, renderSession);
        this.setContext(renderSession.gl);
        this.clips = [];
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
    openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLMaskManager"];
    openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
    openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype, {
        destroy: function() {
            this.gl = null;
        },
        pushRect: function(rect, transform) {
            if (rect == null) return;
            var m = transform.clone();
            openfl__$internal_renderer_opengl_GLBitmap.flipMatrix(m, this.renderSession.renderer.viewport.height);
            var clip = rect.clone();
            clip.__transform(clip, m);
            if (this.currentClip != null) clip = this.currentClip.intersection(clip);
            var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
            this.clips.push(clip);
            this.currentClip = clip;
            if (restartBatch) {
                this.renderSession.spriteBatch.stop();
                this.renderSession.spriteBatch.start(this.currentClip);
            }
        },
        pushMask: function(mask) {
            this.renderSession.spriteBatch.stop();
            this.renderSession.stencilManager.pushMask(mask, this.renderSession);
            this.renderSession.spriteBatch.start(this.currentClip);
        },
        popMask: function() {
            this.renderSession.spriteBatch.stop();
            this.renderSession.stencilManager.popMask(null, this.renderSession);
            this.renderSession.spriteBatch.start(this.currentClip);
        },
        popRect: function() {
            this.renderSession.spriteBatch.stop();
            this.clips.pop();
            this.currentClip = this.clips[this.clips.length - 1];
            this.renderSession.spriteBatch.start(this.currentClip);
        },
        saveState: function() {
            this.savedClip = this.currentClip;
            this.currentClip = null;
        },
        restoreState: function() {
            this.currentClip = this.savedClip;
            this.savedClip = null;
        },
        setContext: function(gl) {
            if (this.renderSession != null) this.renderSession.gl = gl;
            this.gl = gl;
        },
        __class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
    });
    var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components, type, normalized, name, defaultValue) {
        if (normalized == null) normalized = false;
        this.enabled = true;
        this.normalized = false;
        this.components = components;
        this.type = type;
        this.normalized = normalized;
        this.name = name;
        if (defaultValue == null) {
            var this1;
            if (components != null) this1 = new Float32Array(components);
            else this1 = null;
            this.defaultValue = this1;
        } else this.defaultValue = defaultValue;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
    openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "VertexAttribute"];
    openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
        copy: function() {
            return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components, this.type, this.normalized, this.name, this.defaultValue);
        },
        getElementsBytes: function() {
            var _g = this.type;
            switch (_g) {
            case 5120:
            case 5121:
                return 1;
            case 5122:
            case 5123:
                return 2;
            default:
                return 4;
            }
        },
        get_elements: function() {
            return Math.floor(this.components * this.getElementsBytes() / 4);
        },
        __class__: openfl__$internal_renderer_opengl_utils_VertexAttribute,
        __properties__: {
            get_elements: "get_elements"
        }
    };
    var openfl_geom_Rectangle = function(x, y, width, height) {
        if (height == null) height = 0;
        if (width == null) width = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    };
    $hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
    openfl_geom_Rectangle.__name__ = ["openfl", "geom", "Rectangle"];
    openfl_geom_Rectangle.prototype = {
        clone: function() {
            return new openfl_geom_Rectangle(this.x, this.y, this.width, this.height);
        },
        contains: function(x, y) {
            return x >= this.x && y >= this.y && x < this.get_right() && y < this.get_bottom();
        },
        containsPoint: function(point) {
            return this.contains(point.x, point.y);
        },
        containsRect: function(rect) {
            if (rect.width <= 0 || rect.height <= 0) return rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right() && rect.get_bottom() < this.get_bottom();
            else return rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right() && rect.get_bottom() <= this.get_bottom();
        },
        copyFrom: function(sourceRect) {
            this.x = sourceRect.x;
            this.y = sourceRect.y;
            this.width = sourceRect.width;
            this.height = sourceRect.height;
        },
        equals: function(toCompare) {
            return toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width && this.height == toCompare.height;
        },
        inflate: function(dx, dy) {
            this.x -= dx;
            this.width += dx * 2;
            this.y -= dy;
            this.height += dy * 2;
        },
        inflatePoint: function(point) {
            this.inflate(point.x, point.y);
        },
        intersection: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) x0 = toIntersect.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right();
            else x1 = this.get_right();
            if (x1 <= x0) return new openfl_geom_Rectangle();
            var y0;
            if (this.y < toIntersect.y) y0 = toIntersect.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom();
            else y1 = this.get_bottom();
            if (y1 <= y0) return new openfl_geom_Rectangle();
            return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
        },
        intersects: function(toIntersect) {
            var x0;
            if (this.x < toIntersect.x) x0 = toIntersect.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() > toIntersect.get_right()) x1 = toIntersect.get_right();
            else x1 = this.get_right();
            if (x1 <= x0) return false;
            var y0;
            if (this.y < toIntersect.y) y0 = toIntersect.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() > toIntersect.get_bottom()) y1 = toIntersect.get_bottom();
            else y1 = this.get_bottom();
            return y1 > y0;
        },
        isEmpty: function() {
            return this.width <= 0 || this.height <= 0;
        },
        offset: function(dx, dy) {
            this.x += dx;
            this.y += dy;
        },
        offsetPoint: function(point) {
            this.x += point.x;
            this.y += point.y;
        },
        setEmpty: function() {
            this.x = this.y = this.width = this.height = 0;
        },
        setTo: function(xa, ya, widtha, heighta) {
            this.x = xa;
            this.y = ya;
            this.width = widtha;
            this.height = heighta;
        },
        toString: function() {
            return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
        },
        union: function(toUnion) {
            if (this.width == 0 || this.height == 0) return toUnion.clone();
            else if (toUnion.width == 0 || toUnion.height == 0) return this.clone();
            var x0;
            if (this.x > toUnion.x) x0 = toUnion.x;
            else x0 = this.x;
            var x1;
            if (this.get_right() < toUnion.get_right()) x1 = toUnion.get_right();
            else x1 = this.get_right();
            var y0;
            if (this.y > toUnion.y) y0 = toUnion.y;
            else y0 = this.y;
            var y1;
            if (this.get_bottom() < toUnion.get_bottom()) y1 = toUnion.get_bottom();
            else y1 = this.get_bottom();
            return new openfl_geom_Rectangle(x0, y0, x1 - x0, y1 - y0);
        },
        __contract: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) return;
            var cacheRight = this.get_right();
            var cacheBottom = this.get_bottom();
            if (this.x < x) this.x = x;
            if (this.y < y) this.y = y;
            if (this.get_right() > x + width) this.width = x + width - this.x;
            if (this.get_bottom() > y + height) this.height = y + height - this.y;
        },
        __expand: function(x, y, width, height) {
            if (this.width == 0 && this.height == 0) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                return;
            }
            var cacheRight = this.get_right();
            var cacheBottom = this.get_bottom();
            if (this.x > x) {
                this.x = x;
                this.width = cacheRight - x;
            }
            if (this.y > y) {
                this.y = y;
                this.height = cacheBottom - y;
            }
            if (cacheRight < x + width) this.width = x + width - this.x;
            if (cacheBottom < y + height) this.height = y + height - this.y;
        },
        __toLimeRectangle: function() {
            return new lime_math_Rectangle(this.x, this.y, this.width, this.height);
        },
        __transform: function(rect, m) {
            var tx0 = m.a * this.x + m.c * this.y;
            var tx1 = tx0;
            var ty0 = m.b * this.x + m.d * this.y;
            var ty1 = ty0;
            var tx = m.a * (this.x + this.width) + m.c * this.y;
            var ty = m.b * (this.x + this.width) + m.d * this.y;
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
            ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            tx = m.a * this.x + m.c * (this.y + this.height);
            ty = m.b * this.x + m.d * (this.y + this.height);
            if (tx < tx0) tx0 = tx;
            if (ty < ty0) ty0 = ty;
            if (tx > tx1) tx1 = tx;
            if (ty > ty1) ty1 = ty;
            rect.setTo(tx0 + m.tx, ty0 + m.ty, tx1 - tx0, ty1 - ty0);
        },
        get_bottom: function() {
            return this.y + this.height;
        },
        set_bottom: function(b) {
            this.height = b - this.y;
            return b;
        },
        get_bottomRight: function() {
            return new openfl_geom_Point(this.x + this.width, this.y + this.height);
        },
        set_bottomRight: function(p) {
            this.width = p.x - this.x;
            this.height = p.y - this.y;
            return p.clone();
        },
        get_left: function() {
            return this.x;
        },
        set_left: function(l) {
            this.width -= l - this.x;
            this.x = l;
            return l;
        },
        get_right: function() {
            return this.x + this.width;
        },
        set_right: function(r) {
            this.width = r - this.x;
            return r;
        },
        get_size: function() {
            return new openfl_geom_Point(this.width, this.height);
        },
        set_size: function(p) {
            this.width = p.x;
            this.height = p.y;
            return p.clone();
        },
        get_top: function() {
            return this.y;
        },
        set_top: function(t) {
            this.height -= t - this.y;
            this.y = t;
            return t;
        },
        get_topLeft: function() {
            return new openfl_geom_Point(this.x, this.y);
        },
        set_topLeft: function(p) {
            this.x = p.x;
            this.y = p.y;
            return p.clone();
        },
        __class__: openfl_geom_Rectangle,
        __properties__: {
            set_topLeft: "set_topLeft",
            get_topLeft: "get_topLeft",
            set_top: "set_top",
            get_top: "get_top",
            set_size: "set_size",
            get_size: "get_size",
            set_right: "set_right",
            get_right: "get_right",
            set_left: "set_left",
            get_left: "get_left",
            set_bottomRight: "set_bottomRight",
            get_bottomRight: "get_bottomRight",
            set_bottom: "set_bottom",
            get_bottom: "get_bottom"
        }
    };
    var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() {};
    $hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GraphicsRenderer"];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path, glStack, localCoords) {
        if (localCoords == null) localCoords = false;
        var rectData = path.points;
        var x = rectData[0];
        var y = rectData[1];
        var rx = rectData[2];
        var ry;
        if (rectData.length == 3) ry = rx;
        else ry = rectData[3];
        if (path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
            rx /= 2;
            ry /= 2;
            x += rx;
            y += ry;
        }
        if (localCoords) {
            x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
            y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
        }
        var totalSegs = 40;
        var seg = Math.PI * 2 / totalSegs;
        var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
        var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
        if (fill != null) {
            var verts = fill.verts;
            var indices = fill.indices;
            var vertPos = verts.length / 2 | 0;
            indices.push(vertPos);
            var _g1 = 0;
            var _g = totalSegs + 1;
            while (_g1 < _g) {
                var i = _g1++;
                verts.push(x);
                verts.push(y);
                verts.push(x + Math.sin(seg * i) * rx);
                verts.push(y + Math.cos(seg * i) * ry);
                indices.push(vertPos++);
                indices.push(vertPos++);
            }
            indices.push(vertPos - 1);
        }
        if (path.line.width > 0) {
            var tempPoints = path.points;
            path.points = [];
            openfl__$internal_renderer_GraphicsPaths.ellipse(path.points, x, y, rx, ry, totalSegs);
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
            path.points = tempPoints;
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path, glStack, localCoords) {
        if (localCoords == null) localCoords = false;
        var bucket = null;
        if (path.points.length >= 6) {
            var points = path.points.slice();
            if (localCoords) {
                var _g1 = 0;
                var _g = points.length / 2 | 0;
                while (_g1 < _g) {
                    var i = _g1++;
                    points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
                    points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
                }
            }
            bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
            var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
            fill.drawMode = glStack.gl.TRIANGLE_FAN;
            fill.verts = points;
            var indices = fill.indices;
            var length = points.length / 2 | 0;
            var _g2 = 0;
            while (_g2 < length) {
                var i1 = _g2++;
                indices.push(i1);
            }
        }
        if (path.line.width > 0) {
            if (bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket, localCoords);
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path, bucket, localCoords) {
        if (localCoords == null) localCoords = false;
        var points = path.points;
        if (points.length == 0) return;
        var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
        if (localCoords) {
            var _g1 = 0;
            var _g = points.length / 2 | 0;
            while (_g1 < _g) {
                var i = _g1++;
                points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
                points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
            }
        }
        var firstPoint = new openfl_geom_Point(points[0], points[1]);
        var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0], points[points.length - 1 | 0]);
        if (firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
            points = points.slice();
            points.pop();
            points.pop();
            lastPoint = new openfl_geom_Point(points[points.length - 2 | 0], points[points.length - 1 | 0]);
            var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
            var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
            points.unshift(midPointY);
            points.unshift(midPointX);
            points.push(midPointX);
            points.push(midPointY);
        }
        var verts = line.verts;
        var indices = line.indices;
        var length = points.length / 2 | 0;
        var indexCount = points.length;
        var indexStart = verts.length / 6 | 0;
        var width = path.line.width / 2;
        var color = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb(path.line.color);
        var alpha = path.line.alpha;
        var r = color[0];
        var g = color[1];
        var b = color[2];
        var px;
        var py;
        var p1x;
        var p1y;
        var p2x;
        var p2y;
        var p3x;
        var p3y;
        var perpx;
        var perpy;
        var perp2x;
        var perp2y;
        var perp3x;
        var perp3y;
        var a1;
        var b1;
        var c1;
        var a2;
        var b2;
        var c2;
        var denom;
        var pdist;
        var dist;
        p1x = points[0];
        p1y = points[1];
        p2x = points[2];
        p2y = points[3];
        perpx = -(p1y - p2y);
        perpy = p1x - p2x;
        dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
        perpx = perpx / dist;
        perpy = perpy / dist;
        perpx = perpx * width;
        perpy = perpy * width;
        verts.push(p1x - perpx);
        verts.push(p1y - perpy);
        verts.push(r);
        verts.push(g);
        verts.push(b);
        verts.push(alpha);
        verts.push(p1x + perpx);
        verts.push(p1y + perpy);
        verts.push(r);
        verts.push(g);
        verts.push(b);
        verts.push(alpha);
        var _g11 = 1;
        var _g2 = length - 1;
        while (_g11 < _g2) {
            var i1 = _g11++;
            p1x = points[(i1 - 1) * 2];
            p1y = points[(i1 - 1) * 2 + 1];
            p2x = points[i1 * 2];
            p2y = points[i1 * 2 + 1];
            p3x = points[(i1 + 1) * 2];
            p3y = points[(i1 + 1) * 2 + 1];
            perpx = -(p1y - p2y);
            perpy = p1x - p2x;
            dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
            perpx = perpx / dist;
            perpy = perpy / dist;
            perpx = perpx * width;
            perpy = perpy * width;
            perp2x = -(p2y - p3y);
            perp2y = p2x - p3x;
            dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
            perp2x = perp2x / dist;
            perp2y = perp2y / dist;
            perp2x = perp2x * width;
            perp2y = perp2y * width;
            a1 = -perpy + p1y - ( - perpy + p2y);
            b1 = -perpx + p2x - ( - perpx + p1x);
            c1 = ( - perpx + p1x) * ( - perpy + p2y) - ( - perpx + p2x) * ( - perpy + p1y);
            a2 = -perp2y + p3y - ( - perp2y + p2y);
            b2 = -perp2x + p2x - ( - perp2x + p3x);
            c2 = ( - perp2x + p3x) * ( - perp2y + p2y) - ( - perp2x + p2x) * ( - perp2y + p3y);
            denom = a1 * b2 - a2 * b1;
            if (Math.abs(denom) < 0.1) {
                denom += 10.1;
                verts.push(p2x - perpx);
                verts.push(p2y - perpy);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                verts.push(p2x + perpx);
                verts.push(p2y + perpy);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                continue;
            }
            px = (b1 * c2 - b2 * c1) / denom;
            py = (a2 * c1 - a1 * c2) / denom;
            pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
            if (pdist > 19600) {
                perp3x = perpx - perp2x;
                perp3y = perpy - perp2y;
                dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
                perp3x = perp3x / dist;
                perp3y = perp3y / dist;
                perp3x = perp3x * width;
                perp3y = perp3y * width;
                verts.push(p2x - perp3x);
                verts.push(p2y - perp3y);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                verts.push(p2x + perp3x);
                verts.push(p2y + perp3y);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                verts.push(p2x - perp3x);
                verts.push(p2y - perp3y);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                indexCount++;
            } else {
                verts.push(px);
                verts.push(py);
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
                verts.push(p2x - (px - p2x));
                verts.push(p2y - (py - p2y));
                verts.push(r);
                verts.push(g);
                verts.push(b);
                verts.push(alpha);
            }
        }
        p1x = points[(length - 2) * 2];
        p1y = points[(length - 2) * 2 + 1];
        p2x = points[(length - 1) * 2];
        p2y = points[(length - 1) * 2 + 1];
        perpx = -(p1y - p2y);
        perpy = p1x - p2x;
        dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
        if (!isFinite(dist)) haxe_Log.trace(perpx * perpx + perpy * perpy, {
            fileName: "GraphicsRenderer.hx",
            lineNumber: 407,
            className: "openfl._internal.renderer.opengl.utils.GraphicsRenderer",
            methodName: "buildLine"
        });
        perpx = perpx / dist;
        perpy = perpy / dist;
        perpx = perpx * width;
        perpy = perpy * width;
        verts.push(p2x - perpx);
        verts.push(p2y - perpy);
        verts.push(r);
        verts.push(g);
        verts.push(b);
        verts.push(alpha);
        verts.push(p2x + perpx);
        verts.push(p2y + perpy);
        verts.push(r);
        verts.push(g);
        verts.push(b);
        verts.push(alpha);
        indices.push(indexStart);
        var _g3 = 0;
        while (_g3 < indexCount) {
            var i2 = _g3++;
            indices.push(indexStart++);
        }
        indices.push(indexStart - 1);
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path, glStack) {
        if (path.points.length < 6) return;
        var points = path.points;
        var l = points.length;
        var sx = points[0];
        var sy = points[1];
        var ex = points[l - 2];
        var ey = points[l - 1];
        if (sx != ex || sy != ey) {
            points.push(sx);
            points.push(sy);
        }
        var length = points.length / 2 | 0;
        var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
        var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
        var verts = fill.verts;
        var indices = fill.indices;
        if (fill != null) {
            var triangles = [];
            openfl__$internal_renderer_PolyK.triangulate(triangles, points);
            var vertPos = verts.length / 2;
            var i = 0;
            while (i < triangles.length) {
                indices.push(triangles[i] + vertPos | 0);
                indices.push(triangles[i] + vertPos | 0);
                indices.push(triangles[i + 1] + vertPos | 0);
                indices.push(triangles[i + 2] + vertPos | 0);
                indices.push(triangles[i + 2] + vertPos | 0);
                i += 3;
            }
            var _g = 0;
            while (_g < length) {
                var i1 = _g++;
                verts.push(points[i1 * 2]);
                verts.push(points[i1 * 2 + 1]);
            }
        }
        if (path.line.width > 0) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path, glStack, localCoords) {
        if (localCoords == null) localCoords = false;
        var rectData = path.points;
        var x = rectData[0];
        var y = rectData[1];
        var width = rectData[2];
        var height = rectData[3];
        if (localCoords) {
            x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
            y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
        }
        var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
        var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
        if (fill != null) {
            var verts = fill.verts;
            var indices = fill.indices;
            var vertPos = verts.length / 2 | 0;
            verts.push(x);
            verts.push(y);
            verts.push(x + width);
            verts.push(y);
            verts.push(x);
            verts.push(y + height);
            verts.push(x + width);
            verts.push(y + height);
            indices.push(vertPos);
            indices.push(vertPos);
            indices.push(vertPos + 1);
            indices.push(vertPos + 2);
            indices.push(vertPos + 3);
            indices.push(vertPos + 3);
        }
        if (path.line.width > 0) {
            var tempPoints = path.points;
            path.points = [x, y, x + width, y, x + width, y + height, x, y + height, x, y];
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
            path.points = tempPoints;
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path, glStack, localCoords) {
        if (localCoords == null) localCoords = false;
        var points = path.points.slice();
        var x = points[0];
        var y = points[1];
        var width = points[2];
        var height = points[3];
        var rx = points[4];
        var ry = points[5];
        if (localCoords) {
            x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
            y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
        }
        var recPoints = [];
        openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints, x, y, width, height, rx, ry);
        var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
        var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
        if (fill != null) {
            var verts = fill.verts;
            var indices = fill.indices;
            var vecPos = verts.length / 2;
            var triangles = [];
            openfl__$internal_renderer_PolyK.triangulate(triangles, recPoints);
            var i = 0;
            while (i < triangles.length) {
                indices.push(triangles[i] + vecPos | 0);
                indices.push(triangles[i] + vecPos | 0);
                indices.push(triangles[i + 1] + vecPos | 0);
                indices.push(triangles[i + 2] + vecPos | 0);
                indices.push(triangles[i + 2] + vecPos | 0);
                i += 3;
            }
            i = 0;
            while (i < recPoints.length) {
                verts.push(recPoints[i]);
                verts.push(recPoints[++i]);
                i++;
            }
        }
        if (path.line.width > 0) {
            var tempPoints = path.points;
            path.points = recPoints;
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path, bucket);
            path.points = tempPoints;
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path, object, glStack, localCoords) {
        if (localCoords == null) localCoords = false;
        var args = path.type.slice(2);
        var vertices = args[0];
        var indices = args[1];
        var uvtData = args[2];
        var culling = args[3];
        var colors = args[4];
        var blendMode = args[5];
        var a;
        var b;
        var c;
        var d;
        var tx;
        var ty;
        if (localCoords) {
            a = 1.0;
            b = 0.0;
            c = 0.0;
            d = 1.0;
            tx = 0.0;
            ty = 0.0;
        } else {
            a = object.__worldTransform.a;
            b = object.__worldTransform.b;
            c = object.__worldTransform.c;
            d = object.__worldTransform.d;
            tx = object.__worldTransform.tx;
            ty = object.__worldTransform.ty;
        }
        var hasColors = colors != null && colors.length > 0;
        var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
        var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
        var colorAttrib = fill.vertexArray.attributes[2];
        colorAttrib.enabled = hasColors;
        var array = [1, 1, 1, 1];
        var this1;
        if (array != null) this1 = new Float32Array(array);
        else this1 = null;
        colorAttrib.defaultValue = this1;
        fill.rawVerts = true;
        fill.glLength = indices.length;
        fill.stride = Std["int"](fill.vertexArray.get_stride() / 4);
        var vertsLength = fill.glLength * fill.stride;
        var verts;
        if (fill.glVerts == null || fill.glVerts.length < vertsLength) {
            var this2;
            if (vertsLength != null) this2 = new Float32Array(vertsLength);
            else this2 = null;
            verts = this2;
            fill.glVerts = verts;
        } else verts = fill.glVerts;
        var glColors;
        var buffer = verts.buffer;
        var this3;
        if (buffer != null) this3 = new Uint32Array(buffer, 0);
        else this3 = null;
        glColors = this3;
        var v0 = 0;
        var v1 = 0;
        var v2 = 0;
        var i0 = 0;
        var i1 = 0;
        var i2 = 0;
        var x0 = 0.0;
        var y0 = 0.0;
        var x1 = 0.0;
        var y1 = 0.0;
        var x2 = 0.0;
        var y2 = 0.0;
        var idx = 0;
        var _g1 = 0;
        var _g = indices.length / 3 | 0;
        while (_g1 < _g) {
            var i = _g1++;
            i0 = indices.data[i * 3];
            i1 = indices.data[i * 3 + 1];
            i2 = indices.data[i * 3 + 2];
            v0 = i0 * 2;
            v1 = i1 * 2;
            v2 = i2 * 2;
            x0 = vertices.data[v0];
            y0 = vertices.data[v0 + 1];
            x1 = vertices.data[v1];
            y1 = vertices.data[v1 + 1];
            x2 = vertices.data[v2];
            y2 = vertices.data[v2 + 1];
            if (localCoords) {
                x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
                y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
                x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
                y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
                x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
                y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
            }
            switch (culling) {
            case 2:
                if (! ((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) continue;
                break;
            case 0:
                if ((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) continue;
                break;
            default:
            }
            var idx1 = idx++;
            verts[idx1] = a * x0 + c * y0 + tx;
            var idx2 = idx++;
            verts[idx2] = b * x0 + d * y0 + ty;
            var idx3 = idx++;
            verts[idx3] = uvtData.data[v0];
            var idx4 = idx++;
            verts[idx4] = uvtData.data[v0 + 1];
            if (hasColors) {
                var idx5 = idx++;
                glColors[idx5] = colors.data[i0];
            }
            var idx6 = idx++;
            verts[idx6] = a * x1 + c * y1 + tx;
            var idx7 = idx++;
            verts[idx7] = b * x1 + d * y1 + ty;
            var idx8 = idx++;
            verts[idx8] = uvtData.data[v1];
            var idx9 = idx++;
            verts[idx9] = uvtData.data[v1 + 1];
            if (hasColors) {
                var idx10 = idx++;
                glColors[idx10] = colors.data[i1];
            }
            var idx11 = idx++;
            verts[idx11] = a * x2 + c * y2 + tx;
            var idx12 = idx++;
            verts[idx12] = b * x2 + d * y2 + ty;
            var idx13 = idx++;
            verts[idx13] = uvtData.data[v2];
            var idx14 = idx++;
            verts[idx14] = uvtData.data[v2 + 1];
            if (hasColors) {
                var idx15 = idx++;
                glColors[idx15] = colors.data[i2];
            }
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path, glStack) {
        openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX, fromY, cpX, cpY, toX, toY) {
        var xa;
        var ya;
        var xb;
        var yb;
        var x;
        var y;
        var n = 20;
        var points = [];
        var getPt = function(n1, n2, perc) {
            var diff = n2 - n1;
            return n1 + diff * perc;
        };
        var j = 0.0;
        var _g1 = 0;
        var _g = n + 1;
        while (_g1 < _g) {
            var i = _g1++;
            j = i / n;
            xa = getPt(fromX, cpX, j);
            ya = getPt(fromY, cpY, j);
            xb = getPt(cpX, toX, j);
            yb = getPt(cpY, toY, j);
            x = getPt(xa, xb, j);
            y = getPt(ya, yb, j);
            points.push(x);
            points.push(y);
        }
        return points;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object, renderSession) {
        var graphics = object.__graphics;
        var bounds = graphics.__bounds;
        var spritebatch = renderSession.spriteBatch;
        var dirty = graphics.__dirty;
        if (!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
            graphics.__glStack.splice(0, graphics.__glStack.length);
            return;
        }
        if (dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object, object.__graphics, renderSession.gl, object.get_cacheAsBitmap());
        openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object, renderSession, false);
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object, renderSession, localCoords) {
        if (localCoords == null) localCoords = false;
        var graphics = object.__graphics;
        var gl = renderSession.gl;
        var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
        if (glStack == null) return;
        var bucket;
        var translationMatrix;
        if (localCoords) translationMatrix = openfl_geom_Matrix.__identity;
        else translationMatrix = object.__worldTransform;
        var clipRect = renderSession.spriteBatch.clipRect;
        var batchDrawing = renderSession.spriteBatch.drawing;
        batchDrawing = renderSession.spriteBatch.drawing;
        var _g1 = 0;
        var _g = glStack.buckets.length;
        while (_g1 < _g) {
            var i = _g1++;
            batchDrawing = renderSession.spriteBatch.drawing;
            if (batchDrawing && !localCoords) renderSession.spriteBatch.finish();
            renderSession.blendModeManager.setBlendMode(object.__blendMode);
            if (clipRect != null) {
                gl.enable(gl.SCISSOR_TEST);
                gl.scissor(Math.floor(clipRect.x), Math.floor(clipRect.y), Math.floor(clipRect.width), Math.floor(clipRect.height));
            }
            bucket = glStack.buckets[i];
            var _g2 = bucket.mode;
            switch (_g2[1]) {
            case 1:
            case 2:
                renderSession.stencilManager.pushBucket(bucket, renderSession, translationMatrix.toArray(true));
                var shader = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket, renderSession, object, translationMatrix.toArray(true));
                openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket, shader, renderSession);
                renderSession.stencilManager.popBucket(object, bucket, renderSession);
                break;
            case 5:
                var shader1 = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket, renderSession, object, null);
                openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket, shader1, renderSession);
                break;
            case 6:
                if (!batchDrawing) renderSession.spriteBatch.begin(renderSession, clipRect);
                var args = bucket.graphicType.slice(2);
                renderSession.spriteBatch.renderTiles(object, args[0], args[1], args[2], args[3], args[4], args[5]);
                renderSession.spriteBatch.finish();
                break;
            default:
            }
            var ct = object.__worldColorTransform;
            var _g21 = 0;
            var _g3 = bucket.lines;
            while (_g21 < _g3.length) {
                var line = _g3[_g21]; ++_g21;
                if (line != null && line.verts.length > 0) {
                    var shader2 = renderSession.shaderManager.primitiveShader;
                    renderSession.shaderManager.setShader(shader2);
                    gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix.toArray(true));
                    gl.uniformMatrix3fv(shader2.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
                    gl.uniform1f(shader2.getUniformLocation("openfl_uAlpha"), 1);
                    gl.uniform4f(shader2.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, ct.alphaMultiplier);
                    gl.uniform4f(shader2.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255, ct.greenOffset / 255, ct.blueOffset / 255, ct.alphaOffset / 255);
                    line.vertexArray.bind();
                    shader2.bindVertexArray(line.vertexArray);
                    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, line.indexBuffer);
                    gl.drawElements(gl.TRIANGLE_STRIP, line.indices.length, gl.UNSIGNED_SHORT, 0);
                }
            }
            if (clipRect != null) gl.disable(gl.SCISSOR_TEST);
            batchDrawing = renderSession.spriteBatch.drawing;
            if (!batchDrawing && !localCoords) renderSession.spriteBatch.begin(renderSession, clipRect);
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object, graphics, gl, localCoords) {
        if (localCoords == null) localCoords = false;
        openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(), object.get_y());
        if (graphics.__bounds == null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
        else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
        var glStack = null;
        if (graphics.__dirty) glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics, gl);
        graphics.set___dirty(false);
        var _g = 0;
        var _g1 = glStack.buckets;
        while (_g < _g1.length) {
            var data = _g1[_g]; ++_g;
            data.reset();
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
        }
        glStack.reset();
        var _g11 = glStack.lastIndex;
        var _g2 = graphics.__drawPaths.length;
        while (_g11 < _g2) {
            var i = _g11++;
            var path = graphics.__drawPaths[i]; {
                var _g21 = path.type;
                switch (_g21[1]) {
                case 0:
                    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path, glStack, localCoords);
                    break;
                case 1:
                    var rounded = _g21[2];
                    if (rounded) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path, glStack, localCoords);
                    else openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path, glStack, localCoords);
                    break;
                case 2:
                case 3:
                    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path, glStack, localCoords);
                    break;
                case 4:
                    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path, object, glStack, localCoords);
                    break;
                case 5:
                    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path, glStack);
                    break;
                case 6:
                    var m = _g21[2];
                    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = m;
                    break;
                }
            }
            glStack.lastIndex++;
        }
        var _g3 = 0;
        var _g12 = glStack.buckets;
        while (_g3 < _g12.length) {
            var bucket = _g12[_g3]; ++_g3;
            if (bucket.uploadTileBuffer) bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()), Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()), Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()), Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
            bucket.optimize();
        }
        glStack.upload();
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path, glStack) {
        var bucket = null; {
            var _g = path.fill;
            switch (_g[1]) {
            case 1:
                var a = _g[3];
                var c = _g[2];
                bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
                if (c == null) bucket.color = [1, 1, 1];
                else bucket.color = [(c >> 16 & 255) / 255, (c >> 8 & 255) / 255, (c & 255) / 255];
                bucket.color[3] = a;
                bucket.uploadTileBuffer = true;
                break;
            case 2:
                var s = _g[5];
                var r = _g[4];
                var m = _g[3];
                var b = _g[2];
                bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
                bucket.bitmap = b;
                bucket.textureRepeat = r;
                bucket.textureSmooth = s;
                bucket.texture = b.getTexture(glStack.gl);
                bucket.uploadTileBuffer = true;
                var pMatrix;
                if (m == null) pMatrix = new openfl_geom_Matrix();
                else pMatrix = m.clone();
                pMatrix.invert();
                pMatrix.scale(1 / b.width, 1 / b.height);
                var tx = pMatrix.tx;
                var ty = pMatrix.ty;
                pMatrix.tx = 0;
                pMatrix.ty = 0;
                bucket.textureTL.x = tx;
                bucket.textureTL.y = ty;
                bucket.textureBR.x = tx + 1;
                bucket.textureBR.y = ty + 1;
                bucket.textureMatrix = pMatrix;
                break;
            default:
                bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex, glStack, openfl__$internal_renderer_opengl_utils_BucketMode.Line);
                bucket.uploadTileBuffer = false;
            }
        } {
            var _g1 = path.type;
            switch (_g1[1]) {
            case 4:
                bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
                bucket.uploadTileBuffer = false;
                break;
            case 5:
                bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
                bucket.uploadTileBuffer = false;
                break;
            default:
            }
        }
        bucket.graphicType = path.type;
        bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
        return bucket;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack, mode) {
        var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
        if (b == null) b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
        b.mode = mode;
        glStack.buckets.push(b);
        return b;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex, glStack, mode) {
        var bucket = null;
        var _g = 0;
        var _g1 = glStack.buckets;
        while (_g < _g1.length) {
            var b = _g1[_g]; ++_g;
            if (b.fillIndex == fillIndex) {
                bucket = b;
                break;
            }
        }
        if (bucket == null) bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack, mode);
        bucket.dirty = true;
        bucket.fillIndex = fillIndex;
        return bucket;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket, renderSession, object, translationMatrix) {
        var gl = renderSession.gl;
        var shader = null;
        var _g = bucket.mode;
        switch (_g[1]) {
        case 1:
            shader = renderSession.shaderManager.fillShader;
            break;
        case 2:
            shader = renderSession.shaderManager.patternFillShader;
            break;
        case 5:
            shader = renderSession.shaderManager.drawTrianglesShader;
            break;
        default:
            shader = null;
        }
        if (shader == null) return null;
        var newShader = renderSession.shaderManager.setShader(shader);
        gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"), object.__worldAlpha);
        gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
        var ct = object.__worldColorTransform;
        gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, ct.alphaMultiplier);
        gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255, ct.greenOffset / 255, ct.blueOffset / 255, ct.alphaOffset / 255);
        var _g1 = bucket.mode;
        switch (_g1[1]) {
        case 1:
            gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
            gl.uniform4fv(shader.getUniformLocation("openfl_uColor"), (function($this) {
                var $r;
                var array = bucket.color;
                var this1;
                if (array != null) this1 = new Float32Array(array);
                else this1 = null;
                $r = this1;
                return $r;
            } (this)));
            break;
        case 2:
            gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
            gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"), bucket.textureTL.x, bucket.textureTL.y);
            gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"), bucket.textureBR.x, bucket.textureBR.y);
            gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"), false, bucket.textureMatrix.toArray(true));
            break;
        case 5:
            if (bucket.texture != null) gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"), 1);
            else {
                gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"), 0);
                gl.uniform4fv(shader.getUniformLocation("openfl_uColor"), (function($this) {
                    var $r;
                    var array1 = bucket.color;
                    var this2;
                    if (array1 != null) this2 = new Float32Array(array1);
                    else this2 = null;
                    $r = this2;
                    return $r;
                } (this)));
            }
            break;
        default:
        }
        return shader;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket, shader, renderSession) {
        var gl = renderSession.gl;
        if (bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl, bucket);
        gl.bindBuffer(gl.ARRAY_BUFFER, bucket.tileBuffer);
        gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"), 4, gl.SHORT, false, 0, 0);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket, shader, renderSession) {
        var gl = renderSession.gl;
        var _g = 0;
        var _g1 = bucket.fills;
        while (_g < _g1.length) {
            var fill = _g1[_g]; ++_g;
            if (fill.available) continue;
            openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl, bucket);
            fill.vertexArray.bind();
            shader.bindVertexArray(fill.vertexArray);
            gl.drawArrays(gl.TRIANGLES, fill.glStart, fill.glLength);
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl, bucket) {
        gl.bindTexture(gl.TEXTURE_2D, bucket.texture);
        if (bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
        } else {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        }
        if (bucket.textureSmooth) {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        } else {
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        }
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1, y1, x2, y2, x3, y3) {
        return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
        if (hex == null) return [1, 1, 1];
        else return [(hex >> 16 & 255) / 255, (hex >> 8 & 255) / 255, (hex & 255) / 255];
    };
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
        if (hex == null) return [1, 1, 1, 1];
        else return [(hex >> 16 & 255) / 255, (hex >> 8 & 255) / 255, (hex & 255) / 255, (hex >> 24 & 255) / 255];
    };
    var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
        this.lastIndex = 0;
        this.gl = gl;
        this.buckets = [];
        this.lastIndex = 0;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
    openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLStack"];
    openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
        reset: function() {
            this.buckets = [];
            this.lastIndex = 0;
        },
        upload: function() {
            var _g = 0;
            var _g1 = this.buckets;
            while (_g < _g1.length) {
                var bucket = _g1[_g]; ++_g;
                if (bucket.dirty) bucket.upload();
            }
        },
        __class__: openfl__$internal_renderer_opengl_utils_GLStack
    };
    var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
        this.uploadTileBuffer = true;
        this.textureSmooth = true;
        this.textureRepeat = false;
        this.lines = [];
        this.fills = [];
        this.fillIndex = -1;
        this.gl = gl;
        this.color = [0, 0, 0];
        this.lastIndex = 0;
        this.alpha = 1;
        this.dirty = true;
        this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
        this.textureMatrix = new openfl_geom_Matrix();
        this.textureTL = new openfl_geom_Point();
        this.textureBR = new openfl_geom_Point(1, 1);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
    openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLBucket"];
    openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
        getData: function(type) {
            var data;
            switch (type[1]) {
            case 1:
                data = this.fills;
                break;
            default:
                data = this.lines;
            }
            var result = null;
            var remove = false;
            var _g = 0;
            while (_g < data.length) {
                var d = data[_g]; ++_g;
                if (d.available) {
                    result = d;
                    remove = true;
                    break;
                }
            }
            if (result == null) result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
            result.available = false;
            result.parent = this;
            result.type = type;
            if (remove) HxOverrides.remove(data, result);
            data.push(result);
            switch (type[1]) {
            case 1:
                var _g1 = this.mode;
                switch (_g1[1]) {
                case 1:
                case 2:
                    result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
                    break;
                case 5:
                    result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
                    result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
                    break;
                default:
                }
                break;
            case 0:
                result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
                break;
            }
            return result;
        },
        optimize: function() {
            var _g = this;
            var data = this.lines;
            if (data.length > 1) {
                var result = [];
                var tmp = null;
                var last = null;
                var idx = 0;
                var vi = 0;
                var ii = 0;
                var before = data.length;
                var _g1 = 0;
                while (_g1 < data.length) {
                    var d = data[_g1]; ++_g1;
                    if (d.available || d.rawVerts || d.rawIndices) {
                        if (tmp != null) {
                            result.push(tmp);
                            tmp = null;
                        }
                        result.push(d);
                        last = d;
                        continue;
                    }
                    if (last == null || last.drawMode == d.drawMode) {
                        if (tmp == null) tmp = d;
                        else {
                            vi = tmp.verts.length;
                            ii = tmp.indices.length;
                            var _g2 = 0;
                            var _g11 = d.verts.length;
                            while (_g2 < _g11) {
                                var j = _g2++;
                                tmp.verts[j + vi] = d.verts[j];
                            }
                            var _g21 = 0;
                            var _g12 = d.indices.length;
                            while (_g21 < _g12) {
                                var j1 = _g21++;
                                tmp.indices[j1 + ii] = d.indices[j1] + idx;
                            }
                        }
                        idx = tmp.indices[tmp.indices.length - 1] + 1;
                        last = d;
                    } else {
                        if (tmp != null) {
                            result.push(tmp);
                            tmp = null;
                        }
                        result.push(d);
                        last = d;
                        continue;
                    }
                }
                if (result.length == 0 && tmp != null) result.push(tmp);
                if (result.length > 0) switch (openfl__$internal_renderer_opengl_utils_BucketDataType.Line[1]) {
                case 1:
                    _g.fills = result;
                    break;
                default:
                    _g.lines = result;
                }
            }
        },
        reset: function() {
            var _g = 0;
            var _g1 = this.fills;
            while (_g < _g1.length) {
                var fill = _g1[_g]; ++_g;
                fill.reset();
            }
            var _g2 = 0;
            var _g11 = this.lines;
            while (_g2 < _g11.length) {
                var line = _g11[_g2]; ++_g2;
                line.reset();
            }
            this.fillIndex = -1;
            this.uploadTileBuffer = true;
            this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
        },
        uploadTile: function(x, y, w, h) {
            if (this.tileBuffer == null) this.tileBuffer = this.gl.createBuffer();
            this.tile = [x, y, 0, 0, w, y, 1, 0, x, h, 0, 1, w, h, 1, 1];
            var array = this.tile;
            var this1;
            if (array != null) this1 = new Int16Array(array);
            else this1 = null;
            this.glTile = this1;
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.tileBuffer);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, this.glTile, this.gl.STATIC_DRAW);
        },
        upload: function() {
            if (this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
                var _g = 0;
                var _g1 = this.fills;
                while (_g < _g1.length) {
                    var fill = _g1[_g]; ++_g;
                    if (!fill.available) fill.upload();
                }
            }
            var _g2 = 0;
            var _g11 = this.lines;
            while (_g2 < _g11.length) {
                var line = _g11[_g2]; ++_g2;
                if (!line.available) line.upload();
            }
            this.dirty = false;
        },
        __class__: openfl__$internal_renderer_opengl_utils_GLBucket
    };
    var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
        this.available = false;
        this.rawIndices = false;
        this.stride = 0;
        this.rawVerts = false;
        this.lastVertsSize = 0;
        this.glStart = 0;
        this.glLength = 0;
        this.gl = gl;
        this.drawMode = gl.TRIANGLE_STRIP;
        this.verts = [];
        this.indices = [];
        this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
    openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLBucketData"];
    openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
        reset: function() {
            this.available = true;
            this.verts = [];
            this.indices = [];
            this.glLength = 0;
            this.glStart = 0;
            this.stride = 0;
            this.rawVerts = false;
            this.rawIndices = false;
            this.drawMode = this.gl.TRIANGLE_STRIP;
        },
        upload: function() {
            if (this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
                if (!this.rawVerts) {
                    var array = this.verts;
                    var this1;
                    if (array != null) this1 = new Float32Array(array);
                    else this1 = null;
                    this.glVerts = this1;
                }
                this.vertexArray.buffer = this.glVerts.buffer;
                if (this.glVerts.length <= this.lastVertsSize) {
                    this.vertexArray.bind();
                    var end = this.glLength * this.stride;
                    if (this.glLength > 0 && this.lastVertsSize > end) {
                        var view = this.glVerts.subarray(0, end);
                        this.vertexArray.upload(view);
                    } else this.vertexArray.upload(this.glVerts);
                } else {
                    this.vertexArray.setContext(this.gl, this.glVerts);
                    this.lastVertsSize = this.glVerts.length;
                }
            }
            if (this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
                if (this.indexBuffer == null) this.indexBuffer = this.gl.createBuffer();
                if (!this.rawIndices) {
                    var array1 = this.indices;
                    var this2;
                    if (array1 != null) this2 = new Uint16Array(array1);
                    else this2 = null;
                    this.glIndices = this2;
                }
                this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
                this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.glIndices, this.gl.STREAM_DRAW);
            }
        },
        __class__: openfl__$internal_renderer_opengl_utils_GLBucketData
    };
    var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = {
        __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "BucketMode"],
        __constructs__: ["None", "Fill", "PatternFill", "Line", "PatternLine", "DrawTriangles", "DrawTiles"]
    };
    openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None", 0];
    openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill", 1];
    openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill", 2];
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line", 3];
    openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine", 4];
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles", 5];
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles", 6];
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
    var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = {
        __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "BucketDataType"],
        __constructs__: ["Line", "Fill"]
    };
    openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line", 0];
    openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
    openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill", 1];
    openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
    openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
    var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
        this.indices = [];
        this.data = [];
        this.lastIndex = 0;
        this.mode = 0;
        this.dirty = true;
        this.alpha = 1.0;
        this.tint = [1.0, 1.0, 1.0];
        this.gl = gl;
        this.dataBuffer = gl.createBuffer();
        this.indexBuffer = gl.createBuffer();
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
    openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "GLGraphicsData"];
    openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
        reset: function() {
            this.data = [];
            this.indices = [];
            this.lastIndex = 0;
        },
        upload: function() {
            var elements = this.data;
            var this1;
            if (elements != null) this1 = new Float32Array(elements);
            else this1 = null;
            this.glData = this1;
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.dataBuffer);
            this.gl.bufferData(this.gl.ARRAY_BUFFER, this.glData, this.gl.STATIC_DRAW);
            var elements1 = this.indices;
            var this2;
            if (elements1 != null) this2 = new Uint16Array(elements1);
            else this2 = null;
            this.glIndices = this2;
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.glIndices, this.gl.STATIC_DRAW);
            this.dirty = false;
        },
        __class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
    };
    var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = {
        __ename__: ["openfl", "_internal", "renderer", "opengl", "utils", "GraphicType"],
        __constructs__: ["Polygon", "Rectangle", "Circle", "Ellipse", "DrawTriangles", "DrawTiles", "OverrideMatrix"]
    };
    openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon", 0];
    openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
    openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
    openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) {
        var $x = ["Rectangle", 1, rounded];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
        $x.toString = $estr;
        return $x;
    };
    openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle", 2];
    openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
    openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
    openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse", 3];
    openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
    openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
    openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices, indices, uvtData, culling, colors, blendMode) {
        var $x = ["DrawTriangles", 4, vertices, indices, uvtData, culling, colors, blendMode];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
        $x.toString = $estr;
        return $x;
    };
    openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet, tileData, smooth, flags, shader, count) {
        var $x = ["DrawTiles", 5, sheet, tileData, smooth, flags, shader, count];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
        $x.toString = $estr;
        return $x;
    };
    openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) {
        var $x = ["OverrideMatrix", 6, matrix];
        $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
        $x.toString = $estr;
        return $x;
    };
    var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl, width, height, smoothing, powerOfTwo) {
        if (powerOfTwo == null) powerOfTwo = true;
        if (smoothing == null) smoothing = true;
        this.__swapped = false;
        this.powerOfTwo = true;
        this.useOldTexture = false;
        this.gl = gl;
        this.width = width;
        this.height = height;
        this.smoothing = smoothing;
        this.powerOfTwo = powerOfTwo;
        this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(gl, width, height, smoothing, powerOfTwo));
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
    openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "PingPongTexture"];
    openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
        swap: function() {
            this.__swapped = !this.__swapped;
            if ((this.__swapped ? this.__texture1: this.__texture0) == null) this.set_renderTexture(new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl, this.width, this.height, this.smoothing, this.powerOfTwo));
        },
        clear: function(r, g, b, a, mask) {
            if (a == null) a = 0;
            if (b == null) b = 0;
            if (g == null) g = 0;
            if (r == null) r = 0; (this.__swapped ? this.__texture1: this.__texture0).clear(r, g, b, a, mask);
        },
        resize: function(width, height) {
            this.width = width;
            this.height = height; (this.__swapped ? this.__texture1: this.__texture0).resize(width, height);
        },
        destroy: function() {
            if (this.__texture0 != null) {
                this.__texture0.destroy();
                this.__texture0 = null;
            }
            if (this.__texture1 != null) {
                this.__texture1.destroy();
                this.__texture1 = null;
            }
            this.__swapped = false;
        },
        get_renderTexture: function() {
            if (this.__swapped) return this.__texture1;
            else return this.__texture0;
        },
        set_renderTexture: function(v) {
            if (this.__swapped) return this.__texture1 = v;
            else return this.__texture0 = v;
        },
        get_oldRenderTexture: function() {
            if (this.__swapped) return this.__texture0;
            else return this.__texture1;
        },
        set_oldRenderTexture: function(v) {
            if (this.__swapped) return this.__texture0 = v;
            else return this.__texture1 = v;
        },
        get_framebuffer: function() {
            return (this.__swapped ? this.__texture1: this.__texture0).frameBuffer;
        },
        get_texture: function() {
            if (this.useOldTexture) return (this.__swapped ? this.__texture0: this.__texture1).texture;
            else return (this.__swapped ? this.__texture1: this.__texture0).texture;
        },
        get___otherTexture: function() {
            if (this.__swapped) return this.__texture0;
            else return this.__texture1;
        },
        __class__: openfl__$internal_renderer_opengl_utils_PingPongTexture,
        __properties__: {
            get___otherTexture: "get___otherTexture",
            get_texture: "get_texture",
            get_framebuffer: "get_framebuffer",
            set_oldRenderTexture: "set_oldRenderTexture",
            get_oldRenderTexture: "get_oldRenderTexture",
            set_renderTexture: "set_renderTexture",
            get_renderTexture: "get_renderTexture"
        }
    };
    var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl, width, height, smoothing, powerOfTwo) {
        if (powerOfTwo == null) powerOfTwo = true;
        if (smoothing == null) smoothing = true;
        this.powerOfTwo = true;
        this.gl = gl;
        this.powerOfTwo = powerOfTwo;
        this.frameBuffer = gl.createFramebuffer();
        this.texture = gl.createTexture();
        gl.bindTexture(gl.TEXTURE_2D, this.texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, smoothing ? gl.LINEAR: gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, smoothing ? gl.LINEAR: gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);
        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
        this.renderBuffer = gl.createRenderbuffer();
        gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderBuffer);
        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, this.renderBuffer);
        this.resize(width, height);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
    openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "RenderTexture"];
    openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
        clear: function(r, g, b, a, mask) {
            if (a == null) a = 0;
            if (b == null) b = 0;
            if (g == null) g = 0;
            if (r == null) r = 0;
            this.gl.clearColor(r, g, b, a);
            this.gl.clear(mask == null ? this.gl.COLOR_BUFFER_BIT: mask);
        },
        destroy: function() {
            if (this.frameBuffer != null) this.gl.deleteFramebuffer(this.frameBuffer);
            if (this.texture != null) this.gl.deleteTexture(this.texture);
            this.frameBuffer = null;
            this.texture = null;
        },
        resize: function(width, height) {
            if (this.width == width && this.height == height) return;
            this.width = width;
            this.height = height;
            var pow2W = width;
            var pow2H = height;
            if (this.powerOfTwo) {
                pow2W = this.powOfTwo(width);
                pow2H = this.powOfTwo(height);
            }
            var lastW = this.__width;
            var lastH = this.__height;
            this.__width = pow2W;
            this.__height = pow2H;
            this.createUVs();
            if (lastW == pow2W && lastH == pow2H) return;
            this.gl.bindTexture(this.gl.TEXTURE_2D, this.texture);
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.__width, this.__height, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);
            this.gl.bindRenderbuffer(this.gl.RENDERBUFFER, this.renderBuffer);
            this.gl.renderbufferStorage(this.gl.RENDERBUFFER, this.gl.DEPTH_STENCIL, this.__width, this.__height);
        },
        createUVs: function() {
            if (this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
            var w = this.width / this.__width;
            var h = this.height / this.__height;
            this.__uvData.x0 = 0;
            this.__uvData.y0 = 0;
            this.__uvData.x1 = w;
            this.__uvData.y1 = 0;
            this.__uvData.x2 = w;
            this.__uvData.y2 = h;
            this.__uvData.x3 = 0;
            this.__uvData.y3 = h;
        },
        powOfTwo: function(value) {
            var n = 1;
            while (n < value) n <<= 1;
            return n;
        },
        __class__: openfl__$internal_renderer_opengl_utils_RenderTexture
    };
    var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
        this.setContext(gl);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
    openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "ShaderManager"];
    openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
        setContext: function(gl) {
            this.gl = gl;
            this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
            this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
            this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
            this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
            this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
            this.setShader(this.defaultShader, true);
        },
        destroy: function() {
            this.defaultShader.destroy();
            this.fillShader.destroy();
            this.patternFillShader.destroy();
            this.drawTrianglesShader.destroy();
            this.primitiveShader.destroy();
            this.gl = null;
        },
        setShader: function(shader, force) {
            if (force == null) force = false;
            if (shader == null) {
                this.currentShader = null;
                this.gl.useProgram(null);
                return true;
            }
            if (this.currentShader != null && !force && this.currentShader.ID == shader.ID) return false;
            this.currentShader = shader;
            this.gl.useProgram(shader.program);
            return true;
        },
        __class__: openfl__$internal_renderer_opengl_utils_ShaderManager
    };
    var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl, maxSprites) {
        if (maxSprites == null) maxSprites = 2000;
        this.colorTransform = new openfl_geom_ColorTransform();
        this.uvs = new openfl_display_TextureUvs();
        this.matrix = new openfl_geom_Matrix();
        this.lastEnableColor = true;
        this.enableColor = true;
        this.attributes = [];
        this.writtenVertexBytes = 0;
        this.drawing = false;
        this.dirty = true;
        this.states = [];
        this.maxSprites = maxSprites;
        this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"));
        this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aTexCoord0"));
        this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5126, true, "openfl_aColor"));
        var array = [1, 1, 1, 1];
        var this1;
        if (array != null) this1 = new Float32Array(array);
        else this1 = null;
        this.attributes[2].defaultValue = this1;
        this.maxElementsPerVertex = 0;
        var _g = 0;
        var _g1 = this.attributes;
        while (_g < _g1.length) {
            var a = _g1[_g]; ++_g;
            this.maxElementsPerVertex += Math.floor(a.components * a.getElementsBytes() / 4);
        }
        this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
        this.indexArraySize = maxSprites * 6;
        this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes, this.vertexArraySize, false);
        var buffer = this.vertexArray.buffer;
        var this2;
        if (buffer != null) this2 = new Float32Array(buffer, 0);
        else this2 = null;
        this.positions = this2;
        var elements = this.indexArraySize;
        var this3;
        if (elements != null) this3 = new Uint16Array(elements);
        else this3 = null;
        this.indices = this3;
        var i = 0;
        var j = 0;
        while (i < this.indexArraySize) {
            this.indices[i] = j;
            this.indices[i + 1] = j + 1;
            this.indices[i + 2] = j + 2;
            this.indices[i + 3] = j;
            this.indices[i + 4] = j + 2;
            this.indices[i + 5] = j + 3;
            i += 6;
            j += 4;
        }
        this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
        this.dirty = true;
        this.drawing = false;
        this.batchedSprites = 0;
        this.setContext(gl);
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
    openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "SpriteBatch"];
    openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
        destroy: function() {
            this.vertexArray.destroy();
            this.vertexArray = null;
            this.indices = null;
            this.gl.deleteBuffer(this.indexBuffer);
            this.currentState.destroy();
            var _g = 0;
            var _g1 = this.states;
            while (_g < _g1.length) {
                var state = _g1[_g]; ++_g;
                state.destroy();
            }
            this.colorTransform = null;
            this.gl = null;
        },
        begin: function(renderSession, clipRect) {
            this.renderSession = renderSession;
            this.shader = renderSession.shaderManager.defaultShader;
            this.drawing = true;
            this.start(clipRect);
        },
        finish: function() {
            this.stop();
            this.clipRect = null;
            this.drawing = false;
        },
        start: function(clipRect) {
            if (!this.drawing) this.stop();
            this.dirty = true;
            this.clipRect = clipRect;
        },
        stop: function() {
            this.flush();
        },
        renderBitmapData: function(bitmapData, smoothing, matrix, ct, alpha, blendMode, flashShader, pixelSnapping, bgra) {
            if (bgra == null) bgra = false;
            if (alpha == null) alpha = 1;
            if (bitmapData == null) return;
            var texture = bitmapData.getTexture(this.gl);
            if (this.batchedSprites >= this.maxSprites) this.flush();
            var uvs = bitmapData.__uvData;
            if (uvs == null) return;
            this.prepareShader(flashShader, bitmapData);
            var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
            this.enableColor = true;
            if (this.enableColor != this.lastEnableColor) {
                this.flush();
                this.lastEnableColor = this.enableColor;
            }
            this.attributes[2].enabled = this.lastEnableColor;
            this.elementsPerVertex = this.getElementsPerVertex();
            var index = this.batchedSprites * 4 * this.elementsPerVertex;
            this.fillVertices(index, bitmapData.width, bitmapData.height, matrix, uvs, color, pixelSnapping);
            this.setState(this.batchedSprites, texture, smoothing, blendMode, ct, flashShader, true);
            this.batchedSprites++;
        },
        renderTiles: function(object, sheet, tileData, smooth, flags, flashShader, count) {
            if (count == null) count = -1;
            if (flags == null) flags = 0;
            if (smooth == null) smooth = false;
            var texture = sheet.__bitmap.getTexture(this.gl);
            if (texture == null) return;
            var useScale = (flags & 1) > 0;
            var useRotation = (flags & 2) > 0;
            var useTransform = (flags & 16) > 0;
            var useRGB = (flags & 4) > 0;
            var useAlpha = (flags & 8) > 0;
            var useRect = (flags & 32) > 0;
            var useOrigin = (flags & 64) > 0;
            var useRGBOffset = (flags & 128) > 0;
            var blendMode;
            var _g = flags & 983040;
            switch (_g) {
            case 65536:
                blendMode = 0;
                break;
            case 131072:
                blendMode = 9;
                break;
            case 262144:
                blendMode = 12;
                break;
            case 524288:
                blendMode = 14;
                break;
            default:
                var _g1 = flags & 15728640;
                switch (_g1) {
                case 1048576:
                    blendMode = 2;
                    break;
                case 2097152:
                    blendMode = 8;
                    break;
                case 4194304:
                    blendMode = 11;
                    break;
                case 8388608:
                    blendMode = 5;
                    break;
                default:
                    var _g2 = flags & 251658240;
                    switch (_g2) {
                    case 16777216:
                        blendMode = 3;
                        break;
                    case 33554432:
                        blendMode = 6;
                        break;
                    default:
                        blendMode = 10;
                    }
                }
            }
            if (useTransform) {
                useScale = false;
                useRotation = false;
            }
            var scaleIndex = 0;
            var rotationIndex = 0;
            var rgbIndex = 0;
            var rgbOffsetIndex = 0;
            var alphaIndex = 0;
            var transformIndex = 0;
            var numValues = 3;
            if (useRect) if (useOrigin) numValues = 8;
            else numValues = 6;
            if (useScale) {
                scaleIndex = numValues;
                numValues++;
            }
            if (useRotation) {
                rotationIndex = numValues;
                numValues++;
            }
            if (useTransform) {
                transformIndex = numValues;
                numValues += 4;
            }
            if (useRGB) {
                rgbIndex = numValues;
                numValues += 3;
            }
            if (useAlpha) {
                alphaIndex = numValues;
                numValues++;
            }
            if (useRGBOffset) {
                rgbOffsetIndex = numValues;
                numValues += 4;
            }
            var totalCount = tileData.length;
            if (count >= 0 && totalCount > count) totalCount = count;
            var itemCount = Math.ceil(totalCount / numValues);
            var iIndex = 0;
            var tileID = -1;
            var rect = sheet.__rectTile;
            var tileUV = sheet.__rectUV;
            var center = sheet.__point;
            var x = 0.0;
            var y = 0.0;
            var alpha = 1.0;
            var rmul = 1.0;
            var gmul = 1.0;
            var bmul = 1.0;
            var scale = 1.0;
            var rotation = 0.0;
            var cosTheta = 1.0;
            var sinTheta = 0.0;
            var a = 0.0;
            var b = 0.0;
            var c = 0.0;
            var d = 0.0;
            var tx = 0.0;
            var ty = 0.0;
            var ox = 0.0;
            var oy = 0.0;
            var oMatrix = object.__worldTransform;
            var bIndex = 0;
            var tMa = 1.0;
            var tMb = 0.0;
            var tMc = 0.0;
            var tMd = 1.0;
            var tMtx = 0.0;
            var tMty = 0.0;
            var oMa = oMatrix.a;
            var oMb = oMatrix.b;
            var oMc = oMatrix.c;
            var oMd = oMatrix.d;
            var oMtx = oMatrix.tx;
            var oMty = oMatrix.ty;
            var rx = 0.0;
            var ry = 0.0;
            var rw = 0.0;
            var rh = 0.0;
            var tuvx = 0.0;
            var tuvy = 0.0;
            var tuvw = 0.0;
            var tuvh = 0.0;
            this.enableColor = true;
            if (this.enableColor != this.lastEnableColor) {
                this.flush();
                this.lastEnableColor = this.enableColor;
            }
            this.attributes[2].enabled = this.lastEnableColor;
            this.elementsPerVertex = this.getElementsPerVertex();
            this.prepareShader(flashShader, null);
            while (iIndex < totalCount) {
                if (this.batchedSprites >= this.maxSprites) this.flush();
                x = tileData[iIndex];
                y = tileData[iIndex + 1];
                if (useRect) {
                    tileID = -1;
                    rect.x = tileData[iIndex + 2];
                    rect.y = tileData[iIndex + 3];
                    rect.width = tileData[iIndex + 4];
                    rect.height = tileData[iIndex + 5];
                    if (useOrigin) {
                        center.x = tileData[iIndex + 6];
                        center.y = tileData[iIndex + 7];
                    } else center.setTo(0, 0);
                    rw = rect.width;
                    rh = rect.height;
                    tuvx = rect.get_left() / sheet.__bitmap.width;
                    tuvy = rect.get_top() / sheet.__bitmap.height;
                    tuvw = rect.get_right() / sheet.__bitmap.width;
                    tuvh = rect.get_bottom() / sheet.__bitmap.height;
                } else {
                    tileID = (tileData[iIndex + 2] == null ? 0 : tileData[iIndex + 2]) | 0;
                    rect = sheet.__tileRects[tileID];
                    center = sheet.__centerPoints[tileID];
                    tileUV = sheet.__tileUVs[tileID];
                    if (rect != null) {
                        rw = rect.width;
                        rh = rect.height;
                        tuvx = tileUV.x;
                        tuvy = tileUV.y;
                        tuvw = tileUV.width;
                        tuvh = tileUV.height;
                    }
                }
                if (rect != null && rect.width > 0 && rect.height > 0 && center != null) {
                    alpha = 1;
                    rmul = 1;
                    gmul = 1;
                    bmul = 1;
                    scale = 1.0;
                    rotation = 0.0;
                    cosTheta = 1.0;
                    sinTheta = 0.0;
                    if (useAlpha) alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha;
                    else alpha = object.__worldAlpha;
                    if (useRGB) {
                        rmul = tileData[iIndex + rgbIndex];
                        gmul = tileData[iIndex + rgbIndex + 1];
                        bmul = tileData[iIndex + rgbIndex + 2];
                        var tmp = bmul;
                        bmul = rmul;
                        rmul = tmp;
                    }
                    var wct = object.__worldColorTransform;
                    this.colorTransform.redMultiplier = wct.redMultiplier;
                    this.colorTransform.greenMultiplier = wct.greenMultiplier;
                    this.colorTransform.blueMultiplier = wct.blueMultiplier;
                    this.colorTransform.alphaMultiplier = wct.alphaMultiplier;
                    this.colorTransform.redOffset = wct.redOffset;
                    this.colorTransform.greenOffset = wct.greenOffset;
                    this.colorTransform.blueOffset = wct.blueOffset;
                    this.colorTransform.alphaOffset = wct.alphaOffset;
                    if (useRGBOffset) {
                        this.colorTransform.redOffset += tileData[iIndex + rgbOffsetIndex];
                        this.colorTransform.greenOffset += tileData[iIndex + rgbOffsetIndex + 1];
                        this.colorTransform.blueOffset += tileData[iIndex + rgbOffsetIndex + 2];
                        this.colorTransform.alphaOffset += tileData[iIndex + rgbOffsetIndex + 3];
                    }
                    if (useScale) scale = tileData[iIndex + scaleIndex];
                    if (useRotation) {
                        rotation = tileData[iIndex + rotationIndex];
                        cosTheta = Math.cos(rotation);
                        sinTheta = Math.sin(rotation);
                    }
                    if (useTransform) {
                        a = tileData[iIndex + transformIndex];
                        b = tileData[iIndex + transformIndex + 1];
                        c = tileData[iIndex + transformIndex + 2];
                        d = tileData[iIndex + transformIndex + 3];
                    } else {
                        a = scale * cosTheta;
                        b = scale * sinTheta;
                        c = -b;
                        d = a;
                    }
                    ox = center.x * a + center.y * c;
                    oy = center.x * b + center.y * d;
                    tx = x - ox;
                    ty = y - oy;
                    tMa = (a * oMa + b * oMc) * rw;
                    tMb = (a * oMb + b * oMd) * rw;
                    tMc = (c * oMa + d * oMc) * rh;
                    tMd = (c * oMb + d * oMd) * rh;
                    tMtx = tx * oMa + ty * oMc + oMtx;
                    tMty = tx * oMb + ty * oMd + oMty;
                    bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
                    this.positions[bIndex] = tMtx;
                    this.positions[bIndex + 1] = tMty;
                    this.positions[bIndex + 8] = tMa + tMtx;
                    this.positions[bIndex + 9] = tMb + tMty;
                    this.positions[bIndex + 16] = tMa + tMc + tMtx;
                    this.positions[bIndex + 17] = tMd + tMb + tMty;
                    this.positions[bIndex + 24] = tMc + tMtx;
                    this.positions[bIndex + 25] = tMd + tMty;
                    var val;
                    var val1;
                    var val2 = this.positions[bIndex + 28] = bmul;
                    val1 = this.positions[bIndex + 20] = val2;
                    val = this.positions[bIndex + 12] = val1;
                    this.positions[bIndex + 4] = val;
                    var val3;
                    var val4;
                    var val5 = this.positions[bIndex + 29] = gmul;
                    val4 = this.positions[bIndex + 21] = val5;
                    val3 = this.positions[bIndex + 13] = val4;
                    this.positions[bIndex + 5] = val3;
                    var val6;
                    var val7;
                    var val8 = this.positions[bIndex + 30] = rmul;
                    val7 = this.positions[bIndex + 22] = val8;
                    val6 = this.positions[bIndex + 14] = val7;
                    this.positions[bIndex + 6] = val6;
                    var val9;
                    var val10;
                    var val11 = this.positions[bIndex + 31] = alpha;
                    val10 = this.positions[bIndex + 23] = val11;
                    val9 = this.positions[bIndex + 15] = val10;
                    this.positions[bIndex + 7] = val9;
                    this.positions[bIndex + 2] = tuvx;
                    this.positions[bIndex + 3] = tuvy;
                    this.positions[bIndex + 10] = tuvw;
                    this.positions[bIndex + 11] = tuvy;
                    this.positions[bIndex + 18] = tuvw;
                    this.positions[bIndex + 19] = tuvh;
                    this.positions[bIndex + 26] = tuvx;
                    this.positions[bIndex + 27] = tuvh;
                    this.writtenVertexBytes = bIndex + 32;
                    this.setState(this.batchedSprites, texture, smooth, blendMode, this.colorTransform, flashShader, false);
                    this.batchedSprites++;
                }
                iIndex += numValues;
            }
        },
        fillVertices: function(index, width, height, matrix, uvs, color, pixelSnapping) {
            if (color == null) color = -1;
            var a = matrix.a;
            var b = matrix.b;
            var c = matrix.c;
            var d = matrix.d;
            var tx = matrix.tx;
            var ty = matrix.ty;
            if (pixelSnapping == null || pixelSnapping == 2) {
                this.positions[index] = tx;
                this.positions[index + 1] = ty;
                this.positions[index + 8] = a * width + tx;
                this.positions[index + 9] = b * width + ty;
                this.positions[index + 16] = a * width + c * height + tx;
                this.positions[index + 17] = d * height + b * width + ty;
                this.positions[index + 24] = c * height + tx;
                this.positions[index + 25] = d * height + ty;
            } else {
                var val = Math.round(tx);
                this.positions[index] = val;
                var val1 = Math.round(ty);
                this.positions[index + 1] = val1;
                var val2 = Math.round(a * width + tx);
                this.positions[index + 8] = val2;
                var val3 = Math.round(b * width + ty);
                this.positions[index + 9] = val3;
                var val4 = Math.round(a * width + c * height + tx);
                this.positions[index + 16] = val4;
                var val5 = Math.round(d * height + b * width + ty);
                this.positions[index + 17] = val5;
                var val6 = Math.round(c * height + tx);
                this.positions[index + 24] = val6;
                var val7 = Math.round(d * height + ty);
                this.positions[index + 25] = val7;
            }
            if (this.enableColor) {
                var val8;
                var val9;
                var val10 = this.positions[index + 28] = (color & 255) / 255.0;
                val9 = this.positions[index + 20] = val10;
                val8 = this.positions[index + 12] = val9;
                this.positions[index + 4] = val8;
                var val11;
                var val12;
                var val13 = this.positions[index + 29] = (color >> 8 & 255) / 255.0;
                val12 = this.positions[index + 21] = val13;
                val11 = this.positions[index + 13] = val12;
                this.positions[index + 5] = val11;
                var val14;
                var val15;
                var val16 = this.positions[index + 30] = (color >> 16 & 255) / 255.0;
                val15 = this.positions[index + 22] = val16;
                val14 = this.positions[index + 14] = val15;
                this.positions[index + 6] = val14;
                var val17;
                var val18;
                var val19 = this.positions[index + 31] = (color >> 24 & 255) / 255.0;
                val18 = this.positions[index + 23] = val19;
                val17 = this.positions[index + 15] = val18;
                this.positions[index + 7] = val17;
            }
            this.positions[index + 2] = uvs.x0;
            this.positions[index + 3] = uvs.y0;
            this.positions[index + 10] = uvs.x1;
            this.positions[index + 11] = uvs.y1;
            this.positions[index + 18] = uvs.x2;
            this.positions[index + 19] = uvs.y2;
            this.positions[index + 26] = uvs.x3;
            this.positions[index + 27] = uvs.y3;
            this.writtenVertexBytes = index + 32;
        },
        enableAttributes: function(color) {
            if (color == null) color = -1;
            this.enableColor = color != -1;
            if (this.enableColor != this.lastEnableColor) {
                this.flush();
                this.lastEnableColor = this.enableColor;
            }
            this.attributes[2].enabled = this.lastEnableColor;
            this.elementsPerVertex = this.getElementsPerVertex();
        },
        flush: function() {
            if (this.batchedSprites == 0) return;
            if (this.clipRect != null) {
                this.gl.enable(this.gl.SCISSOR_TEST);
                this.gl.scissor(Math.floor(this.clipRect.x), Math.floor(this.clipRect.y), Math.ceil(this.clipRect.width), Math.ceil(this.clipRect.height));
            }
            if (this.dirty) {
                this.dirty = false;
                this.renderSession.activeTextures = 1;
                this.vertexArray.bind();
                this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
            }
            if (this.writtenVertexBytes > this.vertexArraySize * 0.5) this.vertexArray.upload(this.positions);
            else {
                var view = this.positions.subarray(0, this.writtenVertexBytes);
                this.vertexArray.upload(view);
            }
            var nextState;
            var batchSize = 0;
            var start = 0;
            this.currentState.shader = null;
            this.currentState.shaderData = null;
            this.currentState.texture = null;
            this.currentState.textureSmooth = false;
            this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
            this.currentState.colorTransform = null;
            this.currentState.skipColorTransformAlpha = false;
            var _g1 = 0;
            var _g = this.batchedSprites;
            while (_g1 < _g) {
                var i = _g1++;
                nextState = this.states[i];
                this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
                if (!nextState.equals(this.currentState)) {
                    this.renderBatch(this.currentState, batchSize, start);
                    start = i;
                    batchSize = 0;
                    this.currentState.shader = nextState.shader;
                    this.currentState.shaderData = nextState.shaderData;
                    this.currentState.texture = nextState.texture;
                    this.currentState.textureSmooth = nextState.textureSmooth;
                    this.currentState.blendMode = nextState.blendMode;
                    this.currentState.skipColorTransform = nextState.skipColorTransform;
                    if (this.currentState.skipColorTransform) this.currentState.colorTransform = null;
                    else this.currentState.colorTransform = nextState.colorTransform;
                }
                batchSize++;
            }
            this.renderBatch(this.currentState, batchSize, start);
            this.batchedSprites = 0;
            this.writtenVertexBytes = 0;
            if (this.clipRect != null) this.gl.disable(this.gl.SCISSOR_TEST);
        },
        renderBatch: function(state, size, start) {
            if (size == 0 || state.texture == null) return;
            var shader;
            if (state.shader == null) shader = this.renderSession.shaderManager.defaultShader;
            else shader = state.shader;
            this.renderSession.shaderManager.setShader(shader);
            shader.bindVertexArray(this.vertexArray);
            this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null ? shader.blendMode: state.blendMode);
            this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, this.renderSession.projectionMatrix.toArray(true));
            if (state.colorTransform != null) {
                this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"), 1);
                var ct = state.colorTransform;
                this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), ct.redMultiplier, ct.greenMultiplier, ct.blueMultiplier, state.skipColorTransformAlpha ? 1 : ct.alphaMultiplier);
                this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), ct.redOffset / 255., ct.greenOffset / 255., ct.blueOffset / 255., ct.alphaOffset / 255.);
            } else {
                this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"), 0);
                this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"), 1, 1, 1, 1);
                this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"), 0, 0, 0, 0);
            }
            this.gl.activeTexture(this.gl.TEXTURE0);
            this.gl.bindTexture(this.gl.TEXTURE_2D, state.texture);
            this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"), 0);
            if (shader.smooth != null && shader.smooth || state.textureSmooth) {
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);
            } else {
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
                this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
            }
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, shader.wrapS);
            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, shader.wrapT);
            shader.applyData(state.shaderData, this.renderSession);
            this.gl.drawElements(this.gl.TRIANGLES, size * 6, this.gl.UNSIGNED_SHORT, start * 6 * 2);
            this.renderSession.drawCount++;
        },
        setState: function(index, texture, smooth, blendMode, colorTransform, shader, skipAlpha) {
            if (skipAlpha == null) skipAlpha = false;
            if (smooth == null) smooth = false;
            var state = this.states[index];
            if (state == null) state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
            state.texture = texture;
            state.textureSmooth = smooth;
            state.blendMode = blendMode;
            state.skipColorTransform = colorTransform != null && colorTransform.__isDefault();
            if (!state.skipColorTransform) {
                state.colorTransform.redMultiplier = colorTransform.redMultiplier;
                state.colorTransform.greenMultiplier = colorTransform.greenMultiplier;
                state.colorTransform.blueMultiplier = colorTransform.blueMultiplier;
                state.colorTransform.alphaMultiplier = colorTransform.alphaMultiplier;
                state.colorTransform.redOffset = colorTransform.redOffset;
                state.colorTransform.greenOffset = colorTransform.greenOffset;
                state.colorTransform.blueOffset = colorTransform.blueOffset;
                state.colorTransform.alphaOffset = colorTransform.alphaOffset;
            }
            state.skipColorTransformAlpha = skipAlpha;
            if (shader == null) {
                state.shader = null;
                state.shaderData = null;
            } else {
                state.shader = shader.__shader;
                state.shaderData = shader.data;
            }
        },
        setContext: function(gl) {
            this.gl = gl;
            this.vertexArray.setContext(gl, this.positions);
            this.indexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);
        },
        prepareShader: function(flashShader, bd) {
            if (flashShader != null) {
                flashShader.__init(this.gl);
                flashShader.__shader.wrapS = flashShader.repeatX;
                flashShader.__shader.wrapT = flashShader.repeatY;
                flashShader.__shader.smooth = flashShader.smooth;
                flashShader.__shader.blendMode = flashShader.blendMode;
                var objSize = flashShader.data.get(openfl_display_Shader.uObjectSize);
                var texSize = flashShader.data.get(openfl_display_Shader.uTextureSize);
                if (bd != null) {
                    objSize.value[0] = bd.width;
                    objSize.value[1] = bd.height;
                    if (bd.__pingPongTexture != null) {
                        texSize.value[0] = bd.__pingPongTexture.get_renderTexture().__width;
                        texSize.value[1] = bd.__pingPongTexture.get_renderTexture().__height;
                    } else {
                        texSize.value[0] = bd.width;
                        texSize.value[1] = bd.height;
                    }
                } else {
                    objSize.value[0] = 0;
                    objSize.value[1] = 0;
                    texSize.value[0] = 0;
                    texSize.value[1] = 0;
                }
            }
        },
        getElementsPerVertex: function() {
            var r = 0;
            var _g = 0;
            var _g1 = this.attributes;
            while (_g < _g1.length) {
                var a = _g1[_g]; ++_g;
                if (a.enabled) r += Math.floor(a.components * a.getElementsBytes() / 4);
            }
            return r;
        },
        __class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
    };
    var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
        this.skipColorTransformAlpha = false;
        this.skipColorTransform = false;
        this.colorTransform = new openfl_geom_ColorTransform();
        this.textureSmooth = true;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
    openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "_SpriteBatch", "State"];
    openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
        equals: function(other) {
            return (this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode && (this.skipColorTransform && other.skipColorTransform || !this.skipColorTransform && !other.skipColorTransform && this.colorTransform.__equals(other.colorTransform, this.skipColorTransformAlpha));
        },
        destroy: function() {
            this.texture = null;
            this.colorTransform = null;
        },
        __class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
    };
    var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
        this.stencilMask = 0;
        this.stencilStack = [];
        this.setContext(gl);
        this.reverse = true;
        this.count = 0;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
    openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "StencilManager"];
    openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
        prepareGraphics: function(fill, renderSession, translationMatrix) {
            var shader = renderSession.shaderManager.fillShader;
            renderSession.shaderManager.setShader(shader);
            this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"), false, translationMatrix);
            this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"), false, renderSession.projectionMatrix.toArray(true));
            fill.vertexArray.bind();
            shader.bindVertexArray(fill.vertexArray);
            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, fill.indexBuffer);
        },
        pushBucket: function(bucket, renderSession, translationMatrix, isMask) {
            if (isMask == null) isMask = false;
            if (!isMask) {
                this.gl.enable(this.gl.STENCIL_TEST);
                this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
                this.gl.stencilMask(255);
                this.gl.colorMask(false, false, false, false);
                this.gl.stencilFunc(this.gl.NEVER, 1, 255);
                this.gl.stencilOp(this.gl.INVERT, this.gl.KEEP, this.gl.KEEP);
                this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
            }
            var _g = 0;
            var _g1 = bucket.fills;
            while (_g < _g1.length) {
                var fill = _g1[_g]; ++_g;
                if (fill.available) continue;
                this.prepareGraphics(fill, renderSession, translationMatrix);
                this.gl.drawElements(fill.drawMode, fill.glIndices.length, this.gl.UNSIGNED_SHORT, 0);
            }
            if (!isMask) {
                this.gl.colorMask(true, true, true, renderSession.renderer.transparent);
                this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
                this.gl.stencilFunc(this.gl.EQUAL, 255, 255);
            }
        },
        popBucket: function(object, bucket, renderSession) {
            this.gl.disable(this.gl.STENCIL_TEST);
        },
        pushMask: function(object, renderSession) {
            var maskGraphics = object.__maskGraphics;
            if (maskGraphics == null || maskGraphics.__commands.get_length() <= 0) return;
            if (this.stencilMask == 0) {
                this.gl.enable(this.gl.STENCIL_TEST);
                this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
            }
            this.stencilMask++;
            if (maskGraphics.__dirty) openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object, maskGraphics, renderSession.gl);
            var func;
            if (this.stencilMask == 1) func = this.gl.NEVER;
            else func = this.gl.EQUAL;
            var ref = this.stencilMask;
            var mask = 255 - this.stencilMask;
            this.gl.stencilMask(255);
            this.gl.colorMask(false, false, false, false);
            this.gl.stencilFunc(func, ref, mask);
            this.gl.stencilOp(this.gl.REPLACE, this.gl.KEEP, this.gl.KEEP);
            var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
            var bucket;
            var translationMatrix = object.__worldTransform;
            var _g1 = 0;
            var _g = glStack.buckets.length;
            while (_g1 < _g) {
                var i = _g1++;
                bucket = glStack.buckets[i];
                if (bucket.overrideMatrix != null) translationMatrix = bucket.overrideMatrix;
                else translationMatrix = object.__worldTransform;
                var _g2 = bucket.mode;
                switch (_g2[1]) {
                case 1:
                case 2:
                    this.pushBucket(bucket, renderSession, translationMatrix.toArray(true), true);
                    break;
                default:
                }
            }
            this.gl.colorMask(true, true, true, renderSession.renderer.transparent);
            this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
            this.gl.stencilFunc(this.gl.EQUAL, this.stencilMask, 255);
        },
        popMask: function(object, renderSession) {
            this.stencilMask--;
            if (this.stencilMask <= 0) {
                this.gl.disable(this.gl.STENCIL_TEST);
                this.stencilMask = 0;
            }
        },
        bindGraphics: function(object, glData, renderSession) {},
        destroy: function() {
            this.stencilStack = null;
            this.gl = null;
        },
        popStencil: function(object, glData, renderSession) {
            this.stencilStack.pop();
            this.count--;
            if (this.stencilStack.length == 0) this.gl.disable(this.gl.STENCIL_TEST);
            else {
                var level = this.count;
                this.bindGraphics(object, glData, renderSession);
                this.gl.colorMask(false, false, false, false);
                if (glData.mode == 1) {
                    this.reverse = !this.reverse;
                    if (this.reverse) {
                        this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
                        this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
                    } else {
                        this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
                        this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
                    }
                    this.gl.drawElements(this.gl.TRIANGLE_FAN, 4, this.gl.UNSIGNED_SHORT, (glData.indices.length - 4) * 2);
                    this.gl.stencilFunc(this.gl.ALWAYS, 0, 255);
                    this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INVERT);
                    this.gl.drawElements(this.gl.TRIANGLE_FAN, glData.indices.length - 4, this.gl.UNSIGNED_SHORT, 0);
                    if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
                    else this.gl.stencilFunc(this.gl.EQUAL, level, 255);
                } else {
                    if (!this.reverse) {
                        this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
                        this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
                    } else {
                        this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
                        this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
                    }
                    this.gl.drawElements(this.gl.TRIANGLE_STRIP, glData.indices.length, this.gl.UNSIGNED_SHORT, 0);
                    if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
                    else this.gl.stencilFunc(this.gl.EQUAL, level, 255);
                }
                this.gl.colorMask(true, true, true, true);
                this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
            }
        },
        pushStencil: function(object, glData, renderSession) {
            this.bindGraphics(object, glData, renderSession);
            if (this.stencilStack.length == 0) {
                this.gl.enable(this.gl.STENCIL_TEST);
                this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
                this.reverse = true;
                this.count = 0;
            }
            this.stencilStack.push(glData);
            var level = this.count;
            this.gl.colorMask(false, false, false, false);
            this.gl.stencilFunc(this.gl.ALWAYS, 0, 255);
            this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INVERT);
            if (glData.mode == 1) {
                this.gl.drawElements(this.gl.TRIANGLE_FAN, glData.indices.length - 4, this.gl.UNSIGNED_SHORT, 0);
                if (this.reverse) {
                    this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
                    this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
                } else {
                    this.gl.stencilFunc(this.gl.EQUAL, level, 255);
                    this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
                }
                this.gl.drawElements(this.gl.TRIANGLE_FAN, 4, this.gl.UNSIGNED_SHORT, (glData.indices.length - 4) * 2);
                if (this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
                else this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
                this.reverse = !this.reverse;
            } else {
                if (!this.reverse) {
                    this.gl.stencilFunc(this.gl.EQUAL, 255 - level, 255);
                    this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.DECR);
                } else {
                    this.gl.stencilFunc(this.gl.EQUAL, level, 255);
                    this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.INCR);
                }
                this.gl.drawElements(this.gl.TRIANGLE_STRIP, glData.indices.length, this.gl.UNSIGNED_SHORT, 0);
                if (!this.reverse) this.gl.stencilFunc(this.gl.EQUAL, 255 - (level + 1), 255);
                else this.gl.stencilFunc(this.gl.EQUAL, level + 1, 255);
            }
            this.gl.colorMask(true, true, true, true);
            this.gl.stencilOp(this.gl.KEEP, this.gl.KEEP, this.gl.KEEP);
            this.count++;
        },
        setContext: function(gl) {
            this.gl = gl;
        },
        __class__: openfl__$internal_renderer_opengl_utils_StencilManager
    };
    var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes, size, isStatic) {
        if (isStatic == null) isStatic = false;
        if (size == null) size = 0;
        this.isStatic = false;
        this.size = 0;
        this.attributes = [];
        this.size = size;
        this.attributes = attributes;
        if (size > 0) this.buffer = new ArrayBuffer(size);
        this.isStatic = isStatic;
    };
    $hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
    openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl", "_internal", "renderer", "opengl", "utils", "VertexArray"];
    openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
        bind: function() {
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.glBuffer);
        },
        unbind: function() {
            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);
        },
        upload: function(view) {
            this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, view);
        },
        destroy: function() {
            this.gl.deleteBuffer(this.glBuffer);
            this.buffer = null;
        },
        setContext: function(gl, view) {
            this.gl = gl;
            this.glBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, view, this.isStatic ? gl.STATIC_DRAW: gl.DYNAMIC_DRAW);
        },
        get_stride: function() {
            var s = 0;
            var _g = 0;
            var _g1 = this.attributes;
            while (_g < _g1.length) {
                var a = _g1[_g]; ++_g;
                if (a.enabled) s += Math.floor(a.components * a.getElementsBytes() / 4) * 4;
            }
            return s;
        },
        __class__: openfl__$internal_renderer_opengl_utils_VertexArray,
        __properties__: {
            get_stride: "get_stride"
        }
    };
    var openfl__$internal_text_TextEngine = function(textField) {
        this.textField = textField;
        this.width = 100;
        this.height = 100;
        this.text = "";
        this.bounds = new openfl_geom_Rectangle(0, 0, 0, 0);
        this.type = 0;
        this.autoSize = 2;
        this.displayAsPassword = false;
        this.embedFonts = false;
        this.selectable = true;
        this.borderColor = 0;
        this.border = false;
        this.backgroundColor = 16777215;
        this.background = false;
        this.gridFitType = 1;
        this.maxChars = 0;
        this.multiline = false;
        this.sharpness = 0;
        this.scrollH = 0;
        this.scrollV = 1;
        this.wordWrap = false;
        this.lineAscents = [];
        this.lineBreaks = [];
        this.lineDescents = [];
        this.lineLeadings = [];
        this.lineHeights = [];
        this.lineWidths = [];
        this.layoutGroups = [];
        this.textFormatRanges = [];
        openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
        openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
    };
    $hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
    openfl__$internal_text_TextEngine.__name__ = ["openfl", "_internal", "text", "TextEngine"];
    openfl__$internal_text_TextEngine.__canvas = null;
    openfl__$internal_text_TextEngine.__context = null;
    openfl__$internal_text_TextEngine.findFont = function(name) {
        return null;
    };
    openfl__$internal_text_TextEngine.getFont = function(format) {
        var font;
        if (format.italic) font = "italic ";
        else font = "normal ";
        font += "normal ";
        if (format.bold) font += "bold ";
        else font += "normal ";
        font += format.size + "px";
        font += "/" + (format.size + format.leading + 6) + "px ";
        font += "" + (function($this) {
            var $r;
            var _g = format.font;
            $r = (function($this) {
                var $r;
                switch (_g) {
                case "_sans":
                    $r = "sans-serif";
                    break;
                case "_serif":
                    $r = "serif";
                    break;
                case "_typewriter":
                    $r = "monospace";
                    break;
                default:
                    $r = "'" + format.font + "'";
                }
                return $r;
            } ($this));
            return $r;
        } (this));
        return font;
    };
    openfl__$internal_text_TextEngine.getFontInstance = function(format) {
        return null;
    };
    openfl__$internal_text_TextEngine.prototype = {
        getBounds: function() {
            var padding;
            if (this.border) padding = 1;
            else padding = 0;
            this.bounds.width = this.width + padding;
            this.bounds.height = this.height + padding;
        },
        getLine: function(index) {
            if (index < 0 || index > this.lineBreaks.length + 1) return null;
            if (this.lineBreaks.length == 0) return this.text;
            else return this.text.substring(index > 0 ? this.lineBreaks[index - 1] : 0, this.lineBreaks[index]);
        },
        getLineMeasurements: function() {
            this.lineAscents.splice(0, this.lineAscents.length);
            this.lineDescents.splice(0, this.lineDescents.length);
            this.lineLeadings.splice(0, this.lineLeadings.length);
            this.lineHeights.splice(0, this.lineHeights.length);
            this.lineWidths.splice(0, this.lineWidths.length);
            var currentLineAscent = 0.0;
            var currentLineDescent = 0.0;
            var currentLineLeading = null;
            var currentLineHeight = 0.0;
            var currentLineWidth = 0.0;
            this.textWidth = 0;
            this.textHeight = 0;
            this.numLines = 1;
            this.bottomScrollV = 0;
            this.maxScrollH = 0;
            var _g = 0;
            var _g1 = this.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                while (group.lineIndex > this.numLines - 1) {
                    this.lineAscents.push(currentLineAscent);
                    this.lineDescents.push(currentLineDescent);
                    this.lineLeadings.push(currentLineLeading != null ? currentLineLeading: 0);
                    this.lineHeights.push(currentLineHeight);
                    this.lineWidths.push(currentLineWidth);
                    currentLineAscent = 0;
                    currentLineDescent = 0;
                    currentLineLeading = null;
                    currentLineHeight = 0;
                    currentLineWidth = 0;
                    this.numLines++;
                    if (this.textHeight <= this.height - 2) this.bottomScrollV++;
                }
                currentLineAscent = Math.max(currentLineAscent, group.ascent);
                currentLineDescent = Math.max(currentLineDescent, group.descent);
                if (currentLineLeading == null) currentLineLeading = group.leading;
                else currentLineLeading = Std["int"](Math.max(currentLineLeading, group.leading));
                currentLineHeight = Math.max(currentLineHeight, group.height);
                currentLineWidth = group.offsetX - 2 + group.width;
                if (currentLineWidth > this.textWidth) this.textWidth = currentLineWidth;
                this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
            }
            this.lineAscents.push(currentLineAscent);
            this.lineDescents.push(currentLineDescent);
            this.lineLeadings.push(currentLineLeading != null ? currentLineLeading: 0);
            this.lineHeights.push(currentLineHeight);
            this.lineWidths.push(currentLineWidth);
            if (this.numLines == 1) {
                this.bottomScrollV = 1;
                if (currentLineLeading > 0) this.textHeight += currentLineLeading;
            } else if (this.textHeight <= this.height - 2) this.bottomScrollV++;
            if (this.textWidth > this.width - 4) this.maxScrollH = this.textWidth - this.width + 4 | 0;
            else this.maxScrollH = 0;
            this.maxScrollV = this.numLines - this.bottomScrollV + 1;
        },
        getLayoutGroups: function() {
            var _g = this;
            this.layoutGroups.splice(0, this.layoutGroups.length);
            var rangeIndex = -1;
            var formatRange = null;
            var font = null;
            var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
            var leading = 0;
            var ascent = 0.0;
            var descent = 0.0;
            var layoutGroup;
            var advances;
            var widthValue;
            var heightValue = 0.0;
            var spaceWidth = 0.0;
            var previousSpaceIndex = 0;
            var spaceIndex = this.text.indexOf(" ");
            var breakIndex = this.text.indexOf("\n");
            var marginRight = 0.0;
            var offsetX = 2.0;
            var offsetY = 2.0;
            var textIndex = 0;
            var lineIndex = 0;
            var lineFormat = null;
            if (rangeIndex < _g.textFormatRanges.length - 1) {
                rangeIndex++;
                formatRange = _g.textFormatRanges[rangeIndex];
                currentFormat.__merge(formatRange.format);
                openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
                ascent = currentFormat.size;
                descent = currentFormat.size * 0.185;
                leading = currentFormat.leading;
                heightValue = ascent + descent + leading;
                if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
            }
            lineFormat = formatRange.format;
            var wrap;
            while (textIndex < this.text.length) if (breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
                layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, breakIndex);
                var text = this.text;
                var advances1 = [];
                var _g1 = textIndex;
                while (_g1 < breakIndex) {
                    var i = _g1++;
                    advances1.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
                }
                layoutGroup.advances = advances1;
                layoutGroup.offsetX = offsetX;
                layoutGroup.ascent = ascent;
                layoutGroup.descent = descent;
                layoutGroup.leading = leading;
                layoutGroup.lineIndex = lineIndex;
                layoutGroup.offsetY = offsetY;
                var advances2 = layoutGroup.advances;
                var width = 0.0;
                var _g2 = 0;
                while (_g2 < advances2.length) {
                    var advance = advances2[_g2]; ++_g2;
                    width += advance;
                }
                layoutGroup.width = width;
                layoutGroup.height = heightValue;
                this.layoutGroups.push(layoutGroup);
                offsetY += heightValue;
                offsetX = 2;
                if (this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
                    layoutGroup.offsetY = offsetY;
                    layoutGroup.offsetX = offsetX;
                    offsetY += heightValue;
                    lineIndex++;
                }
                textIndex = breakIndex + 1;
                breakIndex = this.text.indexOf("\n", textIndex);
                lineIndex++;
                if (formatRange.end == breakIndex) {
                    if (rangeIndex < _g.textFormatRanges.length - 1) {
                        rangeIndex++;
                        formatRange = _g.textFormatRanges[rangeIndex];
                        currentFormat.__merge(formatRange.format);
                        openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
                        ascent = currentFormat.size;
                        descent = currentFormat.size * 0.185;
                        leading = currentFormat.leading;
                        heightValue = ascent + descent + leading;
                        if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
                    }
                    lineFormat = formatRange.format;
                }
            } else if (formatRange.end >= spaceIndex && spaceIndex > -1) {
                layoutGroup = null;
                wrap = false;
                while (true) {
                    if (spaceIndex == -1) spaceIndex = formatRange.end;
                    var text1 = this.text;
                    var advances3 = [];
                    var _g3 = textIndex;
                    while (_g3 < spaceIndex) {
                        var i1 = _g3++;
                        advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
                    }
                    advances = advances3;
                    var width1 = 0.0;
                    var _g4 = 0;
                    while (_g4 < advances.length) {
                        var advance1 = advances[_g4]; ++_g4;
                        width1 += advance1;
                    }
                    widthValue = width1;
                    if (this.wordWrap) {
                        if (offsetX + widthValue > this.width - 2) wrap = true;
                    }
                    if (wrap) {
                        offsetY += heightValue;
                        var i2 = this.layoutGroups.length - 1;
                        var offsetCount = 0;
                        while (true) {
                            layoutGroup = this.layoutGroups[i2];
                            if (i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) offsetCount++;
                            else break;
                            i2--;
                        }
                        lineIndex++;
                        offsetX = 2;
                        if (offsetCount > 0) {
                            var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
                            var _g11 = this.layoutGroups.length - offsetCount;
                            var _g5 = this.layoutGroups.length;
                            while (_g11 < _g5) {
                                var i3 = _g11++;
                                layoutGroup = this.layoutGroups[i3];
                                layoutGroup.offsetX -= bumpX;
                                layoutGroup.offsetY = offsetY;
                                layoutGroup.lineIndex = lineIndex;
                                offsetX += layoutGroup.width;
                            }
                        }
                        layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, spaceIndex);
                        layoutGroup.advances = advances;
                        layoutGroup.offsetX = offsetX;
                        layoutGroup.ascent = ascent;
                        layoutGroup.descent = descent;
                        layoutGroup.leading = leading;
                        layoutGroup.lineIndex = lineIndex;
                        layoutGroup.offsetY = offsetY;
                        layoutGroup.width = widthValue;
                        layoutGroup.height = heightValue;
                        this.layoutGroups.push(layoutGroup);
                        offsetX = widthValue + spaceWidth;
                        marginRight = spaceWidth;
                        wrap = false;
                    } else {
                        if (layoutGroup != null && textIndex == spaceIndex) {
                            if (formatRange.format.align != 2) layoutGroup.endIndex = spaceIndex;
                            layoutGroup.advances.push(spaceWidth);
                            marginRight += spaceWidth;
                        } else if (layoutGroup == null || lineFormat.align == 2) {
                            layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, spaceIndex);
                            layoutGroup.advances = advances;
                            layoutGroup.offsetX = offsetX;
                            layoutGroup.ascent = ascent;
                            layoutGroup.descent = descent;
                            layoutGroup.leading = leading;
                            layoutGroup.lineIndex = lineIndex;
                            layoutGroup.offsetY = offsetY;
                            layoutGroup.width = widthValue;
                            layoutGroup.height = heightValue;
                            this.layoutGroups.push(layoutGroup);
                            layoutGroup.advances.push(spaceWidth);
                            marginRight = spaceWidth;
                        } else {
                            layoutGroup.endIndex = spaceIndex;
                            layoutGroup.advances = layoutGroup.advances.concat(advances);
                            layoutGroup.width += marginRight + widthValue;
                            layoutGroup.advances.push(spaceWidth);
                            marginRight = spaceWidth;
                        }
                        offsetX += widthValue + spaceWidth;
                    }
                    textIndex = spaceIndex + 1;
                    previousSpaceIndex = spaceIndex;
                    spaceIndex = this.text.indexOf(" ", previousSpaceIndex + 1);
                    if (formatRange.end <= previousSpaceIndex) {
                        layoutGroup = null;
                        if (rangeIndex < _g.textFormatRanges.length - 1) {
                            rangeIndex++;
                            formatRange = _g.textFormatRanges[rangeIndex];
                            currentFormat.__merge(formatRange.format);
                            openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
                            ascent = currentFormat.size;
                            descent = currentFormat.size * 0.185;
                            leading = currentFormat.leading;
                            heightValue = ascent + descent + leading;
                            if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
                        }
                    }
                    if (spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) break;
                }
            } else {
                if (textIndex >= formatRange.end) break;
                layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format, textIndex, formatRange.end);
                var text2 = this.text;
                var advances4 = [];
                var _g6 = textIndex;
                while (_g6 < formatRange.end) {
                    var i4 = _g6++;
                    advances4.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
                }
                layoutGroup.advances = advances4;
                layoutGroup.offsetX = offsetX;
                layoutGroup.ascent = ascent;
                layoutGroup.descent = descent;
                layoutGroup.leading = leading;
                layoutGroup.lineIndex = lineIndex;
                layoutGroup.offsetY = offsetY;
                var advances5 = layoutGroup.advances;
                var width2 = 0.0;
                var _g7 = 0;
                while (_g7 < advances5.length) {
                    var advance2 = advances5[_g7]; ++_g7;
                    width2 += advance2;
                }
                layoutGroup.width = width2;
                layoutGroup.height = heightValue;
                this.layoutGroups.push(layoutGroup);
                offsetX += layoutGroup.width;
                textIndex = formatRange.end;
                if (rangeIndex < _g.textFormatRanges.length - 1) {
                    rangeIndex++;
                    formatRange = _g.textFormatRanges[rangeIndex];
                    currentFormat.__merge(formatRange.format);
                    openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
                    ascent = currentFormat.size;
                    descent = currentFormat.size * 0.185;
                    leading = currentFormat.leading;
                    heightValue = ascent + descent + leading;
                    if (spaceIndex > -1) spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
                }
            }
        },
        setTextAlignment: function() {
            var lineIndex = -1;
            var offsetX = 0.0;
            var group;
            var lineLength;
            var _g1 = 0;
            var _g = this.layoutGroups.length;
            while (_g1 < _g) {
                var i = _g1++;
                group = this.layoutGroups[i];
                if (group.lineIndex != lineIndex) {
                    lineIndex = group.lineIndex;
                    var _g2 = group.format.align;
                    switch (_g2) {
                    case 0:
                        if (this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2);
                        else offsetX = 0;
                        break;
                    case 4:
                        if (this.lineWidths[lineIndex] < this.width - 4) offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]);
                        else offsetX = 0;
                        break;
                    case 2:
                        if (this.lineWidths[lineIndex] < this.width - 4) {
                            lineLength = 1;
                            var _g4 = i + 1;
                            var _g3 = this.layoutGroups.length;
                            while (_g4 < _g3) {
                                var j = _g4++;
                                if (this.layoutGroups[j].lineIndex == lineIndex) lineLength++;
                                else break;
                            }
                            if (lineLength > 1) {
                                group = this.layoutGroups[i + lineLength - 1];
                                if (group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
                                    offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
                                    var _g31 = 1;
                                    while (_g31 < lineLength) {
                                        var j1 = _g31++;
                                        this.layoutGroups[i + j1].offsetX += offsetX * j1;
                                    }
                                }
                            }
                        }
                        offsetX = 0;
                        break;
                    default:
                        offsetX = 0;
                    }
                }
                if (offsetX > 0) group.offsetX += offsetX;
            }
        },
        update: function() {
            if (this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
                this.lineAscents.splice(0, this.lineAscents.length);
                this.lineBreaks.splice(0, this.lineBreaks.length);
                this.lineDescents.splice(0, this.lineDescents.length);
                this.lineLeadings.splice(0, this.lineLeadings.length);
                this.lineHeights.splice(0, this.lineHeights.length);
                this.lineWidths.splice(0, this.lineWidths.length);
                this.layoutGroups.splice(0, this.layoutGroups.length);
                this.textWidth = 0;
                this.textHeight = 0;
                this.numLines = 1;
                this.maxScrollH = 0;
                this.maxScrollV = 1;
                this.bottomScrollV = 1;
            } else {
                this.getLayoutGroups();
                this.getLineMeasurements();
                this.setTextAlignment();
            }
            this.getBounds();
        },
        __class__: openfl__$internal_text_TextEngine
    };
    var openfl__$internal_text_TextFormatRange = function(format, start, end) {
        this.format = format;
        this.start = start;
        this.end = end;
    };
    $hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
    openfl__$internal_text_TextFormatRange.__name__ = ["openfl", "_internal", "text", "TextFormatRange"];
    openfl__$internal_text_TextFormatRange.prototype = {
        __class__: openfl__$internal_text_TextFormatRange
    };
    var openfl__$internal_text_TextLayoutGroup = function(format, startIndex, endIndex) {
        this.format = format;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
    };
    $hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
    openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl", "_internal", "text", "TextLayoutGroup"];
    openfl__$internal_text_TextLayoutGroup.prototype = {
        __class__: openfl__$internal_text_TextLayoutGroup
    };
    var openfl_desktop_Clipboard = function() {};
    $hxClasses["openfl.desktop.Clipboard"] = openfl_desktop_Clipboard;
    openfl_desktop_Clipboard.__name__ = ["openfl", "desktop", "Clipboard"];
    openfl_desktop_Clipboard.__properties__ = {
        get_generalClipboard: "get_generalClipboard"
    }
    openfl_desktop_Clipboard.generalClipboard = null;
    openfl_desktop_Clipboard.__generalClipboard = null;
    openfl_desktop_Clipboard.get_generalClipboard = function() {
        if (openfl_desktop_Clipboard.__generalClipboard == null) {
            openfl_desktop_Clipboard.__generalClipboard = new openfl_desktop_Clipboard();
            openfl_desktop_Clipboard.__generalClipboard.__systemClipboard = true;
        }
        return openfl_desktop_Clipboard.__generalClipboard;
    };
    openfl_desktop_Clipboard.prototype = {
        clear: function() {
            if (!this.__systemClipboard) {
                this.__htmlText = null;
                this.__richText = null;
                this.__text = null;
            } else lime_system_Clipboard.set_text(null);
        },
        clearData: function(format) {
            if (!this.__systemClipboard) switch (format) {
            case 0:
                this.__htmlText = null;
                break;
            case 1:
                this.__richText = null;
                break;
            case 2:
                this.__text = null;
                break;
            default:
            } else switch (format) {
            case 0:
            case 1:
            case 2:
                lime_system_Clipboard.set_text(null);
                break;
            default:
            }
        },
        getData: function(format, transferMode) {
            if (transferMode == null) transferMode = 3;
            if (!this.__systemClipboard) switch (format) {
            case 0:
                return this.__htmlText;
            case 1:
                return this.__richText;
            case 2:
                return this.__text;
            default:
                return null;
            } else switch (format) {
            case 0:
            case 1:
            case 2:
                return lime_system_Clipboard.get_text();
            default:
                return null;
            }
        },
        hasFormat: function(format) {
            if (!this.__systemClipboard) switch (format) {
            case 0:
                return this.__htmlText != null;
            case 1:
                return this.__richText != null;
            case 2:
                return this.__text != null;
            default:
                return false;
            } else switch (format) {
            case 0:
            case 1:
            case 2:
                return lime_system_Clipboard.get_text() != null;
            default:
                return false;
            }
        },
        setData: function(format, data, serializable) {
            if (serializable == null) serializable = true;
            if (!this.__systemClipboard) switch (format) {
            case 0:
                this.__htmlText = Std.string(data);
                return true;
            case 1:
                this.__richText = Std.string(data);
                return true;
            case 2:
                this.__text = Std.string(data);
                return true;
            default:
                return false;
            } else switch (format) {
            case 0:
            case 1:
            case 2:
                lime_system_Clipboard.set_text(Std.string(data));
                return true;
            default:
                return false;
            }
        },
        setDataHandler: function(format, handler, serializable) {
            if (serializable == null) serializable = true;
            openfl_Lib.notImplemented("Clipboard.setDataHandler");
            return false;
        },
        __class__: openfl_desktop_Clipboard
    };
    var openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$ = {};
    $hxClasses["openfl.desktop._ClipboardFormats.ClipboardFormats_Impl_"] = openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$;
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.__name__ = ["openfl", "desktop", "_ClipboardFormats", "ClipboardFormats_Impl_"];
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.fromString = function(value) {
        switch (value) {
        case "air:html":
            return 0;
        case "air:rtf":
            return 1;
        case "air:text":
            return 2;
        default:
            return null;
        }
    };
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "air:html";
        case 1:
            return "air:rtf";
        case 2:
            return "air:text";
        default:
            return null;
        }
    };
    var openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$ = {};
    $hxClasses["openfl.desktop._ClipboardTransferMode.ClipboardTransferMode_Impl_"] = openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$;
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.__name__ = ["openfl", "desktop", "_ClipboardTransferMode", "ClipboardTransferMode_Impl_"];
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.fromString = function(value) {
        switch (value) {
        case "cloneOnly":
            return 0;
        case "clonePreferred":
            return 1;
        case "originalOnly":
            return 2;
        case "originalPreferred":
            return 3;
        default:
            return null;
        }
    };
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "cloneOnly";
        case 1:
            return "clonePreferred";
        case 2:
            return "originalOnly";
        case 3:
            return "originalPreferred";
        default:
            return null;
        }
    };
    var openfl_display_Application = function() {
        lime_app_Application.call(this);
        if (openfl_Lib.application == null) openfl_Lib.application = this;
    };
    $hxClasses["openfl.display.Application"] = openfl_display_Application;
    openfl_display_Application.__name__ = ["openfl", "display", "Application"];
    openfl_display_Application.__super__ = lime_app_Application;
    openfl_display_Application.prototype = $extend(lime_app_Application.prototype, {
        create: function(config) {
            this.config = config;
            this.backend.create(config);
            if (config != null) {
                if (Object.prototype.hasOwnProperty.call(config, "fps")) this.backend.setFrameRate(config.fps);
                if (Object.prototype.hasOwnProperty.call(config, "windows")) {
                    var _g = 0;
                    var _g1 = config.windows;
                    while (_g < _g1.length) {
                        var windowConfig = _g1[_g]; ++_g;
                        var $window = new openfl_display_Window(windowConfig);
                        this.createWindow($window);
                        break;
                    }
                }
                if (this.preloader == null || this.preloader.complete) this.onPreloadComplete();
            }
        },
        __class__: openfl_display_Application
    });
    var openfl_display_Bitmap = function(bitmapData, pixelSnapping, smoothing) {
        if (smoothing == null) smoothing = false;
        openfl_display_DisplayObject.call(this);
        this.bitmapData = bitmapData;
        this.pixelSnapping = pixelSnapping;
        this.smoothing = smoothing;
        if (pixelSnapping == null) this.pixelSnapping = 1;
    };
    $hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
    openfl_display_Bitmap.__name__ = ["openfl", "display", "Bitmap"];
    openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
    openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype, {
        __getBounds: function(rect, matrix) {
            if (this.bitmapData != null) {
                var bounds = openfl_geom_Rectangle.__temp;
                bounds.setTo(0, 0, this.bitmapData.width, this.bitmapData.height);
                bounds.__transform(bounds, matrix);
                rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
            }
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || this.bitmapData == null) return false;
            if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
            this.__getWorldTransform();
            var px = this.__worldTransform.__transformInverseX(x, y);
            var py = this.__worldTransform.__transformInverseY(x, y);
            if (px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
                if (stack != null && !interactiveOnly) stack.push(hitObject);
                return true;
            }
            return false;
        },
        __hitTestMask: function(x, y) {
            if (this.bitmapData == null) return false;
            this.__getWorldTransform();
            var px = this.__worldTransform.__transformInverseX(x, y);
            var py = this.__worldTransform.__transformInverseY(x, y);
            if (px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) return true;
            return false;
        },
        __renderCairo: function(renderSession) {
            openfl__$internal_renderer_cairo_CairoBitmap.render(this, renderSession);
        },
        __renderCairoMask: function(renderSession) {
            renderSession.cairo.rectangle(0, 0, this.get_width(), this.get_height());
        },
        __renderCanvas: function(renderSession) {
            openfl__$internal_renderer_canvas_CanvasBitmap.render(this, renderSession);
        },
        __renderCanvasMask: function(renderSession) {
            renderSession.context.rect(0, 0, this.get_width(), this.get_height());
        },
        __renderDOM: function(renderSession) {
            if (this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
                if (this.bitmapData.image.buffer.__srcImage != null) openfl__$internal_renderer_dom_DOMBitmap.renderImage(this, renderSession);
                else openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this, renderSession);
            } else {
                if (this.__image != null) {
                    renderSession.element.removeChild(this.__image);
                    this.__image = null;
                    this.__style = null;
                }
                if (this.__canvas != null) {
                    renderSession.element.removeChild(this.__canvas);
                    this.__canvas = null;
                    this.__style = null;
                }
            }
        },
        __renderGL: function(renderSession) {
            if (this.__cacheAsBitmap) {
                this.__cacheGL(renderSession);
                return;
            }
            if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
            if (!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid) null;
            else renderSession.spriteBatch.renderBitmapData(this.bitmapData, this.smoothing, this.__renderTransform, this.__worldColorTransform, this.__worldAlpha, this.__blendMode, this.__shader, this.pixelSnapping);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
            if (this.__scrollRect != null) renderSession.maskManager.popRect();
        },
        __updateMask: function(maskGraphics) {
            if (this.bitmapData == null) return;
            maskGraphics.__commands.overrideMatrix(this.__worldTransform);
            maskGraphics.beginFill(0);
            maskGraphics.drawRect(0, 0, this.bitmapData.width, this.bitmapData.height);
            if (maskGraphics.__bounds == null) maskGraphics.__bounds = new openfl_geom_Rectangle();
            this.__getBounds(maskGraphics.__bounds, openfl_geom_Matrix.__identity);
            openfl_display_DisplayObject.prototype.__updateMask.call(this, maskGraphics);
        },
        get_height: function() {
            if (this.bitmapData != null) return this.bitmapData.height * this.get_scaleY();
            return 0;
        },
        set_height: function(value) {
            if (this.bitmapData != null) {
                if (value != this.bitmapData.height) this.set_scaleY(value / this.bitmapData.height);
                return value;
            }
            return 0;
        },
        get_width: function() {
            if (this.bitmapData != null) return this.bitmapData.width * this.get_scaleX();
            return 0;
        },
        set_width: function(value) {
            if (this.bitmapData != null) {
                if (value != this.bitmapData.width) this.set_scaleX(value / this.bitmapData.width);
                return value;
            }
            return 0;
        },
        __class__: openfl_display_Bitmap
    });
    var openfl_display_BitmapData = function(width, height, transparent, fillColor) {
        if (fillColor == null) fillColor = -1;
        if (transparent == null) transparent = true;
        this.__usingPingPongTexture = false;
        this.transparent = transparent;
        if (width == null) width = 0;
        else width = width;
        if (height == null) height = 0;
        else height = height;
        if (width < 0) width = 0;
        else width = width;
        if (height < 0) height = 0;
        else height = height;
        this.width = width;
        this.height = height;
        this.rect = new openfl_geom_Rectangle(0, 0, width, height);
        if (width > 0 && height > 0) {
            if (transparent) {
                if ((fillColor & -16777216) == 0) fillColor = 0;
            } else fillColor = -16777216 | fillColor & 16777215;
            fillColor = fillColor << 8 | fillColor >> 24 & 255;
            this.image = new lime_graphics_Image(null, 0, 0, width, height, fillColor);
            this.image.set_transparent(transparent);
            this.__isValid = true;
        }
        this.__createUVs();
        this.__worldTransform = new openfl_geom_Matrix();
        this.__worldColorTransform = new openfl_geom_ColorTransform();
    };
    $hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
    openfl_display_BitmapData.__name__ = ["openfl", "display", "BitmapData"];
    openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
    openfl_display_BitmapData.fromBase64 = function(base64, type, onload) {
        var bitmapData = new openfl_display_BitmapData(0, 0, true);
        bitmapData.__fromBase64(base64, type, onload);
        return bitmapData;
    };
    openfl_display_BitmapData.fromBytes = function(bytes, rawAlpha, onload) {
        var bitmapData = new openfl_display_BitmapData(0, 0, true);
        bitmapData.__fromBytes(bytes, rawAlpha, onload);
        return bitmapData;
    };
    openfl_display_BitmapData.fromCanvas = function(canvas, transparent) {
        if (transparent == null) transparent = true;
        if (canvas == null) return null;
        var bitmapData = new openfl_display_BitmapData(0, 0, transparent);
        bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
        bitmapData.image.set_transparent(transparent);
        return bitmapData;
    };
    openfl_display_BitmapData.fromFile = function(path, onload, onerror) {
        var bitmapData = new openfl_display_BitmapData(0, 0, true);
        bitmapData.__fromFile(path, onload, onerror);
        return bitmapData;
    };
    openfl_display_BitmapData.fromImage = function(image, transparent) {
        if (transparent == null) transparent = true;
        if (image == null || image.buffer == null) return null;
        var bitmapData = new openfl_display_BitmapData(0, 0, transparent);
        bitmapData.__fromImage(image);
        bitmapData.image.set_transparent(transparent);
        return bitmapData;
    };
    openfl_display_BitmapData.__asRenderTexture = function(width, height) {
        if (height == null) height = 0;
        if (width == null) width = 0;
        var b = new openfl_display_BitmapData(0, 0);
        b.__resize(width, height);
        return b;
    };
    openfl_display_BitmapData.prototype = {
        applyFilter: function(sourceBitmapData, sourceRect, destPoint, filter) {
            if (!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) return;
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
            lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
            lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
            filter.__applyFilter(this.image.buffer.__srcImageData, sourceBitmapData.image.buffer.__srcImageData, sourceRect, destPoint);
            this.image.dirty = true;
        },
        clone: function() {
            if (!this.__isValid) return new openfl_display_BitmapData(this.width, this.height, this.transparent);
            else return openfl_display_BitmapData.fromImage(this.image.clone(), this.transparent);
        },
        colorTransform: function(rect, colorTransform) {
            if (!this.__isValid) return;
            this.image.colorTransform(rect.__toLimeRectangle(), colorTransform.__toLimeColorMatrix());
            this.__usingPingPongTexture = false;
        },
        compare: function(otherBitmapData) {
            if (otherBitmapData == this) return 0;
            else if (otherBitmapData == null) return - 1;
            else if (this.__isValid == false || otherBitmapData.__isValid == false) return - 2;
            else if (this.width != otherBitmapData.width) return - 3;
            else if (this.height != otherBitmapData.height) return - 4;
            if (this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
                var bytes = this.image.get_data();
                var otherBytes = otherBitmapData.image.get_data();
                var equal = true;
                var _g1 = 0;
                var _g = bytes.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    if (bytes[i] != otherBytes[i]) {
                        equal = false;
                        break;
                    }
                }
                if (equal) return 0;
            }
            var bitmapData = null;
            var foundDifference;
            var pixel;
            var otherPixel;
            var comparePixel;
            var r;
            var g;
            var b;
            var a;
            var _g11 = 0;
            var _g2 = this.height;
            while (_g11 < _g2) {
                var y = _g11++;
                var _g3 = 0;
                var _g21 = this.width;
                while (_g3 < _g21) {
                    var x = _g3++;
                    foundDifference = false;
                    pixel = this.getPixel32(x, y);
                    otherPixel = otherBitmapData.getPixel32(x, y);
                    comparePixel = 0;
                    if (pixel != otherPixel) {
                        r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
                        g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
                        b = (pixel & 255) - (otherPixel & 255);
                        if (r < 0) r *= -1;
                        if (g < 0) g *= -1;
                        if (b < 0) b *= -1;
                        if (r == 0 && g == 0 && b == 0) {
                            a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
                            if (a != 0) {
                                comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | 16711680 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
                                255;
                                comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | 65280 | comparePixel & 255 & 255;
                                255;
                                comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | 255;
                                255;
                                comparePixel = (a & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
                                a;
                                foundDifference = true;
                            }
                        } else {
                            comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (r & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
                            r;
                            comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
                            g;
                            comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
                            b;
                            comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
                            255;
                            foundDifference = true;
                        }
                    }
                    if (foundDifference) {
                        if (bitmapData == null) bitmapData = new openfl_display_BitmapData(this.width, this.height, this.transparent || otherBitmapData.transparent, 0);
                        bitmapData.setPixel32(x, y, comparePixel);
                    }
                }
            }
            if (bitmapData == null) return 0;
            return bitmapData;
        },
        copyChannel: function(sourceBitmapData, sourceRect, destPoint, sourceChannel, destChannel) {
            if (!this.__isValid) return;
            var sourceChannel1;
            switch (sourceChannel) {
            case 1:
                sourceChannel1 = lime_graphics_ImageChannel.RED;
                break;
            case 2:
                sourceChannel1 = lime_graphics_ImageChannel.GREEN;
                break;
            case 4:
                sourceChannel1 = lime_graphics_ImageChannel.BLUE;
                break;
            case 8:
                sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
                break;
            default:
                return;
            }
            var destChannel1;
            switch (destChannel) {
            case 1:
                destChannel1 = lime_graphics_ImageChannel.RED;
                break;
            case 2:
                destChannel1 = lime_graphics_ImageChannel.GREEN;
                break;
            case 4:
                destChannel1 = lime_graphics_ImageChannel.BLUE;
                break;
            case 8:
                destChannel1 = lime_graphics_ImageChannel.ALPHA;
                break;
            default:
                return;
            }
            this.image.copyChannel(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), sourceChannel1, destChannel1);
            this.__usingPingPongTexture = false;
        },
        copyPixels: function(sourceBitmapData, sourceRect, destPoint, alphaBitmapData, alphaPoint, mergeAlpha) {
            if (mergeAlpha == null) mergeAlpha = false;
            if (!this.__isValid || sourceBitmapData == null) return;
            this.image.copyPixels(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), alphaBitmapData != null ? alphaBitmapData.image: null, alphaPoint != null ? alphaPoint.__toLimeVector2() : null, mergeAlpha);
            this.__usingPingPongTexture = false;
        },
        dispose: function() {
            this.image = null;
            this.width = 0;
            this.height = 0;
            this.rect = null;
            this.__isValid = false;
            if (this.__texture != null) {
                var renderer = openfl_Lib.current.stage.__renderer;
                if (renderer != null) {
                    var renderSession = renderer.renderSession;
                    var gl = renderSession.gl;
                    if (gl != null) {
                        gl.deleteTexture(this.__texture);
                        this.__texture = null;
                    }
                }
            }
            if (this.__pingPongTexture != null) {
                this.__pingPongTexture.destroy();
                this.__pingPongTexture = null;
            }
        },
        draw: function(source, matrix, colorTransform, blendMode, clipRect, smoothing) {
            if (smoothing == null) smoothing = false;
            if (!this.__isValid) return;
            if (colorTransform != null) {
                var copy = new openfl_display_BitmapData(Reflect.getProperty(source, "width"), Reflect.getProperty(source, "height"), true, 0);
                copy.draw(source);
                copy.colorTransform(copy.rect, colorTransform);
                source = copy;
            }
            lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
            lime_graphics_utils_ImageCanvasUtil.sync(this.image, true);
            var buffer = this.image.buffer;
            var renderSession = new openfl__$internal_renderer_RenderSession();
            renderSession.context = buffer.__srcContext;
            renderSession.roundPixels = true;
            renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
            if (!smoothing) {
                buffer.__srcContext.mozImageSmoothingEnabled = false;
                buffer.__srcContext.msImageSmoothingEnabled = false;
                buffer.__srcContext.imageSmoothingEnabled = false;
            }
            if (clipRect != null) renderSession.maskManager.pushRect(clipRect, new openfl_geom_Matrix());
            var matrixCache = source.__worldTransform;
            source.__updateTransforms(matrix != null ? matrix: new openfl_geom_Matrix());
            source.__updateChildren(false);
            source.__renderCanvas(renderSession);
            source.__updateTransforms(matrixCache);
            source.__updateChildren(true);
            if (!smoothing) {
                buffer.__srcContext.mozImageSmoothingEnabled = true;
                buffer.__srcContext.msImageSmoothingEnabled = true;
                buffer.__srcContext.imageSmoothingEnabled = true;
            }
            if (clipRect != null) renderSession.maskManager.popMask();
            buffer.__srcContext.setTransform(1, 0, 0, 1, 0, 0);
            buffer.__srcImageData = null;
            buffer.data = null;
        },
        encode: function(rect, compressor, byteArray) {
            if (!this.__isValid || rect == null) return byteArray = null;
            if (js_Boot.__instanceof(compressor, openfl_display_PNGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png"));
            else if (js_Boot.__instanceof(compressor, openfl_display_JPEGEncoderOptions)) return byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg", (js_Boot.__cast(compressor, openfl_display_JPEGEncoderOptions)).quality));
            return byteArray = null;
        },
        fillRect: function(rect, color) {
            if (!this.__isValid || rect == null) return;
            if (this.transparent && (color & -16777216) == 0) color = 0;
            this.image.fillRect(rect.__toLimeRectangle(), color, 1);
            this.__usingPingPongTexture = false;
        },
        floodFill: function(x, y, color) {
            if (!this.__isValid) return;
            this.image.floodFill(x, y, color, 1);
            this.__usingPingPongTexture = false;
        },
        generateFilterRect: function(sourceRect, filter) {
            return sourceRect.clone();
        },
        getBuffer: function(gl) {
            if (this.__buffer == null) {
                var data = [this.width, this.height, 0, 1, 1, 0, this.height, 0, 0, 1, this.width, 0, 0, 1, 0, 0, 0, 0, 0, 0];
                this.__buffer = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, this.__buffer);
                gl.bufferData(gl.ARRAY_BUFFER, (function($this) {
                    var $r;
                    var this1;
                    if (data != null) this1 = new Float32Array(data);
                    else this1 = null;
                    $r = this1;
                    return $r;
                } (this)), gl.STATIC_DRAW);
                gl.bindBuffer(gl.ARRAY_BUFFER, null);
            }
            return this.__buffer;
        },
        getColorBoundsRect: function(mask, color, findColor) {
            if (findColor == null) findColor = true;
            if (!this.__isValid) return new openfl_geom_Rectangle(0, 0, this.width, this.height);
            if (!this.transparent || (mask >> 24 & 255) > 0) {
                var color1 = color;
                if ((color1 >> 24 & 255) == 0) color1 = 0;
            }
            var rect = this.image.getColorBoundsRect(mask, color, findColor, 1);
            return new openfl_geom_Rectangle(rect.x, rect.y, rect.width, rect.height);
        },
        getPixel: function(x, y) {
            if (!this.__isValid) return 0;
            return this.image.getPixel(x, y, 1);
        },
        getPixel32: function(x, y) {
            if (!this.__isValid) return 0;
            return this.image.getPixel32(x, y, 1);
        },
        getPixels: function(rect) {
            if (!this.__isValid) return null;
            if (rect == null) rect = this.rect;
            return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(), 1));
        },
        getSurface: function() {
            if (!this.__isValid) return null;
            if (this.__surface == null) this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
            return this.__surface;
        },
        getTexture: function(gl) {
            if (!this.__isValid) return null;
            if (this.__usingPingPongTexture && this.__pingPongTexture != null) return this.__pingPongTexture.get_texture();
            if (this.__texture == null) {
                this.__texture = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, this.__texture);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                this.image.dirty = true;
            }
            if (this.image != null && this.image.dirty) {
                var internalFormat;
                var format;
                if (this.__surface != null) lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
                if (this.image.buffer.bitsPerPixel == 1) {
                    internalFormat = gl.ALPHA;
                    format = gl.ALPHA;
                } else {
                    internalFormat = gl.RGBA;
                    format = gl.RGBA;
                }
                gl.bindTexture(gl.TEXTURE_2D, this.__texture);
                var textureImage = this.image;
                if (!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
                    textureImage = textureImage.clone();
                    textureImage.set_format(0);
                    textureImage.set_premultiplied(true);
                }
                gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, this.width, this.height, 0, format, gl.UNSIGNED_BYTE, textureImage.get_data());
                gl.bindTexture(gl.TEXTURE_2D, null);
                this.image.dirty = false;
            }
            return this.__texture;
        },
        getVector: function(rect) {
            var pixels = this.getPixels(rect);
            var length = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4);
            var result;
            var this1;
            this1 = new openfl_VectorData();
            var this2;
            this2 = new Array(length);
            this1.data = this2;
            this1.length = length;
            this1.fixed = true;
            result = this1;
            var _g = 0;
            while (_g < length) {
                var i = _g++;
                var value = pixels.readUnsignedInt();
                if (!result.fixed) {
                    if (i >= result.length) result.length = i + 1;
                    if (result.data.length < result.length) {
                        var data;
                        var this3;
                        this3 = new Array(result.data.length + 10);
                        data = this3;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(result.data, 0, data, 0, result.data.length);
                        result.data = data;
                    }
                }
                result.data[i] = value;
            }
            return result;
        },
        histogram: function(hRect) {
            var rect;
            if (hRect != null) rect = hRect;
            else rect = new openfl_geom_Rectangle(0, 0, this.width, this.height);
            var pixels = this.getPixels(rect);
            var result;
            var _g = [];
            var _g1 = 0;
            while (_g1 < 4) {
                var i = _g1++;
                _g.push((function($this) {
                    var $r;
                    var _g2 = []; {
                        var _g3 = 0;
                        while (_g3 < 256) {
                            var j = _g3++;
                            _g2.push(0);
                        }
                    }
                    $r = _g2;
                    return $r;
                } (this)));
            }
            result = _g;
            var _g21 = 0;
            var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
            while (_g21 < _g11) {
                var i1 = _g21++; ++result[i1 % 4][pixels.readUnsignedByte()];
            }
            return result;
        },
        hitTest: function(firstPoint, firstAlphaThreshold, secondObject, secondBitmapDataPoint, secondAlphaThreshold) {
            if (secondAlphaThreshold == null) secondAlphaThreshold = 1;
            if (!this.__isValid) return false;
            if (js_Boot.__instanceof(secondObject, openfl_display_Bitmap)) secondObject = (js_Boot.__cast(secondObject, openfl_display_Bitmap)).bitmapData;
            if (js_Boot.__instanceof(secondObject, openfl_geom_Point)) {
                var secondPoint = secondObject;
                var x = secondPoint.x - firstPoint.x | 0;
                var y = secondPoint.y - firstPoint.y | 0;
                if (this.rect.contains(x, y)) {
                    var pixel = this.getPixel32(x, y);
                    if ((pixel >> 24 & 255) >= firstAlphaThreshold) return true;
                }
            } else if (js_Boot.__instanceof(secondObject, openfl_display_BitmapData)) {
                var secondBitmapData = secondObject;
                var x1;
                var y1;
                if (secondBitmapDataPoint == null) {
                    x1 = 0;
                    y1 = 0;
                } else {
                    x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
                    y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
                }
                if (this.rect.contains(x1, y1)) {
                    var hitRect = openfl_geom_Rectangle.__temp;
                    hitRect.setTo(x1, y1, Math.min(secondBitmapData.width, this.width - x1), Math.min(secondBitmapData.height, this.height - y1));
                    var pixels = this.getPixels(hitRect);
                    hitRect.offset( - x1, -y1);
                    var testPixels = secondBitmapData.getPixels(hitRect);
                    var length = hitRect.width * hitRect.height | 0;
                    var pixel1;
                    var testPixel;
                    var _g = 0;
                    while (_g < length) {
                        var i = _g++;
                        pixel1 = pixels.readUnsignedInt();
                        testPixel = testPixels.readUnsignedInt();
                        if ((pixel1 >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) return true;
                    }
                    return false;
                }
            } else if (js_Boot.__instanceof(secondObject, openfl_geom_Rectangle)) {
                var secondRectangle = openfl_geom_Rectangle.__temp;
                secondRectangle.copyFrom(secondObject);
                secondRectangle.offset( - firstPoint.x, -firstPoint.y);
                secondRectangle.__contract(0, 0, this.width, this.height);
                if (secondRectangle.width > 0 && secondRectangle.height > 0) {
                    var pixels1 = this.getPixels(secondRectangle);
                    var length1 = Std["int"](openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4);
                    var pixel2;
                    var _g1 = 0;
                    while (_g1 < length1) {
                        var i1 = _g1++;
                        pixel2 = pixels1.readUnsignedInt();
                        if ((pixel2 >> 24 & 255) >= firstAlphaThreshold) return true;
                    }
                }
            }
            return false;
        },
        lock: function() {},
        merge: function(sourceBitmapData, sourceRect, destPoint, redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier) {
            if (!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) return;
            this.image.merge(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier);
            this.__usingPingPongTexture = false;
        },
        noise: function(randomSeed, low, high, channelOptions, grayScale) {
            if (grayScale == null) grayScale = false;
            if (channelOptions == null) channelOptions = 7;
            if (high == null) high = 255;
            if (low == null) low = 0;
            if (!this.__isValid) return;
            var rand;
            var func = function() {
                randomSeed = randomSeed * 1103515245 + 12345;
                return Std["int"](Math.abs(randomSeed / 65536)) % 32768;
            };
            rand = func;
            rand();
            var range = high - low;
            var data = new openfl_utils_ByteArrayData(0);
            var redChannel = (channelOptions & 1) == 1;
            var greenChannel = (channelOptions & 2) >> 1 == 1;
            var blueChannel = (channelOptions & 4) >> 2 == 1;
            var alphaChannel = (channelOptions & 8) >> 3 == 1;
            var _g1 = 0;
            var _g = this.height;
            while (_g1 < _g) {
                var y = _g1++;
                var _g3 = 0;
                var _g2 = this.width;
                while (_g3 < _g2) {
                    var x = _g3++;
                    var red = 0;
                    var blue = 0;
                    var green = 0;
                    var alpha = 255;
                    if (grayScale) {
                        red = green = blue = low + rand() % range;
                        alpha = 255;
                    } else {
                        if (redChannel) red = low + rand() % range;
                        if (greenChannel) green = low + rand() % range;
                        if (blueChannel) blue = low + rand() % range;
                        if (alphaChannel) alpha = low + rand() % range;
                    }
                    var rgb = alpha;
                    rgb = (rgb << 8) + red;
                    rgb = (rgb << 8) + green;
                    rgb = (rgb << 8) + blue;
                    this.setPixel32(x, y, rgb);
                }
            }
        },
        paletteMap: function(sourceBitmapData, sourceRect, destPoint, redArray, greenArray, blueArray, alphaArray) {
            var sw = sourceRect.width | 0;
            var sh = sourceRect.height | 0;
            var pixels = this.getPixels(sourceRect);
            pixels.position = 0;
            var pixelValue;
            var r;
            var g;
            var b;
            var a;
            var color;
            var c1;
            var c2;
            var c3;
            var c4;
            var _g1 = 0;
            var _g = sh * sw;
            while (_g1 < _g) {
                var i = _g1++;
                pixelValue = pixels.readUnsignedInt();
                if (alphaArray == null) c1 = pixelValue & -16777216;
                else c1 = alphaArray[pixelValue >> 24 & 255];
                if (redArray == null) c2 = pixelValue & 16711680;
                else c2 = redArray[pixelValue >> 16 & 255];
                if (greenArray == null) c3 = pixelValue & 65280;
                else c3 = greenArray[pixelValue >> 8 & 255];
                if (blueArray == null) c4 = pixelValue & 255;
                else c4 = blueArray[pixelValue & 255];
                a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
                if (a > 255) a == 255;
                r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
                if (r > 255) r == 255;
                g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
                if (g > 255) g == 255;
                b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
                if (b > 255) b == 255;
                color = a << 24 | r << 16 | g << 8 | b;
                pixels.position = i * 4;
                pixels.writeUnsignedInt(color);
            }
            pixels.position = 0;
            var destRect = new openfl_geom_Rectangle(destPoint.x, destPoint.y, sw, sh);
            this.setPixels(destRect, pixels);
        },
        perlinNoise: function(baseX, baseY, numOctaves, randomSeed, stitch, fractalNoise, channelOptions, grayScale, offsets) {
            if (grayScale == null) grayScale = false;
            if (channelOptions == null) channelOptions = 7;
            openfl_Lib.notImplemented("BitmapData.perlinNoise");
        },
        scroll: function(x, y) {
            if (!this.__isValid) return;
            this.image.scroll(x, y);
            this.__usingPingPongTexture = false;
        },
        setPixel: function(x, y, color) {
            if (!this.__isValid) return;
            this.image.setPixel(x, y, color, 1);
            this.__usingPingPongTexture = false;
        },
        setPixel32: function(x, y, color) {
            if (!this.__isValid) return;
            this.image.setPixel32(x, y, color, 1);
            this.__usingPingPongTexture = false;
        },
        setPixels: function(rect, byteArray) {
            if (!this.__isValid || rect == null) return;
            this.image.setPixels(rect.__toLimeRectangle(), openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray), 1);
            this.__usingPingPongTexture = false;
        },
        setVector: function(rect, inputVector) {
            var byteArray = new openfl_utils_ByteArrayData(0);
            openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray, inputVector.length * 4);
            var _g = 0;
            while (_g < inputVector.length) {
                var color = inputVector.data[_g]; ++_g;
                byteArray.writeUnsignedInt(color);
            }
            byteArray.position = 0;
            this.setPixels(rect, byteArray);
        },
        threshold: function(sourceBitmapData, sourceRect, destPoint, operation, threshold, color, mask, copySource) {
            if (copySource == null) copySource = false;
            if (mask == null) mask = -1;
            if (color == null) color = 0;
            if (sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) return 0;
            return this.image.threshold(sourceBitmapData.image, sourceRect.__toLimeRectangle(), destPoint.__toLimeVector2(), operation, threshold, color, mask, copySource, 1);
        },
        unlock: function(changeRect) {},
        __createUVs: function(x0, y0, x1, y1, x2, y2, x3, y3) {
            if (y3 == null) y3 = 1;
            if (x3 == null) x3 = 0;
            if (y2 == null) y2 = 1;
            if (x2 == null) x2 = 1;
            if (y1 == null) y1 = 0;
            if (x1 == null) x1 = 1;
            if (y0 == null) y0 = 0;
            if (x0 == null) x0 = 0;
            if (this.__uvData == null) this.__uvData = new openfl_display_TextureUvs();
            this.__uvData.x0 = x0;
            this.__uvData.y0 = y0;
            this.__uvData.x1 = x1;
            this.__uvData.y1 = y1;
            this.__uvData.x2 = x2;
            this.__uvData.y2 = y2;
            this.__uvData.x3 = x3;
            this.__uvData.y3 = y3;
        },
        __drawGL: function(renderSession, source, matrix, colorTransform, blendMode, clipRect, smoothing, drawSelf, clearBuffer, readPixels, powerOfTwo) {
            if (powerOfTwo == null) powerOfTwo = true;
            if (readPixels == null) readPixels = false;
            if (clearBuffer == null) clearBuffer = false;
            if (drawSelf == null) drawSelf = false;
            if (smoothing == null) smoothing = false;
            this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession, this.__pingPongTexture, this.rect, smoothing, this.transparent, clearBuffer, powerOfTwo);
            openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession, drawSelf ? this: null, source, matrix, colorTransform, blendMode, clipRect);
            openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession, readPixels ? this.image: null);
            var uv = this.__pingPongTexture.get_renderTexture().__uvData;
            this.__createUVs(uv.x0, uv.y0, uv.x1, uv.y1, uv.x2, uv.y2, uv.x3, uv.y3);
            this.__isValid = true;
            this.__usingPingPongTexture = true;
        },
        __fromBase64: function(base64, type, onload) {
            var _g = this;
            lime_graphics_Image.fromBase64(base64, type,
            function(image) {
                _g.__fromImage(image);
                if (onload != null) onload(_g);
            });
        },
        __fromBytes: function(bytes, rawAlpha, onload) {
            var _g = this;
            lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),
            function(image) {
                _g.__fromImage(image);
                if (rawAlpha != null) {
                    lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
                    lime_graphics_utils_ImageCanvasUtil.createImageData(image);
                    var data = image.buffer.data;
                    var _g2 = 0;
                    var _g1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
                    while (_g2 < _g1) {
                        var i = _g2++;
                        var val = rawAlpha.readUnsignedByte();
                        data[i * 4 + 3] = val;
                    }
                    image.dirty = true;
                }
                if (onload != null) onload(_g);
            });
        },
        __fromFile: function(path, onload, onerror) {
            var _g = this;
            lime_graphics_Image.fromFile(path,
            function(image) {
                _g.__fromImage(image);
                if (onload != null) onload(_g);
            },
            onerror);
        },
        __fromImage: function(image) {
            if (image != null && image.buffer != null) {
                this.image = image;
                this.width = image.width;
                this.height = image.height;
                this.rect = new openfl_geom_Rectangle(0, 0, image.width, image.height);
                this.__isValid = true;
            }
        },
        __renderCairo: function(renderSession) {
            if (!this.__isValid) return;
            var cairo = renderSession.cairo;
            if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
            var transform = this.__worldTransform;
            if (renderSession.roundPixels) {
                var matrix = transform.__toMatrix3();
                matrix.tx = Math.round(matrix.tx);
                matrix.ty = Math.round(matrix.ty);
                cairo.set_matrix(matrix);
            } else cairo.set_matrix(transform.__toMatrix3());
            var surface = this.getSurface();
            if (surface != null) {
                var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
                if (cairo.get_antialias() == 1) lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, 3);
                else lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern, 1);
                cairo.set_source(pattern);
                cairo.paint();
            }
        },
        __renderCairoMask: function(renderSession) {},
        __renderCanvas: function(renderSession) {
            if (!this.__isValid) return;
            lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
            var context = renderSession.context;
            if (this.__worldTransform == null) this.__worldTransform = new openfl_geom_Matrix();
            context.globalAlpha = 1;
            var transform = this.__worldTransform;
            if (renderSession.roundPixels) context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx | 0, transform.ty | 0);
            else context.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx, transform.ty);
            context.drawImage(this.image.get_src(), 0, 0);
        },
        __renderCanvasMask: function(renderSession) {},
        __renderGL: function(renderSession) {
            renderSession.spriteBatch.renderBitmapData(this, false, this.__worldTransform, this.__worldColorTransform, this.__worldColorTransform.alphaMultiplier, this.__blendMode, this.__shader);
        },
        __resize: function(width, height) {
            this.width = width;
            this.height = height;
            this.rect.width = width;
            this.rect.height = height;
        },
        __sync: function() {
            lime_graphics_utils_ImageCanvasUtil.sync(this.image, false);
        },
        __updateChildren: function(transformOnly) {},
        __updateMask: function(maskGraphics) {},
        __updateTransforms: function(overrideTransform) {
            if (overrideTransform == null) this.__worldTransform.identity();
            else this.__worldTransform = overrideTransform;
        },
        __class__: openfl_display_BitmapData
    };
    var openfl_display_TextureUvs = function() {
        this.y3 = 0;
        this.y2 = 0;
        this.y1 = 0;
        this.y0 = 0;
        this.x3 = 0;
        this.x2 = 0;
        this.x1 = 0;
        this.x0 = 0;
    };
    $hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
    openfl_display_TextureUvs.__name__ = ["openfl", "display", "TextureUvs"];
    openfl_display_TextureUvs.prototype = {
        reset: function() {
            this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
        },
        __class__: openfl_display_TextureUvs
    };
    var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
    $hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
    openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl", "display", "_BlendMode", "BlendMode_Impl_"];
    openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
        switch (value) {
        case "add":
            return 0;
        case "alpha":
            return 1;
        case "darken":
            return 2;
        case "difference":
            return 3;
        case "erase":
            return 4;
        case "hardlight":
            return 5;
        case "invert":
            return 6;
        case "layer":
            return 7;
        case "lighten":
            return 8;
        case "multiply":
            return 9;
        case "normal":
            return 10;
        case "overlay":
            return 11;
        case "screen":
            return 12;
        case "shader":
            return 13;
        case "subtract":
            return 14;
        default:
            return null;
        }
    };
    openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "add";
        case 1:
            return "alpha";
        case 2:
            return "darken";
        case 3:
            return "difference";
        case 4:
            return "erase";
        case 5:
            return "hardlight";
        case 6:
            return "invert";
        case 7:
            return "layer";
        case 8:
            return "lighten";
        case 9:
            return "multiply";
        case 10:
            return "normal";
        case 11:
            return "overlay";
        case 12:
            return "screen";
        case 13:
            return "shader";
        case 14:
            return "subtract";
        default:
            return null;
        }
    };
    var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
    $hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl", "display", "_CapsStyle", "CapsStyle_Impl_"];
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
        switch (value) {
        case "none":
            return 0;
        case "round":
            return 1;
        case "square":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "none";
        case 1:
            return "round";
        case 2:
            return "square";
        default:
            return null;
        }
    };
    var openfl_display_DirectRenderer = function(type) {
        if (type == null) type = "DirectRenderer";
        openfl_display_DisplayObject.call(this);
    };
    $hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
    openfl_display_DirectRenderer.__name__ = ["openfl", "display", "DirectRenderer"];
    openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
    openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype, {
        get_render: function() {
            return this.__render;
        },
        set_render: function(value) {
            return this.__render = value;
        },
        __class__: openfl_display_DirectRenderer,
        __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, {
            set_render: "set_render",
            get_render: "get_render"
        })
    });
    var openfl_display_FrameLabel = function(name, frame) {
        openfl_events_EventDispatcher.call(this);
        this.__name = name;
        this.__frame = frame;
    };
    $hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
    openfl_display_FrameLabel.__name__ = ["openfl", "display", "FrameLabel"];
    openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
    openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        get_frame: function() {
            return this.__frame;
        },
        get_name: function() {
            return this.__name;
        },
        __class__: openfl_display_FrameLabel,
        __properties__: {
            get_name: "get_name",
            get_frame: "get_frame"
        }
    });
    var openfl_display__$GradientType_GradientType_$Impl_$ = {};
    $hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
    openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl", "display", "_GradientType", "GradientType_Impl_"];
    openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
        switch (value) {
        case "linear":
            return 0;
        case "radial":
            return 1;
        default:
            return null;
        }
    };
    openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "linear";
        case 1:
            return "radial";
        default:
            return null;
        }
    };
    var openfl_display_Graphics = function() {
        this.__glStack = [];
        this.__dirty = true;
        this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
        this.__strokePadding = 0;
        this.__positionX = 0;
        this.__positionY = 0;
        this.__hardware = true;
        this.moveTo(0, 0);
    };
    $hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
    openfl_display_Graphics.__name__ = ["openfl", "display", "Graphics"];
    openfl_display_Graphics.prototype = {
        beginBitmapFill: function(bitmap, matrix, repeat, smooth) {
            if (smooth == null) smooth = false;
            if (repeat == null) repeat = true;
            this.__commands.beginBitmapFill(bitmap, matrix != null ? matrix.clone() : null, repeat, smooth);
            this.__visible = true;
        },
        beginFill: function(color, alpha) {
            if (alpha == null) alpha = 1;
            if (color == null) color = 0;
            this.__commands.beginFill(color & 16777215, alpha);
            if (alpha > 0) this.__visible = true;
        },
        beginGradientFill: function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
            if (focalPointRatio == null) focalPointRatio = 0;
            if (interpolationMethod == null) interpolationMethod = 1;
            if (spreadMethod == null) spreadMethod = 0;
            this.__commands.beginGradientFill(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
            this.__hardware = false;
            var _g = 0;
            while (_g < alphas.length) {
                var alpha = alphas[_g]; ++_g;
                if (alpha > 0) {
                    this.__visible = true;
                    break;
                }
            }
        },
        clear: function() {
            this.__commands.clear();
            this.__strokePadding = 0;
            if (this.__bounds != null) {
                this.set___dirty(true);
                this.__transformDirty = true;
                this.__bounds = null;
            }
            this.__visible = false;
            this.__hardware = true;
            this.moveTo(0, 0);
        },
        copyFrom: function(sourceGraphics) {
            if (sourceGraphics.__bounds != null) this.__bounds = sourceGraphics.__bounds.clone();
            else this.__bounds = null;
            this.__commands = sourceGraphics.__commands.copy();
            this.set___dirty(true);
            this.__strokePadding = sourceGraphics.__strokePadding;
            this.__positionX = sourceGraphics.__positionX;
            this.__positionY = sourceGraphics.__positionY;
            this.__transformDirty = true;
            this.__visible = sourceGraphics.__visible;
        },
        cubicCurveTo: function(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY) {
            this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
            this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
            var ix1;
            var iy1;
            var ix2;
            var iy2;
            ix1 = anchorX;
            ix2 = anchorX;
            if (! ((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
                var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
                var v = controlX1 - this.__positionX;
                var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
                var t1 = ( - u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
                var t2 = ( - u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
                if (t1 > 0 && t1 < 1) ix1 = this.__calculateBezierCubicPoint(t1, this.__positionX, controlX1, controlX2, anchorX);
                if (t2 > 0 && t2 < 1) ix2 = this.__calculateBezierCubicPoint(t2, this.__positionX, controlX1, controlX2, anchorX);
            }
            iy1 = anchorY;
            iy2 = anchorY;
            if (! ((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
                var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
                var v1 = controlY1 - this.__positionX;
                var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
                var t11 = ( - u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
                var t21 = ( - u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
                if (t11 > 0 && t11 < 1) iy1 = this.__calculateBezierCubicPoint(t11, this.__positionX, controlY1, controlY2, anchorY);
                if (t21 > 0 && t21 < 1) iy2 = this.__calculateBezierCubicPoint(t21, this.__positionX, controlY1, controlY2, anchorY);
            }
            this.__inflateBounds(ix1 - this.__strokePadding, iy1 - this.__strokePadding);
            this.__inflateBounds(ix1 + this.__strokePadding, iy1 + this.__strokePadding);
            this.__inflateBounds(ix2 - this.__strokePadding, iy2 - this.__strokePadding);
            this.__inflateBounds(ix2 + this.__strokePadding, iy2 + this.__strokePadding);
            this.__positionX = anchorX;
            this.__positionY = anchorY;
            this.__commands.cubicCurveTo(controlX1, controlY1, controlX2, controlY2, anchorX, anchorY);
            this.__hardware = false;
            this.set___dirty(true);
        },
        curveTo: function(controlX, controlY, anchorX, anchorY) {
            this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
            this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
            var ix;
            var iy;
            if (controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) ix = anchorX;
            else {
                var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
                ix = this.__calculateBezierQuadPoint(tx, this.__positionX, controlX, anchorX);
            }
            if (controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) iy = anchorY;
            else {
                var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
                iy = this.__calculateBezierQuadPoint(ty, this.__positionY, controlY, anchorY);
            }
            this.__inflateBounds(ix - this.__strokePadding, iy - this.__strokePadding);
            this.__inflateBounds(ix + this.__strokePadding, iy + this.__strokePadding);
            this.__positionX = anchorX;
            this.__positionY = anchorY;
            this.__commands.curveTo(controlX, controlY, anchorX, anchorY);
            this.__hardware = false;
            this.set___dirty(true);
        },
        drawCircle: function(x, y, radius) {
            if (radius <= 0) return;
            this.__inflateBounds(x - radius - this.__strokePadding, y - radius - this.__strokePadding);
            this.__inflateBounds(x + radius + this.__strokePadding, y + radius + this.__strokePadding);
            this.__commands.drawCircle(x, y, radius);
            this.__hardware = false;
            this.set___dirty(true);
        },
        drawEllipse: function(x, y, width, height) {
            if (width <= 0 || height <= 0) return;
            this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
            this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
            this.__commands.drawEllipse(x, y, width, height);
            this.__hardware = false;
            this.set___dirty(true);
        },
        drawGraphicsData: function(graphicsData) {
            var fill;
            var bitmapFill;
            var gradientFill;
            var stroke;
            var path;
            var _g = 0;
            while (_g < graphicsData.length) {
                var graphics = graphicsData.data[_g]; ++_g;
                if (js_Boot.__instanceof(graphics, openfl_display_GraphicsSolidFill)) {
                    fill = graphics;
                    this.beginFill(fill.color, fill.alpha);
                } else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsBitmapFill)) {
                    bitmapFill = graphics;
                    this.beginBitmapFill(bitmapFill.bitmapData, bitmapFill.matrix, bitmapFill.repeat, bitmapFill.smooth);
                } else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsGradientFill)) {
                    gradientFill = graphics;
                    this.beginGradientFill(gradientFill.type, gradientFill.colors, gradientFill.alphas, gradientFill.ratios, gradientFill.matrix, gradientFill.spreadMethod, gradientFill.interpolationMethod, gradientFill.focalPointRatio);
                } else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsStroke)) {
                    stroke = graphics;
                    if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsSolidFill)) {
                        fill = stroke.fill;
                        this.lineStyle(stroke.thickness, fill.color, fill.alpha, stroke.pixelHinting, stroke.scaleMode, stroke.caps, stroke.joints, stroke.miterLimit);
                    } else {
                        this.lineStyle(stroke.thickness, 0, 1, stroke.pixelHinting, stroke.scaleMode, stroke.caps, stroke.joints, stroke.miterLimit);
                        if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsBitmapFill)) {
                            bitmapFill = stroke.fill;
                            this.lineBitmapStyle(bitmapFill.bitmapData, bitmapFill.matrix, bitmapFill.repeat, bitmapFill.smooth);
                        } else if (js_Boot.__instanceof(stroke.fill, openfl_display_GraphicsGradientFill)) {
                            gradientFill = stroke.fill;
                            this.lineGradientStyle(gradientFill.type, gradientFill.colors, gradientFill.alphas, gradientFill.ratios, gradientFill.matrix, gradientFill.spreadMethod, gradientFill.interpolationMethod, gradientFill.focalPointRatio);
                        }
                    }
                } else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsPath)) {
                    path = graphics;
                    this.drawPath(path.commands, path.data, path.winding);
                } else if (js_Boot.__instanceof(graphics, openfl_display_GraphicsEndFill)) this.endFill();
            }
        },
        drawPath: function(commands, data, winding) {
            if (winding == null) winding = "evenOdd";
            var dataIndex = 0;
            var _g = 0;
            try {
                while (_g < commands.length) {
                    var command = commands.data[_g]; ++_g;
                    if (command != null) switch (command) {
                    case 1:
                        this.moveTo(data.data[dataIndex], data.data[dataIndex + 1]);
                        dataIndex += 2;
                        break;
                    case 2:
                        this.lineTo(data.data[dataIndex], data.data[dataIndex + 1]);
                        dataIndex += 2;
                        break;
                    case 4:
                        this.moveTo(data.data[dataIndex + 2], data.data[dataIndex + 3]);
                        throw "__break__";
                        dataIndex += 4;
                        break;
                    case 5:
                        this.lineTo(data.data[dataIndex + 2], data.data[dataIndex + 3]);
                        throw "__break__";
                        dataIndex += 4;
                        break;
                    case 3:
                        this.curveTo(data.data[dataIndex], data.data[dataIndex + 1], data.data[dataIndex + 2], data.data[dataIndex + 3]);
                        dataIndex += 4;
                        break;
                    case 6:
                        this.cubicCurveTo(data.data[dataIndex], data.data[dataIndex + 1], data.data[dataIndex + 2], data.data[dataIndex + 3], data.data[dataIndex + 4], data.data[dataIndex + 5]);
                        dataIndex += 6;
                        break;
                    default:
                    } else {}
                }
            } catch(e) {
                if (e != "__break__") throw e;
            }
        },
        drawRect: function(x, y, width, height) {
            if (width <= 0 || height <= 0) return;
            this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
            this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
            this.__commands.drawRect(x, y, width, height);
            this.set___dirty(true);
        },
        drawRoundRect: function(x, y, width, height, ellipseWidth, ellipseHeight) {
            if (width <= 0 || height <= 0) return;
            this.__inflateBounds(x - this.__strokePadding, y - this.__strokePadding);
            this.__inflateBounds(x + width + this.__strokePadding, y + height + this.__strokePadding);
            this.__commands.drawRoundRect(x, y, width, height, ellipseWidth, ellipseHeight);
            this.__hardware = false;
            this.set___dirty(true);
        },
        drawRoundRectComplex: function(x, y, width, height, topLeftRadius, topRightRadius, bottomLeftRadius, bottomRightRadius) {
            openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
        },
        drawTiles: function(sheet, tileData, smooth, flags, shader, count) {
            if (count == null) count = -1;
            if (flags == null) flags = 0;
            if (smooth == null) smooth = false;
            var useScale = (flags & 1) > 0;
            var useRotation = (flags & 2) > 0;
            var useRGB = (flags & 4) > 0;
            var useAlpha = (flags & 8) > 0;
            var useTransform = (flags & 16) > 0;
            var useColorTransform = (flags & 128) > 0;
            var useRect = (flags & 32) > 0;
            var useOrigin = (flags & 64) > 0;
            var rect = openfl_geom_Rectangle.__temp;
            var matrix = openfl_geom_Matrix.__temp;
            var numValues = 3;
            var totalCount = count;
            if (count < 0) totalCount = tileData.length;
            if (useTransform || useScale || useRotation || useRGB || useAlpha || useColorTransform) {
                var scaleIndex = 0;
                var rotationIndex = 0;
                var transformIndex = 0;
                if (useRect) if (useOrigin) numValues = 8;
                else numValues = 6;
                if (useScale) {
                    scaleIndex = numValues;
                    numValues++;
                }
                if (useRotation) {
                    rotationIndex = numValues;
                    numValues++;
                }
                if (useTransform) {
                    transformIndex = numValues;
                    numValues += 4;
                }
                if (useRGB) numValues += 3;
                if (useAlpha) numValues++;
                if (useColorTransform) numValues += 4;
                var itemCount = totalCount / numValues | 0;
                var index = 0;
                var cacheID = -1;
                var x;
                var y;
                var id;
                var scale;
                var rotation;
                var tileWidth;
                var tileHeight;
                var originX;
                var originY;
                var tile = null;
                var tilePoint = null;
                while (index < totalCount) {
                    x = tileData[index];
                    y = tileData[index + 1];
                    if (!useRect) id = tileData[index + 2] | 0;
                    else id = -1;
                    scale = 1.0;
                    rotation = 0.0;
                    if (useScale) scale = tileData[index + scaleIndex];
                    if (useRotation) rotation = tileData[index + rotationIndex];
                    if (id < 0) tile = null;
                    else if (!useRect && cacheID != id) {
                        cacheID = id;
                        tile = sheet.__tileRects[id];
                        tilePoint = sheet.__centerPoints[id];
                    } else if (useRect) {
                        tile = sheet.__rectTile;
                        tile.setTo(tileData[index + 2], tileData[index + 3], tileData[index + 4], tileData[index + 5]);
                        tilePoint = sheet.__point;
                        if (useOrigin) tilePoint.setTo(tileData[index + 6] / tile.width, tileData[index + 7] / tile.height);
                        else tilePoint.setTo(0, 0);
                    }
                    if (tile != null) {
                        if (useTransform) {
                            rect.setTo(0, 0, tile.width, tile.height);
                            matrix.setTo(tileData[index + transformIndex], tileData[index + transformIndex + 1], tileData[index + transformIndex + 2], tileData[index + transformIndex + 3], 0, 0);
                            originX = tilePoint.x * scale;
                            originY = tilePoint.y * scale;
                            matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx), y - (originX * matrix.b + originY * matrix.d + matrix.ty));
                            rect.__transform(rect, matrix);
                            this.__inflateBounds(rect.x, rect.y);
                            this.__inflateBounds(rect.get_right(), rect.get_bottom());
                        } else {
                            tileWidth = tile.width * scale;
                            tileHeight = tile.height * scale;
                            x -= tilePoint.x * tileWidth;
                            y -= tilePoint.y * tileHeight;
                            if (rotation != 0) {
                                rect.setTo(0, 0, tileWidth, tileHeight);
                                matrix.identity();
                                matrix.rotate(rotation);
                                matrix.translate(x, y);
                                rect.__transform(rect, matrix);
                                this.__inflateBounds(rect.x, rect.y);
                                this.__inflateBounds(rect.get_right(), rect.get_bottom());
                            } else {
                                this.__inflateBounds(x, y);
                                this.__inflateBounds(x + tileWidth, y + tileHeight);
                            }
                        }
                    }
                    index += numValues;
                }
            } else {
                var x1;
                var y1;
                var id1;
                var tile1;
                var centerPoint;
                var originX1;
                var originY1;
                var rect1 = openfl_geom_Rectangle.__temp;
                var index1 = 0;
                while (index1 < totalCount) {
                    x1 = tileData[index1++];
                    y1 = tileData[index1++];
                    if (!useRect) id1 = Std["int"](tileData[index1++]);
                    else id1 = -1;
                    originX1 = 0.0;
                    originY1 = 0.0;
                    if (useRect) {
                        rect1.setTo(tileData[index1++], tileData[index1++], tileData[index1++], tileData[index1++]);
                        if (useOrigin) {
                            originX1 = tileData[index1++];
                            originY1 = tileData[index1++];
                        }
                        this.__inflateBounds(x1 - originX1, y1 - originY1);
                        this.__inflateBounds(x1 - originX1 + rect1.width, y1 - originY1 + rect1.height);
                    } else {
                        tile1 = sheet.__tileRects[id1];
                        if (tile1 != null) {
                            centerPoint = sheet.__centerPoints[id1];
                            originX1 = centerPoint.x * tile1.width;
                            originY1 = centerPoint.y * tile1.height;
                            this.__inflateBounds(x1 - originX1, y1 - originY1);
                            this.__inflateBounds(x1 - originX1 + tile1.width, y1 - originY1 + tile1.height);
                        }
                    }
                }
            }
            this.__commands.drawTiles(sheet, tileData, smooth, flags, shader, count);
            this.set___dirty(true);
            this.__visible = true;
        },
        drawTriangles: function(vertices, indices, uvtData, culling) {
            if (culling == null) culling = 1;
            var vlen = vertices.length / 2 | 0;
            if (culling == null) culling = 1;
            if (indices == null) {
                if (vlen % 3 != 0) throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
                var this1;
                this1 = new openfl_VectorData();
                var this2;
                this2 = new Array(0);
                this1.data = this2;
                this1.length = 0;
                this1.fixed = false;
                indices = this1;
                var _g = 0;
                while (_g < vlen) {
                    var i = _g++;
                    if (!indices.fixed) {
                        indices.length++;
                        if (indices.data.length < indices.length) {
                            var data;
                            var this3;
                            this3 = new Array(indices.data.length + 10);
                            data = this3;
                            haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data, 0, data, 0, indices.data.length);
                            indices.data = data;
                        }
                        indices.data[indices.length - 1] = i;
                    }
                    indices.length;
                }
            }
            this.__inflateBounds(0, 0);
            var tmpx = -Infinity;
            var tmpy = -Infinity;
            var maxX = -Infinity;
            var maxY = -Infinity;
            var _g1 = 0;
            while (_g1 < vlen) {
                var i1 = _g1++;
                tmpx = vertices.data[i1 * 2];
                tmpy = vertices.data[i1 * 2 + 1];
                if (maxX < tmpx) maxX = tmpx;
                if (maxY < tmpy) maxY = tmpy;
            }
            this.__inflateBounds(maxX, maxY);
            this.__commands.drawTriangles(vertices, indices, uvtData, culling);
            this.set___dirty(true);
            this.__visible = true;
        },
        endFill: function() {
            this.__commands.endFill();
        },
        lineBitmapStyle: function(bitmap, matrix, repeat, smooth) {
            if (smooth == null) smooth = false;
            if (repeat == null) repeat = true;
            this.__commands.lineBitmapStyle(bitmap, matrix != null ? matrix.clone() : null, repeat, smooth);
        },
        lineGradientStyle: function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
            if (focalPointRatio == null) focalPointRatio = 0;
            if (interpolationMethod == null) interpolationMethod = 1;
            if (spreadMethod == null) spreadMethod = 0;
            this.__commands.lineGradientStyle(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio);
        },
        lineStyle: function(thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit) {
            if (miterLimit == null) miterLimit = 3;
            if (scaleMode == null) scaleMode = 2;
            if (pixelHinting == null) pixelHinting = false;
            if (alpha == null) alpha = 1;
            if (color == null) color = 0;
            if (thickness != null) {
                if (joints == 1) {
                    if (thickness > this.__strokePadding) this.__strokePadding = thickness;
                } else if (thickness / 2 > this.__strokePadding) this.__strokePadding = thickness / 2;
            }
            this.__commands.lineStyle(thickness, color, alpha, pixelHinting, scaleMode, caps, joints, miterLimit);
            if (thickness != null) this.__visible = true;
        },
        lineTo: function(x, y) {
            this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
            this.__inflateBounds(this.__positionX + this.__strokePadding, this.__positionY + this.__strokePadding);
            this.__positionX = x;
            this.__positionY = y;
            this.__inflateBounds(this.__positionX - this.__strokePadding, this.__positionY - this.__strokePadding);
            this.__inflateBounds(this.__positionX + this.__strokePadding * 2, this.__positionY + this.__strokePadding);
            this.__commands.lineTo(x, y);
            this.__hardware = false;
            this.set___dirty(true);
        },
        moveTo: function(x, y) {
            this.__positionX = x;
            this.__positionY = y;
            this.__commands.moveTo(x, y);
        },
        __calculateBezierCubicPoint: function(t, p1, p2, p3, p4) {
            var iT = 1 - t;
            return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
        },
        __calculateBezierQuadPoint: function(t, p1, p2, p3) {
            var iT = 1 - t;
            return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
        },
        __getBounds: function(rect, matrix) {
            if (this.__bounds == null) return;
            var bounds = openfl_geom_Rectangle.__temp;
            this.__bounds.__transform(bounds, matrix);
            rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
        },
        __hitTest: function(x, y, shapeFlag, matrix) {
            if (this.__bounds == null) return false;
            var px = matrix.__transformInverseX(x, y);
            var py = matrix.__transformInverseY(x, y);
            if (px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px, py)) {
                if (shapeFlag) return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this, px, py);
                return true;
            }
            return false;
        },
        __inflateBounds: function(x, y) {
            if (this.__bounds == null) {
                this.__bounds = new openfl_geom_Rectangle(x, y, 0, 0);
                this.__transformDirty = true;
                return;
            }
            if (x < this.__bounds.x) {
                this.__bounds.width += this.__bounds.x - x;
                this.__bounds.x = x;
                this.__transformDirty = true;
            }
            if (y < this.__bounds.y) {
                this.__bounds.height += this.__bounds.y - y;
                this.__bounds.y = y;
                this.__transformDirty = true;
            }
            if (x > this.__bounds.x + this.__bounds.width) this.__bounds.width = x - this.__bounds.x;
            if (y > this.__bounds.y + this.__bounds.height) this.__bounds.height = y - this.__bounds.y;
        },
        set___dirty: function(value) {
            if (value && this.__owner != null) this.__owner.__setRenderDirty();
            return this.__dirty = value;
        },
        __class__: openfl_display_Graphics,
        __properties__: {
            set___dirty: "set___dirty"
        }
    };
    var openfl_display_IGraphicsFill = function() {};
    $hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
    openfl_display_IGraphicsFill.__name__ = ["openfl", "display", "IGraphicsFill"];
    openfl_display_IGraphicsFill.prototype = {
        __class__: openfl_display_IGraphicsFill
    };
    var openfl_display_IGraphicsData = function() {};
    $hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
    openfl_display_IGraphicsData.__name__ = ["openfl", "display", "IGraphicsData"];
    openfl_display_IGraphicsData.prototype = {
        __class__: openfl_display_IGraphicsData
    };
    var openfl_display_GraphicsBitmapFill = function(bitmapData, matrix, repeat, smooth) {
        if (smooth == null) smooth = false;
        if (repeat == null) repeat = true;
        this.bitmapData = bitmapData;
        this.matrix = matrix;
        this.repeat = repeat;
        this.smooth = smooth;
        this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
        this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
    };
    $hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
    openfl_display_GraphicsBitmapFill.__name__ = ["openfl", "display", "GraphicsBitmapFill"];
    openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
    openfl_display_GraphicsBitmapFill.prototype = {
        __class__: openfl_display_GraphicsBitmapFill
    };
    var openfl_display_GraphicsEndFill = function() {
        this.__graphicsDataType = openfl_display_GraphicsDataType.END;
        this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
    };
    $hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
    openfl_display_GraphicsEndFill.__name__ = ["openfl", "display", "GraphicsEndFill"];
    openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
    openfl_display_GraphicsEndFill.prototype = {
        __class__: openfl_display_GraphicsEndFill
    };
    var openfl_display_GraphicsGradientFill = function(type, colors, alphas, ratios, matrix, spreadMethod, interpolationMethod, focalPointRatio) {
        if (focalPointRatio == null) focalPointRatio = 0;
        if (type == null) type = 0;
        if (spreadMethod == null) spreadMethod = 0;
        if (interpolationMethod == null) interpolationMethod = 1;
        this.type = type;
        this.colors = colors;
        this.alphas = alphas;
        this.ratios = ratios;
        this.matrix = matrix;
        this.spreadMethod = spreadMethod;
        this.interpolationMethod = interpolationMethod;
        this.focalPointRatio = focalPointRatio;
        this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
        this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
    };
    $hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
    openfl_display_GraphicsGradientFill.__name__ = ["openfl", "display", "GraphicsGradientFill"];
    openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
    openfl_display_GraphicsGradientFill.prototype = {
        __class__: openfl_display_GraphicsGradientFill
    };
    var openfl_display_IGraphicsPath = function() {};
    $hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
    openfl_display_IGraphicsPath.__name__ = ["openfl", "display", "IGraphicsPath"];
    var openfl_display_GraphicsPath = function(commands, data, winding) {
        if (winding == null) winding = "evenOdd";
        this.commands = commands;
        this.data = data;
        this.winding = winding;
        this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
    };
    $hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
    openfl_display_GraphicsPath.__name__ = ["openfl", "display", "GraphicsPath"];
    openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath, openfl_display_IGraphicsData];
    openfl_display_GraphicsPath.prototype = {
        curveTo: function(controlX, controlY, anchorX, anchorY) {
            if (this.commands != null && this.data != null) {
                var this1 = this.commands;
                if (!this1.fixed) {
                    this1.length++;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                    this1.data[this1.length - 1] = 3;
                }
                this1.length;
                var this3 = this.data;
                if (!this3.fixed) {
                    this3.length++;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                    this3.data[this3.length - 1] = anchorX;
                }
                this3.length;
                var this5 = this.data;
                if (!this5.fixed) {
                    this5.length++;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                    this5.data[this5.length - 1] = anchorY;
                }
                this5.length;
                var this7 = this.data;
                if (!this7.fixed) {
                    this7.length++;
                    if (this7.data.length < this7.length) {
                        var data3;
                        var this8;
                        this8 = new Array(this7.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                        this7.data = data3;
                    }
                    this7.data[this7.length - 1] = controlX;
                }
                this7.length;
                var this9 = this.data;
                if (!this9.fixed) {
                    this9.length++;
                    if (this9.data.length < this9.length) {
                        var data4;
                        var this10;
                        this10 = new Array(this9.data.length + 10);
                        data4 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                        this9.data = data4;
                    }
                    this9.data[this9.length - 1] = controlY;
                }
                this9.length;
            }
        },
        lineTo: function(x, y) {
            if (this.commands != null && this.data != null) {
                var this1 = this.commands;
                if (!this1.fixed) {
                    this1.length++;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                    this1.data[this1.length - 1] = 2;
                }
                this1.length;
                var this3 = this.data;
                if (!this3.fixed) {
                    this3.length++;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                    this3.data[this3.length - 1] = x;
                }
                this3.length;
                var this5 = this.data;
                if (!this5.fixed) {
                    this5.length++;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                    this5.data[this5.length - 1] = y;
                }
                this5.length;
            }
        },
        moveTo: function(x, y) {
            if (this.commands != null && this.data != null) {
                var this1 = this.commands;
                if (!this1.fixed) {
                    this1.length++;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                    this1.data[this1.length - 1] = 1;
                }
                this1.length;
                var this3 = this.data;
                if (!this3.fixed) {
                    this3.length++;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                    this3.data[this3.length - 1] = x;
                }
                this3.length;
                var this5 = this.data;
                if (!this5.fixed) {
                    this5.length++;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                    this5.data[this5.length - 1] = y;
                }
                this5.length;
            }
        },
        wideLineTo: function(x, y) {
            if (this.commands != null && this.data != null) {
                var this1 = this.commands;
                if (!this1.fixed) {
                    this1.length++;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                    this1.data[this1.length - 1] = 2;
                }
                this1.length;
                var this3 = this.data;
                if (!this3.fixed) {
                    this3.length++;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                    this3.data[this3.length - 1] = x;
                }
                this3.length;
                var this5 = this.data;
                if (!this5.fixed) {
                    this5.length++;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                    this5.data[this5.length - 1] = y;
                }
                this5.length;
            }
        },
        wideMoveTo: function(x, y) {
            if (this.commands != null && this.data != null) {
                var this1 = this.commands;
                if (!this1.fixed) {
                    this1.length++;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                    this1.data[this1.length - 1] = 1;
                }
                this1.length;
                var this3 = this.data;
                if (!this3.fixed) {
                    this3.length++;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                    this3.data[this3.length - 1] = x;
                }
                this3.length;
                var this5 = this.data;
                if (!this5.fixed) {
                    this5.length++;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                    this5.data[this5.length - 1] = y;
                }
                this5.length;
            }
        },
        __class__: openfl_display_GraphicsPath
    };
    var openfl_display_GraphicsSolidFill = function(color, alpha) {
        if (alpha == null) alpha = 1;
        if (color == null) color = 0;
        this.alpha = alpha;
        this.color = color;
        this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
        this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
    };
    $hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
    openfl_display_GraphicsSolidFill.__name__ = ["openfl", "display", "GraphicsSolidFill"];
    openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill, openfl_display_IGraphicsData];
    openfl_display_GraphicsSolidFill.prototype = {
        __class__: openfl_display_GraphicsSolidFill
    };
    var openfl_display_IGraphicsStroke = function() {};
    $hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
    openfl_display_IGraphicsStroke.__name__ = ["openfl", "display", "IGraphicsStroke"];
    var openfl_display_GraphicsStroke = function(thickness, pixelHinting, scaleMode, caps, joints, miterLimit, fill) {
        if (miterLimit == null) miterLimit = 3;
        if (pixelHinting == null) pixelHinting = false;
        if (thickness == null) thickness = 0.0;
        if (caps != null) this.caps = caps;
        else this.caps = 0;
        this.fill = fill;
        if (joints != null) this.joints = joints;
        else this.joints = 2;
        this.miterLimit = miterLimit;
        this.pixelHinting = pixelHinting;
        if (scaleMode != null) this.scaleMode = scaleMode;
        else this.scaleMode = 2;
        this.thickness = thickness;
        this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
    };
    $hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
    openfl_display_GraphicsStroke.__name__ = ["openfl", "display", "GraphicsStroke"];
    openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke, openfl_display_IGraphicsData];
    openfl_display_GraphicsStroke.prototype = {
        __class__: openfl_display_GraphicsStroke
    };
    var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = {
        __ename__: ["openfl", "display", "GraphicsDataType"],
        __constructs__: ["STROKE", "SOLID", "GRADIENT", "PATH", "BITMAP", "END"]
    };
    openfl_display_GraphicsDataType.STROKE = ["STROKE", 0];
    openfl_display_GraphicsDataType.STROKE.toString = $estr;
    openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
    openfl_display_GraphicsDataType.SOLID = ["SOLID", 1];
    openfl_display_GraphicsDataType.SOLID.toString = $estr;
    openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
    openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT", 2];
    openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
    openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
    openfl_display_GraphicsDataType.PATH = ["PATH", 3];
    openfl_display_GraphicsDataType.PATH.toString = $estr;
    openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
    openfl_display_GraphicsDataType.BITMAP = ["BITMAP", 4];
    openfl_display_GraphicsDataType.BITMAP.toString = $estr;
    openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
    openfl_display_GraphicsDataType.END = ["END", 5];
    openfl_display_GraphicsDataType.END.toString = $estr;
    openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
    var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = {
        __ename__: ["openfl", "display", "GraphicsFillType"],
        __constructs__: ["SOLID_FILL", "GRADIENT_FILL", "BITMAP_FILL", "END_FILL"]
    };
    openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL", 0];
    openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
    openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
    openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL", 1];
    openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
    openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
    openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL", 2];
    openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
    openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
    openfl_display_GraphicsFillType.END_FILL = ["END_FILL", 3];
    openfl_display_GraphicsFillType.END_FILL.toString = $estr;
    openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
    var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
    $hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl", "display", "_InterpolationMethod", "InterpolationMethod_Impl_"];
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
        switch (value) {
        case "linearRGB":
            return 0;
        case "rgb":
            return 1;
        default:
            return null;
        }
    };
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "linearRGB";
        case 1:
            return "rgb";
        default:
            return null;
        }
    };
    var openfl_display_JPEGEncoderOptions = function(quality) {
        if (quality == null) quality = 80;
        this.quality = quality;
    };
    $hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
    openfl_display_JPEGEncoderOptions.__name__ = ["openfl", "display", "JPEGEncoderOptions"];
    openfl_display_JPEGEncoderOptions.prototype = {
        __class__: openfl_display_JPEGEncoderOptions
    };
    var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
    $hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
    openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl", "display", "_JointStyle", "JointStyle_Impl_"];
    openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
        switch (value) {
        case "bevel":
            return 0;
        case "miter":
            return 1;
        case "round":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "bevel";
        case 1:
            return "miter";
        case 2:
            return "round";
        default:
            return null;
        }
    };
    var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
    $hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl", "display", "_LineScaleMode", "LineScaleMode_Impl_"];
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
        switch (value) {
        case "horizontal":
            return 0;
        case "none":
            return 1;
        case "normal":
            return 2;
        case "vertical":
            return 3;
        default:
            return null;
        }
    };
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "horizontal";
        case 1:
            return "none";
        case 2:
            return "normal";
        case 3:
            return "vertical";
        default:
            return null;
        }
    };
    var openfl_display_Loader = function() {
        openfl_display_DisplayObjectContainer.call(this);
        this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
    };
    $hxClasses["openfl.display.Loader"] = openfl_display_Loader;
    openfl_display_Loader.__name__ = ["openfl", "display", "Loader"];
    openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
    openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
        close: function() {
            openfl_Lib.notImplemented("Loader.close");
        },
        load: function(request, context) {
            var extension = "";
            var parts = request.url.split(".");
            if (parts.length > 0) extension = parts[parts.length - 1].toLowerCase();
            if (extension.indexOf("?") != -1) extension = extension.split("?")[0];
            var transparent = true;
            this.contentLoaderInfo.url = request.url;
            if (request.contentType == null || request.contentType == "") switch (extension) {
            case "swf":
                this.contentLoaderInfo.contentType = "application/x-shockwave-flash";
                break;
            case "jpg":
            case "jpeg":
                transparent = false;
                this.contentLoaderInfo.contentType = "image/jpeg";
                break;
            case "png":
                this.contentLoaderInfo.contentType = "image/png";
                break;
            case "gif":
                this.contentLoaderInfo.contentType = "image/gif";
                break;
            default:
                this.contentLoaderInfo.contentType = "application/x-www-form-urlencoded";
            } else this.contentLoaderInfo.contentType = request.contentType;
            var worker = new lime_system_BackgroundWorker();
            worker.doWork.add(function(_) {
                var path = request.url;
                openfl_display_BitmapData.fromFile(path,
                function(bitmapData) {
                    worker.sendComplete(bitmapData);
                },
                function() {
                    worker.sendError("ioError");
                });
            });
            worker.onError.add($bind(this, this.BitmapData_onError));
            worker.onComplete.add($bind(this, this.BitmapData_onLoad));
            worker.run();
        },
        loadBytes: function(buffer, context) {
            var worker = new lime_system_BackgroundWorker();
            worker.doWork.add(function(_) {
                openfl_display_BitmapData.fromBytes(buffer, null,
                function(bitmapData) {
                    worker.sendComplete(bitmapData);
                });
            });
            worker.onComplete.add($bind(this, this.BitmapData_onLoad));
            worker.run();
        },
        unload: function() {
            if (this.get_numChildren() > 0) {
                while (this.get_numChildren() > 0) this.removeChildAt(0);
                this.content = null;
                this.contentLoaderInfo.url = null;
                this.contentLoaderInfo.contentType = null;
                this.contentLoaderInfo.content = null;
                this.contentLoaderInfo.bytesLoaded = 0;
                this.contentLoaderInfo.bytesTotal = 0;
                this.contentLoaderInfo.width = 0;
                this.contentLoaderInfo.height = 0;
                var event = new openfl_events_Event("unload");
                event.currentTarget = this;
                this.__dispatchEvent(event);
            }
        },
        unloadAndStop: function(gc) {
            if (gc == null) gc = true;
            openfl_Lib.notImplemented("Loader.unloadAndStop");
        },
        BitmapData_onLoad: function(bitmapData) {
            this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
            this.content = this.contentLoaderInfo.content;
            this.addChild(this.contentLoaderInfo.content);
            var event = new openfl_events_Event("complete");
            event.target = this.contentLoaderInfo;
            event.currentTarget = this.contentLoaderInfo;
            this.contentLoaderInfo.dispatchEvent(event);
        },
        BitmapData_onError: function(_) {
            var event = new openfl_events_IOErrorEvent("ioError");
            event.target = this.contentLoaderInfo;
            event.currentTarget = this.contentLoaderInfo;
            this.contentLoaderInfo.dispatchEvent(event);
        },
        __class__: openfl_display_Loader
    });
    var openfl_display_OpenGLView = function() {
        openfl_display_DirectRenderer.call(this, "OpenGLView");
    };
    $hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
    openfl_display_OpenGLView.__name__ = ["openfl", "display", "OpenGLView"];
    openfl_display_OpenGLView.__properties__ = {
        get_isSupported: "get_isSupported"
    }
    openfl_display_OpenGLView.isSupported = null;
    openfl_display_OpenGLView.get_isSupported = function() {
        if (!window.WebGLRenderingContext) return false;
        if (lime_graphics_opengl_GL.context != null) return true;
        else {
            var canvas = window.document.createElement("canvas");
            var context = canvas.getContext("webgl");
            if (context == null) context = canvas.getContext("experimental-webgl");
            return context != null;
        }
    };
    openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
    openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype, {
        __renderCanvas: function(renderSession) {},
        __renderDOM: function(renderSession) {
            if (this.stage != null && this.__worldVisible && this.__renderable) {
                if (!this.__added) {
                    renderSession.element.appendChild(this.__canvas);
                    this.__added = true;
                    openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this, this.__canvas, renderSession);
                }
                if (this.__context != null) {
                    var rect = null;
                    if (this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0, 0, this.stage.stageWidth, this.stage.stageHeight);
                    else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x, this.get_y() + this.get_scrollRect().y, this.get_scrollRect().width, this.get_scrollRect().height);
                    if (this.__render != null) this.__render(rect);
                }
            } else if (this.__added) {
                renderSession.element.removeChild(this.__canvas);
                this.__added = false;
            }
        },
        __renderGL: function(renderSession) {
            if (this.stage != null && this.__renderable) {
                var rect = null;
                if (this.get_scrollRect() == null) rect = new openfl_geom_Rectangle(0, 0, this.stage.stageWidth, this.stage.stageHeight);
                else rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x, this.get_y() + this.get_scrollRect().y, this.get_scrollRect().width, this.get_scrollRect().height);
                if (this.__render != null) this.__render(rect);
                renderSession.shaderManager.setShader(null);
                renderSession.blendModeManager.setBlendMode(null);
            }
        },
        __class__: openfl_display_OpenGLView
    });
    var openfl_display_PNGEncoderOptions = function(fastCompression) {
        if (fastCompression == null) fastCompression = false;
        this.fastCompression = fastCompression;
    };
    $hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
    openfl_display_PNGEncoderOptions.__name__ = ["openfl", "display", "PNGEncoderOptions"];
    openfl_display_PNGEncoderOptions.prototype = {
        __class__: openfl_display_PNGEncoderOptions
    };
    var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
    $hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl", "display", "_PixelSnapping", "PixelSnapping_Impl_"];
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
        switch (value) {
        case "always":
            return 0;
        case "auto":
            return 1;
        case "never":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "always";
        case 1:
            return "auto";
        case 2:
            return "never";
        default:
            return null;
        }
    };
    var openfl_display_Preloader = function(display) {
        lime_app_Preloader.call(this);
        if (display != null) {
            this.display = display;
            openfl_Lib.current.addChild(display);
            if (js_Boot.__instanceof(display, NMEPreloader))(js_Boot.__cast(display, NMEPreloader)).onInit();
        }
    };
    $hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
    openfl_display_Preloader.__name__ = ["openfl", "display", "Preloader"];
    openfl_display_Preloader.__super__ = lime_app_Preloader;
    openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype, {
        load: function(urls, types) {
            var sounds = [];
            var url = null;
            var _g1 = 0;
            var _g = urls.length;
            while (_g1 < _g) {
                var i = _g1++;
                url = urls[i];
                var _g2 = types[i];
                switch (_g2) {
                case "MUSIC":
                case "SOUND":
                    var sound = haxe_io_Path.withoutExtension(url);
                    if (!HxOverrides.remove(sounds, sound)) this.total++;
                    sounds.push(sound);
                    break;
                default:
                }
            }
            var _g3 = 0;
            while (_g3 < sounds.length) {
                var soundName = sounds[_g3]; ++_g3;
                var sound1 = new openfl_media_Sound();
                sound1.addEventListener("complete", $bind(this, this.sound_onComplete));
                sound1.addEventListener("ioError", $bind(this, this.sound_onIOError));
                sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
            }
            lime_app_Preloader.prototype.load.call(this, urls, types);
        },
        start: function() {
            if (this.display != null && js_Boot.__instanceof(this.display, NMEPreloader)) {
                this.display.addEventListener("complete", $bind(this, this.display_onComplete)); (js_Boot.__cast(this.display, NMEPreloader)).onLoaded();
            } else lime_app_Preloader.prototype.start.call(this);
        },
        update: function(loaded, total) {
            if (this.display != null && js_Boot.__instanceof(this.display, NMEPreloader))(js_Boot.__cast(this.display, NMEPreloader)).onUpdate(loaded, total);
        },
        display_onComplete: function(event) {
            this.display.removeEventListener("complete", $bind(this, this.display_onComplete));
            openfl_Lib.current.removeChild(this.display);
            openfl_Lib.current.stage.set_focus(null);
            this.display = null;
            lime_app_Preloader.prototype.start.call(this);
        },
        sound_onComplete: function(event) {
            this.loaded++;
            this.onProgress.dispatch(this.loaded, this.total);
            if (this.loaded == this.total) this.start();
        },
        sound_onIOError: function(event) {
            this.loaded++;
            if (openfl_display_Preloader.soundFail != null) openfl_display_Preloader.soundFail();
            this.onProgress.dispatch(this.loaded, this.total);
            if (this.loaded == this.total) this.start();
        },
        __class__: openfl_display_Preloader
    });
    var openfl_display_Shader = function(precision) {
        if (precision == null) precision = 1;
        this.__dirty = true;
        this.repeatY = 33071;
        this.repeatX = 33071;
        this.precision = 1;
        this.precision = precision;
        this.data = new haxe_ds_StringMap();
        var value = new openfl_display_GLShaderParameter("vec2");
        this.data.set(openfl_display_Shader.uObjectSize, value);
        var value1 = new openfl_display_GLShaderParameter("vec2");
        this.data.set(openfl_display_Shader.uTextureSize, value1);
    };
    $hxClasses["openfl.display.Shader"] = openfl_display_Shader;
    openfl_display_Shader.__name__ = ["openfl", "display", "Shader"];
    openfl_display_Shader.prototype = {
        __init: function(gl) {
            var dirty = this.__dirty;
            if (dirty) {
                if (this.__shader != null) this.__shader.destroy();
                this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
                if (this.__vertexCode != null) this.__shader.vertexString = this.__vertexCode;
                else this.__shader.vertexString = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
                this.__shader.fragmentString = this.__fragmentCode;
                this.__dirty = false;
            }
            this.__shader.init(dirty);
        },
        __buildFragmentCode: function(code) {
            var output = [];
            output.push("#ifdef GL_ES");
            output.push((function($this) {
                var $r;
                var _g = $this.precision;
                $r = (function($this) {
                    var $r;
                    switch (_g) {
                    case 2:
                        $r = "precision highp float;";
                        break;
                    case 1:
                        $r = "precision mediump float;";
                        break;
                    default:
                        $r = "precision lowp float;";
                    }
                    return $r;
                } ($this));
                return $r;
            } (this)));
            output.push("#endif");
            output = output.concat(openfl_display_Shader.fragmentHeader);
            output.push(code);
            this.__fragmentCode = output.join("\n");
        },
        __buildVertexCode: function(code) {
            var output = [];
            output.push("#ifdef GL_ES");
            output.push((function($this) {
                var $r;
                var _g = $this.precision;
                $r = (function($this) {
                    var $r;
                    switch (_g) {
                    case 2:
                        $r = "precision highp float;";
                        break;
                    case 1:
                        $r = "precision mediump float;";
                        break;
                    default:
                        $r = "precision lowp float;";
                    }
                    return $r;
                } ($this));
                return $r;
            } (this)));
            output.push("#endif");
            output = output.concat(openfl_display_Shader.vertexHeader);
            output.push(code);
            this.__vertexCode = output.join("\n");
        },
        __class__: openfl_display_Shader
    };
    var openfl_display_GLShaderParameter = function(type, arraySize) {
        this.internalType = 0;
        this.transpose = false;
        this.repeatY = 33071;
        this.repeatX = 33071;
        this.smooth = false;
        this.arraySize = 0;
        this.size = 0;
        this.type = type;
        if (arraySize == null) this.arraySize = 0;
        else this.arraySize = arraySize;
        this.__init();
    };
    $hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
    openfl_display_GLShaderParameter.__name__ = ["openfl", "display", "GLShaderParameter"];
    openfl_display_GLShaderParameter.prototype = {
        __init: function() {
            var _g = this.type;
            var v = _g;
            var m = _g;
            switch (_g) {
            case "bool":
                this.internalType = 1;
                this.size = 1;
                if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                this.value = [0.0];
                break;
            case "int":
                this.internalType = 1;
                this.size = 1;
                if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                this.value = [0.0];
                break;
            case "float":
                this.internalType = 2;
                this.size = 1;
                if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                this.value = [0.0];
                break;
            case "sampler2D":
                if (v.indexOf("vec") > -1) {
                    if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1;
                    else this.internalType = 2;
                    var s = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s;
                    this.set_value((function($this) {
                        var $r;
                        var _g1 = []; {
                            var _g3 = 0;
                            var _g2 = $this.size;
                            while (_g3 < _g2) {
                                var i = _g3++;
                                _g1.push(0.0);
                            }
                        }
                        $r = _g1;
                        return $r;
                    } (this)));
                } else if (m.indexOf("mat") > -1) {
                    this.internalType = 3;
                    var s1 = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s1;
                    if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                    var _g11 = this.size;
                    switch (_g11) {
                    case 2:
                        this.value = [1, 0, 1, 0];
                        break;
                    case 3:
                        this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                        break;
                    case 4:
                        this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
                        break;
                    default:
                        this.value = [0];
                    }
                } else {
                    this.internalType = 4;
                    this.size = 0;
                }
                break;
            case "samplerCube":
                if (v.indexOf("vec") > -1) {
                    if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1;
                    else this.internalType = 2;
                    var s2 = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s2;
                    this.set_value((function($this) {
                        var $r;
                        var _g12 = []; {
                            var _g31 = 0;
                            var _g21 = $this.size;
                            while (_g31 < _g21) {
                                var i1 = _g31++;
                                _g12.push(0.0);
                            }
                        }
                        $r = _g12;
                        return $r;
                    } (this)));
                } else if (m.indexOf("mat") > -1) {
                    this.internalType = 3;
                    var s3 = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s3;
                    if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                    var _g13 = this.size;
                    switch (_g13) {
                    case 2:
                        this.value = [1, 0, 1, 0];
                        break;
                    case 3:
                        this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                        break;
                    case 4:
                        this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
                        break;
                    default:
                        this.value = [0];
                    }
                } else {
                    this.internalType = 4;
                    this.size = 0;
                }
                break;
            default:
                if (v.indexOf("vec") > -1) {
                    if (StringTools.startsWith(this.type, "b") || StringTools.startsWith(this.type, "i")) this.internalType = 1;
                    else this.internalType = 2;
                    var s4 = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s4;
                    this.set_value((function($this) {
                        var $r;
                        var _g14 = []; {
                            var _g32 = 0;
                            var _g22 = $this.size;
                            while (_g32 < _g22) {
                                var i2 = _g32++;
                                _g14.push(0.0);
                            }
                        }
                        $r = _g14;
                        return $r;
                    } (this)));
                } else if (m.indexOf("mat") > -1) {
                    this.internalType = 3;
                    var s5 = Std.parseInt(this.type.charAt(this.type.length - 1));
                    this.size = s5;
                    if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
                    var _g15 = this.size;
                    switch (_g15) {
                    case 2:
                        this.value = [1, 0, 1, 0];
                        break;
                    case 3:
                        this.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                        break;
                    case 4:
                        this.value = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
                        break;
                    default:
                        this.value = [0];
                    }
                } else {
                    this.internalType = 0;
                    haxe_Log.trace("Can't initialize value for type " + this.type, {
                        fileName: "Shader.hx",
                        lineNumber: 307,
                        className: "openfl.display.GLShaderParameter",
                        methodName: "__init"
                    });
                }
            }
        },
        set_value: function(v) {
            if (this.internalType == 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
            return this.value = v;
        },
        set_bitmap: function(v) {
            if (this.internalType != 4) throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
            return this.bitmap = v;
        },
        __class__: openfl_display_GLShaderParameter,
        __properties__: {
            set_bitmap: "set_bitmap",
            set_value: "set_value"
        }
    };
    var openfl_display_Shape = function() {
        openfl_display_DisplayObject.call(this);
    };
    $hxClasses["openfl.display.Shape"] = openfl_display_Shape;
    openfl_display_Shape.__name__ = ["openfl", "display", "Shape"];
    openfl_display_Shape.__super__ = openfl_display_DisplayObject;
    openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype, {
        get_graphics: function() {
            if (this.__graphics == null) {
                this.__graphics = new openfl_display_Graphics();
                this.__graphics.__owner = this;
            }
            return this.__graphics;
        },
        __class__: openfl_display_Shape,
        __properties__: $extend(openfl_display_DisplayObject.prototype.__properties__, {
            get_graphics: "get_graphics"
        })
    });
    var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
    $hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl", "display", "_SpreadMethod", "SpreadMethod_Impl_"];
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
        switch (value) {
        case "pad":
            return 0;
        case "reflect":
            return 1;
        case "repeat":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "pad";
        case 1:
            return "reflect";
        case 2:
            return "repeat";
        default:
            return null;
        }
    };
    var openfl_display_Stage = function(window, color) {
        openfl_display_DisplayObjectContainer.call(this);
        this.application = window.application;
        this.window = window;
        if (color == null) {
            this.__transparent = true;
            this.set_color(0);
        } else this.set_color(color);
        this.set_name(null);
        this.__deltaTime = 0;
        this.__displayState = 2;
        this.__mouseX = 0;
        this.__mouseY = 0;
        this.__lastClickTime = 0;
        this.stageWidth = window.__width * window.__scale | 0;
        this.stageHeight = window.__height * window.__scale | 0;
        this.stage = this;
        this.align = 6;
        this.allowsFullScreen = false;
        this.allowsFullScreenInteractive = false;
        this.quality = 1;
        this.scaleMode = 2;
        this.stageFocusRect = true;
        this.__macKeyboard = /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent) || /Mac/.test(navigator.platform);
        this.__clearBeforeRender = true;
        this.__stack = [];
        this.__mouseOutStack = [];
        var this1;
        this1 = new openfl_VectorData();
        var this2;
        this2 = new Array(0);
        this1.data = this2;
        this1.length = 0;
        this1.fixed = false;
        this.stage3Ds = this1;
        var this3 = this.stage3Ds;
        var x = new openfl_display_Stage3D();
        if (!this3.fixed) {
            this3.length++;
            if (this3.data.length < this3.length) {
                var data;
                var this4;
                this4 = new Array(this3.data.length + 10);
                data = this4;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data, 0, this3.data.length);
                this3.data = data;
            }
            this3.data[this3.length - 1] = x;
        }
        this3.length;
        if (openfl_Lib.current.stage == null) this.stage.addChild(openfl_Lib.current);
    };
    $hxClasses["openfl.display.Stage"] = openfl_display_Stage;
    openfl_display_Stage.__name__ = ["openfl", "display", "Stage"];
    openfl_display_Stage.__interfaces__ = [lime_app_IModule];
    openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
    openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype, {
        globalToLocal: function(pos) {
            return pos.clone();
        },
        invalidate: function() {
            this.__invalidated = true;
        },
        localToGlobal: function(pos) {
            return pos.clone();
        },
        onGamepadAxisMove: function(gamepad, axis, value) {
            openfl_ui_GameInput.__onGamepadAxisMove(gamepad, axis, value);
        },
        onGamepadButtonDown: function(gamepad, button) {
            openfl_ui_GameInput.__onGamepadButtonDown(gamepad, button);
        },
        onGamepadButtonUp: function(gamepad, button) {
            openfl_ui_GameInput.__onGamepadButtonUp(gamepad, button);
        },
        onGamepadConnect: function(gamepad) {
            openfl_ui_GameInput.__onGamepadConnect(gamepad);
        },
        onGamepadDisconnect: function(gamepad) {
            openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
        },
        onJoystickAxisMove: function(joystick, axis, value) {},
        onJoystickButtonDown: function(joystick, button) {},
        onJoystickButtonUp: function(joystick, button) {},
        onJoystickConnect: function(joystick) {},
        onJoystickDisconnect: function(joystick) {},
        onJoystickHatMove: function(joystick, hat, position) {},
        onJoystickTrackballMove: function(joystick, trackball, value) {},
        onKeyDown: function(window, keyCode, modifier) {
            if (this.window == null || this.window != window) return;
            this.__onKey("keyDown", keyCode, modifier);
        },
        onKeyUp: function(window, keyCode, modifier) {
            if (this.window == null || this.window != window) return;
            this.__onKey("keyUp", keyCode, modifier);
        },
        onModuleExit: function(code) {
            if (this.window != null) {
                var event = new openfl_events_Event("deactivate");
                this.__broadcast(event, true);
            }
        },
        onMouseDown: function(window, x, y, button) {
            if (this.window == null || this.window != window) return;
            var type;
            switch (button) {
            case 1:
                type = "middleMouseDown";
                break;
            case 2:
                type = "rightMouseDown";
                break;
            default:
                type = "mouseDown";
            }
            this.__onMouse(type, x * window.__scale | 0, y * window.__scale | 0, button);
        },
        onMouseMove: function(window, x, y) {
            if (this.window == null || this.window != window) return;
            this.__onMouse("mouseMove", x * window.__scale | 0, y * window.__scale | 0, 0);
        },
        onMouseMoveRelative: function(window, x, y) {},
        onMouseUp: function(window, x, y, button) {
            if (this.window == null || this.window != window) return;
            var type;
            switch (button) {
            case 1:
                type = "middleMouseUp";
                break;
            case 2:
                type = "rightMouseUp";
                break;
            default:
                type = "mouseUp";
            }
            this.__onMouse(type, x * window.__scale | 0, y * window.__scale | 0, button);
        },
        onMouseWheel: function(window, deltaX, deltaY) {
            if (this.window == null || this.window != window) return;
            this.__onMouseWheel(deltaX * window.__scale | 0, deltaY * window.__scale | 0);
        },
        onPreloadComplete: function() {},
        onPreloadProgress: function(loaded, total) {},
        onRenderContextLost: function(renderer) {},
        onRenderContextRestored: function(renderer, context) {},
        onTextEdit: function(window, text, start, length) {},
        onTextInput: function(window, text) {
            if (this.window == null || this.window != window) return;
            var stack = [];
            if (this.__focus == null) this.__getInteractive(stack);
            else this.__focus.__getInteractive(stack);
            var event = new openfl_events_TextEvent("textInput", true, false, text);
            if (stack.length > 0) {
                stack.reverse();
                this.__fireEvent(event, stack);
            } else this.__broadcast(event, true);
        },
        onTouchMove: function(touch) {
            this.__onTouch("touchMove", touch);
        },
        onTouchEnd: function(touch) {
            this.__onTouch("touchEnd", touch);
        },
        onTouchStart: function(touch) {
            this.__onTouch("touchBegin", touch);
        },
        onWindowActivate: function(window) {
            if (this.window == null || this.window != window) return;
            var event = new openfl_events_Event("activate");
            this.__broadcast(event, true);
        },
        onWindowClose: function(window) {
            if (this.window == window) this.window = null;
        },
        onWindowCreate: function(window) {
            if (this.window == null || this.window != window) return;
            if (window.renderer != null) {
                var _g = window.renderer.context;
                switch (_g[1]) {
                case 0:
                    var gl = _g[2];
                    this.__renderer = new openfl__$internal_renderer_opengl_GLRenderer(this.stageWidth, this.stageHeight, gl);
                    break;
                case 1:
                    var context = _g[2];
                    this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth, this.stageHeight, context);
                    break;
                case 2:
                    var element = _g[2];
                    break;
                case 4:
                    var cairo = _g[2];
                    break;
                case 5:
                    var ctx = _g[2];
                    break;
                default:
                }
            }
        },
        onWindowDeactivate: function(window) {
            if (this.window == null || this.window != window) return;
            var event = new openfl_events_Event("deactivate");
            this.__broadcast(event, true);
        },
        onWindowDropFile: function(window, file) {},
        onWindowEnter: function(window) {},
        onWindowFocusIn: function(window) {
            if (this.window == null || this.window != window) return;
            var event = new openfl_events_FocusEvent("focusIn", true, false, null, false, 0);
            this.__broadcast(event, true);
        },
        onWindowFocusOut: function(window) {
            if (this.window == null || this.window != window) return;
            var event = new openfl_events_FocusEvent("focusOut", true, false, null, false, 0);
            this.__broadcast(event, true);
        },
        onWindowFullscreen: function(window) {
            if (this.window == null || this.window != window) return;
            if (this.__displayState == 2) this.__displayState = 1;
        },
        onWindowLeave: function(window) {
            if (this.window == null || this.window != window) return;
            this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
        },
        onWindowMinimize: function(window) {},
        onWindowMove: function(window, x, y) {},
        onWindowResize: function(window, width, height) {
            if (this.window == null || this.window != window) return;
            if (this.__displayState != 2 && !window.__fullscreen) this.__displayState = 2;
            this.stageWidth = width * window.__scale | 0;
            this.stageHeight = height * window.__scale | 0;
            if (this.__renderer != null) this.__renderer.resize(this.stageWidth, this.stageHeight);
            var event = new openfl_events_Event("resize");
            this.__broadcast(event, false);
        },
        onWindowRestore: function(window) {},
        render: function(renderer) {
            if (renderer.window == null || renderer.window != this.window) return;
            if (this.application != null && this.application.windows.length > 0) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                if (!this.__renderDirty) {
                    this.__updateCachedBitmap = true;
                    this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
                    this.__renderDirty = true;
                    openfl_display_DisplayObject.__worldRenderDirty++;
                }
            }
            if (this.__rendering) return;
            this.__rendering = true;
            this.__broadcast(new openfl_events_Event("enterFrame"), true);
            if (this.__invalidated) {
                this.__invalidated = false;
                this.__broadcast(new openfl_events_Event("render"), true);
            }
            this.__renderable = true;
            this.__enterFrame(this.__deltaTime);
            this.__deltaTime = 0;
            this.__update(false, true);
            if (this.__renderer != null) {
                {
                    var _g = renderer.context;
                    switch (_g[1]) {
                    case 4:
                        var cairo = _g[2]; (js_Boot.__cast(this.__renderer, openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
                        this.__renderer.renderSession.cairo = cairo;
                        break;
                    default:
                    }
                }
                this.__renderer.render(this);
            }
            this.__rendering = false;
        },
        update: function(deltaTime) {
            this.__deltaTime = deltaTime;
        },
        __drag: function(mouse) {
            var parent = this.__dragObject.parent;
            if (parent != null) mouse = parent.globalToLocal(mouse);
            var x = mouse.x + this.__dragOffsetX;
            var y = mouse.y + this.__dragOffsetY;
            if (this.__dragBounds != null) {
                if (x < this.__dragBounds.x) x = this.__dragBounds.x;
                else if (x > this.__dragBounds.get_right()) x = this.__dragBounds.get_right();
                if (y < this.__dragBounds.y) y = this.__dragBounds.y;
                else if (y > this.__dragBounds.get_bottom()) y = this.__dragBounds.get_bottom();
            }
            this.__dragObject.set_x(x);
            this.__dragObject.set_y(y);
        },
        __fireEvent: function(event, stack) {
            var length = stack.length;
            if (length == 0) {
                event.eventPhase = 2;
                event.target.__broadcast(event, false);
            } else {
                event.eventPhase = 1;
                event.target = stack[stack.length - 1];
                var _g1 = 0;
                var _g = length - 1;
                while (_g1 < _g) {
                    var i = _g1++;
                    stack[i].__broadcast(event, false);
                    if (event.__isCanceled) return;
                }
                event.eventPhase = 2;
                event.target.__broadcast(event, false);
                if (event.__isCanceled) return;
                if (event.bubbles) {
                    event.eventPhase = 3;
                    var i1 = length - 2;
                    while (i1 >= 0) {
                        stack[i1].__broadcast(event, false);
                        if (event.__isCanceled) return;
                        i1--;
                    }
                }
            }
        },
        __getInteractive: function(stack) {
            if (stack != null) stack.push(this);
            return true;
        },
        __onKey: function(type, keyCode, modifier) {
            openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
            openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
            openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
            openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
            var stack = [];
            if (this.__focus == null) this.__getInteractive(stack);
            else this.__focus.__getInteractive(stack);
            if (stack.length > 0) {
                var keyLocation;
                switch (keyCode) {
                case 1073742048:
                case 1073742049:
                case 1073742050:
                case 1073742051:
                    keyLocation = 1;
                    break;
                case 1073742052:
                case 1073742053:
                case 1073742054:
                case 1073742055:
                    keyLocation = 2;
                    break;
                case 1073741908:
                case 1073741909:
                case 1073741910:
                case 1073741911:
                case 1073741912:
                case 1073741913:
                case 1073741914:
                case 1073741915:
                case 1073741916:
                case 1073741917:
                case 1073741918:
                case 1073741919:
                case 1073741920:
                case 1073741921:
                case 1073741922:
                case 1073741923:
                case 1073742044:
                    keyLocation = 3;
                    break;
                default:
                    keyLocation = 0;
                }
                var keyCode1;
                switch (keyCode) {
                case 8:
                    keyCode1 = 8;
                    break;
                case 9:
                    keyCode1 = 9;
                    break;
                case 13:
                    keyCode1 = 13;
                    break;
                case 27:
                    keyCode1 = 27;
                    break;
                case 32:
                    keyCode1 = 32;
                    break;
                case 33:
                    keyCode1 = 49;
                    break;
                case 34:
                    keyCode1 = 222;
                    break;
                case 35:
                    keyCode1 = 51;
                    break;
                case 36:
                    keyCode1 = 52;
                    break;
                case 37:
                    keyCode1 = 53;
                    break;
                case 38:
                    keyCode1 = 55;
                    break;
                case 39:
                    keyCode1 = 222;
                    break;
                case 40:
                    keyCode1 = 57;
                    break;
                case 41:
                    keyCode1 = 48;
                    break;
                case 42:
                    keyCode1 = 56;
                    break;
                case 44:
                    keyCode1 = 188;
                    break;
                case 45:
                    keyCode1 = 189;
                    break;
                case 46:
                    keyCode1 = 190;
                    break;
                case 47:
                    keyCode1 = 191;
                    break;
                case 48:
                    keyCode1 = 48;
                    break;
                case 49:
                    keyCode1 = 49;
                    break;
                case 50:
                    keyCode1 = 50;
                    break;
                case 51:
                    keyCode1 = 51;
                    break;
                case 52:
                    keyCode1 = 52;
                    break;
                case 53:
                    keyCode1 = 53;
                    break;
                case 54:
                    keyCode1 = 54;
                    break;
                case 55:
                    keyCode1 = 55;
                    break;
                case 56:
                    keyCode1 = 56;
                    break;
                case 57:
                    keyCode1 = 57;
                    break;
                case 58:
                    keyCode1 = 186;
                    break;
                case 59:
                    keyCode1 = 186;
                    break;
                case 60:
                    keyCode1 = 60;
                    break;
                case 61:
                    keyCode1 = 187;
                    break;
                case 62:
                    keyCode1 = 190;
                    break;
                case 63:
                    keyCode1 = 191;
                    break;
                case 64:
                    keyCode1 = 50;
                    break;
                case 91:
                    keyCode1 = 219;
                    break;
                case 92:
                    keyCode1 = 220;
                    break;
                case 93:
                    keyCode1 = 221;
                    break;
                case 94:
                    keyCode1 = 54;
                    break;
                case 95:
                    keyCode1 = 189;
                    break;
                case 96:
                    keyCode1 = 192;
                    break;
                case 97:
                    keyCode1 = 65;
                    break;
                case 98:
                    keyCode1 = 66;
                    break;
                case 99:
                    keyCode1 = 67;
                    break;
                case 100:
                    keyCode1 = 68;
                    break;
                case 101:
                    keyCode1 = 69;
                    break;
                case 102:
                    keyCode1 = 70;
                    break;
                case 103:
                    keyCode1 = 71;
                    break;
                case 104:
                    keyCode1 = 72;
                    break;
                case 105:
                    keyCode1 = 73;
                    break;
                case 106:
                    keyCode1 = 74;
                    break;
                case 107:
                    keyCode1 = 75;
                    break;
                case 108:
                    keyCode1 = 76;
                    break;
                case 109:
                    keyCode1 = 77;
                    break;
                case 110:
                    keyCode1 = 78;
                    break;
                case 111:
                    keyCode1 = 79;
                    break;
                case 112:
                    keyCode1 = 80;
                    break;
                case 113:
                    keyCode1 = 81;
                    break;
                case 114:
                    keyCode1 = 82;
                    break;
                case 115:
                    keyCode1 = 83;
                    break;
                case 116:
                    keyCode1 = 84;
                    break;
                case 117:
                    keyCode1 = 85;
                    break;
                case 118:
                    keyCode1 = 86;
                    break;
                case 119:
                    keyCode1 = 87;
                    break;
                case 120:
                    keyCode1 = 88;
                    break;
                case 121:
                    keyCode1 = 89;
                    break;
                case 122:
                    keyCode1 = 90;
                    break;
                case 127:
                    keyCode1 = 46;
                    break;
                case 1073741881:
                    keyCode1 = 20;
                    break;
                case 1073741882:
                    keyCode1 = 112;
                    break;
                case 1073741883:
                    keyCode1 = 113;
                    break;
                case 1073741884:
                    keyCode1 = 114;
                    break;
                case 1073741885:
                    keyCode1 = 115;
                    break;
                case 1073741886:
                    keyCode1 = 116;
                    break;
                case 1073741887:
                    keyCode1 = 117;
                    break;
                case 1073741888:
                    keyCode1 = 118;
                    break;
                case 1073741889:
                    keyCode1 = 119;
                    break;
                case 1073741890:
                    keyCode1 = 120;
                    break;
                case 1073741891:
                    keyCode1 = 121;
                    break;
                case 1073741892:
                    keyCode1 = 122;
                    break;
                case 1073741893:
                    keyCode1 = 123;
                    break;
                case 1073741894:
                    keyCode1 = 301;
                    break;
                case 1073741895:
                    keyCode1 = 145;
                    break;
                case 1073741896:
                    keyCode1 = 19;
                    break;
                case 1073741897:
                    keyCode1 = 45;
                    break;
                case 1073741898:
                    keyCode1 = 36;
                    break;
                case 1073741899:
                    keyCode1 = 33;
                    break;
                case 1073741901:
                    keyCode1 = 35;
                    break;
                case 1073741902:
                    keyCode1 = 34;
                    break;
                case 1073741903:
                    keyCode1 = 39;
                    break;
                case 1073741904:
                    keyCode1 = 37;
                    break;
                case 1073741905:
                    keyCode1 = 40;
                    break;
                case 1073741906:
                    keyCode1 = 38;
                    break;
                case 1073741907:
                    keyCode1 = 144;
                    break;
                case 1073741908:
                    keyCode1 = 111;
                    break;
                case 1073741909:
                    keyCode1 = 106;
                    break;
                case 1073741910:
                    keyCode1 = 109;
                    break;
                case 1073741911:
                    keyCode1 = 107;
                    break;
                case 1073741912:
                    keyCode1 = 108;
                    break;
                case 1073741913:
                    keyCode1 = 97;
                    break;
                case 1073741914:
                    keyCode1 = 98;
                    break;
                case 1073741915:
                    keyCode1 = 99;
                    break;
                case 1073741916:
                    keyCode1 = 100;
                    break;
                case 1073741917:
                    keyCode1 = 101;
                    break;
                case 1073741918:
                    keyCode1 = 102;
                    break;
                case 1073741919:
                    keyCode1 = 103;
                    break;
                case 1073741920:
                    keyCode1 = 104;
                    break;
                case 1073741921:
                    keyCode1 = 105;
                    break;
                case 1073741922:
                    keyCode1 = 96;
                    break;
                case 1073741923:
                    keyCode1 = 110;
                    break;
                case 1073741925:
                    keyCode1 = 302;
                    break;
                case 1073741928:
                    keyCode1 = 124;
                    break;
                case 1073741929:
                    keyCode1 = 125;
                    break;
                case 1073741930:
                    keyCode1 = 126;
                    break;
                case 1073741982:
                    keyCode1 = 13;
                    break;
                case 1073742044:
                    keyCode1 = 110;
                    break;
                case 1073742048:
                    keyCode1 = 17;
                    break;
                case 1073742049:
                    keyCode1 = 16;
                    break;
                case 1073742050:
                    keyCode1 = 18;
                    break;
                case 1073742051:
                    keyCode1 = 15;
                    break;
                case 1073742052:
                    keyCode1 = 17;
                    break;
                case 1073742053:
                    keyCode1 = 16;
                    break;
                case 1073742054:
                    keyCode1 = 18;
                    break;
                case 1073742055:
                    keyCode1 = 15;
                    break;
                default:
                    keyCode1 = keyCode;
                }
                var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1, lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
                var event = new openfl_events_KeyboardEvent(type, true, false, charCode, keyCode1, keyLocation, this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier), lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
                stack.reverse();
                this.__fireEvent(event, stack);
                if (event.__isCanceled) {
                    if (type == "keyDown") this.window.onKeyDown.cancel();
                    else this.window.onKeyUp.cancel();
                }
            }
        },
        __onMouse: function(type, x, y, button) {
            if (button > 2) return;
            this.__mouseX = x;
            this.__mouseY = y;
            var stack = [];
            var target = null;
            var targetPoint = new openfl_geom_Point(x, y);
            if (this.__hitTest(x, y, true, stack, true, this)) target = stack[stack.length - 1];
            else {
                target = this;
                stack = [this];
            }
            if (target == null) target = this;
            var clickType = null;
            switch (type) {
            case "mouseDown":
                if (target.get_tabEnabled()) this.set_focus(target);
                else this.set_focus(null);
                this.__mouseDownLeft = target;
                break;
            case "middleMouseDown":
                this.__mouseDownMiddle = target;
                break;
            case "rightMouseDown":
                this.__mouseDownRight = target;
                break;
            case "mouseUp":
                if (this.__mouseDownLeft == target) clickType = "click";
                this.__mouseDownLeft = null;
                break;
            case "middleMouseUp":
                if (this.__mouseDownMiddle == target) clickType = "middleClick";
                this.__mouseDownMiddle = null;
                break;
            case "rightMouseUp":
                if (this.__mouseDownRight == target) clickType = "rightClick";
                this.__mouseDownRight = null;
                break;
            default:
            }
            this.__fireEvent(openfl_events_MouseEvent.__create(type, button, this.__mouseX, this.__mouseY, target == this ? targetPoint: target.globalToLocal(targetPoint), target), stack);
            if (clickType != null) {
                this.__fireEvent(openfl_events_MouseEvent.__create(clickType, button, this.__mouseX, this.__mouseY, target == this ? targetPoint: target.globalToLocal(targetPoint), target), stack);
                if (type == "mouseUp" && (js_Boot.__cast(target, openfl_display_InteractiveObject)).doubleClickEnabled) {
                    var currentTime = openfl_Lib.getTimer();
                    if (currentTime - this.__lastClickTime < 500) {
                        this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick", button, this.__mouseX, this.__mouseY, target == this ? targetPoint: target.globalToLocal(targetPoint), target), stack);
                        this.__lastClickTime = 0;
                    } else this.__lastClickTime = currentTime;
                }
            }
            var cursor = null;
            var _g = 0;
            while (_g < stack.length) {
                var target1 = stack[_g]; ++_g;
                cursor = target1.__getCursor();
                if (cursor != null) {
                    lime_ui_Mouse.set_cursor(cursor);
                    break;
                }
            }
            if (cursor == null) lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
            var event;
            var localPoint;
            var _g1 = 0;
            var _g11 = this.__mouseOutStack;
            while (_g1 < _g11.length) {
                var target2 = _g11[_g1]; ++_g1;
                if (HxOverrides.indexOf(stack, target2, 0) == -1) {
                    HxOverrides.remove(this.__mouseOutStack, target2);
                    localPoint = target2.globalToLocal(targetPoint);
                    event = openfl_events_MouseEvent.__create("mouseOut", button, this.__mouseX, this.__mouseY, localPoint, target2);
                    event.bubbles = false;
                    target2.__dispatchEvent(event);
                }
            }
            var _g2 = 0;
            while (_g2 < stack.length) {
                var target3 = stack[_g2]; ++_g2;
                if (HxOverrides.indexOf(this.__mouseOutStack, target3, 0) == -1) {
                    if (target3.hasEventListener("mouseOver")) {
                        localPoint = target3.globalToLocal(targetPoint);
                        event = openfl_events_MouseEvent.__create("mouseOver", button, this.__mouseX, this.__mouseY, localPoint, target3);
                        event.bubbles = false;
                        target3.__dispatchEvent(event);
                    }
                    if (target3.hasEventListener("mouseOut")) this.__mouseOutStack.push(target3);
                }
            }
            if (this.__dragObject != null) this.__drag(targetPoint);
        },
        __onMouseWheel: function(deltaX, deltaY) {
            var x = this.__mouseX;
            var y = this.__mouseY;
            var stack = [];
            if (!this.__hitTest(x, y, false, stack, true, this)) stack = [this];
            var target = stack[stack.length - 1];
            var targetPoint = new openfl_geom_Point(x, y);
            var delta = deltaY | 0;
            this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel", 0, this.__mouseX, this.__mouseY, target == this ? targetPoint: target.globalToLocal(targetPoint), target, delta), stack);
        },
        __onTouch: function(type, touch) {
            var point = new openfl_geom_Point(touch.x * this.stageWidth, touch.y * this.stageHeight);
            this.__mouseX = point.x;
            this.__mouseY = point.y;
            var __stack = [];
            if (this.__hitTest(this.__mouseX, this.__mouseY, false, __stack, true, this)) {
                var target = __stack[__stack.length - 1];
                if (target == null) target = this;
                var localPoint = target.globalToLocal(point);
                var touchEvent = openfl_events_TouchEvent.__create(type, null, this.__mouseX, this.__mouseY, localPoint, target);
                touchEvent.touchPointID = touch.id;
                touchEvent.isPrimaryTouchPoint = true;
                this.__fireEvent(touchEvent, __stack);
            } else {
                var touchEvent1 = openfl_events_TouchEvent.__create(type, null, this.__mouseX, this.__mouseY, point, this);
                touchEvent1.touchPointID = touch.id;
                touchEvent1.isPrimaryTouchPoint = true;
                this.__fireEvent(touchEvent1, [this.stage]);
            }
        },
        __resize: function() {},
        __startDrag: function(sprite, lockCenter, bounds) {
            if (bounds == null) this.__dragBounds = null;
            else this.__dragBounds = bounds.clone();
            this.__dragObject = sprite;
            if (this.__dragObject != null) {
                if (lockCenter) {
                    this.__dragOffsetX = -this.__dragObject.get_width() / 2;
                    this.__dragOffsetY = -this.__dragObject.get_height() / 2;
                } else {
                    var mouse = new openfl_geom_Point(this.get_mouseX(), this.get_mouseY());
                    var parent = this.__dragObject.parent;
                    if (parent != null) mouse = parent.globalToLocal(mouse);
                    this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
                    this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
                }
            }
        },
        __stopDrag: function(sprite) {
            this.__dragBounds = null;
            this.__dragObject = null;
        },
        __update: function(transformOnly, updateChildren, maskGrahpics) {
            if (transformOnly) {
                if (openfl_display_DisplayObject.__worldTransformDirty > 0) {
                    openfl_display_DisplayObjectContainer.prototype.__update.call(this, true, updateChildren, maskGrahpics);
                    if (updateChildren) {
                        openfl_display_DisplayObject.__worldTransformDirty = 0;
                        this.__dirty = true;
                    }
                }
            } else if (openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
                openfl_display_DisplayObjectContainer.prototype.__update.call(this, false, updateChildren, maskGrahpics);
                if (updateChildren) {
                    openfl_display_DisplayObject.__worldTransformDirty = 0;
                    openfl_display_DisplayObject.__worldRenderDirty = 0;
                    this.__dirty = false;
                }
            }
        },
        get_mouseX: function() {
            return this.__mouseX;
        },
        get_mouseY: function() {
            return this.__mouseY;
        },
        canvas_onContextLost: function(event) {},
        canvas_onContextRestored: function(event) {},
        get_color: function() {
            return this.__color;
        },
        set_color: function(value) {
            var r = (value & 16711680) >>> 16;
            var g = (value & 65280) >>> 8;
            var b = value & 255;
            this.__colorSplit = [r / 255, g / 255, b / 255];
            this.__colorString = "#" + StringTools.hex(value, 6);
            return this.__color = value;
        },
        get_displayState: function() {
            return this.__displayState;
        },
        set_displayState: function(value) {
            if (this.window != null) switch (value) {
            case 2:
                if (this.window.__fullscreen) {
                    this.window.set_fullscreen(false);
                    this.stageWidth = this.window.__width * this.window.__scale | 0;
                    this.stageHeight = this.window.__height * this.window.__scale | 0;
                    this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen", false, false, false, true));
                }
                break;
            default:
                if (!this.window.__fullscreen) {
                    this.window.set_fullscreen(true);
                    this.stageWidth = this.window.__width * this.window.__scale | 0;
                    this.stageHeight = this.window.__height * this.window.__scale | 0;
                    this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen", false, false, true, true));
                }
            }
            return this.__displayState = value;
        },
        get_focus: function() {
            return this.__focus;
        },
        set_focus: function(value) {
            if (value != this.__focus) {
                var oldFocus = this.__focus;
                this.__focus = value;
                if (oldFocus != null) {
                    var event = new openfl_events_FocusEvent("focusOut", true, false, this.__focus, false, 0);
                    this.__stack = [];
                    oldFocus.__getInteractive(this.__stack);
                    this.__stack.reverse();
                    this.__fireEvent(event, this.__stack);
                }
                if (this.__focus != null) {
                    var event1 = new openfl_events_FocusEvent("focusIn", true, false, oldFocus, false, 0);
                    this.__stack = [];
                    value.__getInteractive(this.__stack);
                    this.__stack.reverse();
                    this.__fireEvent(event1, this.__stack);
                }
            }
            return this.__focus;
        },
        get_frameRate: function() {
            if (this.application != null) return this.application.backend.getFrameRate();
            return 0;
        },
        set_frameRate: function(value) {
            if (this.application != null) return this.application.backend.setFrameRate(value);
            return value;
        },
        __class__: openfl_display_Stage,
        __properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__, {
            set_frameRate: "set_frameRate",
            get_frameRate: "get_frameRate",
            set_focus: "set_focus",
            get_focus: "get_focus",
            set_displayState: "set_displayState",
            get_displayState: "get_displayState",
            set_color: "set_color",
            get_color: "get_color"
        })
    });
    var openfl_display_Stage3D = function() {
        openfl_events_EventDispatcher.call(this);
    };
    $hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
    openfl_display_Stage3D.__name__ = ["openfl", "display", "Stage3D"];
    openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
    openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        requestContext3D: function(context3DRenderMode) {
            if (context3DRenderMode == null) context3DRenderMode = "";
            var _g = this;
            if (openfl_display_OpenGLView.get_isSupported()) haxe_Timer.delay(function() {
                _g.context3D = new openfl_display3D_Context3D();
                _g.dispatchEvent(new openfl_events_Event("context3DCreate"));
            },
            1);
            else haxe_Timer.delay(function() {
                _g.dispatchEvent(new openfl_events_ErrorEvent("error"));
            },
            1);
        },
        __class__: openfl_display_Stage3D
    });
    var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
    $hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
    openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl", "display", "_StageAlign", "StageAlign_Impl_"];
    openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
        switch (value) {
        case "bottom":
            return 0;
        case "bottomLeft":
            return 1;
        case "bottomRight":
            return 2;
        case "left":
            return 3;
        case "right":
            return 4;
        case "top":
            return 5;
        case "topLeft":
            return 6;
        case "topRight":
            return 7;
        default:
            return null;
        }
    };
    openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "bottom";
        case 1:
            return "bottomLeft";
        case 2:
            return "bottomRight";
        case 3:
            return "left";
        case 4:
            return "right";
        case 5:
            return "top";
        case 6:
            return "topLeft";
        case 7:
            return "topRight";
        default:
            return null;
        }
    };
    var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
    $hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl", "display", "_StageDisplayState", "StageDisplayState_Impl_"];
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
        switch (value) {
        case "fullScreen":
            return 0;
        case "fullScreenInteractive":
            return 1;
        case "normal":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "fullScreen";
        case 1:
            return "fullScreenInteractive";
        case 2:
            return "normal";
        default:
            return null;
        }
    };
    var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
    $hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
    openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl", "display", "_StageQuality", "StageQuality_Impl_"];
    openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
        switch (value) {
        case "best":
            return 0;
        case "high":
            return 1;
        case "low":
            return 2;
        case "medium":
            return 3;
        default:
            return null;
        }
    };
    openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "best";
        case 1:
            return "high";
        case 2:
            return "low";
        case 3:
            return "medium";
        default:
            return null;
        }
    };
    var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
    $hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl", "display", "_StageScaleMode", "StageScaleMode_Impl_"];
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
        switch (value) {
        case "exactFit":
            return 0;
        case "noBorder":
            return 1;
        case "noScale":
            return 2;
        case "showAll":
            return 3;
        default:
            return null;
        }
    };
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "exactFit";
        case 1:
            return "noBorder";
        case 2:
            return "noScale";
        case 3:
            return "showAll";
        default:
            return null;
        }
    };
    var openfl_display_Tilesheet = function(image) {
        this.__bitmap = image;
        this.__centerPoints = [];
        this.__tileRects = [];
        this.__tileUVs = [];
        this.__rectTile = new openfl_geom_Rectangle();
        this.__rectUV = new openfl_geom_Rectangle();
        this.__point = new openfl_geom_Point();
    };
    $hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
    openfl_display_Tilesheet.__name__ = ["openfl", "display", "Tilesheet"];
    openfl_display_Tilesheet.prototype = {
        addTileRect: function(rectangle, centerPoint) {
            this.__tileRects.push(rectangle);
            if (centerPoint == null) centerPoint = openfl_display_Tilesheet.__defaultPoint;
            this.__centerPoints.push(centerPoint);
            this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width, rectangle.get_top() / this.__bitmap.height, rectangle.get_right() / this.__bitmap.width, rectangle.get_bottom() / this.__bitmap.height));
            return this.__tileRects.length - 1;
        },
        drawTiles: function(graphics, tileData, smooth, flags, count) {
            if (count == null) count = -1;
            if (flags == null) flags = 0;
            if (smooth == null) smooth = false;
            graphics.drawTiles(this, tileData, smooth, flags, null, count);
        },
        getTileCenter: function(index) {
            return this.__centerPoints[index];
        },
        getTileRect: function(index) {
            return this.__tileRects[index];
        },
        getTileUVs: function(index) {
            return this.__tileUVs[index];
        },
        __class__: openfl_display_Tilesheet
    };
    var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
    $hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl", "display", "_TriangleCulling", "TriangleCulling_Impl_"];
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
        switch (value) {
        case "negative":
            return 0;
        case "none":
            return 1;
        case "positive":
            return 2;
        default:
            return null;
        }
    };
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "negative";
        case 1:
            return "none";
        case 2:
            return "positive";
        default:
            return null;
        }
    };
    var openfl_display_Window = function(config) {
        lime_ui_Window.call(this, config);
    };
    $hxClasses["openfl.display.Window"] = openfl_display_Window;
    openfl_display_Window.__name__ = ["openfl", "display", "Window"];
    openfl_display_Window.__super__ = lime_ui_Window;
    openfl_display_Window.prototype = $extend(lime_ui_Window.prototype, {
        create: function(application) {
            lime_ui_Window.prototype.create.call(this, application);
            this.stage = new openfl_display_Stage(this, Object.prototype.hasOwnProperty.call(this.config, "background") ? this.config.background: 16777215);
            application.addModule(this.stage);
        },
        __class__: openfl_display_Window
    });
    var openfl_display3D_Context3D = function() {
        this.disposed = false;
        this.stencilCompareMode = 519;
        this.stencilRef = 0;
        this.stencilReadMask = 255;
        this._yFlip = 1;
        this.vertexBuffersCreated = [];
        this.indexBuffersCreated = [];
        this.programsCreated = [];
        this.texturesCreated = [];
        this.samplerParameters = [];
        var _g1 = 0;
        var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
        while (_g1 < _g) {
            var i = _g1++;
            this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
            this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
            this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
            this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
        }
        var stage = openfl_Lib.current.stage;
        this.ogl = new openfl_display_OpenGLView();
        this.ogl.set_scrollRect(new openfl_geom_Rectangle(0, 0, stage.stageWidth, stage.stageHeight));
        this.scrollRect = this.ogl.get_scrollRect().clone();
        this.ogl.set_width(stage.stageWidth);
        this.ogl.set_height(stage.stageHeight);
        stage.addChildAt(this.ogl, 0);
        lime_graphics_opengl_GL.context.pixelStorei(37440, 1);
        lime_graphics_opengl_GL.context.pixelStorei(37441, 1);
    };
    $hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
    openfl_display3D_Context3D.__name__ = ["openfl", "display3D", "Context3D"];
    openfl_display3D_Context3D.prototype = {
        clear: function(red, green, blue, alpha, depth, stencil, mask) {
            if (mask == null) mask = 17664;
            if (stencil == null) stencil = 0;
            if (depth == null) depth = 1;
            if (alpha == null) alpha = 1;
            if (blue == null) blue = 0;
            if (green == null) green = 0;
            if (red == null) red = 0;
            if (!this.drawing) {
                this.__updateBlendStatus();
                this.drawing = true;
            }
            if (this.scissorRectangle != null) lime_graphics_opengl_GL.context.disable(3089);
            lime_graphics_opengl_GL.context.clearColor(red, green, blue, alpha);
            lime_graphics_opengl_GL.context.clearDepth(depth);
            lime_graphics_opengl_GL.context.clearStencil(stencil);
            lime_graphics_opengl_GL.context.clear(mask);
            if (this.scissorRectangle != null) lime_graphics_opengl_GL.context.enable(3089);
        },
        configureBackBuffer: function(width, height, antiAlias, enableDepthAndStencil) {
            if (enableDepthAndStencil == null) enableDepthAndStencil = true;
            this.backBufferDepthAndStencil = enableDepthAndStencil;
            this.updateDepthAndStencilState();
            this.setBackBufferViewPort(null, null, width, height);
            this.updateScissorRectangle();
        },
        setBackBufferViewPort: function(x, y, width, height) {
            if (x == null) x = this.scrollRect.x | 0;
            if (y == null) y = this.scrollRect.y | 0;
            if (width == null) width = this.scrollRect.width | 0;
            if (height == null) height = this.scrollRect.height | 0;
            this.scrollRect.x = x;
            this.scrollRect.y = y;
            this.scrollRect.width = width;
            this.scrollRect.height = height;
            this.ogl.set_width(x + width);
            this.ogl.set_height(y + height);
            this.updateBackBufferViewPort();
        },
        updateBackBufferViewPort: function() {
            if (!this.renderToTexture) lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0, this.scrollRect.y | 0, this.scrollRect.width | 0, this.scrollRect.height | 0);
        },
        updateDepthAndStencilState: function() {
            var depthAndStencil;
            if (this.renderToTexture) depthAndStencil = this.rttDepthAndStencil;
            else depthAndStencil = this.backBufferDepthAndStencil;
            if (depthAndStencil) {
                if (lime_app_Application.current.windows[0].config.depthBuffer) lime_graphics_opengl_GL.context.enable(2929);
                if (lime_app_Application.current.windows[0].config.stencilBuffer) lime_graphics_opengl_GL.context.enable(2960);
            } else {
                lime_graphics_opengl_GL.context.disable(2929);
                lime_graphics_opengl_GL.context.disable(2960);
            }
        },
        createCubeTexture: function(size, format, optimizeForRenderToTexture, streamingLevels) {
            if (streamingLevels == null) streamingLevels = 0;
            var texture = new openfl_display3D_textures_CubeTexture(this, lime_graphics_opengl_GL.context.createTexture(), size);
            this.texturesCreated.push(texture);
            return texture;
        },
        createIndexBuffer: function(numIndices, bufferUsage) {
            if (bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
            var indexBuffer = new openfl_display3D_IndexBuffer3D(this, lime_graphics_opengl_GL.context.createBuffer(), numIndices, bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW ? 35044 : 35048);
            this.indexBuffersCreated.push(indexBuffer);
            return indexBuffer;
        },
        createProgram: function() {
            var program = new openfl_display3D_Program3D(this, lime_graphics_opengl_GL.context.createProgram());
            this.programsCreated.push(program);
            return program;
        },
        createRectangleTexture: function(width, height, format, optimizeForRenderToTexture) {
            var texture = new openfl_display3D_textures_RectangleTexture(this, lime_graphics_opengl_GL.context.createTexture(), optimizeForRenderToTexture, width, height);
            this.texturesCreated.push(texture);
            return texture;
        },
        createTexture: function(width, height, format, optimizeForRenderToTexture, streamingLevels) {
            if (streamingLevels == null) streamingLevels = 0;
            var texture = new openfl_display3D_textures_Texture(this, lime_graphics_opengl_GL.context.createTexture(), optimizeForRenderToTexture, width, height);
            this.texturesCreated.push(texture);
            return texture;
        },
        createVertexBuffer: function(numVertices, data32PerVertex, bufferUsage) {
            if (bufferUsage == null) bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
            var vertexBuffer = new openfl_display3D_VertexBuffer3D(this, lime_graphics_opengl_GL.context.createBuffer(), numVertices, data32PerVertex, bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW ? 35044 : 35048);
            this.vertexBuffersCreated.push(vertexBuffer);
            return vertexBuffer;
        },
        __deleteTexture: function(texture) {
            if (texture.glTexture == null) return;
            HxOverrides.remove(this.texturesCreated, texture);
            lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
            texture.glTexture = null;
        },
        __deleteVertexBuffer: function(buffer) {
            if (buffer.glBuffer == null) return;
            HxOverrides.remove(this.vertexBuffersCreated, buffer);
            lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
            buffer.glBuffer = null;
        },
        __deleteIndexBuffer: function(buffer) {
            if (buffer.glBuffer == null) return;
            HxOverrides.remove(this.indexBuffersCreated, buffer);
            lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
            buffer.glBuffer = null;
        },
        __deleteProgram: function(program) {
            if (program.glProgram == null) return;
            HxOverrides.remove(this.programsCreated, program);
            lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
            program.glProgram = null;
        },
        dispose: function() {
            var _g = 0;
            var _g1 = this.vertexBuffersCreated;
            while (_g < _g1.length) {
                var vertexBuffer = _g1[_g]; ++_g;
                vertexBuffer.dispose();
            }
            this.vertexBuffersCreated = null;
            var _g2 = 0;
            var _g11 = this.indexBuffersCreated;
            while (_g2 < _g11.length) {
                var indexBuffer = _g11[_g2]; ++_g2;
                indexBuffer.dispose();
            }
            this.indexBuffersCreated = null;
            var _g3 = 0;
            var _g12 = this.programsCreated;
            while (_g3 < _g12.length) {
                var program = _g12[_g3]; ++_g3;
                program.dispose();
            }
            this.programsCreated = null;
            this.samplerParameters = null;
            var _g4 = 0;
            var _g13 = this.texturesCreated;
            while (_g4 < _g13.length) {
                var texture = _g13[_g4]; ++_g4;
                texture.dispose();
            }
            this.texturesCreated = null;
            if (this.framebuffer != null) {
                lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
                this.framebuffer = null;
            }
            if (this.renderbuffer != null) {
                lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
                this.renderbuffer = null;
            }
            this.disposed = true;
        },
        drawToBitmapData: function(destination) {},
        drawTriangles: function(indexBuffer, firstIndex, numTriangles) {
            if (numTriangles == null) numTriangles = -1;
            if (firstIndex == null) firstIndex = 0;
            var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, "yflip");
            lime_graphics_opengl_GL.context.uniform1f(location, this._yFlip);
            if (!this.drawing) throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
            var numIndices;
            if (numTriangles == -1) numIndices = indexBuffer.numIndices;
            else numIndices = numTriangles * 3;
            var byteOffset = firstIndex * 2;
            lime_graphics_opengl_GL.context.bindBuffer(34963, indexBuffer.glBuffer);
            lime_graphics_opengl_GL.context.drawElements(4, numIndices, 5123, byteOffset);
        },
        present: function() {
            this.drawing = false;
            lime_graphics_opengl_GL.context.useProgram(null);
            lime_graphics_opengl_GL.context.bindBuffer(34962, null);
            lime_graphics_opengl_GL.context.disable(2884);
            if (this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160, null);
            if (this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161, null);
        },
        removeRenderMethod: function(func) {
            this.ogl.set_render(null);
        },
        setBlendFactors: function(sourceFactor, destinationFactor) {
            this.blendEnabled = true;
            this.blendSourceFactor = sourceFactor;
            this.blendDestinationFactor = destinationFactor;
            this.__updateBlendStatus();
        },
        setColorMask: function(red, green, blue, alpha) {
            lime_graphics_opengl_GL.context.colorMask(red, green, blue, alpha);
        },
        setCulling: function(triangleFaceToCull) {
            if (triangleFaceToCull == 0) lime_graphics_opengl_GL.context.disable(2884);
            else {
                lime_graphics_opengl_GL.context.enable(2884);
                switch (triangleFaceToCull) {
                case 1029:
                    lime_graphics_opengl_GL.context.cullFace(1029);
                    break;
                case 1028:
                    lime_graphics_opengl_GL.context.cullFace(1028);
                    break;
                case 1032:
                    lime_graphics_opengl_GL.context.cullFace(1032);
                    break;
                default:
                    throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
                }
            }
            switch (triangleFaceToCull) {
            case 1029:
                this._yFlip = -1;
                break;
            case 1028:
                this._yFlip = 1;
                break;
            case 1032:
                this._yFlip = 1;
                break;
            case 0:
                this._yFlip = 1;
                break;
            default:
                throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
            }
        },
        setDepthTest: function(depthMask, passCompareMode) {
            lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
            lime_graphics_opengl_GL.context.depthMask(depthMask);
        },
        setGLSLProgramConstantsFromByteArray: function(locationName, data, byteArrayOffset) {
            if (byteArrayOffset == null) byteArrayOffset = 0;
            data.position = byteArrayOffset;
            var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
            lime_graphics_opengl_GL.uniform4f(location, data.readFloat(), data.readFloat(), data.readFloat(), data.readFloat());
        },
        setGLSLProgramConstantsFromMatrix: function(locationName, matrix, transposedMatrix) {
            if (transposedMatrix == null) transposedMatrix = false;
            var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
            lime_graphics_opengl_GL.uniformMatrix4fv(location, !transposedMatrix, (function($this) {
                var $r;
                var array; {
                    var this2 = matrix.rawData;
                    var value = [];
                    var _g1 = 0;
                    var _g = this2.data.length;
                    while (_g1 < _g) {
                        var i = _g1++;
                        value.push(this2.data[i]);
                    }
                    array = value;
                }
                var this1;
                if (array != null) this1 = new Float32Array(array);
                else this1 = null;
                $r = this1;
                return $r;
            } (this)));
        },
        setGLSLProgramConstantsFromVector4: function(locationName, data, startIndex) {
            if (startIndex == null) startIndex = 0;
            var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
            lime_graphics_opengl_GL.context.uniform4f(location, data[startIndex], data[startIndex + 1], data[startIndex + 2], data[startIndex + 3]);
        },
        setGLSLTextureAt: function(locationName, texture, textureIndex) {
            switch (textureIndex) {
            case 0:
                lime_graphics_opengl_GL.context.activeTexture(33984);
                break;
            case 1:
                lime_graphics_opengl_GL.context.activeTexture(33985);
                break;
            case 2:
                lime_graphics_opengl_GL.context.activeTexture(33986);
                break;
            case 3:
                lime_graphics_opengl_GL.context.activeTexture(33987);
                break;
            case 4:
                lime_graphics_opengl_GL.context.activeTexture(33988);
                break;
            case 5:
                lime_graphics_opengl_GL.context.activeTexture(33989);
                break;
            case 6:
                lime_graphics_opengl_GL.context.activeTexture(33990);
                break;
            case 7:
                lime_graphics_opengl_GL.context.activeTexture(33991);
                break;
            default:
                throw new js__$Boot_HaxeError("Does not support texture8 or more");
            }
            if (texture == null) {
                lime_graphics_opengl_GL.context.bindTexture(3553, null);
                lime_graphics_opengl_GL.context.bindTexture(34067, null);
                return;
            }
            var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram, locationName);
            if (js_Boot.__instanceof(texture, openfl_display3D_textures_Texture)) {
                lime_graphics_opengl_GL.bindTexture(3553, (js_Boot.__cast(texture, openfl_display3D_textures_Texture)).glTexture);
                lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
            } else if (js_Boot.__instanceof(texture, openfl_display3D_textures_RectangleTexture)) {
                lime_graphics_opengl_GL.bindTexture(3553, (js_Boot.__cast(texture, openfl_display3D_textures_RectangleTexture)).glTexture);
                lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
            } else if (js_Boot.__instanceof(texture, openfl_display3D_textures_CubeTexture)) {
                lime_graphics_opengl_GL.bindTexture(34067, (js_Boot.__cast(texture, openfl_display3D_textures_CubeTexture)).glTexture);
                lime_graphics_opengl_GL.context.uniform1i(location, textureIndex);
            } else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null ? null: js_Boot.getClass(texture)) + " not supported yet");
            var parameters = this.samplerParameters[textureIndex];
            if (parameters != null) this.setTextureParameters(texture, parameters.wrap, parameters.filter, parameters.mipfilter);
            else this.setTextureParameters(texture, openfl_display3D_Context3DWrapMode.CLAMP, openfl_display3D_Context3DTextureFilter.NEAREST, openfl_display3D_Context3DMipFilter.MIPNONE);
        },
        setGLSLVertexBufferAt: function(locationName, buffer, bufferOffset, format) {
            if (bufferOffset == null) bufferOffset = 0;
            var location;
            if (this.currentProgram != null && this.currentProgram.glProgram != null) location = lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram, locationName);
            else location = -1;
            if (location == -1) return;
            if (buffer == null) {
                if (location > -1) lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
                return;
            }
            lime_graphics_opengl_GL.context.bindBuffer(34962, buffer.glBuffer);
            var dimension = 4;
            var type = 5126;
            var numBytes = 4;
            if (format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
                dimension = 4;
                type = 5126;
                numBytes = 4;
            } else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
                dimension = 1;
                type = 5126;
                numBytes = 4;
            } else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
                dimension = 2;
                type = 5126;
                numBytes = 4;
            } else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
                dimension = 3;
                type = 5126;
                numBytes = 4;
            } else if (format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
                dimension = 4;
                type = 5126;
                numBytes = 4;
            } else throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
            lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
            lime_graphics_opengl_GL.context.vertexAttribPointer(location, dimension, type, false, buffer.data32PerVertex * numBytes, bufferOffset * numBytes);
        },
        setProgram: function(program3D) {
            var glProgram = null;
            if (program3D != null) glProgram = program3D.glProgram;
            lime_graphics_opengl_GL.context.useProgram(glProgram);
            this.currentProgram = program3D;
        },
        setProgramConstantsFromByteArray: function(programType, firstRegister, numRegisters, data, byteArrayOffset) {
            data.position = byteArrayOffset;
            var _g = 0;
            while (_g < numRegisters) {
                var i = _g++;
                var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType, firstRegister + i);
                this.setGLSLProgramConstantsFromByteArray(locationName, data);
            }
        },
        setProgramConstantsFromMatrix: function(programType, firstRegister, matrix, transposedMatrix) {
            if (transposedMatrix == null) transposedMatrix = false;
            var d = matrix.rawData;
            if (transposedMatrix) {
                this.setProgramConstantsFromVector(programType, firstRegister, [d.data[0], d.data[4], d.data[8], d.data[12]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 1, [d.data[1], d.data[5], d.data[9], d.data[13]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 2, [d.data[2], d.data[6], d.data[10], d.data[14]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 3, [d.data[3], d.data[7], d.data[11], d.data[15]], 1);
            } else {
                this.setProgramConstantsFromVector(programType, firstRegister, [d.data[0], d.data[1], d.data[2], d.data[3]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 1, [d.data[4], d.data[5], d.data[6], d.data[7]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 2, [d.data[8], d.data[9], d.data[10], d.data[11]], 1);
                this.setProgramConstantsFromVector(programType, firstRegister + 3, [d.data[12], d.data[13], d.data[14], d.data[15]], 1);
            }
        },
        setProgramConstantsFromVector: function(programType, firstRegister, data, numRegisters) {
            if (numRegisters == null) numRegisters = 1;
            var _g = 0;
            while (_g < numRegisters) {
                var i = _g++;
                var currentIndex = i * 4;
                var locationName = this.__getUniformLocationNameFromAgalRegisterIndex(programType, firstRegister + i);
                this.setGLSLProgramConstantsFromVector4(locationName, data, currentIndex);
            }
        },
        setRenderMethod: function(func) {
            this.ogl.set_render(function(rect) {
                func(null);
            });
        },
        setRenderToBackBuffer: function() {
            lime_graphics_opengl_GL.context.disable(2929);
            lime_graphics_opengl_GL.context.disable(2960);
            lime_graphics_opengl_GL.context.disable(3089);
            lime_graphics_opengl_GL.context.bindFramebuffer(36160, null);
            if (this.framebuffer != null) lime_graphics_opengl_GL.context.bindFramebuffer(36160, null);
            if (this.renderbuffer != null) lime_graphics_opengl_GL.context.bindRenderbuffer(36161, null);
            this.renderToTexture = false;
            this.updateBackBufferViewPort();
            this.updateScissorRectangle();
            this.updateDepthAndStencilState();
        },
        setRenderToTexture: function(texture, enableDepthAndStencil, antiAlias, surfaceSelector) {
            if (surfaceSelector == null) surfaceSelector = 0;
            if (antiAlias == null) antiAlias = 0;
            if (enableDepthAndStencil == null) enableDepthAndStencil = false;
            if (this.framebuffer == null) this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
            lime_graphics_opengl_GL.context.bindFramebuffer(36160, this.framebuffer);
            if (this.renderbuffer == null) this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
            lime_graphics_opengl_GL.context.bindRenderbuffer(36161, this.renderbuffer);
            if (enableDepthAndStencil) lime_graphics_opengl_GL.context.renderbufferStorage(36161, 34041, texture.width, texture.height);
            lime_graphics_opengl_GL.context.framebufferTexture2D(36160, 36064, 3553, texture.glTexture, 0);
            lime_graphics_opengl_GL.context.renderbufferStorage(36161, 34041, texture.width, texture.height);
            lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160, 33306, 36161, this.renderbuffer);
            if (enableDepthAndStencil) {
                lime_graphics_opengl_GL.context.enable(2929);
                lime_graphics_opengl_GL.context.enable(2960);
            }
            lime_graphics_opengl_GL.context.bindTexture(3553, texture.glTexture);
            lime_graphics_opengl_GL.context.texImage2D(3553, 0, 6408, texture.width, texture.height, 0, 6408, 5121, null);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9985);
            lime_graphics_opengl_GL.context.viewport(0, 0, texture.width, texture.height);
            this.renderToTexture = true;
            this.rttDepthAndStencil = enableDepthAndStencil;
            this.rttWidth = texture.width;
            this.rttHeight = texture.height;
            this.updateScissorRectangle();
            this.updateDepthAndStencilState();
        },
        setSamplerStateAt: function(sampler, wrap, filter, mipfilter) {
            if (0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
                this.samplerParameters[sampler].wrap = wrap;
                this.samplerParameters[sampler].filter = filter;
                this.samplerParameters[sampler].mipfilter = mipfilter;
            } else throw new js__$Boot_HaxeError("Sampler is out of bounds.");
        },
        setScissorRectangle: function(rectangle) {
            this.scissorRectangle = rectangle;
            if (rectangle == null) {
                lime_graphics_opengl_GL.context.disable(3089);
                return;
            }
            lime_graphics_opengl_GL.context.enable(3089);
            this.updateScissorRectangle();
        },
        updateScissorRectangle: function() {
            if (this.scissorRectangle == null) return;
            var height;
            if (this.renderToTexture) height = this.rttHeight;
            else height = this.scrollRect.height | 0;
            lime_graphics_opengl_GL.context.scissor(this.scissorRectangle.x | 0, height - (this.scissorRectangle.y | 0) - (this.scissorRectangle.height | 0) | 0, this.scissorRectangle.width | 0, this.scissorRectangle.height | 0);
        },
        setStencilActions: function(triangleFace, compareMode, actionOnBothPass, actionOnDepthFail, actionOnDepthPassStencilFail) {
            this.stencilCompareMode = compareMode;
            lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass, actionOnDepthFail, actionOnDepthPassStencilFail);
            lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode, this.stencilRef, this.stencilReadMask);
        },
        setStencilReferenceValue: function(referenceValue, readMask, writeMask) {
            if (writeMask == null) writeMask = 255;
            if (readMask == null) readMask = 255;
            this.stencilReadMask = readMask;
            this.stencilRef = referenceValue;
            lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode, this.stencilRef, this.stencilReadMask);
            lime_graphics_opengl_GL.context.stencilMask(writeMask);
        },
        setTextureAt: function(sampler, texture) {
            var locationName = "fs" + sampler;
            this.setGLSLTextureAt(locationName, texture, sampler);
        },
        setTextureParameters: function(texture, wrap, filter, mipfilter) {
            if (!openfl_display3D_Context3D.anisotropySupportTested) {
                var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
                if (ext == null || Reflect.field(ext, "MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
                if (ext == null || Reflect.field(ext, "MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                openfl_display3D_Context3D.supportsAnisotropy = ext != null;
                if (openfl_display3D_Context3D.supportsAnisotropy) {
                    openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
                    lime_graphics_opengl_GL.context.texParameteri(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, openfl_display3D_Context3D.maxSupportedAnisotropy);
                }
                openfl_display3D_Context3D.anisotropySupportTested = true;
            }
            if (js_Boot.__instanceof(texture, openfl_display3D_textures_Texture)) {
                switch (wrap[1]) {
                case 0:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
                    break;
                case 1:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 10497);
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 10497);
                    break;
                }
                switch (filter[1]) {
                case 4:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 5:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 0:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
                    break;
                case 1:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
                    break;
                case 2:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
                    break;
                case 3:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
                    break;
                }
                switch (mipfilter[1]) {
                case 0:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9987);
                    break;
                case 1:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9984);
                    break;
                case 2:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
                    break;
                }
                var tex = texture;
                if (mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
                    lime_graphics_opengl_GL.context.generateMipmap(3553);
                    tex.mipmapsGenerated = true;
                }
            } else if (js_Boot.__instanceof(texture, openfl_display3D_textures_RectangleTexture)) {
                lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
                lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
                switch (filter[1]) {
                case 4:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9729);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 5:
                    lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 0:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
                    break;
                case 1:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
                    break;
                case 2:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
                    break;
                case 3:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(3553, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
                    break;
                }
                lime_graphics_opengl_GL.context.texParameteri(3553, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
            } else if (js_Boot.__instanceof(texture, openfl_display3D_textures_CubeTexture)) {
                switch (wrap[1]) {
                case 0:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10242, 33071);
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10243, 33071);
                    break;
                case 1:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10242, 10497);
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10243, 10497);
                    break;
                }
                switch (filter[1]) {
                case 4:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10240, 9729);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 5:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10240, 9728);
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.context.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, 1);
                    break;
                case 0:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(2, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 2);
                    break;
                case 1:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(4, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 4);
                    break;
                case 2:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(8, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 8);
                    break;
                case 3:
                    if (openfl_display3D_Context3D.supportsAnisotropy) lime_graphics_opengl_GL.texParameterf(34067, openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT, _$UInt_UInt_$Impl_$.gt(16, openfl_display3D_Context3D.maxSupportedAnisotropy) ? _$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy) : 16);
                    break;
                }
                switch (mipfilter[1]) {
                case 0:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10241, 9987);
                    break;
                case 1:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10241, 9984);
                    break;
                case 2:
                    lime_graphics_opengl_GL.context.texParameteri(34067, 10241, filter == openfl_display3D_Context3DTextureFilter.NEAREST ? 9728 : 9729);
                    break;
                }
                var cubetex = texture;
                if (mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
                    lime_graphics_opengl_GL.context.generateMipmap(34067);
                    cubetex.mipmapsGenerated = true;
                }
            } else throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null ? null: js_Boot.getClass(texture)) + " not supported yet");
        },
        setVertexBufferAt: function(index, buffer, bufferOffset, format) {
            if (bufferOffset == null) bufferOffset = 0;
            var locationName = "va" + index;
            this.setGLSLVertexBufferAt(locationName, buffer, bufferOffset, format);
        },
        __getUniformLocationNameFromAgalRegisterIndex: function(programType, firstRegister) {
            if (programType == openfl_display3D_Context3DProgramType.VERTEX) return "vc" + firstRegister;
            else if (programType == openfl_display3D_Context3DProgramType.FRAGMENT) return "fc" + firstRegister;
            throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
        },
        __updateBlendStatus: function() {
            if (this.blendEnabled) {
                lime_graphics_opengl_GL.context.enable(3042);
                lime_graphics_opengl_GL.context.blendEquation(32774);
                lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor, this.blendDestinationFactor);
            } else lime_graphics_opengl_GL.context.disable(3042);
        },
        __class__: openfl_display3D_Context3D
    };
    var openfl_display3D__$Context3D_SamplerState = function() {};
    $hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
    openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl", "display3D", "_Context3D", "SamplerState"];
    openfl_display3D__$Context3D_SamplerState.prototype = {
        __class__: openfl_display3D__$Context3D_SamplerState
    };
    var openfl_display3D_Context3DBufferUsage = $hxClasses["openfl.display3D.Context3DBufferUsage"] = {
        __ename__: ["openfl", "display3D", "Context3DBufferUsage"],
        __constructs__: ["STATIC_DRAW", "DYNAMIC_DRAW"]
    };
    openfl_display3D_Context3DBufferUsage.STATIC_DRAW = ["STATIC_DRAW", 0];
    openfl_display3D_Context3DBufferUsage.STATIC_DRAW.toString = $estr;
    openfl_display3D_Context3DBufferUsage.STATIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
    openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = ["DYNAMIC_DRAW", 1];
    openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.toString = $estr;
    openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
    var openfl_display3D_Context3DClearMask = function() {};
    $hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
    openfl_display3D_Context3DClearMask.__name__ = ["openfl", "display3D", "Context3DClearMask"];
    var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
    $hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl", "display3D", "_Context3DCompareMode", "Context3DCompareMode_Impl_"];
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$._new = function(a) {
        return a;
    };
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromInt = function(s) {
        return s;
    };
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toInt = function(this1) {
        return this1;
    };
    var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = {
        __ename__: ["openfl", "display3D", "Context3DMipFilter"],
        __constructs__: ["MIPLINEAR", "MIPNEAREST", "MIPNONE"]
    };
    openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR", 0];
    openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
    openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
    openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST", 1];
    openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
    openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
    openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE", 2];
    openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
    openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
    var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = {
        __ename__: ["openfl", "display3D", "Context3DProgramType"],
        __constructs__: ["VERTEX", "FRAGMENT"]
    };
    openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX", 0];
    openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
    openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
    openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT", 1];
    openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
    openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
    var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = {
        __ename__: ["openfl", "display3D", "Context3DTextureFilter"],
        __constructs__: ["ANISOTROPIC2X", "ANISOTROPIC4X", "ANISOTROPIC8X", "ANISOTROPIC16X", "LINEAR", "NEAREST"]
    };
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X", 0];
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X", 1];
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X", 2];
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X", 3];
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
    openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
    openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR", 4];
    openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
    openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
    openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST", 5];
    openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
    openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
    var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = {
        __ename__: ["openfl", "display3D", "Context3DTextureFormat"],
        __constructs__: ["BGRA", "COMPRESSED", "COMPRESSED_ALPHA"]
    };
    openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA", 0];
    openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
    openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
    openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED", 1];
    openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
    openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
    openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA", 2];
    openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
    openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
    var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
    $hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl", "display3D", "_Context3DTriangleFace", "Context3DTriangleFace_Impl_"];
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
        return a;
    };
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
        return s;
    };
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
        return this1;
    };
    var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = {
        __ename__: ["openfl", "display3D", "Context3DVertexBufferFormat"],
        __constructs__: ["BYTES_4", "FLOAT_1", "FLOAT_2", "FLOAT_3", "FLOAT_4"]
    };
    openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4", 0];
    openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
    openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1", 1];
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2", 2];
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3", 3];
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4", 4];
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
    openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
    var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = {
        __ename__: ["openfl", "display3D", "Context3DWrapMode"],
        __constructs__: ["CLAMP", "REPEAT"]
    };
    openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP", 0];
    openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
    openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
    openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT", 1];
    openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
    openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
    var openfl_display3D_IndexBuffer3D = function(context, glBuffer, numIndices, bufferUsage) {
        this.context = context;
        this.glBuffer = glBuffer;
        this.numIndices = numIndices;
        this.bufferUsage = bufferUsage;
    };
    $hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
    openfl_display3D_IndexBuffer3D.__name__ = ["openfl", "display3D", "IndexBuffer3D"];
    openfl_display3D_IndexBuffer3D.prototype = {
        dispose: function() {
            this.context.__deleteIndexBuffer(this);
        },
        uploadFromByteArray: function(byteArray, byteArrayOffset, startOffset, count) {
            var bytesPerIndex = 2;
            lime_graphics_opengl_GL.context.bindBuffer(34963, this.glBuffer);
            var length = count * bytesPerIndex;
            var offset = byteArrayOffset + startOffset * bytesPerIndex;
            var indices;
            var this1;
            if (length != null) this1 = new Int16Array(length);
            else this1 = null;
            indices = this1;
            byteArray.position = offset;
            var i = 0;
            while (byteArray.position < length + offset) {
                var val = byteArray.readUnsignedByte();
                indices[i] = val;
                i++;
            }
            lime_graphics_opengl_GL.context.bufferData(34963, indices, this.bufferUsage);
        },
        uploadFromVector: function(data, startOffset, count) {
            lime_graphics_opengl_GL.context.bindBuffer(34963, this.glBuffer);
            var indices;
            var this1;
            if (count != null) this1 = new Int16Array(count);
            else this1 = null;
            indices = this1;
            var _g1 = startOffset;
            var _g = startOffset + count;
            while (_g1 < _g) {
                var i = _g1++;
                indices[i] = data.data[i];
            }
            lime_graphics_opengl_GL.context.bufferData(34963, indices, this.bufferUsage);
        },
        uploadFromInt16Array: function(data) {
            lime_graphics_opengl_GL.context.bindBuffer(34963, this.glBuffer);
            lime_graphics_opengl_GL.context.bufferData(34963, data, this.bufferUsage);
        },
        __class__: openfl_display3D_IndexBuffer3D
    };
    var openfl_display3D_Program3D = function(context, program) {
        this.context = context;
        this.glProgram = program;
    };
    $hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
    openfl_display3D_Program3D.__name__ = ["openfl", "display3D", "Program3D"];
    openfl_display3D_Program3D.prototype = {
        dispose: function() {
            this.context.__deleteProgram(this);
        },
        upload: function(vertexShader, fragmentShader) {
            lime_graphics_opengl_GL.context.attachShader(this.glProgram, vertexShader);
            lime_graphics_opengl_GL.context.attachShader(this.glProgram, fragmentShader);
            lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
            if (lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram, 35714) == 0) {
                var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
                if (result != "") throw new js__$Boot_HaxeError(result);
            }
        },
        __class__: openfl_display3D_Program3D
    };
    var openfl_display3D_VertexBuffer3D = function(context, glBuffer, numVertices, data32PerVertex, bufferUsage) {
        this.context = context;
        this.glBuffer = glBuffer;
        this.numVertices = numVertices;
        this.data32PerVertex = data32PerVertex;
        this.bufferUsage = bufferUsage;
    };
    $hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
    openfl_display3D_VertexBuffer3D.__name__ = ["openfl", "display3D", "VertexBuffer3D"];
    openfl_display3D_VertexBuffer3D.prototype = {
        dispose: function() {
            this.context.__deleteVertexBuffer(this);
        },
        uploadFromByteArray: function(byteArray, byteArrayOffset, startOffset, count) {
            var bytesPerVertex = this.data32PerVertex * 4;
            lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
            var length = count * bytesPerVertex;
            var offset = byteArrayOffset + startOffset * bytesPerVertex;
            var float32Array;
            var this1;
            if (length != null) this1 = new Float32Array(length);
            else this1 = null;
            float32Array = this1;
            byteArray.position = offset;
            var i = 0;
            while (byteArray.position < length + offset) {
                var val = byteArray.readUnsignedByte();
                float32Array[i] = val;
                i++;
            }
            lime_graphics_opengl_GL.context.bufferData(34962, float32Array, this.bufferUsage);
        },
        uploadFromFloat32Array: function(data) {
            lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
            lime_graphics_opengl_GL.context.bufferData(34962, data, this.bufferUsage);
        },
        uploadFromVector: function(data, startVertex, numVertices) {
            var bytesPerVertex = this.data32PerVertex * 4;
            lime_graphics_opengl_GL.context.bindBuffer(34962, this.glBuffer);
            var length = numVertices * this.data32PerVertex;
            var offset = startVertex;
            var float32Array;
            var this1;
            if (length != null) this1 = new Float32Array(length);
            else this1 = null;
            float32Array = this1;
            var _g1 = startVertex;
            var _g = startVertex + length;
            while (_g1 < _g) {
                var i = _g1++;
                float32Array[i] = data.data[i];
            }
            lime_graphics_opengl_GL.context.bufferData(34962, float32Array, this.bufferUsage);
            float32Array = null;
        },
        __class__: openfl_display3D_VertexBuffer3D
    };
    var openfl_display3D_textures_TextureBase = function(context, glTexture, width, height) {
        if (height == null) height = 0;
        if (width == null) width = 0;
        openfl_events_EventDispatcher.call(this);
        this.context = context;
        this.width = width;
        this.height = height;
        this.glTexture = glTexture;
    };
    $hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
    openfl_display3D_textures_TextureBase.__name__ = ["openfl", "display3D", "textures", "TextureBase"];
    openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
    openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        dispose: function() {
            this.context.__deleteTexture(this);
        },
        __class__: openfl_display3D_textures_TextureBase
    });
    var openfl_display3D_textures_CubeTexture = function(context, glTexture, size) {
        openfl_display3D_textures_TextureBase.call(this, context, glTexture, size, size);
        this.size = size;
        this.mipmapsGenerated = false;
        this._textures = [];
        var _g = 0;
        while (_g < 6) {
            var i = _g++;
            this._textures[i] = lime_graphics_opengl_GL.context.createTexture();
        }
    };
    $hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
    openfl_display3D_textures_CubeTexture.__name__ = ["openfl", "display3D", "textures", "CubeTexture"];
    openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
    openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
        glTextureAt: function(index) {
            return this._textures[index];
        },
        uploadCompressedTextureFromByteArray: function(data, byteArrayOffset, async) {
            if (async == null) async = false;
        },
        uploadFromBitmapData: function(bitmapData, side, miplevel) {
            if (miplevel == null) miplevel = 0;
            var source = bitmapData.image.get_data();
            lime_graphics_opengl_GL.context.bindTexture(34067, this.glTexture);
            switch (side) {
            case 0:
                lime_graphics_opengl_GL.context.texImage2D(34069, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            case 1:
                lime_graphics_opengl_GL.context.texImage2D(34070, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            case 2:
                lime_graphics_opengl_GL.context.texImage2D(34071, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            case 3:
                lime_graphics_opengl_GL.context.texImage2D(34072, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            case 4:
                lime_graphics_opengl_GL.context.texImage2D(34073, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            case 5:
                lime_graphics_opengl_GL.context.texImage2D(34074, miplevel, 6408, bitmapData.width, bitmapData.height, 0, 6408, 5121, source);
                break;
            default:
                throw new js__$Boot_HaxeError("unknown side type");
            }
            lime_graphics_opengl_GL.context.bindTexture(34067, null);
        },
        uploadFromByteArray: function(data, byteArrayOffset, side, miplevel) {
            if (miplevel == null) miplevel = 0;
        },
        __class__: openfl_display3D_textures_CubeTexture
    });
    var openfl_display3D_textures_RectangleTexture = function(context, glTexture, optimize, width, height) {
        this.optimizeForRenderToTexture = optimize;
        if (this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
        openfl_display3D_textures_TextureBase.call(this, context, glTexture, width, height);
    };
    $hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
    openfl_display3D_textures_RectangleTexture.__name__ = ["openfl", "display3D", "textures", "RectangleTexture"];
    openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
    openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
        uploadFromBitmapData: function(bitmapData, miplevel) {
            if (miplevel == null) miplevel = 0;
            var p = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(bitmapData.image.get_data().buffer);
            this.width = bitmapData.width;
            this.height = bitmapData.height;
            this.uploadFromByteArray(p, 0);
        },
        uploadFromByteArray: function(data, byteArrayOffset) {
            lime_graphics_opengl_GL.context.bindTexture(3553, this.glTexture);
            if (this.optimizeForRenderToTexture) lime_graphics_opengl_GL.context.pixelStorei(37440, 1);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9728);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
            lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
            var source;
            var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
            var this1;
            if (elements != null) this1 = new Uint8Array(elements);
            else this1 = null;
            source = this1;
            data.position = byteArrayOffset;
            var i = 0;
            while (data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
                var val = data.readUnsignedByte();
                source[i] = val;
                i++;
            }
            lime_graphics_opengl_GL.context.texImage2D(3553, 0, 6408, this.width, this.height, 0, 6408, 5121, source);
            lime_graphics_opengl_GL.context.bindTexture(3553, null);
        },
        __class__: openfl_display3D_textures_RectangleTexture
    });
    var openfl_display3D_textures_Texture = function(context, glTexture, optimize, width, height) {
        this.optimizeForRenderToTexture = optimize;
        this.mipmapsGenerated = false;
        if (openfl_display3D_textures_Texture.internalFormat == -1) openfl_display3D_textures_Texture.internalFormat = 6408;
        if (this.optimizeForRenderToTexture == null) this.optimizeForRenderToTexture = false;
        openfl_display3D_textures_TextureBase.call(this, context, glTexture, width, height);
    };
    $hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
    openfl_display3D_textures_Texture.__name__ = ["openfl", "display3D", "textures", "Texture"];
    openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
    openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype, {
        uploadCompressedTextureFromByteArray: function(data, byteArrayOffset, async) {
            if (async == null) async = false;
        },
        uploadFromBitmapData: function(bitmapData, miplevel) {
            if (miplevel == null) miplevel = 0;
            var image = bitmapData.image;
            if (!image.get_premultiplied() && image.get_transparent()) {
                image = image.clone();
                image.set_premultiplied(true);
            }
            this.width = image.width;
            this.height = image.height;
            this.uploadFromUInt8Array(image.get_data(), miplevel);
        },
        uploadFromByteArray: function(data, byteArrayOffset, miplevel) {
            if (miplevel == null) miplevel = 0;
            var source;
            var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
            var this1;
            if (elements != null) this1 = new Uint8Array(elements);
            else this1 = null;
            source = this1;
            data.position = byteArrayOffset;
            var i = 0;
            while (data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
                var val = data.readUnsignedByte();
                source[i] = val;
                i++;
            }
            this.uploadFromUInt8Array(source, miplevel);
        },
        uploadFromUInt8Array: function(data, miplevel) {
            if (miplevel == null) miplevel = 0;
            lime_graphics_opengl_GL.context.bindTexture(3553, this.glTexture);
            if (this.optimizeForRenderToTexture) {
                lime_graphics_opengl_GL.context.pixelStorei(37440, 1);
                lime_graphics_opengl_GL.context.texParameteri(3553, 10240, 9728);
                lime_graphics_opengl_GL.context.texParameteri(3553, 10241, 9728);
                lime_graphics_opengl_GL.context.texParameteri(3553, 10242, 33071);
                lime_graphics_opengl_GL.context.texParameteri(3553, 10243, 33071);
            }
            lime_graphics_opengl_GL.context.texImage2D(3553, miplevel, openfl_display3D_textures_Texture.internalFormat, this.width, this.height, 0, openfl_display3D_textures_Texture.internalFormat, 5121, data);
            lime_graphics_opengl_GL.context.bindTexture(3553, null);
        },
        __class__: openfl_display3D_textures_Texture
    });
    var openfl_errors_Error = function(message, id) {
        if (id == null) id = 0;
        if (message == null) message = "";
        this.message = message;
        this.errorID = id;
        this.name = "Error";
    };
    $hxClasses["openfl.errors.Error"] = openfl_errors_Error;
    openfl_errors_Error.__name__ = ["openfl", "errors", "Error"];
    openfl_errors_Error.prototype = {
        getStackTrace: function() {
            return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
        },
        toString: function() {
            if (this.message != null) return this.message;
            else return "Error";
        },
        __class__: openfl_errors_Error
    };
    var openfl_errors_ArgumentError = function(message) {
        if (message == null) message = "";
        openfl_errors_Error.call(this, message);
        this.name = "ArgumentError";
    };
    $hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
    openfl_errors_ArgumentError.__name__ = ["openfl", "errors", "ArgumentError"];
    openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
    openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype, {
        __class__: openfl_errors_ArgumentError
    });
    var openfl_errors_IOError = function(message) {
        if (message == null) message = "";
        openfl_errors_Error.call(this, message);
        this.name = "IOError";
    };
    $hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
    openfl_errors_IOError.__name__ = ["openfl", "errors", "IOError"];
    openfl_errors_IOError.__super__ = openfl_errors_Error;
    openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype, {
        __class__: openfl_errors_IOError
    });
    var openfl_errors_EOFError = function() {
        openfl_errors_IOError.call(this, "End of file was encountered");
        this.name = "EOFError";
        this.errorID = 2030;
    };
    $hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
    openfl_errors_EOFError.__name__ = ["openfl", "errors", "EOFError"];
    openfl_errors_EOFError.__super__ = openfl_errors_IOError;
    openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype, {
        __class__: openfl_errors_EOFError
    });
    var openfl_errors_RangeError = function(message) {
        if (message == null) message = "";
        openfl_errors_Error.call(this, message, 0);
        this.name = "RangeError";
    };
    $hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
    openfl_errors_RangeError.__name__ = ["openfl", "errors", "RangeError"];
    openfl_errors_RangeError.__super__ = openfl_errors_Error;
    openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype, {
        __class__: openfl_errors_RangeError
    });
    var openfl_errors_TypeError = function(message) {
        if (message == null) message = "";
        openfl_errors_Error.call(this, message, 0);
        this.name = "TypeError";
    };
    $hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
    openfl_errors_TypeError.__name__ = ["openfl", "errors", "TypeError"];
    openfl_errors_TypeError.__super__ = openfl_errors_Error;
    openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype, {
        __class__: openfl_errors_TypeError
    });
    var openfl_events_ActivityEvent = function(type, bubbles, cancelable, activating) {
        if (activating == null) activating = false;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.activating = activating;
    };
    $hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
    openfl_events_ActivityEvent.__name__ = ["openfl", "events", "ActivityEvent"];
    openfl_events_ActivityEvent.__super__ = openfl_events_Event;
    openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_ActivityEvent(this.type, this.bubbles, this.cancelable, this.activating);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("ActivityEvent", ["type", "bubbles", "cancelable", "activating"]);
        },
        __class__: openfl_events_ActivityEvent
    });
    var openfl_events_TextEvent = function(type, bubbles, cancelable, text) {
        if (text == null) text = "";
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.text = text;
    };
    $hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
    openfl_events_TextEvent.__name__ = ["openfl", "events", "TextEvent"];
    openfl_events_TextEvent.__super__ = openfl_events_Event;
    openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_TextEvent(this.type, this.bubbles, this.cancelable, this.text);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("TextEvent", ["type", "bubbles", "cancelable", "text"]);
        },
        __class__: openfl_events_TextEvent
    });
    var openfl_events_ErrorEvent = function(type, bubbles, cancelable, text, id) {
        if (id == null) id = 0;
        if (text == null) text = "";
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_TextEvent.call(this, type, bubbles, cancelable, text);
        this.errorID = id;
    };
    $hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
    openfl_events_ErrorEvent.__name__ = ["openfl", "events", "ErrorEvent"];
    openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
    openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype, {
        clone: function() {
            var event = new openfl_events_ErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("ErrorEvent", ["type", "bubbles", "cancelable", "text", "errorID"]);
        },
        __class__: openfl_events_ErrorEvent
    });
    var openfl_events__$EventDispatcher_Listener = function(callback, useCapture, priority) {
        this.callback = callback;
        this.useCapture = useCapture;
        this.priority = priority;
    };
    $hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
    openfl_events__$EventDispatcher_Listener.__name__ = ["openfl", "events", "_EventDispatcher", "Listener"];
    openfl_events__$EventDispatcher_Listener.prototype = {
        match: function(callback, useCapture) {
            return Reflect.compareMethods(this.callback, callback) && this.useCapture == useCapture;
        },
        __class__: openfl_events__$EventDispatcher_Listener
    };
    var openfl_events_FocusEvent = function(type, bubbles, cancelable, relatedObject, shiftKey, keyCode) {
        if (keyCode == null) keyCode = 0;
        if (shiftKey == null) shiftKey = false;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.keyCode = keyCode;
        this.shiftKey = shiftKey;
        this.relatedObject = relatedObject;
    };
    $hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
    openfl_events_FocusEvent.__name__ = ["openfl", "events", "FocusEvent"];
    openfl_events_FocusEvent.__super__ = openfl_events_Event;
    openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_FocusEvent(this.type, this.bubbles, this.cancelable, this.relatedObject, this.shiftKey, this.keyCode);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("FocusEvent", ["type", "bubbles", "cancelable", "relatedObject", "shiftKey", "keyCode"]);
        },
        __class__: openfl_events_FocusEvent
    });
    var openfl_events_FullScreenEvent = function(type, bubbles, cancelable, fullScreen, interactive) {
        if (interactive == null) interactive = false;
        if (fullScreen == null) fullScreen = false;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_ActivityEvent.call(this, type, bubbles, cancelable);
        this.fullScreen = fullScreen;
        this.interactive = interactive;
    };
    $hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
    openfl_events_FullScreenEvent.__name__ = ["openfl", "events", "FullScreenEvent"];
    openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
    openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype, {
        clone: function() {
            var event = new openfl_events_FullScreenEvent(this.type, this.bubbles, this.cancelable, this.fullScreen, this.interactive);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("FullscreenEvent", ["type", "bubbles", "cancelable", "fullscreen", "interactive"]);
        },
        __class__: openfl_events_FullScreenEvent
    });
    var openfl_events_GameInputEvent = function(type, bubbles, cancelable, device) {
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = true;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.device = device;
    };
    $hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
    openfl_events_GameInputEvent.__name__ = ["openfl", "events", "GameInputEvent"];
    openfl_events_GameInputEvent.__super__ = openfl_events_Event;
    openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_GameInputEvent(this.type, this.bubbles, this.cancelable, this.device);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("GameInputEvent", ["type", "bubbles", "cancelable", "device"]);
        },
        __class__: openfl_events_GameInputEvent
    });
    var openfl_events_HTTPStatusEvent = function(type, bubbles, cancelable, status, redirected) {
        if (redirected == null) redirected = false;
        if (status == null) status = 0;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        this.status = status;
        this.redirected = redirected;
        openfl_events_Event.call(this, type, bubbles, cancelable);
    };
    $hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
    openfl_events_HTTPStatusEvent.__name__ = ["openfl", "events", "HTTPStatusEvent"];
    openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
    openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_HTTPStatusEvent(this.type, this.bubbles, null, this.status, this.redirected);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("HTTPStatusEvent", ["type", "bubbles", "cancelable", "status", "redirected"]);
        },
        __class__: openfl_events_HTTPStatusEvent
    });
    var openfl_events_IOErrorEvent = function(type, bubbles, cancelable, text, id) {
        if (id == null) id = 0;
        if (text == null) text = "";
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = true;
        openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
    };
    $hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
    openfl_events_IOErrorEvent.__name__ = ["openfl", "events", "IOErrorEvent"];
    openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
    openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype, {
        clone: function() {
            var event = new openfl_events_IOErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("IOErrorEvent", ["type", "bubbles", "cancelable", "text", "errorID"]);
        },
        __class__: openfl_events_IOErrorEvent
    });
    var openfl_events_KeyboardEvent = function(type, bubbles, cancelable, charCodeValue, keyCodeValue, keyLocationValue, ctrlKeyValue, altKeyValue, shiftKeyValue, controlKeyValue, commandKeyValue) {
        if (commandKeyValue == null) commandKeyValue = false;
        if (controlKeyValue == null) controlKeyValue = false;
        if (shiftKeyValue == null) shiftKeyValue = false;
        if (altKeyValue == null) altKeyValue = false;
        if (ctrlKeyValue == null) ctrlKeyValue = false;
        if (keyCodeValue == null) keyCodeValue = 0;
        if (charCodeValue == null) charCodeValue = 0;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.charCode = charCodeValue;
        this.keyCode = keyCodeValue;
        if (keyLocationValue != null) this.keyLocation = keyLocationValue;
        else this.keyLocation = 0;
        this.ctrlKey = ctrlKeyValue;
        this.altKey = altKeyValue;
        this.shiftKey = shiftKeyValue;
        this.controlKey = controlKeyValue;
        this.commandKey = commandKeyValue;
    };
    $hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
    openfl_events_KeyboardEvent.__name__ = ["openfl", "events", "KeyboardEvent"];
    openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
    openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_KeyboardEvent(this.type, this.bubbles, this.cancelable, this.charCode, this.keyCode, this.keyLocation, this.ctrlKey, this.altKey, this.shiftKey, this.controlKey, this.commandKey);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("KeyboardEvent", ["type", "bubbles", "cancelable", "charCode", "keyCode", "keyLocation", "ctrlKey", "altKey", "shiftKey"]);
        },
        __class__: openfl_events_KeyboardEvent
    });
    var openfl_events_MouseEvent = function(type, bubbles, cancelable, localX, localY, relatedObject, ctrlKey, altKey, shiftKey, buttonDown, delta, commandKey, clickCount) {
        if (clickCount == null) clickCount = 0;
        if (commandKey == null) commandKey = false;
        if (delta == null) delta = 0;
        if (buttonDown == null) buttonDown = false;
        if (shiftKey == null) shiftKey = false;
        if (altKey == null) altKey = false;
        if (ctrlKey == null) ctrlKey = false;
        if (localY == null) localY = 0;
        if (localX == null) localX = 0;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = true;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.shiftKey = shiftKey;
        this.altKey = altKey;
        this.ctrlKey = ctrlKey;
        this.bubbles = bubbles;
        this.relatedObject = relatedObject;
        this.delta = delta;
        this.localX = localX;
        this.localY = localY;
        this.buttonDown = buttonDown;
        this.commandKey = commandKey;
        this.clickCount = clickCount;
    };
    $hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
    openfl_events_MouseEvent.__name__ = ["openfl", "events", "MouseEvent"];
    openfl_events_MouseEvent.__altKey = null;
    openfl_events_MouseEvent.__buttonDown = null;
    openfl_events_MouseEvent.__commandKey = null;
    openfl_events_MouseEvent.__ctrlKey = null;
    openfl_events_MouseEvent.__shiftKey = null;
    openfl_events_MouseEvent.__create = function(type, button, stageX, stageY, local, target, delta) {
        if (delta == null) delta = 0;
        switch (type) {
        case "mouseDown":
            openfl_events_MouseEvent.__buttonDown = true;
            break;
        case "mouseUp":
            openfl_events_MouseEvent.__buttonDown = false;
            break;
        default:
        }
        var event = new openfl_events_MouseEvent(type, true, false, local.x, local.y, null, openfl_events_MouseEvent.__ctrlKey, openfl_events_MouseEvent.__altKey, openfl_events_MouseEvent.__shiftKey, openfl_events_MouseEvent.__buttonDown, delta, openfl_events_MouseEvent.__commandKey);
        event.stageX = stageX;
        event.stageY = stageY;
        event.target = target;
        return event;
    };
    openfl_events_MouseEvent.__super__ = openfl_events_Event;
    openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_MouseEvent(this.type, this.bubbles, this.cancelable, this.localX, this.localY, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.buttonDown, this.delta, this.commandKey, this.clickCount);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("MouseEvent", ["type", "bubbles", "cancelable", "localX", "localY", "relatedObject", "ctrlKey", "altKey", "shiftKey", "buttonDown", "delta"]);
        },
        updateAfterEvent: function() {},
        __class__: openfl_events_MouseEvent
    });
    var openfl_events_NetStatusEvent = function(type, bubbles, cancelable, info) {
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        this.info = info;
        openfl_events_Event.call(this, type, bubbles, cancelable);
    };
    $hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
    openfl_events_NetStatusEvent.__name__ = ["openfl", "events", "NetStatusEvent"];
    openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
    openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_NetStatusEvent(this.type, this.bubbles, this.cancelable, this.info);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("NetStatusEvent", ["type", "bubbles", "cancelable", "info"]);
        },
        __class__: openfl_events_NetStatusEvent
    });
    var openfl_events_ProgressEvent = function(type, bubbles, cancelable, bytesLoaded, bytesTotal) {
        if (bytesTotal == null) bytesTotal = 0;
        if (bytesLoaded == null) bytesLoaded = 0;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.bytesLoaded = bytesLoaded;
        this.bytesTotal = bytesTotal;
    };
    $hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
    openfl_events_ProgressEvent.__name__ = ["openfl", "events", "ProgressEvent"];
    openfl_events_ProgressEvent.__super__ = openfl_events_Event;
    openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_ProgressEvent(this.type, this.bubbles, this.cancelable, this.bytesLoaded, this.bytesTotal);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("ProgressEvent", ["type", "bubbles", "cancelable", "bytesLoaded", "bytesTotal"]);
        },
        __class__: openfl_events_ProgressEvent
    });
    var openfl_events_SecurityErrorEvent = function(type, bubbles, cancelable, text, id) {
        if (id == null) id = 0;
        if (text == null) text = "";
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = false;
        openfl_events_ErrorEvent.call(this, type, bubbles, cancelable, text, id);
    };
    $hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
    openfl_events_SecurityErrorEvent.__name__ = ["openfl", "events", "SecurityErrorEvent"];
    openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
    openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype, {
        clone: function() {
            var event = new openfl_events_SecurityErrorEvent(this.type, this.bubbles, this.cancelable, this.text, this.errorID);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("SecurityErrorEvent", ["type", "bubbles", "cancelable", "text", "errorID"]);
        },
        __class__: openfl_events_SecurityErrorEvent
    });
    var openfl_events_TouchEvent = function(type, bubbles, cancelable, touchPointID, isPrimaryTouchPoint, localX, localY, sizeX, sizeY, pressure, relatedObject, ctrlKey, altKey, shiftKey, commandKey, controlKey, timestamp, touchIntent, samples, isTouchPointCanceled) {
        if (isTouchPointCanceled == null) isTouchPointCanceled = false;
        if (timestamp == null) timestamp = 0;
        if (controlKey == null) controlKey = false;
        if (commandKey == null) commandKey = false;
        if (shiftKey == null) shiftKey = false;
        if (altKey == null) altKey = false;
        if (ctrlKey == null) ctrlKey = false;
        if (pressure == null) pressure = 0;
        if (sizeY == null) sizeY = 0;
        if (sizeX == null) sizeX = 0;
        if (localY == null) localY = 0;
        if (localX == null) localX = 0;
        if (isPrimaryTouchPoint == null) isPrimaryTouchPoint = false;
        if (touchPointID == null) touchPointID = 0;
        if (cancelable == null) cancelable = false;
        if (bubbles == null) bubbles = true;
        openfl_events_Event.call(this, type, bubbles, cancelable);
        this.touchPointID = touchPointID;
        this.isPrimaryTouchPoint = isPrimaryTouchPoint;
        this.localX = localX;
        this.localY = localY;
        this.sizeX = sizeX;
        this.sizeY = sizeY;
        this.pressure = pressure;
        this.relatedObject = relatedObject;
        this.ctrlKey = ctrlKey;
        this.altKey = altKey;
        this.shiftKey = shiftKey;
        this.commandKey = commandKey;
        this.controlKey = controlKey;
    };
    $hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
    openfl_events_TouchEvent.__name__ = ["openfl", "events", "TouchEvent"];
    openfl_events_TouchEvent.__create = function(type, touch, stageX, stageY, local, target) {
        var evt = new openfl_events_TouchEvent(type, true, false, 0, true, local.x, local.y, 1, 1, 1);
        evt.stageX = stageX;
        evt.stageY = stageY;
        evt.target = target;
        return evt;
    };
    openfl_events_TouchEvent.__super__ = openfl_events_Event;
    openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype, {
        clone: function() {
            var event = new openfl_events_TouchEvent(this.type, this.bubbles, this.cancelable, this.touchPointID, this.isPrimaryTouchPoint, this.localX, this.localY, this.sizeX, this.sizeY, this.pressure, this.relatedObject, this.ctrlKey, this.altKey, this.shiftKey, this.commandKey, this.controlKey);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("TouchEvent", ["type", "bubbles", "cancelable", "touchPointID", "isPrimaryTouchPoint", "localX", "localY", "sizeX", "sizeY", "pressure", "relatedObject", "ctrlKey", "altKey", "shiftKey", "commandKey", "controlKey"]);
        },
        updateAfterEvent: function() {},
        __class__: openfl_events_TouchEvent
    });
    var openfl_events_UncaughtErrorEvent = function(type, bubbles, cancelable, error) {
        if (cancelable == null) cancelable = true;
        if (bubbles == null) bubbles = true;
        openfl_events_ErrorEvent.call(this, type, bubbles, cancelable);
        this.error = error;
    };
    $hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
    openfl_events_UncaughtErrorEvent.__name__ = ["openfl", "events", "UncaughtErrorEvent"];
    openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
    openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype, {
        clone: function() {
            var event = new openfl_events_UncaughtErrorEvent(this.type, this.bubbles, this.cancelable, this.error);
            event.target = this.target;
            event.currentTarget = this.currentTarget;
            event.eventPhase = this.eventPhase;
            return event;
        },
        toString: function() {
            return this.__formatToString("UncaughtErrorEvent", ["type", "bubbles", "cancelable", "error"]);
        },
        __class__: openfl_events_UncaughtErrorEvent
    });
    var openfl_filters_BitmapFilter = function() {
        this.__saveLastFilter = false;
        this.__passes = 0;
        this.__dirty = true;
    };
    $hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
    openfl_filters_BitmapFilter.__name__ = ["openfl", "filters", "BitmapFilter"];
    openfl_filters_BitmapFilter.__tmpRenderTexture = null;
    openfl_filters_BitmapFilter.__applyFilters = function(filters, renderSession, source, target, sourceRect, destPoint) {
        var same = target == source && target.__usingPingPongTexture;
        if (same) target.__pingPongTexture.useOldTexture = true;
        if (sourceRect == null) sourceRect = source.rect;
        var lastFilterOutput = null;
        var useLastFilter = false;
        var srcShader = source.__shader;
        var _g = 0;
        while (_g < filters.length) {
            var filter = filters[_g]; ++_g;
            useLastFilter = false;
            if (filter.__saveLastFilter) {
                target.__pingPongTexture.swap();
                target.__drawGL(renderSession, source, null, null, null, sourceRect, true, !target.__usingPingPongTexture, true);
                lastFilterOutput = target.__pingPongTexture.get_oldRenderTexture();
                target.__pingPongTexture.set_oldRenderTexture(openfl_filters_BitmapFilter.__tmpRenderTexture);
            }
            var _g2 = 0;
            var _g1 = filter.__passes;
            while (_g2 < _g1) {
                var pass = _g2++;
                useLastFilter = filter.__saveLastFilter && filter.__useLastFilter(pass);
                if (same && !useLastFilter) target.__pingPongTexture.swap();
                if (useLastFilter) {
                    openfl_filters_BitmapFilter.__tmpRenderTexture = target.__pingPongTexture.get_oldRenderTexture();
                    target.__pingPongTexture.set_oldRenderTexture(lastFilterOutput);
                }
                source.__shader = filter.__preparePass(pass);
                target.__drawGL(renderSession, source, null, null, null, sourceRect, true, !target.__usingPingPongTexture, !useLastFilter);
            }
        }
        source.__shader = srcShader;
        if (same) target.__pingPongTexture.useOldTexture = false;
    };
    openfl_filters_BitmapFilter.__expandBounds = function(filters, rect, matrix) {
        var r = openfl_geom_Rectangle.__temp;
        r.setEmpty();
        var _g = 0;
        while (_g < filters.length) {
            var filter = filters[_g]; ++_g;
            filter.__growBounds(r);
        }
        r.__transform(r, matrix);
        rect.__expand(r.x, r.y, r.width, r.height);
    };
    openfl_filters_BitmapFilter.prototype = {
        clone: function() {
            return new openfl_filters_BitmapFilter();
        },
        __applyFilter: function(sourceData, targetData, sourceRect, destPoint) {},
        __growBounds: function(rect) {},
        __preparePass: function(pass) {
            return null;
        },
        __useLastFilter: function(pass) {
            return false;
        },
        __class__: openfl_filters_BitmapFilter
    };
    var openfl_filters_ColorMatrixFilter = function(matrix) {
        openfl_filters_BitmapFilter.call(this);
        this.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
        this.__passes = 1;
        this.set_matrix(matrix);
    };
    $hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
    openfl_filters_ColorMatrixFilter.__name__ = ["openfl", "filters", "ColorMatrixFilter"];
    openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
    openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype, {
        clone: function() {
            return new openfl_filters_ColorMatrixFilter(this.matrix);
        },
        __applyFilter: function(sourceData, targetData, sourceRect, destPoint) {
            var source = sourceData.data;
            var target = targetData.data;
            var offsetX = destPoint.x - sourceRect.x | 0;
            var offsetY = destPoint.y - sourceRect.y | 0;
            var sourceStride = sourceData.width * 4;
            var targetStride = targetData.width * 4;
            var sourceOffset;
            var targetOffset;
            var _g1 = sourceRect.y | 0;
            var _g = sourceRect.height | 0;
            while (_g1 < _g) {
                var row = _g1++;
                var _g3 = sourceRect.x | 0;
                var _g2 = sourceRect.width | 0;
                while (_g3 < _g2) {
                    var column = _g3++;
                    sourceOffset = row * sourceStride + column * 4;
                    targetOffset = (row + offsetX) * targetStride + (column + offsetY) * 4;
                    var srcR = source[sourceOffset];
                    var srcG = source[sourceOffset + 1];
                    var srcB = source[sourceOffset + 2];
                    var srcA = source[sourceOffset + 3];
                    target[targetOffset] = this.matrix[0] * srcR + this.matrix[1] * srcG + this.matrix[2] * srcB + this.matrix[3] * srcA + this.matrix[4] | 0;
                    target[targetOffset + 1] = this.matrix[5] * srcR + this.matrix[6] * srcG + this.matrix[7] * srcB + this.matrix[8] * srcA + this.matrix[9] | 0;
                    target[targetOffset + 2] = this.matrix[10] * srcR + this.matrix[11] * srcG + this.matrix[12] * srcB + this.matrix[13] * srcA + this.matrix[14] | 0;
                    target[targetOffset + 3] = this.matrix[15] * srcR + this.matrix[16] * srcG + this.matrix[17] * srcB + this.matrix[18] * srcA + this.matrix[19] | 0;
                }
            }
        },
        __preparePass: function(pass) {
            return this.__colorMatrixShader;
        },
        set_matrix: function(value) {
            if (value == null) value = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
            return this.matrix = value;
        },
        __class__: openfl_filters_ColorMatrixFilter,
        __properties__: {
            set_matrix: "set_matrix"
        }
    });
    var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
        this.__uOffsets = new openfl_display_GLShaderParameter("vec4", 0);
        this.__uMultipliers = new openfl_display_GLShaderParameter("mat4", 0);
        this.fragment = ["uniform mat4 uMultipliers;", "uniform vec4 uOffsets;", "void main(void) {", "\tvec4 color = texture2D(" + openfl_display_Shader.uSampler + ", " + openfl_display_Shader.vTexCoord + ");", "\tcolor = vec4(color.rgb / color.a, color.a);", "\tcolor = uOffsets + color * uMultipliers;", "\tcolor = vec4(color.rgb * color.a, color.a);", "\tgl_FragColor = color;", "}"];
        openfl_display_Shader.call(this);
        this.data.set("uMultipliers", this.__uMultipliers);
        this.data.set("uOffsets", this.__uOffsets);
        this.__buildFragmentCode("uniform mat4 uMultipliers;\nuniform vec4 uOffsets;\nvoid main(void) {\n\tvec4 color = texture2D(" + openfl_display_Shader.uSampler + ", " + openfl_display_Shader.vTexCoord + ");\n\tcolor = vec4(color.rgb / color.a, color.a);\n\tcolor = uOffsets + color * uMultipliers;\n\tcolor = vec4(color.rgb * color.a, color.a);\n\tgl_FragColor = color;\n}");
    };
    $hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
    openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl", "filters", "_ColorMatrixFilter", "ColorMatrixShader"];
    openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_display_Shader;
    openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_display_Shader.prototype, {
        get_uMultipliers: function() {
            return this.__uMultipliers.value;
        },
        set_uMultipliers: function(v) {
            return this.__uMultipliers.set_value(v);
        },
        get_uOffsets: function() {
            return this.__uOffsets.value;
        },
        set_uOffsets: function(v) {
            return this.__uOffsets.set_value(v);
        },
        __class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader,
        __properties__: {
            set_uOffsets: "set_uOffsets",
            get_uOffsets: "get_uOffsets",
            set_uMultipliers: "set_uMultipliers",
            get_uMultipliers: "get_uMultipliers"
        }
    });
    var openfl_geom_Matrix3D = function(v) {
        if (v != null && v.length == 16) this.rawData = v;
        else {
            var value = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
            var vectorData = new openfl_VectorData();
            vectorData.length = value.length;
            vectorData.fixed = true;
            var vec;
            var this1;
            this1 = new Array(value.length);
            vec = this1;
            var _g1 = 0;
            var _g = value.length;
            while (_g1 < _g) {
                var i = _g1++;
                vec[i] = value[i];
            }
            vectorData.data = vec;
            this.rawData = vectorData;
        }
    };
    $hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
    openfl_geom_Matrix3D.__name__ = ["openfl", "geom", "Matrix3D"];
    openfl_geom_Matrix3D.create2D = function(x, y, scale, rotation) {
        if (rotation == null) rotation = 0;
        if (scale == null) scale = 1;
        var theta = rotation * Math.PI / 180.0;
        var c = Math.cos(theta);
        var s = Math.sin(theta);
        return new openfl_geom_Matrix3D((function($this) {
            var $r;
            var value = [c * scale, -s * scale, 0, 0, s * scale, c * scale, 0, 0, 0, 0, 1, 0, x, y, 0, 1];
            var vectorData = new openfl_VectorData();
            vectorData.length = value.length;
            vectorData.fixed = true; {
                var vec;
                var this1;
                this1 = new Array(value.length);
                vec = this1;
                var _g1 = 0;
                var _g = value.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    vec[i] = value[i];
                }
                vectorData.data = vec;
            }
            $r = vectorData;
            return $r;
        } (this)));
    };
    openfl_geom_Matrix3D.createABCD = function(a, b, c, d, tx, ty) {
        return new openfl_geom_Matrix3D((function($this) {
            var $r;
            var value = [a, b, 0, 0, c, d, 0, 0, 0, 0, 1, 0, tx, ty, 0, 1];
            var vectorData = new openfl_VectorData();
            vectorData.length = value.length;
            vectorData.fixed = true; {
                var vec;
                var this1;
                this1 = new Array(value.length);
                vec = this1;
                var _g1 = 0;
                var _g = value.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    vec[i] = value[i];
                }
                vectorData.data = vec;
            }
            $r = vectorData;
            return $r;
        } (this)));
    };
    openfl_geom_Matrix3D.createOrtho = function(x0, x1, y0, y1, zNear, zFar) {
        var sx = 1.0 / (x1 - x0);
        var sy = 1.0 / (y1 - y0);
        var sz = 1.0 / (zFar - zNear);
        return new openfl_geom_Matrix3D((function($this) {
            var $r;
            var value = [2.0 * sx, 0, 0, 0, 0, 2.0 * sy, 0, 0, 0, 0, -2. * sz, 0, -(x0 + x1) * sx, -(y0 + y1) * sy, -(zNear + zFar) * sz, 1];
            var vectorData = new openfl_VectorData();
            vectorData.length = value.length;
            vectorData.fixed = true; {
                var vec;
                var this1;
                this1 = new Array(value.length);
                vec = this1;
                var _g1 = 0;
                var _g = value.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    vec[i] = value[i];
                }
                vectorData.data = vec;
            }
            $r = vectorData;
            return $r;
        } (this)));
    };
    openfl_geom_Matrix3D.interpolate = function(thisMat, toMat, percent) {
        var m = new openfl_geom_Matrix3D();
        var _g = 0;
        while (_g < 16) {
            var i = _g++;
            var this1 = m.rawData;
            if (!this1.fixed) {
                if (i >= this1.length) this1.length = i + 1;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
        }
        return m;
    };
    openfl_geom_Matrix3D.__getAxisRotation = function(x, y, z, degrees) {
        var m = new openfl_geom_Matrix3D();
        var a1 = new openfl_geom_Vector3D(x, y, z);
        var rad = -degrees * (Math.PI / 180);
        var c = Math.cos(rad);
        var s = Math.sin(rad);
        var t = 1.0 - c;
        var this1 = m.rawData;
        if (!this1.fixed) {
            if (0 >= this1.length) this1.length = 1;
            if (this1.data.length < this1.length) {
                var data;
                var this2;
                this2 = new Array(this1.data.length + 10);
                data = this2;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                this1.data = data;
            }
        }
        this1.data[0] = c + a1.x * a1.x * t;
        var this3 = m.rawData;
        if (!this3.fixed) {
            if (5 >= this3.length) this3.length = 6;
            if (this3.data.length < this3.length) {
                var data1;
                var this4;
                this4 = new Array(this3.data.length + 10);
                data1 = this4;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                this3.data = data1;
            }
        }
        this3.data[5] = c + a1.y * a1.y * t;
        var this5 = m.rawData;
        if (!this5.fixed) {
            if (10 >= this5.length) this5.length = 11;
            if (this5.data.length < this5.length) {
                var data2;
                var this6;
                this6 = new Array(this5.data.length + 10);
                data2 = this6;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                this5.data = data2;
            }
        }
        this5.data[10] = c + a1.z * a1.z * t;
        var tmp1 = a1.x * a1.y * t;
        var tmp2 = a1.z * s;
        var this7 = m.rawData;
        if (!this7.fixed) {
            if (4 >= this7.length) this7.length = 5;
            if (this7.data.length < this7.length) {
                var data3;
                var this8;
                this8 = new Array(this7.data.length + 10);
                data3 = this8;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                this7.data = data3;
            }
        }
        this7.data[4] = tmp1 + tmp2;
        var this9 = m.rawData;
        if (!this9.fixed) {
            if (1 >= this9.length) this9.length = 2;
            if (this9.data.length < this9.length) {
                var data4;
                var this10;
                this10 = new Array(this9.data.length + 10);
                data4 = this10;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                this9.data = data4;
            }
        }
        this9.data[1] = tmp1 - tmp2;
        tmp1 = a1.x * a1.z * t;
        tmp2 = a1.y * s;
        var this11 = m.rawData;
        if (!this11.fixed) {
            if (8 >= this11.length) this11.length = 9;
            if (this11.data.length < this11.length) {
                var data5;
                var this12;
                this12 = new Array(this11.data.length + 10);
                data5 = this12;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                this11.data = data5;
            }
        }
        this11.data[8] = tmp1 - tmp2;
        var this13 = m.rawData;
        if (!this13.fixed) {
            if (2 >= this13.length) this13.length = 3;
            if (this13.data.length < this13.length) {
                var data6;
                var this14;
                this14 = new Array(this13.data.length + 10);
                data6 = this14;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                this13.data = data6;
            }
        }
        this13.data[2] = tmp1 + tmp2;
        tmp1 = a1.y * a1.z * t;
        tmp2 = a1.x * s;
        var this15 = m.rawData;
        if (!this15.fixed) {
            if (9 >= this15.length) this15.length = 10;
            if (this15.data.length < this15.length) {
                var data7;
                var this16;
                this16 = new Array(this15.data.length + 10);
                data7 = this16;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                this15.data = data7;
            }
        }
        this15.data[9] = tmp1 + tmp2;
        var this17 = m.rawData;
        if (!this17.fixed) {
            if (6 >= this17.length) this17.length = 7;
            if (this17.data.length < this17.length) {
                var data8;
                var this18;
                this18 = new Array(this17.data.length + 10);
                data8 = this18;
                haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                this17.data = data8;
            }
        }
        this17.data[6] = tmp1 - tmp2;
        return m;
    };
    openfl_geom_Matrix3D.prototype = {
        append: function(lhs) {
            var m111 = this.rawData.data[0];
            var m121 = this.rawData.data[4];
            var m131 = this.rawData.data[8];
            var m141 = this.rawData.data[12];
            var m112 = this.rawData.data[1];
            var m122 = this.rawData.data[5];
            var m132 = this.rawData.data[9];
            var m142 = this.rawData.data[13];
            var m113 = this.rawData.data[2];
            var m123 = this.rawData.data[6];
            var m133 = this.rawData.data[10];
            var m143 = this.rawData.data[14];
            var m114 = this.rawData.data[3];
            var m124 = this.rawData.data[7];
            var m134 = this.rawData.data[11];
            var m144 = this.rawData.data[15];
            var m211 = lhs.rawData.data[0];
            var m221 = lhs.rawData.data[4];
            var m231 = lhs.rawData.data[8];
            var m241 = lhs.rawData.data[12];
            var m212 = lhs.rawData.data[1];
            var m222 = lhs.rawData.data[5];
            var m232 = lhs.rawData.data[9];
            var m242 = lhs.rawData.data[13];
            var m213 = lhs.rawData.data[2];
            var m223 = lhs.rawData.data[6];
            var m233 = lhs.rawData.data[10];
            var m243 = lhs.rawData.data[14];
            var m214 = lhs.rawData.data[3];
            var m224 = lhs.rawData.data[7];
            var m234 = lhs.rawData.data[11];
            var m244 = lhs.rawData.data[15];
            var this1 = this.rawData;
            if (!this1.fixed) {
                if (0 >= this1.length) this1.length = 1;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (1 >= this3.length) this3.length = 2;
                if (this3.data.length < this3.length) {
                    var data1;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data1 = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                    this3.data = data1;
                }
            }
            this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (2 >= this5.length) this5.length = 3;
                if (this5.data.length < this5.length) {
                    var data2;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data2 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                    this5.data = data2;
                }
            }
            this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
            var this7 = this.rawData;
            if (!this7.fixed) {
                if (3 >= this7.length) this7.length = 4;
                if (this7.data.length < this7.length) {
                    var data3;
                    var this8;
                    this8 = new Array(this7.data.length + 10);
                    data3 = this8;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                    this7.data = data3;
                }
            }
            this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
            var this9 = this.rawData;
            if (!this9.fixed) {
                if (4 >= this9.length) this9.length = 5;
                if (this9.data.length < this9.length) {
                    var data4;
                    var this10;
                    this10 = new Array(this9.data.length + 10);
                    data4 = this10;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                    this9.data = data4;
                }
            }
            this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
            var this11 = this.rawData;
            if (!this11.fixed) {
                if (5 >= this11.length) this11.length = 6;
                if (this11.data.length < this11.length) {
                    var data5;
                    var this12;
                    this12 = new Array(this11.data.length + 10);
                    data5 = this12;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                    this11.data = data5;
                }
            }
            this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
            var this13 = this.rawData;
            if (!this13.fixed) {
                if (6 >= this13.length) this13.length = 7;
                if (this13.data.length < this13.length) {
                    var data6;
                    var this14;
                    this14 = new Array(this13.data.length + 10);
                    data6 = this14;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                    this13.data = data6;
                }
            }
            this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
            var this15 = this.rawData;
            if (!this15.fixed) {
                if (7 >= this15.length) this15.length = 8;
                if (this15.data.length < this15.length) {
                    var data7;
                    var this16;
                    this16 = new Array(this15.data.length + 10);
                    data7 = this16;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                    this15.data = data7;
                }
            }
            this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
            var this17 = this.rawData;
            if (!this17.fixed) {
                if (8 >= this17.length) this17.length = 9;
                if (this17.data.length < this17.length) {
                    var data8;
                    var this18;
                    this18 = new Array(this17.data.length + 10);
                    data8 = this18;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                    this17.data = data8;
                }
            }
            this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
            var this19 = this.rawData;
            if (!this19.fixed) {
                if (9 >= this19.length) this19.length = 10;
                if (this19.data.length < this19.length) {
                    var data9;
                    var this20;
                    this20 = new Array(this19.data.length + 10);
                    data9 = this20;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                    this19.data = data9;
                }
            }
            this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
            var this21 = this.rawData;
            if (!this21.fixed) {
                if (10 >= this21.length) this21.length = 11;
                if (this21.data.length < this21.length) {
                    var data10;
                    var this22;
                    this22 = new Array(this21.data.length + 10);
                    data10 = this22;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                    this21.data = data10;
                }
            }
            this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
            var this23 = this.rawData;
            if (!this23.fixed) {
                if (11 >= this23.length) this23.length = 12;
                if (this23.data.length < this23.length) {
                    var data11;
                    var this24;
                    this24 = new Array(this23.data.length + 10);
                    data11 = this24;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                    this23.data = data11;
                }
            }
            this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
            var this25 = this.rawData;
            if (!this25.fixed) {
                if (12 >= this25.length) this25.length = 13;
                if (this25.data.length < this25.length) {
                    var data12;
                    var this26;
                    this26 = new Array(this25.data.length + 10);
                    data12 = this26;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                    this25.data = data12;
                }
            }
            this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
            var this27 = this.rawData;
            if (!this27.fixed) {
                if (13 >= this27.length) this27.length = 14;
                if (this27.data.length < this27.length) {
                    var data13;
                    var this28;
                    this28 = new Array(this27.data.length + 10);
                    data13 = this28;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                    this27.data = data13;
                }
            }
            this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
            var this29 = this.rawData;
            if (!this29.fixed) {
                if (14 >= this29.length) this29.length = 15;
                if (this29.data.length < this29.length) {
                    var data14;
                    var this30;
                    this30 = new Array(this29.data.length + 10);
                    data14 = this30;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                    this29.data = data14;
                }
            }
            this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
            var this31 = this.rawData;
            if (!this31.fixed) {
                if (15 >= this31.length) this31.length = 16;
                if (this31.data.length < this31.length) {
                    var data15;
                    var this32;
                    this32 = new Array(this31.data.length + 10);
                    data15 = this32;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                    this31.data = data15;
                }
            }
            this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
        },
        appendRotation: function(degrees, axis, pivotPoint) {
            var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x, axis.y, axis.z, degrees);
            if (pivotPoint != null) {
                var p = pivotPoint;
                m.appendTranslation(p.x, p.y, p.z);
            }
            this.append(m);
        },
        appendScale: function(xScale, yScale, zScale) {
            this.append(new openfl_geom_Matrix3D((function($this) {
                var $r;
                var value = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
                var vectorData = new openfl_VectorData();
                vectorData.length = value.length;
                vectorData.fixed = true; {
                    var vec;
                    var this1;
                    this1 = new Array(value.length);
                    vec = this1;
                    var _g1 = 0;
                    var _g = value.length;
                    while (_g1 < _g) {
                        var i = _g1++;
                        vec[i] = value[i];
                    }
                    vectorData.data = vec;
                }
                $r = vectorData;
                return $r;
            } (this))));
        },
        appendTranslation: function(x, y, z) {
            var this1 = this.rawData;
            if (!this1.fixed) {
                if (12 >= this1.length) this1.length = 13;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[12] = this.rawData.data[12] + x;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (13 >= this3.length) this3.length = 14;
                if (this3.data.length < this3.length) {
                    var data1;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data1 = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                    this3.data = data1;
                }
            }
            this3.data[13] = this.rawData.data[13] + y;
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (14 >= this5.length) this5.length = 15;
                if (this5.data.length < this5.length) {
                    var data2;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data2 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                    this5.data = data2;
                }
            }
            this5.data[14] = this.rawData.data[14] + z;
        },
        clone: function() {
            return new openfl_geom_Matrix3D((function($this) {
                var $r;
                var this1 = $this.rawData;
                var vectorData = new openfl_VectorData();
                vectorData.length = this1.length;
                vectorData.fixed = this1.fixed; {
                    var this2;
                    this2 = new Array(this1.length);
                    vectorData.data = this2;
                }
                haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
                $r = vectorData;
                return $r;
            } (this)));
        },
        copyColumnFrom: function(column, vector3D) {
            switch (column) {
            case 0:
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (0 >= this1.length) this1.length = 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[0] = vector3D.x;
                var this3 = this.rawData;
                if (!this3.fixed) {
                    if (1 >= this3.length) this3.length = 2;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                }
                this3.data[1] = vector3D.y;
                var this5 = this.rawData;
                if (!this5.fixed) {
                    if (2 >= this5.length) this5.length = 3;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                }
                this5.data[2] = vector3D.z;
                var this7 = this.rawData;
                if (!this7.fixed) {
                    if (3 >= this7.length) this7.length = 4;
                    if (this7.data.length < this7.length) {
                        var data3;
                        var this8;
                        this8 = new Array(this7.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                        this7.data = data3;
                    }
                }
                this7.data[3] = vector3D.w;
                break;
            case 1:
                var this9 = this.rawData;
                if (!this9.fixed) {
                    if (4 >= this9.length) this9.length = 5;
                    if (this9.data.length < this9.length) {
                        var data4;
                        var this10;
                        this10 = new Array(this9.data.length + 10);
                        data4 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                        this9.data = data4;
                    }
                }
                this9.data[4] = vector3D.x;
                var this11 = this.rawData;
                if (!this11.fixed) {
                    if (5 >= this11.length) this11.length = 6;
                    if (this11.data.length < this11.length) {
                        var data5;
                        var this12;
                        this12 = new Array(this11.data.length + 10);
                        data5 = this12;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                        this11.data = data5;
                    }
                }
                this11.data[5] = vector3D.y;
                var this13 = this.rawData;
                if (!this13.fixed) {
                    if (6 >= this13.length) this13.length = 7;
                    if (this13.data.length < this13.length) {
                        var data6;
                        var this14;
                        this14 = new Array(this13.data.length + 10);
                        data6 = this14;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                        this13.data = data6;
                    }
                }
                this13.data[6] = vector3D.z;
                var this15 = this.rawData;
                if (!this15.fixed) {
                    if (7 >= this15.length) this15.length = 8;
                    if (this15.data.length < this15.length) {
                        var data7;
                        var this16;
                        this16 = new Array(this15.data.length + 10);
                        data7 = this16;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                        this15.data = data7;
                    }
                }
                this15.data[7] = vector3D.w;
                break;
            case 2:
                var this17 = this.rawData;
                if (!this17.fixed) {
                    if (8 >= this17.length) this17.length = 9;
                    if (this17.data.length < this17.length) {
                        var data8;
                        var this18;
                        this18 = new Array(this17.data.length + 10);
                        data8 = this18;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                        this17.data = data8;
                    }
                }
                this17.data[8] = vector3D.x;
                var this19 = this.rawData;
                if (!this19.fixed) {
                    if (9 >= this19.length) this19.length = 10;
                    if (this19.data.length < this19.length) {
                        var data9;
                        var this20;
                        this20 = new Array(this19.data.length + 10);
                        data9 = this20;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                        this19.data = data9;
                    }
                }
                this19.data[9] = vector3D.y;
                var this21 = this.rawData;
                if (!this21.fixed) {
                    if (10 >= this21.length) this21.length = 11;
                    if (this21.data.length < this21.length) {
                        var data10;
                        var this22;
                        this22 = new Array(this21.data.length + 10);
                        data10 = this22;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                        this21.data = data10;
                    }
                }
                this21.data[10] = vector3D.z;
                var this23 = this.rawData;
                if (!this23.fixed) {
                    if (11 >= this23.length) this23.length = 12;
                    if (this23.data.length < this23.length) {
                        var data11;
                        var this24;
                        this24 = new Array(this23.data.length + 10);
                        data11 = this24;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                        this23.data = data11;
                    }
                }
                this23.data[11] = vector3D.w;
                break;
            case 3:
                var this25 = this.rawData;
                if (!this25.fixed) {
                    if (12 >= this25.length) this25.length = 13;
                    if (this25.data.length < this25.length) {
                        var data12;
                        var this26;
                        this26 = new Array(this25.data.length + 10);
                        data12 = this26;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                        this25.data = data12;
                    }
                }
                this25.data[12] = vector3D.x;
                var this27 = this.rawData;
                if (!this27.fixed) {
                    if (13 >= this27.length) this27.length = 14;
                    if (this27.data.length < this27.length) {
                        var data13;
                        var this28;
                        this28 = new Array(this27.data.length + 10);
                        data13 = this28;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                        this27.data = data13;
                    }
                }
                this27.data[13] = vector3D.y;
                var this29 = this.rawData;
                if (!this29.fixed) {
                    if (14 >= this29.length) this29.length = 15;
                    if (this29.data.length < this29.length) {
                        var data14;
                        var this30;
                        this30 = new Array(this29.data.length + 10);
                        data14 = this30;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                        this29.data = data14;
                    }
                }
                this29.data[14] = vector3D.z;
                var this31 = this.rawData;
                if (!this31.fixed) {
                    if (15 >= this31.length) this31.length = 16;
                    if (this31.data.length < this31.length) {
                        var data15;
                        var this32;
                        this32 = new Array(this31.data.length + 10);
                        data15 = this32;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                        this31.data = data15;
                    }
                }
                this31.data[15] = vector3D.w;
                break;
            default:
            }
        },
        copyColumnTo: function(column, vector3D) {
            switch (column) {
            case 0:
                vector3D.x = this.rawData.data[0];
                vector3D.y = this.rawData.data[1];
                vector3D.z = this.rawData.data[2];
                vector3D.w = this.rawData.data[3];
                break;
            case 1:
                vector3D.x = this.rawData.data[4];
                vector3D.y = this.rawData.data[5];
                vector3D.z = this.rawData.data[6];
                vector3D.w = this.rawData.data[7];
                break;
            case 2:
                vector3D.x = this.rawData.data[8];
                vector3D.y = this.rawData.data[9];
                vector3D.z = this.rawData.data[10];
                vector3D.w = this.rawData.data[11];
                break;
            case 3:
                vector3D.x = this.rawData.data[12];
                vector3D.y = this.rawData.data[13];
                vector3D.z = this.rawData.data[14];
                vector3D.w = this.rawData.data[15];
                break;
            default:
            }
        },
        copyFrom: function(other) {
            var this1 = other.rawData;
            var vectorData = new openfl_VectorData();
            vectorData.length = this1.length;
            vectorData.fixed = this1.fixed;
            var this2;
            this2 = new Array(this1.length);
            vectorData.data = this2;
            haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
            this.rawData = vectorData;
        },
        copyRawDataFrom: function(vector, index, transpose) {
            if (transpose == null) transpose = false;
            if (index == null) index = 0;
            if (transpose) this.transpose();
            var length = vector.length - index;
            var _g = 0;
            while (_g < length) {
                var i = _g++;
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (i >= this1.length) this1.length = i + 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[i] = vector.data[i + index];
            }
            if (transpose) this.transpose();
        },
        copyRawDataTo: function(vector, index, transpose) {
            if (transpose == null) transpose = false;
            if (index == null) index = 0;
            if (transpose) this.transpose();
            var _g1 = 0;
            var _g = this.rawData.length;
            while (_g1 < _g) {
                var i = _g1++;
                var key = i + index;
                if (!vector.fixed) {
                    if (key >= vector.length) vector.length = key + 1;
                    if (vector.data.length < vector.length) {
                        var data;
                        var this1;
                        this1 = new Array(vector.data.length + 10);
                        data = this1;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data, 0, data, 0, vector.data.length);
                        vector.data = data;
                    }
                }
                vector.data[key] = this.rawData.data[i];
            }
            if (transpose) this.transpose();
        },
        copyRowFrom: function(row, vector3D) {
            switch (row) {
            case 0:
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (0 >= this1.length) this1.length = 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[0] = vector3D.x;
                var this3 = this.rawData;
                if (!this3.fixed) {
                    if (4 >= this3.length) this3.length = 5;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                }
                this3.data[4] = vector3D.y;
                var this5 = this.rawData;
                if (!this5.fixed) {
                    if (8 >= this5.length) this5.length = 9;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                }
                this5.data[8] = vector3D.z;
                var this7 = this.rawData;
                if (!this7.fixed) {
                    if (12 >= this7.length) this7.length = 13;
                    if (this7.data.length < this7.length) {
                        var data3;
                        var this8;
                        this8 = new Array(this7.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                        this7.data = data3;
                    }
                }
                this7.data[12] = vector3D.w;
                break;
            case 1:
                var this9 = this.rawData;
                if (!this9.fixed) {
                    if (1 >= this9.length) this9.length = 2;
                    if (this9.data.length < this9.length) {
                        var data4;
                        var this10;
                        this10 = new Array(this9.data.length + 10);
                        data4 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                        this9.data = data4;
                    }
                }
                this9.data[1] = vector3D.x;
                var this11 = this.rawData;
                if (!this11.fixed) {
                    if (5 >= this11.length) this11.length = 6;
                    if (this11.data.length < this11.length) {
                        var data5;
                        var this12;
                        this12 = new Array(this11.data.length + 10);
                        data5 = this12;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                        this11.data = data5;
                    }
                }
                this11.data[5] = vector3D.y;
                var this13 = this.rawData;
                if (!this13.fixed) {
                    if (9 >= this13.length) this13.length = 10;
                    if (this13.data.length < this13.length) {
                        var data6;
                        var this14;
                        this14 = new Array(this13.data.length + 10);
                        data6 = this14;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                        this13.data = data6;
                    }
                }
                this13.data[9] = vector3D.z;
                var this15 = this.rawData;
                if (!this15.fixed) {
                    if (13 >= this15.length) this15.length = 14;
                    if (this15.data.length < this15.length) {
                        var data7;
                        var this16;
                        this16 = new Array(this15.data.length + 10);
                        data7 = this16;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                        this15.data = data7;
                    }
                }
                this15.data[13] = vector3D.w;
                break;
            case 2:
                var this17 = this.rawData;
                if (!this17.fixed) {
                    if (2 >= this17.length) this17.length = 3;
                    if (this17.data.length < this17.length) {
                        var data8;
                        var this18;
                        this18 = new Array(this17.data.length + 10);
                        data8 = this18;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                        this17.data = data8;
                    }
                }
                this17.data[2] = vector3D.x;
                var this19 = this.rawData;
                if (!this19.fixed) {
                    if (6 >= this19.length) this19.length = 7;
                    if (this19.data.length < this19.length) {
                        var data9;
                        var this20;
                        this20 = new Array(this19.data.length + 10);
                        data9 = this20;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                        this19.data = data9;
                    }
                }
                this19.data[6] = vector3D.y;
                var this21 = this.rawData;
                if (!this21.fixed) {
                    if (10 >= this21.length) this21.length = 11;
                    if (this21.data.length < this21.length) {
                        var data10;
                        var this22;
                        this22 = new Array(this21.data.length + 10);
                        data10 = this22;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                        this21.data = data10;
                    }
                }
                this21.data[10] = vector3D.z;
                var this23 = this.rawData;
                if (!this23.fixed) {
                    if (14 >= this23.length) this23.length = 15;
                    if (this23.data.length < this23.length) {
                        var data11;
                        var this24;
                        this24 = new Array(this23.data.length + 10);
                        data11 = this24;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                        this23.data = data11;
                    }
                }
                this23.data[14] = vector3D.w;
                break;
            case 3:
                var this25 = this.rawData;
                if (!this25.fixed) {
                    if (3 >= this25.length) this25.length = 4;
                    if (this25.data.length < this25.length) {
                        var data12;
                        var this26;
                        this26 = new Array(this25.data.length + 10);
                        data12 = this26;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                        this25.data = data12;
                    }
                }
                this25.data[3] = vector3D.x;
                var this27 = this.rawData;
                if (!this27.fixed) {
                    if (7 >= this27.length) this27.length = 8;
                    if (this27.data.length < this27.length) {
                        var data13;
                        var this28;
                        this28 = new Array(this27.data.length + 10);
                        data13 = this28;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                        this27.data = data13;
                    }
                }
                this27.data[7] = vector3D.y;
                var this29 = this.rawData;
                if (!this29.fixed) {
                    if (11 >= this29.length) this29.length = 12;
                    if (this29.data.length < this29.length) {
                        var data14;
                        var this30;
                        this30 = new Array(this29.data.length + 10);
                        data14 = this30;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                        this29.data = data14;
                    }
                }
                this29.data[11] = vector3D.z;
                var this31 = this.rawData;
                if (!this31.fixed) {
                    if (15 >= this31.length) this31.length = 16;
                    if (this31.data.length < this31.length) {
                        var data15;
                        var this32;
                        this32 = new Array(this31.data.length + 10);
                        data15 = this32;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                        this31.data = data15;
                    }
                }
                this31.data[15] = vector3D.w;
                break;
            default:
            }
        },
        copyRowTo: function(row, vector3D) {
            switch (row) {
            case 0:
                vector3D.x = this.rawData.data[0];
                vector3D.y = this.rawData.data[4];
                vector3D.z = this.rawData.data[8];
                vector3D.w = this.rawData.data[12];
                break;
            case 1:
                vector3D.x = this.rawData.data[1];
                vector3D.y = this.rawData.data[5];
                vector3D.z = this.rawData.data[9];
                vector3D.w = this.rawData.data[13];
                break;
            case 2:
                vector3D.x = this.rawData.data[2];
                vector3D.y = this.rawData.data[6];
                vector3D.z = this.rawData.data[10];
                vector3D.w = this.rawData.data[14];
                break;
            case 3:
                vector3D.x = this.rawData.data[3];
                vector3D.y = this.rawData.data[7];
                vector3D.z = this.rawData.data[11];
                vector3D.w = this.rawData.data[15];
                break;
            default:
            }
        },
        copyToMatrix3D: function(other) {
            var this1 = this.rawData;
            var vectorData = new openfl_VectorData();
            vectorData.length = this1.length;
            vectorData.fixed = this1.fixed;
            var this2;
            this2 = new Array(this1.length);
            vectorData.data = this2;
            haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
            other.rawData = vectorData;
        },
        decompose: function(orientationStyle) {
            if (orientationStyle == null) orientationStyle = 1;
            var vec;
            var this1;
            this1 = new openfl_VectorData();
            var this2;
            this2 = new Array(0);
            this1.data = this2;
            this1.length = 0;
            this1.fixed = false;
            vec = this1;
            var m = this.clone();
            var mr;
            var this3 = m.rawData;
            var vectorData = new openfl_VectorData();
            vectorData.length = this3.length;
            vectorData.fixed = this3.fixed;
            var this4;
            this4 = new Array(this3.length);
            vectorData.data = this4;
            haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, vectorData.data, 0, this3.length);
            mr = vectorData;
            var pos = new openfl_geom_Vector3D(mr.data[12], mr.data[13], mr.data[14]); {
                if (!mr.fixed) {
                    if (12 >= mr.length) mr.length = 13;
                    if (mr.data.length < mr.length) {
                        var data;
                        var this5;
                        this5 = new Array(mr.data.length + 10);
                        data = this5;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data, 0, mr.data.length);
                        mr.data = data;
                    }
                }
                mr.data[12] = 0;
            } {
                if (!mr.fixed) {
                    if (13 >= mr.length) mr.length = 14;
                    if (mr.data.length < mr.length) {
                        var data1;
                        var this6;
                        this6 = new Array(mr.data.length + 10);
                        data1 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data1, 0, mr.data.length);
                        mr.data = data1;
                    }
                }
                mr.data[13] = 0;
            } {
                if (!mr.fixed) {
                    if (14 >= mr.length) mr.length = 15;
                    if (mr.data.length < mr.length) {
                        var data2;
                        var this7;
                        this7 = new Array(mr.data.length + 10);
                        data2 = this7;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data2, 0, mr.data.length);
                        mr.data = data2;
                    }
                }
                mr.data[14] = 0;
            }
            var scale = new openfl_geom_Vector3D();
            scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
            scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
            scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
            if (mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) scale.z = -scale.z; {
                if (!mr.fixed) {
                    if (0 >= mr.length) mr.length = 1;
                    if (mr.data.length < mr.length) {
                        var data3;
                        var this8;
                        this8 = new Array(mr.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data3, 0, mr.data.length);
                        mr.data = data3;
                    }
                }
                mr.data[0] = mr.data[0] / scale.x;
            } {
                if (!mr.fixed) {
                    if (1 >= mr.length) mr.length = 2;
                    if (mr.data.length < mr.length) {
                        var data4;
                        var this9;
                        this9 = new Array(mr.data.length + 10);
                        data4 = this9;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data4, 0, mr.data.length);
                        mr.data = data4;
                    }
                }
                mr.data[1] = mr.data[1] / scale.x;
            } {
                if (!mr.fixed) {
                    if (2 >= mr.length) mr.length = 3;
                    if (mr.data.length < mr.length) {
                        var data5;
                        var this10;
                        this10 = new Array(mr.data.length + 10);
                        data5 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data5, 0, mr.data.length);
                        mr.data = data5;
                    }
                }
                mr.data[2] = mr.data[2] / scale.x;
            } {
                if (!mr.fixed) {
                    if (4 >= mr.length) mr.length = 5;
                    if (mr.data.length < mr.length) {
                        var data6;
                        var this11;
                        this11 = new Array(mr.data.length + 10);
                        data6 = this11;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data6, 0, mr.data.length);
                        mr.data = data6;
                    }
                }
                mr.data[4] = mr.data[4] / scale.y;
            } {
                if (!mr.fixed) {
                    if (5 >= mr.length) mr.length = 6;
                    if (mr.data.length < mr.length) {
                        var data7;
                        var this12;
                        this12 = new Array(mr.data.length + 10);
                        data7 = this12;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data7, 0, mr.data.length);
                        mr.data = data7;
                    }
                }
                mr.data[5] = mr.data[5] / scale.y;
            } {
                if (!mr.fixed) {
                    if (6 >= mr.length) mr.length = 7;
                    if (mr.data.length < mr.length) {
                        var data8;
                        var this13;
                        this13 = new Array(mr.data.length + 10);
                        data8 = this13;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data8, 0, mr.data.length);
                        mr.data = data8;
                    }
                }
                mr.data[6] = mr.data[6] / scale.y;
            } {
                if (!mr.fixed) {
                    if (8 >= mr.length) mr.length = 9;
                    if (mr.data.length < mr.length) {
                        var data9;
                        var this14;
                        this14 = new Array(mr.data.length + 10);
                        data9 = this14;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data9, 0, mr.data.length);
                        mr.data = data9;
                    }
                }
                mr.data[8] = mr.data[8] / scale.z;
            } {
                if (!mr.fixed) {
                    if (9 >= mr.length) mr.length = 10;
                    if (mr.data.length < mr.length) {
                        var data10;
                        var this15;
                        this15 = new Array(mr.data.length + 10);
                        data10 = this15;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data10, 0, mr.data.length);
                        mr.data = data10;
                    }
                }
                mr.data[9] = mr.data[9] / scale.z;
            } {
                if (!mr.fixed) {
                    if (10 >= mr.length) mr.length = 11;
                    if (mr.data.length < mr.length) {
                        var data11;
                        var this16;
                        this16 = new Array(mr.data.length + 10);
                        data11 = this16;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data, 0, data11, 0, mr.data.length);
                        mr.data = data11;
                    }
                }
                mr.data[10] = mr.data[10] / scale.z;
            }
            var rot = new openfl_geom_Vector3D();
            if (orientationStyle != null) switch (orientationStyle) {
            case 0:
                rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
                var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
                if (len != 0) {
                    rot.x = (mr.data[6] - mr.data[9]) / len;
                    rot.y = (mr.data[8] - mr.data[2]) / len;
                    rot.z = (mr.data[1] - mr.data[4]) / len;
                } else rot.x = rot.y = rot.z = 0;
                break;
            case 2:
                var tr = mr.data[0] + mr.data[5] + mr.data[10];
                if (tr > 0) {
                    rot.w = Math.sqrt(1 + tr) / 2;
                    rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
                    rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
                    rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
                } else if (mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
                    rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
                    rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
                    rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
                    rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
                } else if (mr.data[5] > mr.data[10]) {
                    rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
                    rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
                    rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
                    rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
                } else {
                    rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
                    rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
                    rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
                    rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
                }
                break;
            case 1:
                rot.y = Math.asin( - mr.data[2]);
                if (mr.data[2] != 1 && mr.data[2] != -1) {
                    rot.x = Math.atan2(mr.data[6], mr.data[10]);
                    rot.z = Math.atan2(mr.data[1], mr.data[0]);
                } else {
                    rot.z = 0;
                    rot.x = Math.atan2(mr.data[4], mr.data[5]);
                }
                break;
            }
            if (!vec.fixed) {
                vec.length++;
                if (vec.data.length < vec.length) {
                    var data12;
                    var this17;
                    this17 = new Array(vec.data.length + 10);
                    data12 = this17;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data12, 0, vec.data.length);
                    vec.data = data12;
                }
                vec.data[vec.length - 1] = pos;
            }
            vec.length;
            if (!vec.fixed) {
                vec.length++;
                if (vec.data.length < vec.length) {
                    var data13;
                    var this18;
                    this18 = new Array(vec.data.length + 10);
                    data13 = this18;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data13, 0, vec.data.length);
                    vec.data = data13;
                }
                vec.data[vec.length - 1] = rot;
            }
            vec.length;
            if (!vec.fixed) {
                vec.length++;
                if (vec.data.length < vec.length) {
                    var data14;
                    var this19;
                    this19 = new Array(vec.data.length + 10);
                    data14 = this19;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data, 0, data14, 0, vec.data.length);
                    vec.data = data14;
                }
                vec.data[vec.length - 1] = scale;
            }
            vec.length;
            return vec;
        },
        deltaTransformVector: function(v) {
            var x = v.x;
            var y = v.y;
            var z = v.z;
            return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3], x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7], x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11], 0);
        },
        identity: function() {
            {
                var value = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
                var vectorData = new openfl_VectorData();
                vectorData.length = value.length;
                vectorData.fixed = true;
                var vec;
                var this1;
                this1 = new Array(value.length);
                vec = this1;
                var _g1 = 0;
                var _g = value.length;
                while (_g1 < _g) {
                    var i = _g1++;
                    vec[i] = value[i];
                }
                vectorData.data = vec;
                this.rawData = vectorData;
            }
        },
        interpolateTo: function(toMat, percent) {
            var _g = 0;
            while (_g < 16) {
                var i = _g++;
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (i >= this1.length) this1.length = i + 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
            }
        },
        invert: function() {
            var d = this.get_determinant();
            var invertable = Math.abs(d) > 0.00000000001;
            if (invertable) {
                d = 1 / d;
                var m11 = this.rawData.data[0];
                var m21 = this.rawData.data[4];
                var m31 = this.rawData.data[8];
                var m41 = this.rawData.data[12];
                var m12 = this.rawData.data[1];
                var m22 = this.rawData.data[5];
                var m32 = this.rawData.data[9];
                var m42 = this.rawData.data[13];
                var m13 = this.rawData.data[2];
                var m23 = this.rawData.data[6];
                var m33 = this.rawData.data[10];
                var m43 = this.rawData.data[14];
                var m14 = this.rawData.data[3];
                var m24 = this.rawData.data[7];
                var m34 = this.rawData.data[11];
                var m44 = this.rawData.data[15];
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (0 >= this1.length) this1.length = 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
                var this3 = this.rawData;
                if (!this3.fixed) {
                    if (1 >= this3.length) this3.length = 2;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                }
                this3.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
                var this5 = this.rawData;
                if (!this5.fixed) {
                    if (2 >= this5.length) this5.length = 3;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                }
                this5.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
                var this7 = this.rawData;
                if (!this7.fixed) {
                    if (3 >= this7.length) this7.length = 4;
                    if (this7.data.length < this7.length) {
                        var data3;
                        var this8;
                        this8 = new Array(this7.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                        this7.data = data3;
                    }
                }
                this7.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
                var this9 = this.rawData;
                if (!this9.fixed) {
                    if (4 >= this9.length) this9.length = 5;
                    if (this9.data.length < this9.length) {
                        var data4;
                        var this10;
                        this10 = new Array(this9.data.length + 10);
                        data4 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                        this9.data = data4;
                    }
                }
                this9.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
                var this11 = this.rawData;
                if (!this11.fixed) {
                    if (5 >= this11.length) this11.length = 6;
                    if (this11.data.length < this11.length) {
                        var data5;
                        var this12;
                        this12 = new Array(this11.data.length + 10);
                        data5 = this12;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                        this11.data = data5;
                    }
                }
                this11.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
                var this13 = this.rawData;
                if (!this13.fixed) {
                    if (6 >= this13.length) this13.length = 7;
                    if (this13.data.length < this13.length) {
                        var data6;
                        var this14;
                        this14 = new Array(this13.data.length + 10);
                        data6 = this14;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                        this13.data = data6;
                    }
                }
                this13.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
                var this15 = this.rawData;
                if (!this15.fixed) {
                    if (7 >= this15.length) this15.length = 8;
                    if (this15.data.length < this15.length) {
                        var data7;
                        var this16;
                        this16 = new Array(this15.data.length + 10);
                        data7 = this16;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                        this15.data = data7;
                    }
                }
                this15.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
                var this17 = this.rawData;
                if (!this17.fixed) {
                    if (8 >= this17.length) this17.length = 9;
                    if (this17.data.length < this17.length) {
                        var data8;
                        var this18;
                        this18 = new Array(this17.data.length + 10);
                        data8 = this18;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                        this17.data = data8;
                    }
                }
                this17.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
                var this19 = this.rawData;
                if (!this19.fixed) {
                    if (9 >= this19.length) this19.length = 10;
                    if (this19.data.length < this19.length) {
                        var data9;
                        var this20;
                        this20 = new Array(this19.data.length + 10);
                        data9 = this20;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                        this19.data = data9;
                    }
                }
                this19.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
                var this21 = this.rawData;
                if (!this21.fixed) {
                    if (10 >= this21.length) this21.length = 11;
                    if (this21.data.length < this21.length) {
                        var data10;
                        var this22;
                        this22 = new Array(this21.data.length + 10);
                        data10 = this22;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                        this21.data = data10;
                    }
                }
                this21.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
                var this23 = this.rawData;
                if (!this23.fixed) {
                    if (11 >= this23.length) this23.length = 12;
                    if (this23.data.length < this23.length) {
                        var data11;
                        var this24;
                        this24 = new Array(this23.data.length + 10);
                        data11 = this24;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                        this23.data = data11;
                    }
                }
                this23.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
                var this25 = this.rawData;
                if (!this25.fixed) {
                    if (12 >= this25.length) this25.length = 13;
                    if (this25.data.length < this25.length) {
                        var data12;
                        var this26;
                        this26 = new Array(this25.data.length + 10);
                        data12 = this26;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                        this25.data = data12;
                    }
                }
                this25.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
                var this27 = this.rawData;
                if (!this27.fixed) {
                    if (13 >= this27.length) this27.length = 14;
                    if (this27.data.length < this27.length) {
                        var data13;
                        var this28;
                        this28 = new Array(this27.data.length + 10);
                        data13 = this28;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                        this27.data = data13;
                    }
                }
                this27.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
                var this29 = this.rawData;
                if (!this29.fixed) {
                    if (14 >= this29.length) this29.length = 15;
                    if (this29.data.length < this29.length) {
                        var data14;
                        var this30;
                        this30 = new Array(this29.data.length + 10);
                        data14 = this30;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                        this29.data = data14;
                    }
                }
                this29.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
                var this31 = this.rawData;
                if (!this31.fixed) {
                    if (15 >= this31.length) this31.length = 16;
                    if (this31.data.length < this31.length) {
                        var data15;
                        var this32;
                        this32 = new Array(this31.data.length + 10);
                        data15 = this32;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                        this31.data = data15;
                    }
                }
                this31.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
            }
            return invertable;
        },
        pointAt: function(pos, at, up) {
            if (at == null) at = new openfl_geom_Vector3D(0, 0, -1);
            if (up == null) up = new openfl_geom_Vector3D(0, -1, 0);
            var dir = at.subtract(pos);
            var vup = up.clone();
            var right;
            dir.normalize();
            vup.normalize();
            var dir2 = dir.clone();
            dir2.scaleBy(vup.dotProduct(dir));
            vup = vup.subtract(dir2);
            if (vup.get_length() > 0) vup.normalize();
            else if (dir.x != 0) vup = new openfl_geom_Vector3D( - dir.y, dir.x, 0);
            else vup = new openfl_geom_Vector3D(1, 0, 0);
            right = vup.crossProduct(dir);
            right.normalize();
            var this1 = this.rawData;
            if (!this1.fixed) {
                if (0 >= this1.length) this1.length = 1;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[0] = right.x;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (4 >= this3.length) this3.length = 5;
                if (this3.data.length < this3.length) {
                    var data1;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data1 = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                    this3.data = data1;
                }
            }
            this3.data[4] = right.y;
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (8 >= this5.length) this5.length = 9;
                if (this5.data.length < this5.length) {
                    var data2;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data2 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                    this5.data = data2;
                }
            }
            this5.data[8] = right.z;
            var this7 = this.rawData;
            if (!this7.fixed) {
                if (12 >= this7.length) this7.length = 13;
                if (this7.data.length < this7.length) {
                    var data3;
                    var this8;
                    this8 = new Array(this7.data.length + 10);
                    data3 = this8;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                    this7.data = data3;
                }
            }
            this7.data[12] = 0.0;
            var this9 = this.rawData;
            if (!this9.fixed) {
                if (1 >= this9.length) this9.length = 2;
                if (this9.data.length < this9.length) {
                    var data4;
                    var this10;
                    this10 = new Array(this9.data.length + 10);
                    data4 = this10;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                    this9.data = data4;
                }
            }
            this9.data[1] = vup.x;
            var this11 = this.rawData;
            if (!this11.fixed) {
                if (5 >= this11.length) this11.length = 6;
                if (this11.data.length < this11.length) {
                    var data5;
                    var this12;
                    this12 = new Array(this11.data.length + 10);
                    data5 = this12;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                    this11.data = data5;
                }
            }
            this11.data[5] = vup.y;
            var this13 = this.rawData;
            if (!this13.fixed) {
                if (9 >= this13.length) this13.length = 10;
                if (this13.data.length < this13.length) {
                    var data6;
                    var this14;
                    this14 = new Array(this13.data.length + 10);
                    data6 = this14;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                    this13.data = data6;
                }
            }
            this13.data[9] = vup.z;
            var this15 = this.rawData;
            if (!this15.fixed) {
                if (13 >= this15.length) this15.length = 14;
                if (this15.data.length < this15.length) {
                    var data7;
                    var this16;
                    this16 = new Array(this15.data.length + 10);
                    data7 = this16;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                    this15.data = data7;
                }
            }
            this15.data[13] = 0.0;
            var this17 = this.rawData;
            if (!this17.fixed) {
                if (2 >= this17.length) this17.length = 3;
                if (this17.data.length < this17.length) {
                    var data8;
                    var this18;
                    this18 = new Array(this17.data.length + 10);
                    data8 = this18;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                    this17.data = data8;
                }
            }
            this17.data[2] = dir.x;
            var this19 = this.rawData;
            if (!this19.fixed) {
                if (6 >= this19.length) this19.length = 7;
                if (this19.data.length < this19.length) {
                    var data9;
                    var this20;
                    this20 = new Array(this19.data.length + 10);
                    data9 = this20;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                    this19.data = data9;
                }
            }
            this19.data[6] = dir.y;
            var this21 = this.rawData;
            if (!this21.fixed) {
                if (10 >= this21.length) this21.length = 11;
                if (this21.data.length < this21.length) {
                    var data10;
                    var this22;
                    this22 = new Array(this21.data.length + 10);
                    data10 = this22;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                    this21.data = data10;
                }
            }
            this21.data[10] = dir.z;
            var this23 = this.rawData;
            if (!this23.fixed) {
                if (14 >= this23.length) this23.length = 15;
                if (this23.data.length < this23.length) {
                    var data11;
                    var this24;
                    this24 = new Array(this23.data.length + 10);
                    data11 = this24;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                    this23.data = data11;
                }
            }
            this23.data[14] = 0.0;
            var this25 = this.rawData;
            if (!this25.fixed) {
                if (3 >= this25.length) this25.length = 4;
                if (this25.data.length < this25.length) {
                    var data12;
                    var this26;
                    this26 = new Array(this25.data.length + 10);
                    data12 = this26;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                    this25.data = data12;
                }
            }
            this25.data[3] = pos.x;
            var this27 = this.rawData;
            if (!this27.fixed) {
                if (7 >= this27.length) this27.length = 8;
                if (this27.data.length < this27.length) {
                    var data13;
                    var this28;
                    this28 = new Array(this27.data.length + 10);
                    data13 = this28;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                    this27.data = data13;
                }
            }
            this27.data[7] = pos.y;
            var this29 = this.rawData;
            if (!this29.fixed) {
                if (11 >= this29.length) this29.length = 12;
                if (this29.data.length < this29.length) {
                    var data14;
                    var this30;
                    this30 = new Array(this29.data.length + 10);
                    data14 = this30;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                    this29.data = data14;
                }
            }
            this29.data[11] = pos.z;
            var this31 = this.rawData;
            if (!this31.fixed) {
                if (15 >= this31.length) this31.length = 16;
                if (this31.data.length < this31.length) {
                    var data15;
                    var this32;
                    this32 = new Array(this31.data.length + 10);
                    data15 = this32;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                    this31.data = data15;
                }
            }
            this31.data[15] = 1.0;
        },
        prepend: function(rhs) {
            var m111 = rhs.rawData.data[0];
            var m121 = rhs.rawData.data[4];
            var m131 = rhs.rawData.data[8];
            var m141 = rhs.rawData.data[12];
            var m112 = rhs.rawData.data[1];
            var m122 = rhs.rawData.data[5];
            var m132 = rhs.rawData.data[9];
            var m142 = rhs.rawData.data[13];
            var m113 = rhs.rawData.data[2];
            var m123 = rhs.rawData.data[6];
            var m133 = rhs.rawData.data[10];
            var m143 = rhs.rawData.data[14];
            var m114 = rhs.rawData.data[3];
            var m124 = rhs.rawData.data[7];
            var m134 = rhs.rawData.data[11];
            var m144 = rhs.rawData.data[15];
            var m211 = this.rawData.data[0];
            var m221 = this.rawData.data[4];
            var m231 = this.rawData.data[8];
            var m241 = this.rawData.data[12];
            var m212 = this.rawData.data[1];
            var m222 = this.rawData.data[5];
            var m232 = this.rawData.data[9];
            var m242 = this.rawData.data[13];
            var m213 = this.rawData.data[2];
            var m223 = this.rawData.data[6];
            var m233 = this.rawData.data[10];
            var m243 = this.rawData.data[14];
            var m214 = this.rawData.data[3];
            var m224 = this.rawData.data[7];
            var m234 = this.rawData.data[11];
            var m244 = this.rawData.data[15];
            var this1 = this.rawData;
            if (!this1.fixed) {
                if (0 >= this1.length) this1.length = 1;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (1 >= this3.length) this3.length = 2;
                if (this3.data.length < this3.length) {
                    var data1;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data1 = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                    this3.data = data1;
                }
            }
            this3.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (2 >= this5.length) this5.length = 3;
                if (this5.data.length < this5.length) {
                    var data2;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data2 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                    this5.data = data2;
                }
            }
            this5.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
            var this7 = this.rawData;
            if (!this7.fixed) {
                if (3 >= this7.length) this7.length = 4;
                if (this7.data.length < this7.length) {
                    var data3;
                    var this8;
                    this8 = new Array(this7.data.length + 10);
                    data3 = this8;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                    this7.data = data3;
                }
            }
            this7.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
            var this9 = this.rawData;
            if (!this9.fixed) {
                if (4 >= this9.length) this9.length = 5;
                if (this9.data.length < this9.length) {
                    var data4;
                    var this10;
                    this10 = new Array(this9.data.length + 10);
                    data4 = this10;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                    this9.data = data4;
                }
            }
            this9.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
            var this11 = this.rawData;
            if (!this11.fixed) {
                if (5 >= this11.length) this11.length = 6;
                if (this11.data.length < this11.length) {
                    var data5;
                    var this12;
                    this12 = new Array(this11.data.length + 10);
                    data5 = this12;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                    this11.data = data5;
                }
            }
            this11.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
            var this13 = this.rawData;
            if (!this13.fixed) {
                if (6 >= this13.length) this13.length = 7;
                if (this13.data.length < this13.length) {
                    var data6;
                    var this14;
                    this14 = new Array(this13.data.length + 10);
                    data6 = this14;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                    this13.data = data6;
                }
            }
            this13.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
            var this15 = this.rawData;
            if (!this15.fixed) {
                if (7 >= this15.length) this15.length = 8;
                if (this15.data.length < this15.length) {
                    var data7;
                    var this16;
                    this16 = new Array(this15.data.length + 10);
                    data7 = this16;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                    this15.data = data7;
                }
            }
            this15.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
            var this17 = this.rawData;
            if (!this17.fixed) {
                if (8 >= this17.length) this17.length = 9;
                if (this17.data.length < this17.length) {
                    var data8;
                    var this18;
                    this18 = new Array(this17.data.length + 10);
                    data8 = this18;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                    this17.data = data8;
                }
            }
            this17.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
            var this19 = this.rawData;
            if (!this19.fixed) {
                if (9 >= this19.length) this19.length = 10;
                if (this19.data.length < this19.length) {
                    var data9;
                    var this20;
                    this20 = new Array(this19.data.length + 10);
                    data9 = this20;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                    this19.data = data9;
                }
            }
            this19.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
            var this21 = this.rawData;
            if (!this21.fixed) {
                if (10 >= this21.length) this21.length = 11;
                if (this21.data.length < this21.length) {
                    var data10;
                    var this22;
                    this22 = new Array(this21.data.length + 10);
                    data10 = this22;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                    this21.data = data10;
                }
            }
            this21.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
            var this23 = this.rawData;
            if (!this23.fixed) {
                if (11 >= this23.length) this23.length = 12;
                if (this23.data.length < this23.length) {
                    var data11;
                    var this24;
                    this24 = new Array(this23.data.length + 10);
                    data11 = this24;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                    this23.data = data11;
                }
            }
            this23.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
            var this25 = this.rawData;
            if (!this25.fixed) {
                if (12 >= this25.length) this25.length = 13;
                if (this25.data.length < this25.length) {
                    var data12;
                    var this26;
                    this26 = new Array(this25.data.length + 10);
                    data12 = this26;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                    this25.data = data12;
                }
            }
            this25.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
            var this27 = this.rawData;
            if (!this27.fixed) {
                if (13 >= this27.length) this27.length = 14;
                if (this27.data.length < this27.length) {
                    var data13;
                    var this28;
                    this28 = new Array(this27.data.length + 10);
                    data13 = this28;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                    this27.data = data13;
                }
            }
            this27.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
            var this29 = this.rawData;
            if (!this29.fixed) {
                if (14 >= this29.length) this29.length = 15;
                if (this29.data.length < this29.length) {
                    var data14;
                    var this30;
                    this30 = new Array(this29.data.length + 10);
                    data14 = this30;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                    this29.data = data14;
                }
            }
            this29.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
            var this31 = this.rawData;
            if (!this31.fixed) {
                if (15 >= this31.length) this31.length = 16;
                if (this31.data.length < this31.length) {
                    var data15;
                    var this32;
                    this32 = new Array(this31.data.length + 10);
                    data15 = this32;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                    this31.data = data15;
                }
            }
            this31.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
        },
        prependRotation: function(degrees, axis, pivotPoint) {
            var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x, axis.y, axis.z, degrees);
            if (pivotPoint != null) {
                var p = pivotPoint;
                m.appendTranslation(p.x, p.y, p.z);
            }
            this.prepend(m);
        },
        prependScale: function(xScale, yScale, zScale) {
            this.prepend(new openfl_geom_Matrix3D((function($this) {
                var $r;
                var value = [xScale, 0.0, 0.0, 0.0, 0.0, yScale, 0.0, 0.0, 0.0, 0.0, zScale, 0.0, 0.0, 0.0, 0.0, 1.0];
                var vectorData = new openfl_VectorData();
                vectorData.length = value.length;
                vectorData.fixed = true; {
                    var vec;
                    var this1;
                    this1 = new Array(value.length);
                    vec = this1;
                    var _g1 = 0;
                    var _g = value.length;
                    while (_g1 < _g) {
                        var i = _g1++;
                        vec[i] = value[i];
                    }
                    vectorData.data = vec;
                }
                $r = vectorData;
                return $r;
            } (this))));
        },
        prependTranslation: function(x, y, z) {
            var m = new openfl_geom_Matrix3D();
            m.set_position(new openfl_geom_Vector3D(x, y, z));
            this.prepend(m);
        },
        recompose: function(components, orientationStyle) {
            if (components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) return false;
            if (orientationStyle == null) orientationStyle = 1;
            this.identity();
            var scale = [];
            scale[0] = scale[1] = scale[2] = components.data[2].x;
            scale[4] = scale[5] = scale[6] = components.data[2].y;
            scale[8] = scale[9] = scale[10] = components.data[2].z;
            if (orientationStyle != null) switch (orientationStyle) {
            case 1:
                var cx = Math.cos(components.data[1].x);
                var cy = Math.cos(components.data[1].y);
                var cz = Math.cos(components.data[1].z);
                var sx = Math.sin(components.data[1].x);
                var sy = Math.sin(components.data[1].y);
                var sz = Math.sin(components.data[1].z);
                var this1 = this.rawData;
                if (!this1.fixed) {
                    if (0 >= this1.length) this1.length = 1;
                    if (this1.data.length < this1.length) {
                        var data;
                        var this2;
                        this2 = new Array(this1.data.length + 10);
                        data = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                        this1.data = data;
                    }
                }
                this1.data[0] = cy * cz * scale[0];
                var this3 = this.rawData;
                if (!this3.fixed) {
                    if (1 >= this3.length) this3.length = 2;
                    if (this3.data.length < this3.length) {
                        var data1;
                        var this4;
                        this4 = new Array(this3.data.length + 10);
                        data1 = this4;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                        this3.data = data1;
                    }
                }
                this3.data[1] = cy * sz * scale[1];
                var this5 = this.rawData;
                if (!this5.fixed) {
                    if (2 >= this5.length) this5.length = 3;
                    if (this5.data.length < this5.length) {
                        var data2;
                        var this6;
                        this6 = new Array(this5.data.length + 10);
                        data2 = this6;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                        this5.data = data2;
                    }
                }
                this5.data[2] = -sy * scale[2];
                var this7 = this.rawData;
                if (!this7.fixed) {
                    if (3 >= this7.length) this7.length = 4;
                    if (this7.data.length < this7.length) {
                        var data3;
                        var this8;
                        this8 = new Array(this7.data.length + 10);
                        data3 = this8;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data3, 0, this7.data.length);
                        this7.data = data3;
                    }
                }
                this7.data[3] = 0;
                var this9 = this.rawData;
                if (!this9.fixed) {
                    if (4 >= this9.length) this9.length = 5;
                    if (this9.data.length < this9.length) {
                        var data4;
                        var this10;
                        this10 = new Array(this9.data.length + 10);
                        data4 = this10;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data4, 0, this9.data.length);
                        this9.data = data4;
                    }
                }
                this9.data[4] = (sx * sy * cz - cx * sz) * scale[4];
                var this11 = this.rawData;
                if (!this11.fixed) {
                    if (5 >= this11.length) this11.length = 6;
                    if (this11.data.length < this11.length) {
                        var data5;
                        var this12;
                        this12 = new Array(this11.data.length + 10);
                        data5 = this12;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data5, 0, this11.data.length);
                        this11.data = data5;
                    }
                }
                this11.data[5] = (sx * sy * sz + cx * cz) * scale[5];
                var this13 = this.rawData;
                if (!this13.fixed) {
                    if (6 >= this13.length) this13.length = 7;
                    if (this13.data.length < this13.length) {
                        var data6;
                        var this14;
                        this14 = new Array(this13.data.length + 10);
                        data6 = this14;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data6, 0, this13.data.length);
                        this13.data = data6;
                    }
                }
                this13.data[6] = sx * cy * scale[6];
                var this15 = this.rawData;
                if (!this15.fixed) {
                    if (7 >= this15.length) this15.length = 8;
                    if (this15.data.length < this15.length) {
                        var data7;
                        var this16;
                        this16 = new Array(this15.data.length + 10);
                        data7 = this16;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data7, 0, this15.data.length);
                        this15.data = data7;
                    }
                }
                this15.data[7] = 0;
                var this17 = this.rawData;
                if (!this17.fixed) {
                    if (8 >= this17.length) this17.length = 9;
                    if (this17.data.length < this17.length) {
                        var data8;
                        var this18;
                        this18 = new Array(this17.data.length + 10);
                        data8 = this18;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data8, 0, this17.data.length);
                        this17.data = data8;
                    }
                }
                this17.data[8] = (cx * sy * cz + sx * sz) * scale[8];
                var this19 = this.rawData;
                if (!this19.fixed) {
                    if (9 >= this19.length) this19.length = 10;
                    if (this19.data.length < this19.length) {
                        var data9;
                        var this20;
                        this20 = new Array(this19.data.length + 10);
                        data9 = this20;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data9, 0, this19.data.length);
                        this19.data = data9;
                    }
                }
                this19.data[9] = (cx * sy * sz - sx * cz) * scale[9];
                var this21 = this.rawData;
                if (!this21.fixed) {
                    if (10 >= this21.length) this21.length = 11;
                    if (this21.data.length < this21.length) {
                        var data10;
                        var this22;
                        this22 = new Array(this21.data.length + 10);
                        data10 = this22;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data10, 0, this21.data.length);
                        this21.data = data10;
                    }
                }
                this21.data[10] = cx * cy * scale[10];
                var this23 = this.rawData;
                if (!this23.fixed) {
                    if (11 >= this23.length) this23.length = 12;
                    if (this23.data.length < this23.length) {
                        var data11;
                        var this24;
                        this24 = new Array(this23.data.length + 10);
                        data11 = this24;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data11, 0, this23.data.length);
                        this23.data = data11;
                    }
                }
                this23.data[11] = 0;
                var this25 = this.rawData;
                if (!this25.fixed) {
                    if (12 >= this25.length) this25.length = 13;
                    if (this25.data.length < this25.length) {
                        var data12;
                        var this26;
                        this26 = new Array(this25.data.length + 10);
                        data12 = this26;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data12, 0, this25.data.length);
                        this25.data = data12;
                    }
                }
                this25.data[12] = components.data[0].x;
                var this27 = this.rawData;
                if (!this27.fixed) {
                    if (13 >= this27.length) this27.length = 14;
                    if (this27.data.length < this27.length) {
                        var data13;
                        var this28;
                        this28 = new Array(this27.data.length + 10);
                        data13 = this28;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data, 0, data13, 0, this27.data.length);
                        this27.data = data13;
                    }
                }
                this27.data[13] = components.data[0].y;
                var this29 = this.rawData;
                if (!this29.fixed) {
                    if (14 >= this29.length) this29.length = 15;
                    if (this29.data.length < this29.length) {
                        var data14;
                        var this30;
                        this30 = new Array(this29.data.length + 10);
                        data14 = this30;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data, 0, data14, 0, this29.data.length);
                        this29.data = data14;
                    }
                }
                this29.data[14] = components.data[0].z;
                var this31 = this.rawData;
                if (!this31.fixed) {
                    if (15 >= this31.length) this31.length = 16;
                    if (this31.data.length < this31.length) {
                        var data15;
                        var this32;
                        this32 = new Array(this31.data.length + 10);
                        data15 = this32;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data, 0, data15, 0, this31.data.length);
                        this31.data = data15;
                    }
                }
                this31.data[15] = 1;
                break;
            default:
                var x = components.data[1].x;
                var y = components.data[1].y;
                var z = components.data[1].z;
                var w = components.data[1].w;
                if (Type.enumEq(orientationStyle, 0)) {
                    x *= Math.sin(w / 2);
                    y *= Math.sin(w / 2);
                    z *= Math.sin(w / 2);
                    w = Math.cos(w / 2);
                }
                var this33 = this.rawData;
                if (!this33.fixed) {
                    if (0 >= this33.length) this33.length = 1;
                    if (this33.data.length < this33.length) {
                        var data16;
                        var this34;
                        this34 = new Array(this33.data.length + 10);
                        data16 = this34;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data, 0, data16, 0, this33.data.length);
                        this33.data = data16;
                    }
                }
                this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
                var this35 = this.rawData;
                if (!this35.fixed) {
                    if (1 >= this35.length) this35.length = 2;
                    if (this35.data.length < this35.length) {
                        var data17;
                        var this36;
                        this36 = new Array(this35.data.length + 10);
                        data17 = this36;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data, 0, data17, 0, this35.data.length);
                        this35.data = data17;
                    }
                }
                this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
                var this37 = this.rawData;
                if (!this37.fixed) {
                    if (2 >= this37.length) this37.length = 3;
                    if (this37.data.length < this37.length) {
                        var data18;
                        var this38;
                        this38 = new Array(this37.data.length + 10);
                        data18 = this38;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data, 0, data18, 0, this37.data.length);
                        this37.data = data18;
                    }
                }
                this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
                var this39 = this.rawData;
                if (!this39.fixed) {
                    if (3 >= this39.length) this39.length = 4;
                    if (this39.data.length < this39.length) {
                        var data19;
                        var this40;
                        this40 = new Array(this39.data.length + 10);
                        data19 = this40;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data, 0, data19, 0, this39.data.length);
                        this39.data = data19;
                    }
                }
                this39.data[3] = 0;
                var this41 = this.rawData;
                if (!this41.fixed) {
                    if (4 >= this41.length) this41.length = 5;
                    if (this41.data.length < this41.length) {
                        var data20;
                        var this42;
                        this42 = new Array(this41.data.length + 10);
                        data20 = this42;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data, 0, data20, 0, this41.data.length);
                        this41.data = data20;
                    }
                }
                this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
                var this43 = this.rawData;
                if (!this43.fixed) {
                    if (5 >= this43.length) this43.length = 6;
                    if (this43.data.length < this43.length) {
                        var data21;
                        var this44;
                        this44 = new Array(this43.data.length + 10);
                        data21 = this44;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data, 0, data21, 0, this43.data.length);
                        this43.data = data21;
                    }
                }
                this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
                var this45 = this.rawData;
                if (!this45.fixed) {
                    if (6 >= this45.length) this45.length = 7;
                    if (this45.data.length < this45.length) {
                        var data22;
                        var this46;
                        this46 = new Array(this45.data.length + 10);
                        data22 = this46;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data, 0, data22, 0, this45.data.length);
                        this45.data = data22;
                    }
                }
                this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
                var this47 = this.rawData;
                if (!this47.fixed) {
                    if (7 >= this47.length) this47.length = 8;
                    if (this47.data.length < this47.length) {
                        var data23;
                        var this48;
                        this48 = new Array(this47.data.length + 10);
                        data23 = this48;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data, 0, data23, 0, this47.data.length);
                        this47.data = data23;
                    }
                }
                this47.data[7] = 0;
                var this49 = this.rawData;
                if (!this49.fixed) {
                    if (8 >= this49.length) this49.length = 9;
                    if (this49.data.length < this49.length) {
                        var data24;
                        var this50;
                        this50 = new Array(this49.data.length + 10);
                        data24 = this50;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data, 0, data24, 0, this49.data.length);
                        this49.data = data24;
                    }
                }
                this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
                var this51 = this.rawData;
                if (!this51.fixed) {
                    if (9 >= this51.length) this51.length = 10;
                    if (this51.data.length < this51.length) {
                        var data25;
                        var this52;
                        this52 = new Array(this51.data.length + 10);
                        data25 = this52;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data, 0, data25, 0, this51.data.length);
                        this51.data = data25;
                    }
                }
                this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
                var this53 = this.rawData;
                if (!this53.fixed) {
                    if (10 >= this53.length) this53.length = 11;
                    if (this53.data.length < this53.length) {
                        var data26;
                        var this54;
                        this54 = new Array(this53.data.length + 10);
                        data26 = this54;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data, 0, data26, 0, this53.data.length);
                        this53.data = data26;
                    }
                }
                this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
                var this55 = this.rawData;
                if (!this55.fixed) {
                    if (11 >= this55.length) this55.length = 12;
                    if (this55.data.length < this55.length) {
                        var data27;
                        var this56;
                        this56 = new Array(this55.data.length + 10);
                        data27 = this56;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data, 0, data27, 0, this55.data.length);
                        this55.data = data27;
                    }
                }
                this55.data[11] = 0;
                var this57 = this.rawData;
                if (!this57.fixed) {
                    if (12 >= this57.length) this57.length = 13;
                    if (this57.data.length < this57.length) {
                        var data28;
                        var this58;
                        this58 = new Array(this57.data.length + 10);
                        data28 = this58;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data, 0, data28, 0, this57.data.length);
                        this57.data = data28;
                    }
                }
                this57.data[12] = components.data[0].x;
                var this59 = this.rawData;
                if (!this59.fixed) {
                    if (13 >= this59.length) this59.length = 14;
                    if (this59.data.length < this59.length) {
                        var data29;
                        var this60;
                        this60 = new Array(this59.data.length + 10);
                        data29 = this60;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data, 0, data29, 0, this59.data.length);
                        this59.data = data29;
                    }
                }
                this59.data[13] = components.data[0].y;
                var this61 = this.rawData;
                if (!this61.fixed) {
                    if (14 >= this61.length) this61.length = 15;
                    if (this61.data.length < this61.length) {
                        var data30;
                        var this62;
                        this62 = new Array(this61.data.length + 10);
                        data30 = this62;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data, 0, data30, 0, this61.data.length);
                        this61.data = data30;
                    }
                }
                this61.data[14] = components.data[0].z;
                var this63 = this.rawData;
                if (!this63.fixed) {
                    if (15 >= this63.length) this63.length = 16;
                    if (this63.data.length < this63.length) {
                        var data31;
                        var this64;
                        this64 = new Array(this63.data.length + 10);
                        data31 = this64;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data, 0, data31, 0, this63.data.length);
                        this63.data = data31;
                    }
                }
                this63.data[15] = 1;
            } else {
                var x = components.data[1].x;
                var y = components.data[1].y;
                var z = components.data[1].z;
                var w = components.data[1].w;
                if (Type.enumEq(orientationStyle, 0)) {
                    x *= Math.sin(w / 2);
                    y *= Math.sin(w / 2);
                    z *= Math.sin(w / 2);
                    w = Math.cos(w / 2);
                }
                var this33 = this.rawData;
                if (!this33.fixed) {
                    if (0 >= this33.length) this33.length = 1;
                    if (this33.data.length < this33.length) {
                        var data16;
                        var this34;
                        this34 = new Array(this33.data.length + 10);
                        data16 = this34;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data, 0, data16, 0, this33.data.length);
                        this33.data = data16;
                    }
                }
                this33.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
                var this35 = this.rawData;
                if (!this35.fixed) {
                    if (1 >= this35.length) this35.length = 2;
                    if (this35.data.length < this35.length) {
                        var data17;
                        var this36;
                        this36 = new Array(this35.data.length + 10);
                        data17 = this36;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data, 0, data17, 0, this35.data.length);
                        this35.data = data17;
                    }
                }
                this35.data[1] = (2 * x * y + 2 * w * z) * scale[1];
                var this37 = this.rawData;
                if (!this37.fixed) {
                    if (2 >= this37.length) this37.length = 3;
                    if (this37.data.length < this37.length) {
                        var data18;
                        var this38;
                        this38 = new Array(this37.data.length + 10);
                        data18 = this38;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data, 0, data18, 0, this37.data.length);
                        this37.data = data18;
                    }
                }
                this37.data[2] = (2 * x * z - 2 * w * y) * scale[2];
                var this39 = this.rawData;
                if (!this39.fixed) {
                    if (3 >= this39.length) this39.length = 4;
                    if (this39.data.length < this39.length) {
                        var data19;
                        var this40;
                        this40 = new Array(this39.data.length + 10);
                        data19 = this40;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data, 0, data19, 0, this39.data.length);
                        this39.data = data19;
                    }
                }
                this39.data[3] = 0;
                var this41 = this.rawData;
                if (!this41.fixed) {
                    if (4 >= this41.length) this41.length = 5;
                    if (this41.data.length < this41.length) {
                        var data20;
                        var this42;
                        this42 = new Array(this41.data.length + 10);
                        data20 = this42;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data, 0, data20, 0, this41.data.length);
                        this41.data = data20;
                    }
                }
                this41.data[4] = (2 * x * y - 2 * w * z) * scale[4];
                var this43 = this.rawData;
                if (!this43.fixed) {
                    if (5 >= this43.length) this43.length = 6;
                    if (this43.data.length < this43.length) {
                        var data21;
                        var this44;
                        this44 = new Array(this43.data.length + 10);
                        data21 = this44;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data, 0, data21, 0, this43.data.length);
                        this43.data = data21;
                    }
                }
                this43.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
                var this45 = this.rawData;
                if (!this45.fixed) {
                    if (6 >= this45.length) this45.length = 7;
                    if (this45.data.length < this45.length) {
                        var data22;
                        var this46;
                        this46 = new Array(this45.data.length + 10);
                        data22 = this46;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data, 0, data22, 0, this45.data.length);
                        this45.data = data22;
                    }
                }
                this45.data[6] = (2 * y * z + 2 * w * x) * scale[6];
                var this47 = this.rawData;
                if (!this47.fixed) {
                    if (7 >= this47.length) this47.length = 8;
                    if (this47.data.length < this47.length) {
                        var data23;
                        var this48;
                        this48 = new Array(this47.data.length + 10);
                        data23 = this48;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data, 0, data23, 0, this47.data.length);
                        this47.data = data23;
                    }
                }
                this47.data[7] = 0;
                var this49 = this.rawData;
                if (!this49.fixed) {
                    if (8 >= this49.length) this49.length = 9;
                    if (this49.data.length < this49.length) {
                        var data24;
                        var this50;
                        this50 = new Array(this49.data.length + 10);
                        data24 = this50;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data, 0, data24, 0, this49.data.length);
                        this49.data = data24;
                    }
                }
                this49.data[8] = (2 * x * z + 2 * w * y) * scale[8];
                var this51 = this.rawData;
                if (!this51.fixed) {
                    if (9 >= this51.length) this51.length = 10;
                    if (this51.data.length < this51.length) {
                        var data25;
                        var this52;
                        this52 = new Array(this51.data.length + 10);
                        data25 = this52;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data, 0, data25, 0, this51.data.length);
                        this51.data = data25;
                    }
                }
                this51.data[9] = (2 * y * z - 2 * w * x) * scale[9];
                var this53 = this.rawData;
                if (!this53.fixed) {
                    if (10 >= this53.length) this53.length = 11;
                    if (this53.data.length < this53.length) {
                        var data26;
                        var this54;
                        this54 = new Array(this53.data.length + 10);
                        data26 = this54;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this53.data, 0, data26, 0, this53.data.length);
                        this53.data = data26;
                    }
                }
                this53.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
                var this55 = this.rawData;
                if (!this55.fixed) {
                    if (11 >= this55.length) this55.length = 12;
                    if (this55.data.length < this55.length) {
                        var data27;
                        var this56;
                        this56 = new Array(this55.data.length + 10);
                        data27 = this56;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this55.data, 0, data27, 0, this55.data.length);
                        this55.data = data27;
                    }
                }
                this55.data[11] = 0;
                var this57 = this.rawData;
                if (!this57.fixed) {
                    if (12 >= this57.length) this57.length = 13;
                    if (this57.data.length < this57.length) {
                        var data28;
                        var this58;
                        this58 = new Array(this57.data.length + 10);
                        data28 = this58;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this57.data, 0, data28, 0, this57.data.length);
                        this57.data = data28;
                    }
                }
                this57.data[12] = components.data[0].x;
                var this59 = this.rawData;
                if (!this59.fixed) {
                    if (13 >= this59.length) this59.length = 14;
                    if (this59.data.length < this59.length) {
                        var data29;
                        var this60;
                        this60 = new Array(this59.data.length + 10);
                        data29 = this60;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this59.data, 0, data29, 0, this59.data.length);
                        this59.data = data29;
                    }
                }
                this59.data[13] = components.data[0].y;
                var this61 = this.rawData;
                if (!this61.fixed) {
                    if (14 >= this61.length) this61.length = 15;
                    if (this61.data.length < this61.length) {
                        var data30;
                        var this62;
                        this62 = new Array(this61.data.length + 10);
                        data30 = this62;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this61.data, 0, data30, 0, this61.data.length);
                        this61.data = data30;
                    }
                }
                this61.data[14] = components.data[0].z;
                var this63 = this.rawData;
                if (!this63.fixed) {
                    if (15 >= this63.length) this63.length = 16;
                    if (this63.data.length < this63.length) {
                        var data31;
                        var this64;
                        this64 = new Array(this63.data.length + 10);
                        data31 = this64;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this63.data, 0, data31, 0, this63.data.length);
                        this63.data = data31;
                    }
                }
                this63.data[15] = 1;
            }
            if (components.data[2].x == 0) {
                var this65 = this.rawData;
                if (!this65.fixed) {
                    if (0 >= this65.length) this65.length = 1;
                    if (this65.data.length < this65.length) {
                        var data32;
                        var this66;
                        this66 = new Array(this65.data.length + 10);
                        data32 = this66;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this65.data, 0, data32, 0, this65.data.length);
                        this65.data = data32;
                    }
                }
                this65.data[0] = 1e-15;
            }
            if (components.data[2].y == 0) {
                var this67 = this.rawData;
                if (!this67.fixed) {
                    if (5 >= this67.length) this67.length = 6;
                    if (this67.data.length < this67.length) {
                        var data33;
                        var this68;
                        this68 = new Array(this67.data.length + 10);
                        data33 = this68;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this67.data, 0, data33, 0, this67.data.length);
                        this67.data = data33;
                    }
                }
                this67.data[5] = 1e-15;
            }
            if (components.data[2].z == 0) {
                var this69 = this.rawData;
                if (!this69.fixed) {
                    if (10 >= this69.length) this69.length = 11;
                    if (this69.data.length < this69.length) {
                        var data34;
                        var this70;
                        this70 = new Array(this69.data.length + 10);
                        data34 = this70;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(this69.data, 0, data34, 0, this69.data.length);
                        this69.data = data34;
                    }
                }
                this69.data[10] = 1e-15;
            }
            return ! (components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
        },
        transformVector: function(v) {
            var x = v.x;
            var y = v.y;
            var z = v.z;
            return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12], x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13], x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14], x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
        },
        transformVectors: function(vin, vout) {
            var i = 0;
            var x;
            var y;
            var z;
            while (i + 3 <= vin.length) {
                x = vin.data[i];
                y = vin.data[i + 1];
                z = vin.data[i + 2]; {
                    if (!vout.fixed) {
                        if (i >= vout.length) vout.length = i + 1;
                        if (vout.data.length < vout.length) {
                            var data;
                            var this1;
                            this1 = new Array(vout.data.length + 10);
                            data = this1;
                            haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data, 0, vout.data.length);
                            vout.data = data;
                        }
                    }
                    vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
                }
                var key = i + 1;
                if (!vout.fixed) {
                    if (key >= vout.length) vout.length = key + 1;
                    if (vout.data.length < vout.length) {
                        var data1;
                        var this2;
                        this2 = new Array(vout.data.length + 10);
                        data1 = this2;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data1, 0, vout.data.length);
                        vout.data = data1;
                    }
                }
                vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
                var key1 = i + 2;
                if (!vout.fixed) {
                    if (key1 >= vout.length) vout.length = key1 + 1;
                    if (vout.data.length < vout.length) {
                        var data2;
                        var this3;
                        this3 = new Array(vout.data.length + 10);
                        data2 = this3;
                        haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data, 0, data2, 0, vout.data.length);
                        vout.data = data2;
                    }
                }
                vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
                i += 3;
            }
        },
        transpose: function() {
            var oRawData;
            var this1 = this.rawData;
            var vectorData = new openfl_VectorData();
            vectorData.length = this1.length;
            vectorData.fixed = this1.fixed;
            var this2;
            this2 = new Array(this1.length);
            vectorData.data = this2;
            haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, vectorData.data, 0, this1.length);
            oRawData = vectorData;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (1 >= this3.length) this3.length = 2;
                if (this3.data.length < this3.length) {
                    var data;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data, 0, this3.data.length);
                    this3.data = data;
                }
            }
            this3.data[1] = oRawData.data[4];
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (2 >= this5.length) this5.length = 3;
                if (this5.data.length < this5.length) {
                    var data1;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data1 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data1, 0, this5.data.length);
                    this5.data = data1;
                }
            }
            this5.data[2] = oRawData.data[8];
            var this7 = this.rawData;
            if (!this7.fixed) {
                if (3 >= this7.length) this7.length = 4;
                if (this7.data.length < this7.length) {
                    var data2;
                    var this8;
                    this8 = new Array(this7.data.length + 10);
                    data2 = this8;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data, 0, data2, 0, this7.data.length);
                    this7.data = data2;
                }
            }
            this7.data[3] = oRawData.data[12];
            var this9 = this.rawData;
            if (!this9.fixed) {
                if (4 >= this9.length) this9.length = 5;
                if (this9.data.length < this9.length) {
                    var data3;
                    var this10;
                    this10 = new Array(this9.data.length + 10);
                    data3 = this10;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data, 0, data3, 0, this9.data.length);
                    this9.data = data3;
                }
            }
            this9.data[4] = oRawData.data[1];
            var this11 = this.rawData;
            if (!this11.fixed) {
                if (6 >= this11.length) this11.length = 7;
                if (this11.data.length < this11.length) {
                    var data4;
                    var this12;
                    this12 = new Array(this11.data.length + 10);
                    data4 = this12;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data, 0, data4, 0, this11.data.length);
                    this11.data = data4;
                }
            }
            this11.data[6] = oRawData.data[9];
            var this13 = this.rawData;
            if (!this13.fixed) {
                if (7 >= this13.length) this13.length = 8;
                if (this13.data.length < this13.length) {
                    var data5;
                    var this14;
                    this14 = new Array(this13.data.length + 10);
                    data5 = this14;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data, 0, data5, 0, this13.data.length);
                    this13.data = data5;
                }
            }
            this13.data[7] = oRawData.data[13];
            var this15 = this.rawData;
            if (!this15.fixed) {
                if (8 >= this15.length) this15.length = 9;
                if (this15.data.length < this15.length) {
                    var data6;
                    var this16;
                    this16 = new Array(this15.data.length + 10);
                    data6 = this16;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data, 0, data6, 0, this15.data.length);
                    this15.data = data6;
                }
            }
            this15.data[8] = oRawData.data[2];
            var this17 = this.rawData;
            if (!this17.fixed) {
                if (9 >= this17.length) this17.length = 10;
                if (this17.data.length < this17.length) {
                    var data7;
                    var this18;
                    this18 = new Array(this17.data.length + 10);
                    data7 = this18;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data, 0, data7, 0, this17.data.length);
                    this17.data = data7;
                }
            }
            this17.data[9] = oRawData.data[6];
            var this19 = this.rawData;
            if (!this19.fixed) {
                if (11 >= this19.length) this19.length = 12;
                if (this19.data.length < this19.length) {
                    var data8;
                    var this20;
                    this20 = new Array(this19.data.length + 10);
                    data8 = this20;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data, 0, data8, 0, this19.data.length);
                    this19.data = data8;
                }
            }
            this19.data[11] = oRawData.data[14];
            var this21 = this.rawData;
            if (!this21.fixed) {
                if (12 >= this21.length) this21.length = 13;
                if (this21.data.length < this21.length) {
                    var data9;
                    var this22;
                    this22 = new Array(this21.data.length + 10);
                    data9 = this22;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data, 0, data9, 0, this21.data.length);
                    this21.data = data9;
                }
            }
            this21.data[12] = oRawData.data[3];
            var this23 = this.rawData;
            if (!this23.fixed) {
                if (13 >= this23.length) this23.length = 14;
                if (this23.data.length < this23.length) {
                    var data10;
                    var this24;
                    this24 = new Array(this23.data.length + 10);
                    data10 = this24;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data, 0, data10, 0, this23.data.length);
                    this23.data = data10;
                }
            }
            this23.data[13] = oRawData.data[7];
            var this25 = this.rawData;
            if (!this25.fixed) {
                if (14 >= this25.length) this25.length = 15;
                if (this25.data.length < this25.length) {
                    var data11;
                    var this26;
                    this26 = new Array(this25.data.length + 10);
                    data11 = this26;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data, 0, data11, 0, this25.data.length);
                    this25.data = data11;
                }
            }
            this25.data[14] = oRawData.data[11];
        },
        get_determinant: function() {
            return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
        },
        get_position: function() {
            return new openfl_geom_Vector3D(this.rawData.data[12], this.rawData.data[13], this.rawData.data[14]);
        },
        set_position: function(val) {
            var this1 = this.rawData;
            if (!this1.fixed) {
                if (12 >= this1.length) this1.length = 13;
                if (this1.data.length < this1.length) {
                    var data;
                    var this2;
                    this2 = new Array(this1.data.length + 10);
                    data = this2;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data, 0, data, 0, this1.data.length);
                    this1.data = data;
                }
            }
            this1.data[12] = val.x;
            var this3 = this.rawData;
            if (!this3.fixed) {
                if (13 >= this3.length) this3.length = 14;
                if (this3.data.length < this3.length) {
                    var data1;
                    var this4;
                    this4 = new Array(this3.data.length + 10);
                    data1 = this4;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data, 0, data1, 0, this3.data.length);
                    this3.data = data1;
                }
            }
            this3.data[13] = val.y;
            var this5 = this.rawData;
            if (!this5.fixed) {
                if (14 >= this5.length) this5.length = 15;
                if (this5.data.length < this5.length) {
                    var data2;
                    var this6;
                    this6 = new Array(this5.data.length + 10);
                    data2 = this6;
                    haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data, 0, data2, 0, this5.data.length);
                    this5.data = data2;
                }
            }
            this5.data[14] = val.z;
            return val;
        },
        __class__: openfl_geom_Matrix3D,
        __properties__: {
            set_position: "set_position",
            get_position: "get_position",
            get_determinant: "get_determinant"
        }
    };
    var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
    $hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl", "geom", "_Orientation3D", "Orientation3D_Impl_"];
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
        switch (value) {
        case "axisAngle":
            return 0;
        case "eulerAngles":
            return 1;
        case "quaternion":
            return 2;
        default:
            return null;
        }
    };
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "axisAngle";
        case 1:
            return "eulerAngles";
        case 2:
            return "quaternion";
        default:
            return null;
        }
    };
    var openfl_geom_Transform = function(displayObject) {
        this.__colorTransform = new openfl_geom_ColorTransform();
        this.concatenatedColorTransform = new openfl_geom_ColorTransform();
        this.pixelBounds = new openfl_geom_Rectangle();
        this.__displayObject = displayObject;
        this.__hasMatrix = true;
    };
    $hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
    openfl_geom_Transform.__name__ = ["openfl", "geom", "Transform"];
    openfl_geom_Transform.prototype = {
        get_colorTransform: function() {
            return this.__colorTransform;
        },
        set_colorTransform: function(value) {
            if (!this.__colorTransform.__equals(value)) {
                this.__colorTransform = value;
                if (value != null) this.__displayObject.set_alpha(value.alphaMultiplier);
                this.__displayObject.__setRenderDirty();
            }
            return this.__colorTransform;
        },
        get_matrix: function() {
            if (this.__hasMatrix) return this.__displayObject.__transform.clone();
            return null;
        },
        get_concatenatedMatrix: function() {
            if (this.__hasMatrix) return this.__displayObject.__getWorldTransform().clone();
            return null;
        },
        set_matrix: function(value) {
            if (value == null) {
                this.__hasMatrix = false;
                return null;
            }
            this.__hasMatrix = true;
            this.__hasMatrix3D = false;
            if (this.__displayObject != null) {
                var rotation = 180 / Math.PI * Math.atan2(value.d, value.c) - 90;
                if (rotation != this.__displayObject.__rotation) {
                    this.__displayObject.__rotation = rotation;
                    var radians = rotation * (Math.PI / 180);
                    this.__displayObject.__rotationSine = Math.sin(radians);
                    this.__displayObject.__rotationCosine = Math.cos(radians);
                }
                this.__displayObject.__transform.copyFrom(value);
                this.__displayObject.__setTransformDirty();
            }
            return value;
        },
        get_matrix3D: function() {
            if (this.__hasMatrix3D) {
                var matrix = this.__displayObject.__transform;
                return new openfl_geom_Matrix3D((function($this) {
                    var $r;
                    var value = [matrix.a, matrix.b, 0.0, 0.0, matrix.c, matrix.d, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, matrix.tx, matrix.ty, 0.0, 1.0];
                    var vectorData = new openfl_VectorData();
                    vectorData.length = value.length;
                    vectorData.fixed = true; {
                        var vec;
                        var this1;
                        this1 = new Array(value.length);
                        vec = this1;
                        var _g1 = 0;
                        var _g = value.length;
                        while (_g1 < _g) {
                            var i = _g1++;
                            vec[i] = value[i];
                        }
                        vectorData.data = vec;
                    }
                    $r = vectorData;
                    return $r;
                } (this)));
            }
            return null;
        },
        set_matrix3D: function(value) {
            if (value == null) {
                this.__hasMatrix3D = false;
                return null;
            }
            this.__hasMatrix = false;
            this.__hasMatrix3D = true;
            if (this.__displayObject != null) {
                var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5], value.rawData.data[4]) - 90;
                if (rotation != this.__displayObject.__rotation) {
                    this.__displayObject.__rotation = rotation;
                    var radians = rotation * (Math.PI / 180);
                    this.__displayObject.__rotationSine = Math.sin(radians);
                    this.__displayObject.__rotationCosine = Math.cos(radians);
                }
                this.__displayObject.__transform.a = value.rawData.data[0];
                this.__displayObject.__transform.b = value.rawData.data[1];
                this.__displayObject.__transform.c = value.rawData.data[5];
                this.__displayObject.__transform.d = value.rawData.data[6];
                this.__displayObject.__transform.tx = value.rawData.data[12];
                this.__displayObject.__transform.ty = value.rawData.data[13];
                this.__displayObject.__setTransformDirty();
            }
            return value;
        },
        __class__: openfl_geom_Transform,
        __properties__: {
            set_matrix3D: "set_matrix3D",
            get_matrix3D: "get_matrix3D",
            set_matrix: "set_matrix",
            get_matrix: "get_matrix",
            get_concatenatedMatrix: "get_concatenatedMatrix",
            set_colorTransform: "set_colorTransform",
            get_colorTransform: "get_colorTransform"
        }
    };
    var openfl_geom_Vector3D = function(x, y, z, w) {
        if (w == null) w = 0;
        if (z == null) z = 0;
        if (y == null) y = 0;
        if (x == null) x = 0;
        this.w = w;
        this.x = x;
        this.y = y;
        this.z = z;
    };
    $hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
    openfl_geom_Vector3D.__name__ = ["openfl", "geom", "Vector3D"];
    openfl_geom_Vector3D.__properties__ = {
        get_Z_AXIS: "get_Z_AXIS",
        get_Y_AXIS: "get_Y_AXIS",
        get_X_AXIS: "get_X_AXIS"
    }
    openfl_geom_Vector3D.X_AXIS = null;
    openfl_geom_Vector3D.Y_AXIS = null;
    openfl_geom_Vector3D.Z_AXIS = null;
    openfl_geom_Vector3D.angleBetween = function(a, b) {
        var la = a.get_length();
        var lb = b.get_length();
        var dot = a.dotProduct(b);
        if (la != 0) dot /= la;
        if (lb != 0) dot /= lb;
        return Math.acos(dot);
    };
    openfl_geom_Vector3D.distance = function(pt1, pt2) {
        var x = pt2.x - pt1.x;
        var y = pt2.y - pt1.y;
        var z = pt2.z - pt1.z;
        return Math.sqrt(x * x + y * y + z * z);
    };
    openfl_geom_Vector3D.get_X_AXIS = function() {
        return new openfl_geom_Vector3D(1, 0, 0);
    };
    openfl_geom_Vector3D.get_Y_AXIS = function() {
        return new openfl_geom_Vector3D(0, 1, 0);
    };
    openfl_geom_Vector3D.get_Z_AXIS = function() {
        return new openfl_geom_Vector3D(0, 0, 1);
    };
    openfl_geom_Vector3D.prototype = {
        add: function(a) {
            return new openfl_geom_Vector3D(this.x + a.x, this.y + a.y, this.z + a.z);
        },
        clone: function() {
            return new openfl_geom_Vector3D(this.x, this.y, this.z, this.w);
        },
        copyFrom: function(sourceVector3D) {
            this.x = sourceVector3D.x;
            this.y = sourceVector3D.y;
            this.z = sourceVector3D.z;
        },
        crossProduct: function(a) {
            return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y, this.z * a.x - this.x * a.z, this.x * a.y - this.y * a.x, 1);
        },
        decrementBy: function(a) {
            this.x -= a.x;
            this.y -= a.y;
            this.z -= a.z;
        },
        dotProduct: function(a) {
            return this.x * a.x + this.y * a.y + this.z * a.z;
        },
        equals: function(toCompare, allFour) {
            if (allFour == null) allFour = false;
            return this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z && (!allFour || this.w == toCompare.w);
        },
        incrementBy: function(a) {
            this.x += a.x;
            this.y += a.y;
            this.z += a.z;
        },
        nearEquals: function(toCompare, tolerance, allFour) {
            if (allFour == null) allFour = false;
            return Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance && (!allFour || Math.abs(this.w - toCompare.w) < tolerance);
        },
        negate: function() {
            this.x *= -1;
            this.y *= -1;
            this.z *= -1;
        },
        normalize: function() {
            var l = this.get_length();
            if (l != 0) {
                this.x /= l;
                this.y /= l;
                this.z /= l;
            }
            return l;
        },
        project: function() {
            this.x /= this.w;
            this.y /= this.w;
            this.z /= this.w;
        },
        scaleBy: function(s) {
            this.x *= s;
            this.y *= s;
            this.z *= s;
        },
        setTo: function(xa, ya, za) {
            this.x = xa;
            this.y = ya;
            this.z = za;
        },
        subtract: function(a) {
            return new openfl_geom_Vector3D(this.x - a.x, this.y - a.y, this.z - a.z);
        },
        toString: function() {
            return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
        },
        get_length: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        },
        get_lengthSquared: function() {
            return this.x * this.x + this.y * this.y + this.z * this.z;
        },
        __class__: openfl_geom_Vector3D,
        __properties__: {
            get_lengthSquared: "get_lengthSquared",
            get_length: "get_length"
        }
    };
    var openfl_media_ID3Info = function() {};
    $hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
    openfl_media_ID3Info.__name__ = ["openfl", "media", "ID3Info"];
    openfl_media_ID3Info.prototype = {
        __class__: openfl_media_ID3Info
    };
    var openfl_media_Sound = function(stream, context) {
        openfl_events_EventDispatcher.call(this, this);
        this.bytesLoaded = 0;
        this.bytesTotal = 0;
        this.id3 = null;
        this.isBuffering = false;
        this.url = null;
        if (stream != null) this.load(stream, context);
    };
    $hxClasses["openfl.media.Sound"] = openfl_media_Sound;
    openfl_media_Sound.__name__ = ["openfl", "media", "Sound"];
    openfl_media_Sound.fromAudioBuffer = function(buffer) {
        var sound = new openfl_media_Sound();
        sound.__buffer = buffer;
        return sound;
    };
    openfl_media_Sound.fromFile = function(path) {
        return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
    };
    openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
    openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        close: function() {
            if (openfl_media_Sound.__registeredSounds.exists(this.__soundID)) createjs.Sound.removeSound(this.__soundID);
        },
        load: function(stream, context) {
            this.url = stream.url;
            this.__soundID = haxe_io_Path.withoutExtension(stream.url);
            if (!openfl_media_Sound.__registeredSounds.exists(this.__soundID)) {
                openfl_media_Sound.__registeredSounds.set(this.__soundID, true);
                createjs.Sound.addEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
                createjs.Sound.addEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
                createjs.Sound.registerSound(this.url, this.__soundID);
            } else this.dispatchEvent(new openfl_events_Event("complete"));
        },
        loadCompressedDataFromByteArray: function(bytes, bytesLength, forcePlayAsMusic) {
            if (forcePlayAsMusic == null) forcePlayAsMusic = false;
            openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
        },
        loadPCMFromByteArray: function(bytes, samples, format, stereo, sampleRate) {
            if (sampleRate == null) sampleRate = 44100;
            if (stereo == null) stereo = true;
            openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
        },
        play: function(startTime, loops, sndTransform) {
            if (loops == null) loops = 0;
            if (startTime == null) startTime = 0.0;
            if (sndTransform == null) sndTransform = new openfl_media_SoundTransform(1, 0);
            var pan = sndTransform.pan;
            if (pan == 0) pan = -0.0000001;
            var instance;
            if (loops > 1) instance = createjs.Sound.play(this.__soundID, "any", 0, startTime | 0, loops - 1, sndTransform.volume, pan);
            else instance = createjs.Sound.play(this.__soundID, "any", 0, startTime | 0, 0, sndTransform.volume, pan);
            return new openfl_media_SoundChannel(instance);
        },
        get_id3: function() {
            return new openfl_media_ID3Info();
        },
        get_length: function() {
            if (this.__buffer != null) {}
            return 0;
        },
        AudioBuffer_onURLLoad: function(buffer) {
            if (buffer == null) this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
            else {
                this.__buffer = buffer;
                this.dispatchEvent(new openfl_events_Event("complete"));
            }
        },
        SoundJS_onFileLoad: function(event) {
            if (event.id == this.__soundID) {
                createjs.Sound.removeEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
                createjs.Sound.removeEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
                this.dispatchEvent(new openfl_events_Event("complete"));
            }
        },
        SoundJS_onFileError: function(event) {
            if (event.id == this.__soundID) {
                createjs.Sound.removeEventListener("fileload", $bind(this, this.SoundJS_onFileLoad));
                createjs.Sound.removeEventListener("fileerror", $bind(this, this.SoundJS_onFileError));
                this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
            }
        },
        __class__: openfl_media_Sound,
        __properties__: {
            get_length: "get_length",
            get_id3: "get_id3"
        }
    });
    var openfl_media_SoundChannel = function(soundInstance) {
        openfl_events_EventDispatcher.call(this, this);
        this.leftPeak = 1;
        this.rightPeak = 1;
        if (soundInstance != null) {
            this.__soundInstance = soundInstance;
            this.__soundInstance.addEventListener("complete", $bind(this, this.source_onComplete));
            this.__isValid = true;
        }
    };
    $hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
    openfl_media_SoundChannel.__name__ = ["openfl", "media", "SoundChannel"];
    openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
    openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        stop: function() {
            if (!this.__isValid) return;
            this.__soundInstance.stop();
        },
        __dispose: function() {
            if (!this.__isValid) return;
            this.__soundInstance.stop();
            this.__soundInstance = null;
            this.__isValid = false;
        },
        get_position: function() {
            if (!this.__isValid) return 0;
            return this.__soundInstance.getPosition();
        },
        set_position: function(value) {
            if (!this.__isValid) return 0;
            this.__soundInstance.setPosition(value | 0);
            return this.__soundInstance.getPosition();
        },
        get_soundTransform: function() {
            if (!this.__isValid) return new openfl_media_SoundTransform();
            return new openfl_media_SoundTransform(this.__soundInstance.getVolume(), this.__soundInstance.getPan());
        },
        set_soundTransform: function(value) {
            if (!this.__isValid) return value;
            this.__soundInstance.setVolume(value.volume);
            this.__soundInstance.setPan(value.pan);
            return value;
        },
        soundInstance_onComplete: function(_) {
            this.dispatchEvent(new openfl_events_Event("soundComplete"));
        },
        source_onComplete: function() {
            this.__dispose();
            this.dispatchEvent(new openfl_events_Event("soundComplete"));
        },
        __class__: openfl_media_SoundChannel,
        __properties__: {
            set_soundTransform: "set_soundTransform",
            get_soundTransform: "get_soundTransform",
            set_position: "set_position",
            get_position: "get_position"
        }
    });
    var openfl_media_SoundLoaderContext = function(bufferTime, checkPolicyFile) {
        if (checkPolicyFile == null) checkPolicyFile = false;
        if (bufferTime == null) bufferTime = 1000;
        this.bufferTime = bufferTime;
        this.checkPolicyFile = checkPolicyFile;
    };
    $hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
    openfl_media_SoundLoaderContext.__name__ = ["openfl", "media", "SoundLoaderContext"];
    openfl_media_SoundLoaderContext.prototype = {
        __class__: openfl_media_SoundLoaderContext
    };
    var openfl_media_SoundTransform = function(vol, panning) {
        if (panning == null) panning = 0;
        if (vol == null) vol = 1;
        this.volume = vol;
        this.pan = panning;
        this.leftToLeft = 0;
        this.leftToRight = 0;
        this.rightToLeft = 0;
        this.rightToRight = 0;
    };
    $hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
    openfl_media_SoundTransform.__name__ = ["openfl", "media", "SoundTransform"];
    openfl_media_SoundTransform.prototype = {
        clone: function() {
            return new openfl_media_SoundTransform(this.volume, this.pan);
        },
        __class__: openfl_media_SoundTransform
    };
    var openfl_net_NetConnection = function() {
        openfl_events_EventDispatcher.call(this);
    };
    $hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
    openfl_net_NetConnection.__name__ = ["openfl", "net", "NetConnection"];
    openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
    openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        connect: function(command, _, _1, _2, _3, _4) {
            if (command != null) throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
            this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus", false, true, {
                code: "connectSuccess"
            }));
        },
        __class__: openfl_net_NetConnection
    });
    var openfl_net_SharedObject = function() {
        openfl_events_EventDispatcher.call(this);
        this.client = this;
        this.objectEncoding = 3;
    };
    $hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
    openfl_net_SharedObject.__name__ = ["openfl", "net", "SharedObject"];
    openfl_net_SharedObject.__sharedObjects = null;
    openfl_net_SharedObject.getLocal = function(name, localPath, secure) {
        if (secure == null) secure = false;
        if (localPath == null) localPath = window.location.href;
        if (openfl_net_SharedObject.__sharedObjects == null) {
            openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
            openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
        }
        var id = localPath + "/" + name;
        if (!openfl_net_SharedObject.__sharedObjects.exists(id)) {
            var sharedObject = new openfl_net_SharedObject();
            sharedObject.data = {};
            sharedObject.__localPath = localPath;
            sharedObject.__name = name;
            var encodedData = null;
            try {
                var storage = js_Browser.getLocalStorage();
                if (storage != null) encodedData = storage.getItem(localPath + ":" + name);
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
            }
            if (encodedData != null && encodedData != "") try {
                var unserializer = new haxe_Unserializer(encodedData);
                unserializer.setResolver({
                    resolveEnum: Type.resolveEnum,
                    resolveClass: openfl_net_SharedObject.__resolveClass
                });
                sharedObject.data = unserializer.unserialize();
            } catch(e1) {
                haxe_CallStack.lastException = e1;
                if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
            }
            openfl_net_SharedObject.__sharedObjects.set(id, sharedObject);
        }
        return openfl_net_SharedObject.__sharedObjects.get(id);
    };
    openfl_net_SharedObject.getRemote = function(name, remotePath, persistence, secure) {
        if (secure == null) secure = false;
        if (persistence == null) persistence = false;
        openfl_Lib.notImplemented("SharedObject.getRemote");
        return null;
    };
    openfl_net_SharedObject.__mkdir = function(directory) {};
    openfl_net_SharedObject.__resolveClass = function(name) {
        if (name != null) {
            if (StringTools.startsWith(name, "neash.")) name = StringTools.replace(name, "neash.", "openfl.");
            if (StringTools.startsWith(name, "native.")) name = StringTools.replace(name, "native.", "openfl.");
            if (StringTools.startsWith(name, "flash.")) name = StringTools.replace(name, "flash.", "openfl.");
            if (StringTools.startsWith(name, "openfl._v2.")) name = StringTools.replace(name, "openfl._v2.", "openfl.");
            if (StringTools.startsWith(name, "openfl._legacy.")) name = StringTools.replace(name, "openfl._legacy.", "openfl.");
            return Type.resolveClass(name);
        }
        return null;
    };
    openfl_net_SharedObject.application_onExit = function(_) {
        var $it0 = openfl_net_SharedObject.__sharedObjects.iterator();
        while ($it0.hasNext()) {
            var sharedObject = $it0.next();
            sharedObject.flush();
        }
    };
    openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
    openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        clear: function() {
            this.data = {};
            try {
                var storage = js_Browser.getLocalStorage();
                if (storage != null) storage.removeItem(this.__localPath + ":" + this.__name);
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
            }
        },
        close: function() {},
        connect: function(myConnection, params) {
            openfl_Lib.notImplemented("SharedObject.connect");
        },
        flush: function(minDiskSpace) {
            if (minDiskSpace == null) minDiskSpace = 0;
            if (Reflect.fields(this.data).length == 0) return 0;
            var encodedData = haxe_Serializer.run(this.data);
            try {
                var storage = js_Browser.getLocalStorage();
                if (storage != null) {
                    storage.removeItem(this.__localPath + ":" + this.__name);
                    storage.setItem(this.__localPath + ":" + this.__name, encodedData);
                }
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                return 1;
            }
            return 0;
        },
        send: function($arguments) {
            openfl_Lib.notImplemented("SharedObject.send");
        },
        setDirty: function(propertyName) {},
        setProperty: function(propertyName, value) {
            if (this.data != null) this.data[propertyName] = value;
        },
        get_size: function() {
            try {
                var d = haxe_Serializer.run(this.data);
                return haxe_io_Bytes.ofString(d).length;
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                return 0;
            }
        },
        __class__: openfl_net_SharedObject,
        __properties__: {
            get_size: "get_size"
        }
    });
    var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = {};
    $hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
    openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = ["openfl", "net", "_SharedObjectFlushStatus", "SharedObjectFlushStatus_Impl_"];
    openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
        switch (value) {
        case "flushed":
            return 0;
        case "pending":
            return 1;
        default:
            return null;
        }
    };
    openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "flushed";
        case 1:
            return "pending";
        default:
            return null;
        }
    };
    var openfl_net_URLLoader = function(request) {
        openfl_events_EventDispatcher.call(this);
        this.bytesLoaded = 0;
        this.bytesTotal = 0;
        this.set_dataFormat(1);
        if (request != null) this.load(request);
    };
    $hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
    openfl_net_URLLoader.__name__ = ["openfl", "net", "URLLoader"];
    openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
    openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        close: function() {},
        getData: function() {
            return null;
        },
        load: function(request) {
            this.requestUrl(request.url, request.method, request.data, request.formatRequestHeaders());
        },
        registerEvents: function(subject) {
            var self = this;
            if (typeof XMLHttpRequestProgressEvent != "undefined") subject.addEventListener("progress", $bind(this, this.onProgress), false);
            subject.onreadystatechange = function() {
                if (subject.readyState != 4) return;
                var s;
                try {
                    s = subject.status;
                } catch(e) {
                    haxe_CallStack.lastException = e;
                    if (e instanceof js__$Boot_HaxeError) e = e.val;
                    s = null;
                }
                if (s == undefined) s = null;
                if (s != null) self.onStatus(s);
                if (s != null && s >= 200 && s < 400) self.onData(subject.response);
                else if (s == null) self.onError("Failed to connect or resolve host");
                else if (s == 12029) self.onError("Failed to connect to host");
                else if (s == 12007) self.onError("Unknown host");
                else if (s == 0) {
                    self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
                    self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
                } else self.onError("Http Error #" + subject.status);
            };
        },
        requestUrl: function(url, method, data, requestHeaders) {
            var xmlHttpRequest = new XMLHttpRequest();
            this.registerEvents(xmlHttpRequest);
            var uri = "";
            if (js_Boot.__instanceof(data, openfl_utils_ByteArrayData)) {
                var data1 = data;
                var _g = this.dataFormat;
                switch (_g) {
                case 0:
                    uri = js_Boot.__cast(data1, ArrayBuffer);
                    break;
                default:
                    uri = data1.readUTFBytes(data1.length);
                }
            } else if (js_Boot.__instanceof(data, openfl_net_URLVariables)) {
                var data2 = data;
                var _g1 = 0;
                var _g11 = Reflect.fields(data2);
                while (_g1 < _g11.length) {
                    var p = _g11[_g1]; ++_g1;
                    if (uri.length != 0) uri += "&";
                    uri += encodeURIComponent(p) + "=" + StringTools.urlEncode(Reflect.field(data2, p));
                }
            } else if (data != null) uri = data.toString();
            try {
                if (method == "GET" && uri != null && uri != "") {
                    var question = url.split("?").length <= 1;
                    xmlHttpRequest.open(method, url + (question ? "?": "&") + Std.string(uri), true);
                    uri = "";
                } else xmlHttpRequest.open(method, url, true);
            } catch(e) {
                haxe_CallStack.lastException = e;
                if (e instanceof js__$Boot_HaxeError) e = e.val;
                this.onError(e.toString());
                return;
            }
            var _g2 = this.dataFormat;
            switch (_g2) {
            case 0:
                xmlHttpRequest.responseType = "arraybuffer";
                break;
            default:
            }
            var _g3 = 0;
            while (_g3 < requestHeaders.length) {
                var header = requestHeaders[_g3]; ++_g3;
                xmlHttpRequest.setRequestHeader(header.name, header.value);
            }
            xmlHttpRequest.send(uri);
            this.onOpen();
            this.getData = function() {
                if (xmlHttpRequest.response != null) return xmlHttpRequest.response;
                else return xmlHttpRequest.responseText;
            };
        },
        onData: function(_) {
            var content = this.getData();
            var _g = this.dataFormat;
            switch (_g) {
            case 0:
                this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
                break;
            default:
                this.data = Std.string(content);
            }
            var evt = new openfl_events_Event("complete");
            evt.currentTarget = this;
            this.dispatchEvent(evt);
        },
        onError: function(msg) {
            var evt = new openfl_events_IOErrorEvent("ioError");
            evt.text = msg;
            evt.currentTarget = this;
            this.dispatchEvent(evt);
        },
        onOpen: function() {
            var evt = new openfl_events_Event("open");
            evt.currentTarget = this;
            this.dispatchEvent(evt);
        },
        onProgress: function(event) {
            var evt = new openfl_events_ProgressEvent("progress");
            evt.currentTarget = this;
            evt.bytesLoaded = event.loaded;
            evt.bytesTotal = event.total;
            this.dispatchEvent(evt);
        },
        onSecurityError: function(msg) {
            var evt = new openfl_events_SecurityErrorEvent("securityError");
            evt.text = msg;
            evt.currentTarget = this;
            this.dispatchEvent(evt);
        },
        onStatus: function(status) {
            var evt = new openfl_events_HTTPStatusEvent("httpStatus", false, false, status);
            evt.currentTarget = this;
            this.dispatchEvent(evt);
        },
        set_dataFormat: function(inputVal) {
            if (inputVal == 0 && !Reflect.hasField(window, "ArrayBuffer")) this.dataFormat = 1;
            else this.dataFormat = inputVal;
            return this.dataFormat;
        },
        __class__: openfl_net_URLLoader,
        __properties__: {
            set_dataFormat: "set_dataFormat"
        }
    });
    var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
    $hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl", "net", "_URLLoaderDataFormat", "URLLoaderDataFormat_Impl_"];
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
        switch (value) {
        case "binary":
            return 0;
        case "text":
            return 1;
        case "variables":
            return 2;
        default:
            return null;
        }
    };
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "binary";
        case 1:
            return "text";
        case 2:
            return "variables";
        default:
            return null;
        }
    };
    var openfl_net_URLRequest = function(inURL) {
        if (inURL != null) this.url = inURL;
        this.requestHeaders = [];
        this.method = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString(1);
        this.contentType = null;
    };
    $hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
    openfl_net_URLRequest.__name__ = ["openfl", "net", "URLRequest"];
    openfl_net_URLRequest.prototype = {
        formatRequestHeaders: function() {
            var res = this.requestHeaders;
            if (res == null) res = [];
            if (openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString(this.method) == 1 || this.data == null) return res;
            if (typeof(this.data) == "string" || js_Boot.__instanceof(this.data, openfl_utils_ByteArrayData)) {
                res = res.slice();
                res.push(new openfl_net_URLRequestHeader("Content-Type", this.contentType != null ? this.contentType: "application/x-www-form-urlencoded"));
            }
            return res;
        },
        __class__: openfl_net_URLRequest
    };
    var openfl_net_URLRequestHeader = function(name, value) {
        if (value == null) value = "";
        if (name == null) name = "";
        this.name = name;
        this.value = value;
    };
    $hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
    openfl_net_URLRequestHeader.__name__ = ["openfl", "net", "URLRequestHeader"];
    openfl_net_URLRequestHeader.prototype = {
        __class__: openfl_net_URLRequestHeader
    };
    var openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$ = {};
    $hxClasses["openfl.net._URLRequestMethod.URLRequestMethod_Impl_"] = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.__name__ = ["openfl", "net", "_URLRequestMethod", "URLRequestMethod_Impl_"];
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString = function(value) {
        switch (value) {
        case "DELETE":
            return 0;
        case "GET":
            return 1;
        case "HEAD":
            return 2;
        case "OPTIONS":
            return 3;
        case "POST":
            return 4;
        case "PUT":
            return 5;
        default:
            return null;
        }
    };
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "DELETE";
        case 1:
            return "GET";
        case 2:
            return "HEAD";
        case 3:
            return "OPTIONS";
        case 4:
            return "POST";
        case 5:
            return "PUT";
        default:
            return null;
        }
    };
    var openfl_net_URLVariables = function(source) {
        if (source != null) this.decode(source);
    };
    $hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
    openfl_net_URLVariables.__name__ = ["openfl", "net", "URLVariables"];
    openfl_net_URLVariables.prototype = {
        decode: function(source) {
            var fields = Reflect.fields(this);
            var _g = 0;
            while (_g < fields.length) {
                var f = fields[_g]; ++_g;
                Reflect.deleteField(this, f);
            }
            var fields1 = source.split(";").join("&").split("&");
            var _g1 = 0;
            while (_g1 < fields1.length) {
                var f1 = fields1[_g1]; ++_g1;
                var eq = f1.indexOf("=");
                if (eq > 0) Reflect.setField(this, StringTools.urlDecode(HxOverrides.substr(f1, 0, eq)), StringTools.urlDecode(HxOverrides.substr(f1, eq + 1, null)));
                else if (eq != 0) Reflect.setField(this, decodeURIComponent(f1.split("+").join(" ")), "");
            }
        },
        toString: function() {
            var result = [];
            var fields = Reflect.fields(this);
            var _g = 0;
            while (_g < fields.length) {
                var f = fields[_g]; ++_g;
                result.push(encodeURIComponent(f) + "=" + StringTools.urlEncode(Reflect.field(this, f)));
            }
            return result.join("&");
        },
        __class__: openfl_net_URLVariables
    };
    var openfl_system_LoaderContext = function(checkPolicyFile, applicationDomain, securityDomain) {
        if (checkPolicyFile == null) checkPolicyFile = false;
        this.checkPolicyFile = checkPolicyFile;
        this.securityDomain = securityDomain;
        this.applicationDomain = applicationDomain;
        this.allowCodeImport = true;
        this.allowLoadBytesCodeExecution = true;
    };
    $hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
    openfl_system_LoaderContext.__name__ = ["openfl", "system", "LoaderContext"];
    openfl_system_LoaderContext.prototype = {
        __class__: openfl_system_LoaderContext
    };
    var openfl_system_SecurityDomain = function() {};
    $hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
    openfl_system_SecurityDomain.__name__ = ["openfl", "system", "SecurityDomain"];
    openfl_system_SecurityDomain.prototype = {
        __class__: openfl_system_SecurityDomain
    };
    var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
    $hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl", "text", "_AntiAliasType", "AntiAliasType_Impl_"];
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
        switch (value) {
        case "advanced":
            return 0;
        case "normal":
            return 1;
        default:
            return null;
        }
    };
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "advanced";
        case 1:
            return "normal";
        default:
            return null;
        }
    };
    var openfl_text_Font = function(name) {
        lime_text_Font.call(this, name);
    };
    $hxClasses["openfl.text.Font"] = openfl_text_Font;
    openfl_text_Font.__name__ = ["openfl", "text", "Font"];
    openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
        if (enumerateDeviceFonts == null) enumerateDeviceFonts = false;
        return openfl_text_Font.__registeredFonts;
    };
    openfl_text_Font.fromBytes = function(bytes) {
        var font = new openfl_text_Font();
        font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
        return font;
    };
    openfl_text_Font.fromFile = function(path) {
        var font = new openfl_text_Font();
        font.__fromFile(path);
        return font;
    };
    openfl_text_Font.registerFont = function(font) {
        var instance;
        instance = js_Boot.__cast(Type.createInstance(font, []), openfl_text_Font);
        if (instance != null) openfl_text_Font.__registeredFonts.push(instance);
    };
    openfl_text_Font.__fromLimeFont = function(value) {
        var font = new openfl_text_Font();
        font.name = value.name;
        font.src = value.src;
        return font;
    };
    openfl_text_Font.__super__ = lime_text_Font;
    openfl_text_Font.prototype = $extend(lime_text_Font.prototype, {
        get_fontName: function() {
            return this.name;
        },
        set_fontName: function(value) {
            return this.name = value;
        },
        __class__: openfl_text_Font,
        __properties__: $extend(lime_text_Font.prototype.__properties__, {
            set_fontName: "set_fontName",
            get_fontName: "get_fontName"
        })
    });
    var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
    $hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
    openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl", "text", "_FontStyle", "FontStyle_Impl_"];
    openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
        switch (value) {
        case "bold":
            return 0;
        case "boldItalic":
            return 1;
        case "italic":
            return 2;
        case "regular":
            return 3;
        default:
            return null;
        }
    };
    openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "bold";
        case 1:
            return "boldItalic";
        case 2:
            return "italic";
        case 3:
            return "regular";
        default:
            return null;
        }
    };
    var openfl_text__$FontType_FontType_$Impl_$ = {};
    $hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
    openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl", "text", "_FontType", "FontType_Impl_"];
    openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
        switch (value) {
        case "device":
            return 0;
        case "embedded":
            return 1;
        case "embeddedCFF":
            return 2;
        default:
            return null;
        }
    };
    openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "device";
        case 1:
            return "embedded";
        case 2:
            return "embeddedCFF";
        default:
            return null;
        }
    };
    var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
    $hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
    openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl", "text", "_GridFitType", "GridFitType_Impl_"];
    openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
        switch (value) {
        case "none":
            return 0;
        case "pixel":
            return 1;
        case "subpixel":
            return 2;
        default:
            return null;
        }
    };
    openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "none";
        case 1:
            return "pixel";
        case 2:
            return "subpixel";
        default:
            return null;
        }
    };
    var openfl_text_TextField = function() {
        openfl_display_InteractiveObject.call(this);
        this.__caretIndex = -1;
        this.__graphics = new openfl_display_Graphics();
        this.__textEngine = new openfl__$internal_text_TextEngine(this);
        this.__layoutDirty = true;
        this.__tabEnabled = true;
        if (openfl_text_TextField.__defaultTextFormat == null) {
            openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman", 12, 0, false, false, false, "", "", 3, 0, 0, 0, 0);
            openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
            openfl_text_TextField.__defaultTextFormat.bullet = false;
            openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
            openfl_text_TextField.__defaultTextFormat.kerning = false;
        }
        this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
        this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, 0, 0));
        this.addEventListener("mouseDown", $bind(this, this.this_onMouseDown));
    };
    $hxClasses["openfl.text.TextField"] = openfl_text_TextField;
    openfl_text_TextField.__name__ = ["openfl", "text", "TextField"];
    openfl_text_TextField.__defaultTextFormat = null;
    openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
    openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype, {
        appendText: function(text) {
            this.__textEngine.text += text;
            this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
            this.__dirty = true;
            this.__layoutDirty = true;
        },
        getCharBoundaries: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return null;
            this.__updateLayout();
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (charIndex >= group.startIndex && charIndex <= group.endIndex) {
                    var x = group.offsetX;
                    var _g3 = 0;
                    var _g2 = charIndex - group.startIndex;
                    while (_g3 < _g2) {
                        var i = _g3++;
                        x += group.advances[i];
                    }
                    return new openfl_geom_Rectangle(x, group.offsetY, group.advances[charIndex - group.startIndex], group.ascent + group.descent);
                }
            }
            return null;
        },
        getCharIndexAtPoint: function(x, y) {
            if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return - 1;
            this.__updateLayout();
            x += this.get_scrollH();
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights[i];
            }
            var _g2 = 0;
            var _g11 = this.__textEngine.layoutGroups;
            while (_g2 < _g11.length) {
                var group = _g11[_g2]; ++_g2;
                if (y >= group.offsetY && y <= group.offsetY + group.height) {
                    if (x >= group.offsetX && x <= group.offsetX + group.width) {
                        var advance = 0.0;
                        var _g3 = 0;
                        var _g21 = group.advances.length;
                        while (_g3 < _g21) {
                            var i1 = _g3++;
                            advance += group.advances[i1];
                            if (x <= group.offsetX + advance) return group.startIndex + i1;
                        }
                        return group.endIndex;
                    }
                }
            }
            return - 1;
        },
        getFirstCharInParagraph: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
            var index = this.__textEngine.text.indexOf("\n");
            var startIndex = 0;
            while (index > -1) {
                if (index <= charIndex) startIndex = index + 1;
                else if (index > charIndex) break;
                index = this.__textEngine.text.indexOf("\n", index + 1);
            }
            return startIndex;
        },
        getLineIndexAtPoint: function(x, y) {
            this.__updateLayout();
            if (x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) return - 1;
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights[i];
            }
            var _g2 = 0;
            var _g11 = this.__textEngine.layoutGroups;
            while (_g2 < _g11.length) {
                var group = _g11[_g2]; ++_g2;
                if (y >= group.offsetY && y <= group.offsetY + group.height) return group.lineIndex;
            }
            return - 1;
        },
        getLineIndexOfChar: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return - 1;
            this.__updateLayout();
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (group.startIndex <= charIndex && group.endIndex >= charIndex) return group.lineIndex;
            }
            return - 1;
        },
        getLineLength: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return 0;
            var startIndex = -1;
            var endIndex = -1;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (group.lineIndex == lineIndex) {
                    if (startIndex == -1) startIndex = group.startIndex;
                } else if (group.lineIndex == lineIndex + 1) {
                    endIndex = group.startIndex;
                    break;
                }
            }
            if (endIndex == -1) endIndex = this.__textEngine.text.length;
            return endIndex - startIndex;
        },
        getLineMetrics: function(lineIndex) {
            this.__updateLayout();
            var ascender = this.__textEngine.lineAscents[lineIndex];
            var descender = this.__textEngine.lineDescents[lineIndex];
            var leading = this.__textEngine.lineLeadings[lineIndex];
            var lineHeight = this.__textEngine.lineHeights[lineIndex];
            var lineWidth = this.__textEngine.lineWidths[lineIndex];
            var margin;
            var _g = this.__textFormat.align;
            switch (_g) {
            case 3:
            case 2:
            case 5:
                margin = 2;
                break;
            case 4:
            case 1:
                margin = this.__textEngine.width - lineWidth - 2;
                break;
            case 0:
                margin = (this.__textEngine.width - lineWidth) / 2;
                break;
            }
            return new openfl_text_TextLineMetrics(margin, lineWidth, lineHeight, ascender, descender, leading);
        },
        getLineOffset: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return - 1;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (group.lineIndex == lineIndex) return group.startIndex;
            }
            return 0;
        },
        getLineText: function(lineIndex) {
            this.__updateLayout();
            if (lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) return null;
            var startIndex = -1;
            var endIndex = -1;
            var _g = 0;
            var _g1 = this.__textEngine.layoutGroups;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (group.lineIndex == lineIndex) {
                    if (startIndex == -1) startIndex = group.startIndex;
                } else if (group.lineIndex == lineIndex + 1) {
                    endIndex = group.startIndex;
                    break;
                }
            }
            if (endIndex == -1) endIndex = this.__textEngine.text.length;
            return this.__textEngine.text.substring(startIndex, endIndex);
        },
        getParagraphLength: function(charIndex) {
            if (charIndex < 0 || charIndex > this.__textEngine.text.length - 1) return 0;
            var startIndex = this.getFirstCharInParagraph(charIndex);
            var endIndex = this.__textEngine.text.indexOf("\n", charIndex) + 1;
            if (endIndex == 0) endIndex = this.__textEngine.text.length;
            return endIndex - startIndex;
        },
        getTextFormat: function(beginIndex, endIndex) {
            if (endIndex == null) endIndex = 0;
            if (beginIndex == null) beginIndex = 0;
            var format = null;
            var _g = 0;
            var _g1 = this.__textEngine.textFormatRanges;
            while (_g < _g1.length) {
                var group = _g1[_g]; ++_g;
                if (group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
                    if (format == null) format = group.format.clone();
                    else {
                        if (group.format.font != format.font) format.font = null;
                        if (group.format.size != format.size) format.size = null;
                        if (group.format.color != format.color) format.color = null;
                        if (group.format.bold != format.bold) format.bold = null;
                        if (group.format.italic != format.italic) format.italic = null;
                        if (group.format.underline != format.underline) format.underline = null;
                        if (group.format.url != format.url) format.url = null;
                        if (group.format.target != format.target) format.target = null;
                        if (group.format.align != format.align) format.align = null;
                        if (group.format.leftMargin != format.leftMargin) format.leftMargin = null;
                        if (group.format.rightMargin != format.rightMargin) format.rightMargin = null;
                        if (group.format.indent != format.indent) format.indent = null;
                        if (group.format.leading != format.leading) format.leading = null;
                        if (group.format.blockIndent != format.blockIndent) format.blockIndent = null;
                        if (group.format.bullet != format.bullet) format.bullet = null;
                        if (group.format.kerning != format.kerning) format.kerning = null;
                        if (group.format.letterSpacing != format.letterSpacing) format.letterSpacing = null;
                        if (group.format.tabStops != format.tabStops) format.tabStops = null;
                    }
                }
            }
            return format;
        },
        replaceSelectedText: function(value) {
            if (value == "" && this.__selectionIndex == this.__caretIndex) return;
            var startIndex;
            if (this.__caretIndex < this.__selectionIndex) startIndex = this.__caretIndex;
            else startIndex = this.__selectionIndex;
            var endIndex;
            if (this.__caretIndex > this.__selectionIndex) endIndex = this.__caretIndex;
            else endIndex = this.__selectionIndex;
            this.replaceText(startIndex, endIndex, value);
            this.__caretIndex = startIndex + value.length;
            this.__selectionIndex = this.__caretIndex;
        },
        replaceText: function(beginIndex, endIndex, newText) {
            if (endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) return;
            this.__textEngine.text = this.__textEngine.text.substring(0, beginIndex) + newText + this.__textEngine.text.substring(endIndex);
            var offset = newText.length - (endIndex - beginIndex);
            var i = 0;
            var range;
            while (i < this.__textEngine.textFormatRanges.length) {
                range = this.__textEngine.textFormatRanges[i];
                if (range.start <= beginIndex && range.end >= endIndex) {
                    range.end += offset;
                    i++;
                } else if (range.start >= beginIndex && range.end <= endIndex) {
                    this.__textEngine.textFormatRanges.splice(i, 1);
                    offset -= range.end - range.start;
                } else if (range.start > beginIndex && range.start <= endIndex) {
                    range.start += offset;
                    i++;
                } else i++;
            }
            this.__dirty = true;
            this.__layoutDirty = true;
        },
        setSelection: function(beginIndex, endIndex) {
            this.__selectionIndex = beginIndex;
            this.__caretIndex = endIndex;
        },
        setTextFormat: function(format, beginIndex, endIndex) {
            if (endIndex == null) endIndex = 0;
            if (beginIndex == null) beginIndex = 0;
            if (format.font != null) this.__textFormat.font = format.font;
            if (format.size != null) this.__textFormat.size = format.size;
            if (format.color != null) this.__textFormat.color = format.color;
            if (format.bold != null) this.__textFormat.bold = format.bold;
            if (format.italic != null) this.__textFormat.italic = format.italic;
            if (format.underline != null) this.__textFormat.underline = format.underline;
            if (format.url != null) this.__textFormat.url = format.url;
            if (format.target != null) this.__textFormat.target = format.target;
            if (format.align != null) this.__textFormat.align = format.align;
            if (format.leftMargin != null) this.__textFormat.leftMargin = format.leftMargin;
            if (format.rightMargin != null) this.__textFormat.rightMargin = format.rightMargin;
            if (format.indent != null) this.__textFormat.indent = format.indent;
            if (format.leading != null) this.__textFormat.leading = format.leading;
            if (format.blockIndent != null) this.__textFormat.blockIndent = format.blockIndent;
            if (format.bullet != null) this.__textFormat.bullet = format.bullet;
            if (format.kerning != null) this.__textFormat.kerning = format.kerning;
            if (format.letterSpacing != null) this.__textFormat.letterSpacing = format.letterSpacing;
            if (format.tabStops != null) this.__textFormat.tabStops = format.tabStops;
            this.__dirty = true;
            this.__layoutDirty = true;
        },
        __getBounds: function(rect, matrix) {
            this.__updateLayout();
            var bounds = openfl_geom_Rectangle.__temp;
            this.__textEngine.bounds.__transform(bounds, matrix);
            rect.__expand(bounds.x, bounds.y, bounds.width, bounds.height);
        },
        __getCursor: function() {
            if (this.__textEngine.selectable) return lime_ui_MouseCursor.TEXT;
            else return null;
        },
        __getPosition: function(x, y) {
            this.__updateLayout();
            x += this.get_scrollH();
            var _g1 = 0;
            var _g = this.get_scrollV() - 1;
            while (_g1 < _g) {
                var i = _g1++;
                y += this.__textEngine.lineHeights[i];
            }
            if (y > this.__textEngine.textHeight) y = this.__textEngine.textHeight;
            var firstGroup = true;
            var group;
            var nextGroup;
            var _g11 = 0;
            var _g2 = this.__textEngine.layoutGroups.length;
            while (_g11 < _g2) {
                var i1 = _g11++;
                group = this.__textEngine.layoutGroups[i1];
                if (i1 < this.__textEngine.layoutGroups.length - 1) nextGroup = this.__textEngine.layoutGroups[i1 + 1];
                else nextGroup = null;
                if (firstGroup) {
                    if (y < group.offsetY) y = group.offsetY;
                    if (x < group.offsetX) x = group.offsetX;
                    firstGroup = false;
                }
                if (y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
                    if (x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
                        var advance = 0.0;
                        var _g3 = 0;
                        var _g21 = group.advances.length;
                        while (_g3 < _g21) {
                            var i2 = _g3++;
                            advance += group.advances[i2];
                            if (x <= group.offsetX + advance) {
                                if (x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) return group.startIndex + i2;
                                else if (group.startIndex + i2 < group.endIndex) return group.startIndex + i2 + 1;
                                else return group.endIndex;
                            }
                        }
                        return group.endIndex;
                    }
                }
            }
            return this.__textEngine.text.length;
        },
        __hitTest: function(x, y, shapeFlag, stack, interactiveOnly, hitObject) {
            if (!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) return false;
            if (this.get_mask() != null && !this.get_mask().__hitTestMask(x, y)) return false;
            this.__getWorldTransform();
            this.__updateLayout();
            var px = this.__worldTransform.__transformInverseX(x, y);
            var py = this.__worldTransform.__transformInverseY(x, y);
            if (this.__textEngine.bounds.contains(px, py)) {
                if (stack != null) stack.push(hitObject);
                return true;
            }
            return false;
        },
        __hitTestMask: function(x, y) {
            this.__getWorldTransform();
            this.__updateLayout();
            var px = this.__worldTransform.__transformInverseX(x, y);
            var py = this.__worldTransform.__transformInverseY(x, y);
            if (this.__textEngine.bounds.contains(px, py)) return true;
            return false;
        },
        __renderCairo: function(renderSession) {
            openfl__$internal_renderer_cairo_CairoTextField.render(this, renderSession);
            openfl_display_InteractiveObject.prototype.__renderCairo.call(this, renderSession);
        },
        __renderCanvas: function(renderSession) {
            openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession);
            if (this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
                var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
                if (smoothingEnabled) {
                    renderSession.context.mozImageSmoothingEnabled = false;
                    renderSession.context.msImageSmoothingEnabled = false;
                    renderSession.context.imageSmoothingEnabled = false;
                }
                openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
                if (smoothingEnabled) {
                    renderSession.context.mozImageSmoothingEnabled = true;
                    renderSession.context.msImageSmoothingEnabled = true;
                    renderSession.context.imageSmoothingEnabled = true;
                }
            } else openfl_display_InteractiveObject.prototype.__renderCanvas.call(this, renderSession);
        },
        __renderDOM: function(renderSession) {
            openfl__$internal_renderer_dom_DOMTextField.render(this, renderSession);
        },
        __renderGL: function(renderSession) {
            if (this.__cacheAsBitmap) {
                this.__cacheGL(renderSession);
                return;
            }
            if (this.__scrollRect != null) renderSession.maskManager.pushRect(this.__scrollRect, this.__renderTransform);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.pushMask(this);
            openfl__$internal_renderer_canvas_CanvasTextField.render(this, renderSession);
            openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this, renderSession, this.__textEngine.antiAliasType != 0 || this.__textEngine.gridFitType != 1);
            if (this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) renderSession.maskManager.popMask();
            if (this.__scrollRect != null) renderSession.maskManager.popRect();
        },
        __startCursorTimer: function() {
            this.__cursorTimer = haxe_Timer.delay($bind(this, this.__startCursorTimer), 600);
            this.__showCursor = !this.__showCursor;
            this.__dirty = true;
        },
        __startTextInput: function() {
            if (this.__caretIndex < 0) {
                this.__caretIndex = this.__textEngine.text.length;
                this.__selectionIndex = this.__caretIndex;
            }
            if (this.stage != null) {
                this.stage.window.backend.setEnableTextEvents(true);
                if (!this.__inputEnabled) {
                    this.stage.window.backend.setEnableTextEvents(true);
                    if (!this.stage.window.onTextInput.has($bind(this, this.window_onTextInput))) {
                        this.stage.window.onTextInput.add($bind(this, this.window_onTextInput));
                        this.stage.window.onKeyDown.add($bind(this, this.window_onKeyDown));
                    }
                    this.__inputEnabled = true;
                    this.__startCursorTimer();
                }
            }
        },
        __stopCursorTimer: function() {
            if (this.__cursorTimer != null) {
                this.__cursorTimer.stop();
                this.__cursorTimer = null;
            }
            if (this.__showCursor) {
                this.__showCursor = false;
                this.__dirty = true;
            }
        },
        __stopTextInput: function() {
            if (this.__inputEnabled && this.stage != null) {
                this.stage.window.backend.setEnableTextEvents(false);
                this.stage.window.onTextInput.remove($bind(this, this.window_onTextInput));
                this.stage.window.onKeyDown.remove($bind(this, this.window_onKeyDown));
                this.__inputEnabled = false;
                this.__stopCursorTimer();
            }
        },
        __updateLayout: function() {
            if (this.__layoutDirty) {
                this.__textEngine.update();
                if (this.__textEngine.autoSize != 2) {
                    var cacheWidth = this.__textEngine.width;
                    var cacheHeight = this.__textEngine.height;
                    var _g = this.__textEngine.autoSize;
                    switch (_g) {
                    case 1:
                    case 3:
                    case 0:
                        if (!this.__textEngine.wordWrap) this.__textEngine.width = this.__textEngine.textWidth + 4;
                        this.__textEngine.height = this.__textEngine.textHeight + 4;
                        break;
                    default:
                    }
                    if (this.__textEngine.width != cacheWidth) {
                        var _g1 = this.__textEngine.autoSize;
                        switch (_g1) {
                        case 3:
                            var _g11 = this;
                            _g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
                            break;
                        case 0:
                            var _g12 = this;
                            _g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width) / 2);
                            break;
                        default:
                        }
                    }
                    this.__textEngine.getBounds();
                }
                this.__layoutDirty = false;
            }
        },
        get_antiAliasType: function() {
            return this.__textEngine.antiAliasType;
        },
        set_antiAliasType: function(value) {
            if (value != this.__textEngine.antiAliasType) {}
            return this.__textEngine.antiAliasType = value;
        },
        get_autoSize: function() {
            return this.__textEngine.autoSize;
        },
        set_autoSize: function(value) {
            if (value != this.__textEngine.autoSize) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            return this.__textEngine.autoSize = value;
        },
        get_background: function() {
            return this.__textEngine.background;
        },
        set_background: function(value) {
            if (value != this.__textEngine.background) this.__dirty = true;
            return this.__textEngine.background = value;
        },
        get_backgroundColor: function() {
            return this.__textEngine.backgroundColor;
        },
        set_backgroundColor: function(value) {
            if (value != this.__textEngine.backgroundColor) this.__dirty = true;
            return this.__textEngine.backgroundColor = value;
        },
        get_border: function() {
            return this.__textEngine.border;
        },
        set_border: function(value) {
            if (value != this.__textEngine.border) this.__dirty = true;
            return this.__textEngine.border = value;
        },
        get_borderColor: function() {
            return this.__textEngine.borderColor;
        },
        set_borderColor: function(value) {
            if (value != this.__textEngine.borderColor) this.__dirty = true;
            return this.__textEngine.borderColor = value;
        },
        get_bottomScrollV: function() {
            this.__updateLayout();
            return this.__textEngine.bottomScrollV;
        },
        get_caretIndex: function() {
            return this.__caretIndex;
        },
        get_defaultTextFormat: function() {
            return this.__textFormat.clone();
        },
        set_defaultTextFormat: function(value) {
            this.__textFormat.__merge(value);
            this.__layoutDirty = true;
            this.__dirty = true;
            return value;
        },
        get_displayAsPassword: function() {
            return this.__textEngine.displayAsPassword;
        },
        set_displayAsPassword: function(value) {
            if (value != this.__textEngine.displayAsPassword) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            return this.__textEngine.displayAsPassword = value;
        },
        get_embedFonts: function() {
            return this.__textEngine.embedFonts;
        },
        set_embedFonts: function(value) {
            return this.__textEngine.embedFonts = value;
        },
        get_gridFitType: function() {
            return this.__textEngine.gridFitType;
        },
        set_gridFitType: function(value) {
            return this.__textEngine.gridFitType = value;
        },
        get_height: function() {
            this.__updateLayout();
            return this.__textEngine.height;
        },
        set_height: function(value) {
            if (this.get_scaleY() != 1 || value != this.__textEngine.height) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            this.set_scaleY(1);
            return this.__textEngine.height = value;
        },
        get_htmlText: function() {
            return this.__textEngine.text;
        },
        set_htmlText: function(value) {
            if (!this.__isHTML || this.__textEngine.text != value) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            this.__isHTML = true;
            if (this.__div == null) {
                value = new EReg("<br>", "g").replace(value, "\n");
                value = new EReg("<br/>", "g").replace(value, "\n");
                var segments = value.split("<font");
                if (segments.length == 1) {
                    value = new EReg("<.*?>", "g").replace(value, "");
                    if (this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1, this.__textEngine.textFormatRanges.length - 1);
                    var range = this.__textEngine.textFormatRanges[0];
                    range.format = this.__textFormat;
                    range.start = 0;
                    range.end = value.length;
                    return this.__textEngine.text = value;
                } else {
                    this.__textEngine.textFormatRanges.splice(0, this.__textEngine.textFormatRanges.length);
                    value = "";
                    var _g = 0;
                    while (_g < segments.length) {
                        var segment = segments[_g]; ++_g;
                        if (segment == "") continue;
                        var closeFontIndex = segment.indexOf("</font>");
                        if (closeFontIndex > -1) {
                            var start = segment.indexOf(">") + 1;
                            var end = closeFontIndex;
                            var format = this.__textFormat.clone();
                            var faceIndex = segment.indexOf("face=");
                            var colorIndex = segment.indexOf("color=");
                            var sizeIndex = segment.indexOf("size=");
                            if (faceIndex > -1 && faceIndex < start) {
                                var len = segment.indexOf("\"", faceIndex);
                                format.font = HxOverrides.substr(segment, faceIndex + 6, len);
                            }
                            if (colorIndex > -1 && colorIndex < start) format.color = Std.parseInt("0x" + HxOverrides.substr(segment, colorIndex + 8, 6));
                            if (sizeIndex > -1 && sizeIndex < start) format.size = Std.parseInt((function($this) {
                                var $r;
                                var len1 = segment.indexOf("\"", sizeIndex);
                                $r = HxOverrides.substr(segment, sizeIndex + 6, len1);
                                return $r;
                            } (this)));
                            var sub = segment.substring(start, end);
                            sub = new EReg("<.*?>", "g").replace(sub, "");
                            this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format, value.length, value.length + sub.length));
                            value += sub;
                            if (closeFontIndex + 7 < segment.length) {
                                sub = HxOverrides.substr(segment, closeFontIndex + 7, null);
                                this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, value.length, value.length + sub.length));
                                value += sub;
                            }
                        } else {
                            this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat, value.length, value.length + segment.length));
                            value += segment;
                        }
                    }
                }
            }
            return this.__textEngine.text = value;
        },
        get_length: function() {
            if (this.__textEngine.text != null) return this.__textEngine.text.length;
            return 0;
        },
        get_maxChars: function() {
            return this.__textEngine.maxChars;
        },
        set_maxChars: function(value) {
            if (value != this.__textEngine.maxChars) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            return this.__textEngine.maxChars = value;
        },
        get_maxScrollH: function() {
            this.__updateLayout();
            return this.__textEngine.maxScrollH;
        },
        get_maxScrollV: function() {
            this.__updateLayout();
            return this.__textEngine.maxScrollV;
        },
        get_multiline: function() {
            return this.__textEngine.multiline;
        },
        set_multiline: function(value) {
            if (value != this.__textEngine.multiline) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            return this.__textEngine.multiline = value;
        },
        get_numLines: function() {
            this.__updateLayout();
            return this.__textEngine.numLines;
        },
        get_restrict: function() {
            return this.__textEngine.restrict;
        },
        set_restrict: function(value) {
            return this.__textEngine.restrict = value;
        },
        get_scrollH: function() {
            return this.__textEngine.scrollH;
        },
        set_scrollH: function(value) {
            if (value > this.__textEngine.maxScrollH) value = this.__textEngine.maxScrollH;
            if (value < 0) value = 0;
            if (value != this.__textEngine.scrollH) this.__dirty = true;
            return this.__textEngine.scrollH = value;
        },
        get_scrollV: function() {
            return this.__textEngine.scrollV;
        },
        set_scrollV: function(value) {
            if (value > this.__textEngine.maxScrollV) value = this.__textEngine.maxScrollV;
            if (value < 1) value = 1;
            if (value != this.__textEngine.scrollV) this.__dirty = true;
            return this.__textEngine.scrollV = value;
        },
        get_selectable: function() {
            return this.__textEngine.selectable;
        },
        set_selectable: function(value) {
            if (value != this.__textEngine.selectable && this.get_type() == 1) {
                if (this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
                else if (!value) this.__stopTextInput();
            }
            return this.__textEngine.selectable = value;
        },
        get_selectionBeginIndex: function() {
            return Std["int"](Math.min(this.__caretIndex, this.__selectionIndex));
        },
        get_selectionEndIndex: function() {
            return Std["int"](Math.max(this.__caretIndex, this.__selectionIndex));
        },
        get_sharpness: function() {
            return this.__textEngine.sharpness;
        },
        set_sharpness: function(value) {
            if (value != this.__textEngine.sharpness) this.__dirty = true;
            return this.__textEngine.sharpness = value;
        },
        get_text: function() {
            return this.__textEngine.text;
        },
        set_text: function(value) {
            if (this.__isHTML || this.__textEngine.text != value) {
                this.__dirty = true;
                this.__layoutDirty = true;
            } else return value;
            if (this.__textEngine.textFormatRanges.length > 1) this.__textEngine.textFormatRanges.splice(1, this.__textEngine.textFormatRanges.length - 1);
            var range = this.__textEngine.textFormatRanges[0];
            range.format = this.__textFormat;
            range.start = 0;
            range.end = value.length;
            this.__isHTML = false;
            return this.__textEngine.text = value;
        },
        get_textColor: function() {
            return this.__textFormat.color;
        },
        set_textColor: function(value) {
            if (value != this.__textFormat.color) this.__dirty = true;
            var _g = 0;
            var _g1 = this.__textEngine.textFormatRanges;
            while (_g < _g1.length) {
                var range = _g1[_g]; ++_g;
                range.format.color = value;
            }
            return this.__textFormat.color = value;
        },
        get_textWidth: function() {
            this.__updateLayout();
            return this.__textEngine.textWidth;
        },
        get_textHeight: function() {
            this.__updateLayout();
            return this.__textEngine.textHeight;
        },
        get_type: function() {
            return this.__textEngine.type;
        },
        set_type: function(value) {
            if (value != this.__textEngine.type) {
                if (value == 1) {
                    this.addEventListener("focusIn", $bind(this, this.this_onFocusIn));
                    this.addEventListener("focusOut", $bind(this, this.this_onFocusOut));
                    this.addEventListener("addedToStage", $bind(this, this.this_onAddedToStage));
                    this.this_onFocusIn(null);
                } else {
                    this.removeEventListener("focusIn", $bind(this, this.this_onFocusIn));
                    this.removeEventListener("focusOut", $bind(this, this.this_onFocusOut));
                    this.removeEventListener("addedToStage", $bind(this, this.this_onAddedToStage));
                    this.__stopTextInput();
                }
                this.__dirty = true;
            }
            return this.__textEngine.type = value;
        },
        get_width: function() {
            this.__updateLayout();
            return this.__textEngine.width;
        },
        set_width: function(value) {
            if (this.get_scaleX() != 1 || this.__textEngine.width != value) {
                if (!this.__transformDirty) {
                    this.__transformDirty = true;
                    openfl_display_DisplayObject.__worldTransformDirty++;
                }
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            this.set_scaleX(1);
            return this.__textEngine.width = value;
        },
        get_wordWrap: function() {
            return this.__textEngine.wordWrap;
        },
        set_wordWrap: function(value) {
            if (value != this.__textEngine.wordWrap) {
                this.__dirty = true;
                this.__layoutDirty = true;
            }
            return this.__textEngine.wordWrap = value;
        },
        stage_onMouseMove: function(event) {
            if (this.stage == null) return;
            if (this.__textEngine.selectable && this.__selectionIndex >= 0) {
                this.__updateLayout();
                var position = this.__getPosition(this.get_mouseX(), this.get_mouseY());
                if (position != this.__caretIndex) {
                    this.__caretIndex = position;
                    this.__dirty = true;
                }
            }
        },
        stage_onMouseUp: function(event) {
            if (this.stage == null) return;
            this.stage.removeEventListener("mouseMove", $bind(this, this.stage_onMouseMove));
            this.stage.removeEventListener("mouseUp", $bind(this, this.stage_onMouseUp));
            if (this.stage.get_focus() == this) {
                this.__getWorldTransform();
                this.__updateLayout();
                var px = this.__worldTransform.__transformInverseX(this.get_x(), this.get_y());
                var py = this.__worldTransform.__transformInverseY(this.get_x(), this.get_y());
                var upPos = this.__getPosition(this.get_mouseX(), this.get_mouseY());
                var leftPos;
                var rightPos;
                leftPos = Std["int"](Math.min(this.__selectionIndex, upPos));
                rightPos = Std["int"](Math.max(this.__selectionIndex, upPos));
                this.__selectionIndex = leftPos;
                this.__caretIndex = rightPos;
                if (this.__inputEnabled) {
                    this.this_onFocusIn(null);
                    this.__stopCursorTimer();
                    this.__startCursorTimer();
                }
            }
        },
        this_onAddedToStage: function(event) {
            this.this_onFocusIn(null);
        },
        this_onFocusIn: function(event) {
            if (this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) this.__startTextInput();
        },
        this_onFocusOut: function(event) {
            this.__stopTextInput();
        },
        this_onMouseDown: function(event) {
            if (!this.get_selectable()) return;
            this.__updateLayout();
            this.__caretIndex = this.__getPosition(this.get_mouseX(), this.get_mouseY());
            this.__selectionIndex = this.__caretIndex;
            this.__dirty = true;
            this.stage.addEventListener("mouseMove", $bind(this, this.stage_onMouseMove));
            this.stage.addEventListener("mouseUp", $bind(this, this.stage_onMouseUp));
        },
        window_onKeyDown: function(key, modifier) {
            switch (key) {
            case 8:
                if (this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) this.__selectionIndex = this.__caretIndex - 1;
                if (this.__selectionIndex != this.__caretIndex) {
                    this.replaceSelectedText("");
                    this.__selectionIndex = this.__caretIndex;
                    this.dispatchEvent(new openfl_events_Event("change", true));
                }
                break;
            case 127:
                if (this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) this.__selectionIndex = this.__caretIndex + 1;
                if (this.__selectionIndex != this.__caretIndex) {
                    this.replaceSelectedText("");
                    this.__selectionIndex = this.__caretIndex;
                    this.dispatchEvent(new openfl_events_Event("change", true));
                }
                break;
            case 1073741904:
                if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                    if (this.__caretIndex > 0) this.__caretIndex--;
                } else {
                    if (this.__selectionIndex == this.__caretIndex) {
                        if (this.__caretIndex > 0) this.__caretIndex--;
                    } else this.__caretIndex = Std["int"](Math.min(this.__caretIndex, this.__selectionIndex));
                    this.__selectionIndex = this.__caretIndex;
                }
                this.__stopCursorTimer();
                this.__startCursorTimer();
                break;
            case 1073741903:
                if (lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
                    if (this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
                } else {
                    if (this.__selectionIndex == this.__caretIndex) {
                        if (this.__caretIndex < this.__textEngine.text.length) this.__caretIndex++;
                    } else this.__caretIndex = Std["int"](Math.max(this.__caretIndex, this.__selectionIndex));
                    this.__selectionIndex = this.__caretIndex;
                }
                this.__stopCursorTimer();
                this.__startCursorTimer();
                break;
            case 99:
                if (modifier == 64 || modifier == 128) lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex, this.__selectionIndex));
                break;
            case 120:
                if (modifier == 64 || modifier == 128) {
                    lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex, this.__selectionIndex));
                    if (this.__caretIndex != this.__selectionIndex) {
                        this.replaceSelectedText("");
                        this.dispatchEvent(new openfl_events_Event("change", true));
                    }
                }
                break;
            case 118:
                if (modifier == 64 || modifier == 128) {
                    var text = lime_system_Clipboard.get_text();
                    if (text != null) this.replaceSelectedText(text);
                    else this.replaceSelectedText("");
                    this.dispatchEvent(new openfl_events_Event("change", true));
                } else this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
                break;
            default:
            }
        },
        window_onTextInput: function(value) {
            this.replaceSelectedText(value);
            this.dispatchEvent(new openfl_events_Event("change", true));
        },
        __class__: openfl_text_TextField,
        __properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__, {
            set_wordWrap: "set_wordWrap",
            get_wordWrap: "get_wordWrap",
            set_type: "set_type",
            get_type: "get_type",
            get_textWidth: "get_textWidth",
            get_textHeight: "get_textHeight",
            set_textColor: "set_textColor",
            get_textColor: "get_textColor",
            set_text: "set_text",
            get_text: "get_text",
            set_sharpness: "set_sharpness",
            get_sharpness: "get_sharpness",
            get_selectionEndIndex: "get_selectionEndIndex",
            get_selectionBeginIndex: "get_selectionBeginIndex",
            set_selectable: "set_selectable",
            get_selectable: "get_selectable",
            set_scrollV: "set_scrollV",
            get_scrollV: "get_scrollV",
            set_scrollH: "set_scrollH",
            get_scrollH: "get_scrollH",
            set_restrict: "set_restrict",
            get_restrict: "get_restrict",
            get_numLines: "get_numLines",
            set_multiline: "set_multiline",
            get_multiline: "get_multiline",
            get_maxScrollV: "get_maxScrollV",
            get_maxScrollH: "get_maxScrollH",
            set_maxChars: "set_maxChars",
            get_maxChars: "get_maxChars",
            get_length: "get_length",
            set_htmlText: "set_htmlText",
            get_htmlText: "get_htmlText",
            set_gridFitType: "set_gridFitType",
            get_gridFitType: "get_gridFitType",
            set_embedFonts: "set_embedFonts",
            get_embedFonts: "get_embedFonts",
            set_displayAsPassword: "set_displayAsPassword",
            get_displayAsPassword: "get_displayAsPassword",
            set_defaultTextFormat: "set_defaultTextFormat",
            get_defaultTextFormat: "get_defaultTextFormat",
            get_caretIndex: "get_caretIndex",
            get_bottomScrollV: "get_bottomScrollV",
            set_borderColor: "set_borderColor",
            get_borderColor: "get_borderColor",
            set_border: "set_border",
            get_border: "get_border",
            set_backgroundColor: "set_backgroundColor",
            get_backgroundColor: "get_backgroundColor",
            set_background: "set_background",
            get_background: "get_background",
            set_autoSize: "set_autoSize",
            get_autoSize: "get_autoSize",
            set_antiAliasType: "set_antiAliasType",
            get_antiAliasType: "get_antiAliasType"
        })
    });
    var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
    $hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl", "text", "_TextFieldAutoSize", "TextFieldAutoSize_Impl_"];
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
        switch (value) {
        case "center":
            return 0;
        case "left":
            return 1;
        case "none":
            return 2;
        case "right":
            return 3;
        default:
            return null;
        }
    };
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "center";
        case 1:
            return "left";
        case 2:
            return "none";
        case 3:
            return "right";
        default:
            return null;
        }
    };
    var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
    $hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
    openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl", "text", "_TextFieldType", "TextFieldType_Impl_"];
    openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
        switch (value) {
        case "dynamic":
            return 0;
        case "input":
            return 1;
        default:
            return null;
        }
    };
    openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "dynamic";
        case 1:
            return "input";
        default:
            return null;
        }
    };
    var openfl_text_TextFormat = function(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
        this.font = font;
        this.size = size;
        this.color = color;
        this.bold = bold;
        this.italic = italic;
        this.underline = underline;
        this.url = url;
        this.target = target;
        this.align = align;
        this.leftMargin = leftMargin;
        this.rightMargin = rightMargin;
        this.indent = indent;
        this.leading = leading;
    };
    $hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
    openfl_text_TextFormat.__name__ = ["openfl", "text", "TextFormat"];
    openfl_text_TextFormat.prototype = {
        clone: function() {
            var newFormat = new openfl_text_TextFormat(this.font, this.size, this.color, this.bold, this.italic, this.underline, this.url, this.target);
            newFormat.align = this.align;
            newFormat.leftMargin = this.leftMargin;
            newFormat.rightMargin = this.rightMargin;
            newFormat.indent = this.indent;
            newFormat.leading = this.leading;
            newFormat.blockIndent = this.blockIndent;
            newFormat.bullet = this.bullet;
            newFormat.kerning = this.kerning;
            newFormat.letterSpacing = this.letterSpacing;
            newFormat.tabStops = this.tabStops;
            return newFormat;
        },
        __merge: function(format) {
            if (format.font != null) this.font = format.font;
            if (format.size != null) this.size = format.size;
            if (format.color != null) this.color = format.color;
            if (format.bold != null) this.bold = format.bold;
            if (format.italic != null) this.italic = format.italic;
            if (format.underline != null) this.underline = format.underline;
            if (format.url != null) this.url = format.url;
            if (format.target != null) this.target = format.target;
            if (format.align != null) this.align = format.align;
            if (format.leftMargin != null) this.leftMargin = format.leftMargin;
            if (format.rightMargin != null) this.rightMargin = format.rightMargin;
            if (format.indent != null) this.indent = format.indent;
            if (format.leading != null) this.leading = format.leading;
            if (format.blockIndent != null) this.blockIndent = format.blockIndent;
            if (format.bullet != null) this.bullet = format.bullet;
            if (format.kerning != null) this.kerning = format.kerning;
            if (format.letterSpacing != null) this.letterSpacing = format.letterSpacing;
            if (format.tabStops != null) this.tabStops = format.tabStops;
        },
        __class__: openfl_text_TextFormat
    };
    var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
    $hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl", "text", "_TextFormatAlign", "TextFormatAlign_Impl_"];
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
        switch (value) {
        case "center":
            return 0;
        case "end":
            return 1;
        case "justify":
            return 2;
        case "left":
            return 3;
        case "right":
            return 4;
        case "start":
            return 5;
        default:
            return null;
        }
    };
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "center";
        case 1:
            return "end";
        case 2:
            return "justify";
        case 3:
            return "left";
        case 4:
            return "right";
        case 5:
            return "start";
        default:
            return null;
        }
    };
    var openfl_text_TextLineMetrics = function(x, width, height, ascent, descent, leading) {
        this.x = x;
        this.width = width;
        this.height = height;
        this.ascent = ascent;
        this.descent = descent;
        this.leading = leading;
    };
    $hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
    openfl_text_TextLineMetrics.__name__ = ["openfl", "text", "TextLineMetrics"];
    openfl_text_TextLineMetrics.prototype = {
        __class__: openfl_text_TextLineMetrics
    };
    var openfl_ui_GameInput = function() {
        openfl_events_EventDispatcher.call(this);
        openfl_ui_GameInput.__instances.push(this);
    };
    $hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
    openfl_ui_GameInput.__name__ = ["openfl", "ui", "GameInput"];
    openfl_ui_GameInput.getDeviceAt = function(index) {
        if (index >= 0 && index < openfl_ui_GameInput.__deviceList.length) return openfl_ui_GameInput.__deviceList[index];
        return null;
    };
    openfl_ui_GameInput.__getDevice = function(gamepad) {
        if (gamepad == null) return null;
        if (! (openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null)) {
            var device = new openfl_ui_GameInputDevice(gamepad.get_guid(), gamepad.get_name());
            openfl_ui_GameInput.__deviceList.push(device);
            openfl_ui_GameInput.__devices.set(gamepad, device);
            openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
        }
        return openfl_ui_GameInput.__devices.h[gamepad.__id__];
    };
    openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad, axis, value) {
        var device = openfl_ui_GameInput.__getDevice(gamepad);
        if (device == null) return;
        if (device.enabled) {
            if (!device.__axis.h.hasOwnProperty(axis)) {
                var control1 = new openfl_ui_GameInputControl(device, "AXIS_" + (function($this) {
                    var $r;
                    switch (axis) {
                    case 0:
                        $r = "LEFT_X";
                        break;
                    case 1:
                        $r = "LEFT_Y";
                        break;
                    case 2:
                        $r = "RIGHT_X";
                        break;
                    case 3:
                        $r = "RIGHT_Y";
                        break;
                    case 4:
                        $r = "TRIGGER_LEFT";
                        break;
                    case 5:
                        $r = "TRIGGER_RIGHT";
                        break;
                    default:
                        $r = "UNKNOWN (" + axis + ")";
                    }
                    return $r;
                } (this)), -1, 1);
                device.__axis.h[axis] = control1;
                device.__controls.push(control1);
            }
            var control = device.__axis.h[axis];
            control.value = value;
            control.dispatchEvent(new openfl_events_Event("change"));
        }
    };
    openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad, button) {
        var device = openfl_ui_GameInput.__getDevice(gamepad);
        if (device == null) return;
        if (device.enabled) {
            if (!device.__button.h.hasOwnProperty(button)) {
                var control1 = new openfl_ui_GameInputControl(device, "BUTTON_" + (function($this) {
                    var $r;
                    switch (button) {
                    case 0:
                        $r = "A";
                        break;
                    case 1:
                        $r = "B";
                        break;
                    case 2:
                        $r = "X";
                        break;
                    case 3:
                        $r = "Y";
                        break;
                    case 4:
                        $r = "BACK";
                        break;
                    case 5:
                        $r = "GUIDE";
                        break;
                    case 6:
                        $r = "START";
                        break;
                    case 7:
                        $r = "LEFT_STICK";
                        break;
                    case 8:
                        $r = "RIGHT_STICK";
                        break;
                    case 9:
                        $r = "LEFT_SHOULDER";
                        break;
                    case 10:
                        $r = "RIGHT_SHOULDER";
                        break;
                    case 11:
                        $r = "DPAD_UP";
                        break;
                    case 12:
                        $r = "DPAD_DOWN";
                        break;
                    case 13:
                        $r = "DPAD_LEFT";
                        break;
                    case 14:
                        $r = "DPAD_RIGHT";
                        break;
                    default:
                        $r = "UNKNOWN (" + button + ")";
                    }
                    return $r;
                } (this)), 0, 1);
                device.__button.h[button] = control1;
                device.__controls.push(control1);
            }
            var control = device.__button.h[button];
            control.value = 1;
            control.dispatchEvent(new openfl_events_Event("change"));
        }
    };
    openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad, button) {
        var device = openfl_ui_GameInput.__getDevice(gamepad);
        if (device == null) return;
        if (device.enabled) {
            if (!device.__button.h.hasOwnProperty(button)) {
                var control1 = new openfl_ui_GameInputControl(device, "BUTTON_" + (function($this) {
                    var $r;
                    switch (button) {
                    case 0:
                        $r = "A";
                        break;
                    case 1:
                        $r = "B";
                        break;
                    case 2:
                        $r = "X";
                        break;
                    case 3:
                        $r = "Y";
                        break;
                    case 4:
                        $r = "BACK";
                        break;
                    case 5:
                        $r = "GUIDE";
                        break;
                    case 6:
                        $r = "START";
                        break;
                    case 7:
                        $r = "LEFT_STICK";
                        break;
                    case 8:
                        $r = "RIGHT_STICK";
                        break;
                    case 9:
                        $r = "LEFT_SHOULDER";
                        break;
                    case 10:
                        $r = "RIGHT_SHOULDER";
                        break;
                    case 11:
                        $r = "DPAD_UP";
                        break;
                    case 12:
                        $r = "DPAD_DOWN";
                        break;
                    case 13:
                        $r = "DPAD_LEFT";
                        break;
                    case 14:
                        $r = "DPAD_RIGHT";
                        break;
                    default:
                        $r = "UNKNOWN (" + button + ")";
                    }
                    return $r;
                } (this)), 0, 1);
                device.__button.h[button] = control1;
                device.__controls.push(control1);
            }
            var control = device.__button.h[button];
            control.value = 0;
            control.dispatchEvent(new openfl_events_Event("change"));
        }
    };
    openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
        var device = openfl_ui_GameInput.__getDevice(gamepad);
        if (device == null) return;
        var _g = 0;
        var _g1 = openfl_ui_GameInput.__instances;
        while (_g < _g1.length) {
            var instance = _g1[_g]; ++_g;
            instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded", null, null, device));
        }
    };
    openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
        var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
        if (device != null) {
            if (openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
                var x = openfl_ui_GameInput.__devices.h[gamepad.__id__];
                HxOverrides.remove(openfl_ui_GameInput.__deviceList, x);
                openfl_ui_GameInput.__devices.remove(gamepad);
            }
            openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
            var _g = 0;
            var _g1 = openfl_ui_GameInput.__instances;
            while (_g < _g1.length) {
                var instance = _g1[_g]; ++_g;
                instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved", null, null, device));
            }
        }
    };
    openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
    openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        __class__: openfl_ui_GameInput
    });
    var openfl_ui_GameInputControl = function(device, id, minValue, maxValue, value) {
        if (value == null) value = 0;
        openfl_events_EventDispatcher.call(this);
        this.device = device;
        this.id = id;
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.value = value;
    };
    $hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
    openfl_ui_GameInputControl.__name__ = ["openfl", "ui", "GameInputControl"];
    openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
    openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype, {
        __class__: openfl_ui_GameInputControl
    });
    var openfl_ui_GameInputDevice = function(id, name) {
        this.__controls = [];
        this.__button = new haxe_ds_IntMap();
        this.__axis = new haxe_ds_IntMap();
        this.id = id;
        this.name = name;
        var control;
        var _g = 0;
        while (_g < 6) {
            var i = _g++;
            control = new openfl_ui_GameInputControl(this, "AXIS_" + i, -1, 1);
            this.__axis.h[i] = control;
            this.__controls.push(control);
        }
        var _g1 = 0;
        while (_g1 < 15) {
            var i1 = _g1++;
            control = new openfl_ui_GameInputControl(this, "BUTTON_" + i1, 0, 1);
            this.__button.h[i1] = control;
            this.__controls.push(control);
        }
    };
    $hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
    openfl_ui_GameInputDevice.__name__ = ["openfl", "ui", "GameInputDevice"];
    openfl_ui_GameInputDevice.prototype = {
        getCachedSamples: function(data, append) {
            if (append == null) append = false;
            return 0;
        },
        getControlAt: function(i) {
            if (i >= 0 && i < this.__controls.length) return this.__controls[i];
            return null;
        },
        startCachingSamples: function(numSamples, controls) {},
        stopCachingSamples: function() {},
        get_numControls: function() {
            return this.__controls.length;
        },
        __class__: openfl_ui_GameInputDevice,
        __properties__: {
            get_numControls: "get_numControls"
        }
    };
    var openfl_ui_Keyboard = function() {};
    $hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
    openfl_ui_Keyboard.__name__ = ["openfl", "ui", "Keyboard"];
    openfl_ui_Keyboard.capsLock = null;
    openfl_ui_Keyboard.numLock = null;
    openfl_ui_Keyboard.isAccessible = function() {
        return false;
    };
    openfl_ui_Keyboard.__convertKeyCode = function(key) {
        switch (key) {
        case 8:
            return 8;
        case 9:
            return 9;
        case 13:
            return 13;
        case 27:
            return 27;
        case 32:
            return 32;
        case 33:
            return 49;
        case 34:
            return 222;
        case 35:
            return 51;
        case 36:
            return 52;
        case 37:
            return 53;
        case 38:
            return 55;
        case 39:
            return 222;
        case 40:
            return 57;
        case 41:
            return 48;
        case 42:
            return 56;
        case 44:
            return 188;
        case 45:
            return 189;
        case 46:
            return 190;
        case 47:
            return 191;
        case 48:
            return 48;
        case 49:
            return 49;
        case 50:
            return 50;
        case 51:
            return 51;
        case 52:
            return 52;
        case 53:
            return 53;
        case 54:
            return 54;
        case 55:
            return 55;
        case 56:
            return 56;
        case 57:
            return 57;
        case 58:
            return 186;
        case 59:
            return 186;
        case 60:
            return 60;
        case 61:
            return 187;
        case 62:
            return 190;
        case 63:
            return 191;
        case 64:
            return 50;
        case 91:
            return 219;
        case 92:
            return 220;
        case 93:
            return 221;
        case 94:
            return 54;
        case 95:
            return 189;
        case 96:
            return 192;
        case 97:
            return 65;
        case 98:
            return 66;
        case 99:
            return 67;
        case 100:
            return 68;
        case 101:
            return 69;
        case 102:
            return 70;
        case 103:
            return 71;
        case 104:
            return 72;
        case 105:
            return 73;
        case 106:
            return 74;
        case 107:
            return 75;
        case 108:
            return 76;
        case 109:
            return 77;
        case 110:
            return 78;
        case 111:
            return 79;
        case 112:
            return 80;
        case 113:
            return 81;
        case 114:
            return 82;
        case 115:
            return 83;
        case 116:
            return 84;
        case 117:
            return 85;
        case 118:
            return 86;
        case 119:
            return 87;
        case 120:
            return 88;
        case 121:
            return 89;
        case 122:
            return 90;
        case 127:
            return 46;
        case 1073741881:
            return 20;
        case 1073741882:
            return 112;
        case 1073741883:
            return 113;
        case 1073741884:
            return 114;
        case 1073741885:
            return 115;
        case 1073741886:
            return 116;
        case 1073741887:
            return 117;
        case 1073741888:
            return 118;
        case 1073741889:
            return 119;
        case 1073741890:
            return 120;
        case 1073741891:
            return 121;
        case 1073741892:
            return 122;
        case 1073741893:
            return 123;
        case 1073741894:
            return 301;
        case 1073741895:
            return 145;
        case 1073741896:
            return 19;
        case 1073741897:
            return 45;
        case 1073741898:
            return 36;
        case 1073741899:
            return 33;
        case 1073741901:
            return 35;
        case 1073741902:
            return 34;
        case 1073741903:
            return 39;
        case 1073741904:
            return 37;
        case 1073741905:
            return 40;
        case 1073741906:
            return 38;
        case 1073741907:
            return 144;
        case 1073741908:
            return 111;
        case 1073741909:
            return 106;
        case 1073741910:
            return 109;
        case 1073741911:
            return 107;
        case 1073741912:
            return 108;
        case 1073741913:
            return 97;
        case 1073741914:
            return 98;
        case 1073741915:
            return 99;
        case 1073741916:
            return 100;
        case 1073741917:
            return 101;
        case 1073741918:
            return 102;
        case 1073741919:
            return 103;
        case 1073741920:
            return 104;
        case 1073741921:
            return 105;
        case 1073741922:
            return 96;
        case 1073741923:
            return 110;
        case 1073741925:
            return 302;
        case 1073741928:
            return 124;
        case 1073741929:
            return 125;
        case 1073741930:
            return 126;
        case 1073741982:
            return 13;
        case 1073742044:
            return 110;
        case 1073742048:
            return 17;
        case 1073742049:
            return 16;
        case 1073742050:
            return 18;
        case 1073742051:
            return 15;
        case 1073742052:
            return 17;
        case 1073742053:
            return 16;
        case 1073742054:
            return 18;
        case 1073742055:
            return 15;
        default:
            return key;
        }
    };
    openfl_ui_Keyboard.__getCharCode = function(key, shift) {
        if (shift == null) shift = false;
        if (!shift) {
            switch (key) {
            case 8:
                return 8;
            case 9:
                return 9;
            case 13:
                return 13;
            case 27:
                return 27;
            case 32:
                return 32;
            case 186:
                return 59;
            case 187:
                return 61;
            case 188:
                return 44;
            case 189:
                return 45;
            case 190:
                return 46;
            case 191:
                return 47;
            case 192:
                return 96;
            case 219:
                return 91;
            case 220:
                return 92;
            case 221:
                return 93;
            case 222:
                return 39;
            }
            if (key >= 48 && key <= 57) return key - 48 + 48;
            if (key >= 65 && key <= 90) return key - 65 + 97;
        } else {
            switch (key) {
            case 48:
                return 41;
            case 49:
                return 33;
            case 50:
                return 64;
            case 51:
                return 35;
            case 52:
                return 36;
            case 53:
                return 37;
            case 54:
                return 94;
            case 55:
                return 38;
            case 56:
                return 42;
            case 57:
                return 40;
            case 186:
                return 58;
            case 187:
                return 43;
            case 188:
                return 60;
            case 189:
                return 95;
            case 190:
                return 62;
            case 191:
                return 63;
            case 192:
                return 126;
            case 219:
                return 123;
            case 220:
                return 124;
            case 221:
                return 125;
            case 222:
                return 34;
            }
            if (key >= 65 && key <= 90) return key - 65 + 65;
        }
        if (key >= 96 && key <= 105) return key - 96 + 48;
        switch (key) {
        case 106:
            return 42;
        case 107:
            return 43;
        case 108:
            return 44;
        case 110:
            return 45;
        case 111:
            return 46;
        case 46:
            return 127;
        case 13:
            return 13;
        case 8:
            return 8;
        }
        return 0;
    };
    openfl_ui_Keyboard.__getKeyLocation = function(key) {
        switch (key) {
        case 1073742048:
        case 1073742049:
        case 1073742050:
        case 1073742051:
            return 1;
        case 1073742052:
        case 1073742053:
        case 1073742054:
        case 1073742055:
            return 2;
        case 1073741908:
        case 1073741909:
        case 1073741910:
        case 1073741911:
        case 1073741912:
        case 1073741913:
        case 1073741914:
        case 1073741915:
        case 1073741916:
        case 1073741917:
        case 1073741918:
        case 1073741919:
        case 1073741920:
        case 1073741921:
        case 1073741922:
        case 1073741923:
        case 1073742044:
            return 3;
        default:
            return 0;
        }
    };
    var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
    $hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
    openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl", "utils", "_ByteArray", "ByteArray_Impl_"];
    openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {
        set_length: "set_length",
        get_length: "get_length"
    }
    openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
    openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
        if (length == null) length = 0;
        return new openfl_utils_ByteArrayData(length);
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1, index) {
        return this1.b[index];
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1, index, value) {
        this1.b[index] = value & 255;
        return value;
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
        return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
        if (js_Boot.__instanceof(bytes, openfl_utils_ByteArrayData)) return bytes;
        else return openfl_utils_ByteArrayData.fromBytes(bytes);
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
        return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
        return byteArray.b.bufferValue;
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
        return byteArray;
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
        return byteArray.b.bufferValue;
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
        return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray), byteArray.b.bufferValue);
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
        return this1.__length;
    };
    openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1, value) {
        if (value > 0) this1.__resize(value);
        this1.__length = value;
        return value;
    };
    var openfl_utils_IDataOutput = function() {};
    $hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
    openfl_utils_IDataOutput.__name__ = ["openfl", "utils", "IDataOutput"];
    openfl_utils_IDataOutput.prototype = {
        __class__: openfl_utils_IDataOutput,
        __properties__: {
            set_endian: "set_endian",
            get_endian: "get_endian"
        }
    };
    var openfl_utils_IDataInput = function() {};
    $hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
    openfl_utils_IDataInput.__name__ = ["openfl", "utils", "IDataInput"];
    openfl_utils_IDataInput.prototype = {
        __class__: openfl_utils_IDataInput,
        __properties__: {
            set_endian: "set_endian",
            get_endian: "get_endian",
            get_bytesAvailable: "get_bytesAvailable"
        }
    };
    var openfl_utils_ByteArrayData = function(length) {
        if (length == null) length = 0;
        var bytes = haxe_io_Bytes.alloc(length);
        haxe_io_Bytes.call(this, bytes.b.buffer);
        this.__length = length;
        this.__endian = 0;
        this.position = 0;
    };
    $hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
    openfl_utils_ByteArrayData.__name__ = ["openfl", "utils", "ByteArrayData"];
    openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput, openfl_utils_IDataInput];
    openfl_utils_ByteArrayData.fromBytes = function(bytes) {
        var result = new openfl_utils_ByteArrayData();
        result.__fromBytes(bytes);
        return result;
    };
    openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
    openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype, {
        clear: function() {
            this.__length = 0;
            this.position = 0;
        },
        compress: function(algorithm) {
            this.__length = this.length;
            this.position = this.__length;
        },
        deflate: function() {
            this.compress(0);
        },
        inflate: function() {
            this.uncompress(0);
        },
        readBoolean: function() {
            if (this.position < this.length) return this.get(this.position++) != 0;
            else {
                throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
                return false;
            }
        },
        readByte: function() {
            var value = this.readUnsignedByte();
            if ((value & 128) != 0) return value - 256;
            else return value;
        },
        readBytes: function(bytes, offset, length) {
            if (length == null) length = 0;
            if (offset == null) offset = 0;
            if (length == 0) length = this.__length - this.position;
            if (this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
            if (bytes.__length < offset + length) bytes.__resize(offset + length);
            bytes.blit(offset, this, this.position, length);
            this.position += length;
        },
        readDouble: function() {
            if (this.position + 8 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
            this.position += 8;
            return this.getDouble(this.position - 8);
        },
        readFloat: function() {
            if (this.position + 4 > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
            this.position += 4;
            return this.getFloat(this.position - 4);
        },
        readInt: function() {
            var ch1 = this.readUnsignedByte();
            var ch2 = this.readUnsignedByte();
            var ch3 = this.readUnsignedByte();
            var ch4 = this.readUnsignedByte();
            if (this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
            else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
        },
        readMultiByte: function(length, charSet) {
            return this.readUTFBytes(length);
        },
        readShort: function() {
            var ch1 = this.readUnsignedByte();
            var ch2 = this.readUnsignedByte();
            var value;
            if (this.__endian == 1) value = ch2 << 8 | ch1;
            else value = ch1 << 8 | ch2;
            if ((value & 32768) != 0) return value - 65536;
            else return value;
        },
        readUnsignedByte: function() {
            if (this.position < this.__length) return this.get(this.position++);
            else {
                throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
                return 0;
            }
        },
        readUnsignedInt: function() {
            var ch1 = this.readUnsignedByte();
            var ch2 = this.readUnsignedByte();
            var ch3 = this.readUnsignedByte();
            var ch4 = this.readUnsignedByte();
            if (this.__endian == 1) return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
            else return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
        },
        readUnsignedShort: function() {
            var ch1 = this.readUnsignedByte();
            var ch2 = this.readUnsignedByte();
            if (this.__endian == 1) return (ch2 << 8) + ch1;
            else return ch1 << 8 | ch2;
        },
        readUTF: function() {
            var bytesCount = this.readUnsignedShort();
            return this.readUTFBytes(bytesCount);
        },
        readUTFBytes: function(length) {
            if (this.position + length > this.__length) throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
            this.position += length;
            return this.getString(this.position - length, length);
        },
        uncompress: function(algorithm) {
            this.__length = this.length;
            this.position = 0;
        },
        writeBoolean: function(value) {
            this.writeByte(value ? 1 : 0);
        },
        writeByte: function(value) {
            this.__resize(this.position + 1);
            this.set(this.position++, value & 255);
        },
        writeBytes: function(bytes, offset, length) {
            if (length == null) length = 0;
            if (offset == null) offset = 0;
            if (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) return;
            if (length == 0) {
                var a = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes);
                length = a - offset;
            }
            this.__resize(this.position + length);
            this.blit(this.position, bytes, offset, length);
            this.position = this.position + length;
        },
        writeDouble: function(value) {
            this.__resize(this.position + 8);
            this.setDouble(this.position, value);
            this.position += 8;
        },
        writeFloat: function(value) {
            this.__resize(this.position + 4);
            this.setFloat(this.position, value);
            this.position += 4;
        },
        writeInt: function(value) {
            this.__resize(this.position + 4);
            if (this.__endian == 1) {
                this.set(this.position++, value);
                this.set(this.position++, value >> 8);
                this.set(this.position++, value >> 16);
                this.set(this.position++, value >> 24);
            } else {
                this.set(this.position++, value >> 24);
                this.set(this.position++, value >> 16);
                this.set(this.position++, value >> 8);
                this.set(this.position++, value);
            }
        },
        writeMultiByte: function(value, charSet) {
            this.writeUTFBytes(value);
        },
        writeShort: function(value) {
            this.__resize(this.position + 2);
            if (this.__endian == 1) {
                this.set(this.position++, value);
                this.set(this.position++, value >> 8);
            } else {
                this.set(this.position++, value >> 8);
                this.set(this.position++, value);
            }
        },
        writeUnsignedInt: function(value) {
            this.writeInt(value);
        },
        writeUTF: function(value) {
            var bytes = haxe_io_Bytes.ofString(value);
            this.writeShort(bytes.length);
            this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
        },
        writeUTFBytes: function(value) {
            var bytes = haxe_io_Bytes.ofString(value);
            this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
        },
        __fromBytes: function(bytes) {
            this.b = bytes.b;
            this.length = bytes.length;
            this.data = bytes.data;
            this.__length = bytes.length;
        },
        __resize: function(size) {
            if (size > this.length) {
                var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
                bytes.blit(0, this, 0, this.length);
                this.b = bytes.b;
                this.length = bytes.length;
                this.data = bytes.data;
            }
            if (this.__length < size) this.__length = size;
        },
        __setData: function(bytes) {
            this.b = bytes.b;
            this.length = bytes.length;
            this.data = bytes.data;
        },
        get_bytesAvailable: function() {
            return this.__length - this.position;
        },
        get_endian: function() {
            return this.__endian;
        },
        set_endian: function(value) {
            return this.__endian = value;
        },
        __class__: openfl_utils_ByteArrayData,
        __properties__: {
            set_endian: "set_endian",
            get_endian: "get_endian",
            get_bytesAvailable: "get_bytesAvailable"
        }
    });
    var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
    $hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl", "utils", "_CompressionAlgorithm", "CompressionAlgorithm_Impl_"];
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
        switch (value) {
        case "deflate":
            return 0;
        case "lzma":
            return 1;
        case "zlib":
            return 2;
        default:
            return null;
        }
    };
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "deflate";
        case 1:
            return "lzma";
        case 2:
            return "zlib";
        default:
            return null;
        }
    };
    var openfl_utils__$Endian_Endian_$Impl_$ = {};
    $hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
    openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl", "utils", "_Endian", "Endian_Impl_"];
    openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
        switch (value) {
        case "bigEndian":
            return 0;
        case "littleEndian":
            return 1;
        default:
            return null;
        }
    };
    openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
        switch (value) {
        case 0:
            return "bigEndian";
        case 1:
            return "littleEndian";
        default:
            return null;
        }
    };
    var openfl_utils__$Object_Object_$Impl_$ = {};
    $hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
    openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl", "utils", "_Object", "Object_Impl_"];
    openfl_utils__$Object_Object_$Impl_$._new = function() {
        return {};
    };
    openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1, name) {
        return this1 != null && Object.prototype.hasOwnProperty.call(this1, name);
    };
    openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1, theClass) {
        var c;
        if (this1 == null) c = null;
        else c = js_Boot.getClass(this1);
        while (c != null) {
            if (c == theClass) return true;
            c = Type.getSuperClass(c);
        }
        return false;
    };
    openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
        var fields = Reflect.fields(this1);
        if (fields == null) fields = [];
        return HxOverrides.iter(fields);
    };
    openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1, name) {
        return this1 != null && Object.prototype.hasOwnProperty.call(this1, name) && Std["is"](Reflect.field(this1, name), haxe_lang_Iterable);
    };
    openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
        return Std.string(this1);
    };
    openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
        return Std.string(this1);
    };
    openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
        return this1;
    };
    openfl_utils__$Object_Object_$Impl_$.__get = function(this1, key) {
        return Reflect.field(this1, key);
    };
    openfl_utils__$Object_Object_$Impl_$.__set = function(this1, key, value) {
        this1[key] = value;
        return value;
    };
    var haxe_lang_Iterator = function() {};
    $hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
    haxe_lang_Iterator.__name__ = ["haxe", "lang", "Iterator"];
    haxe_lang_Iterator.prototype = {
        __class__: haxe_lang_Iterator
    };
    var haxe_lang_Iterable = function() {};
    $hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
    haxe_lang_Iterable.__name__ = ["haxe", "lang", "Iterable"];
    haxe_lang_Iterable.prototype = {
        __class__: haxe_lang_Iterable
    };
    function $iterator(o) {
        if (o instanceof Array) return function() {
            return HxOverrides.iter(o);
        };
        return typeof(o.iterator) == 'function' ? $bind(o, o.iterator) : o.iterator;
    }
    var $_, $fid = 0;
    function $bind(o, m) {
        if (m == null) return null;
        if (m.__id__ == null) m.__id__ = $fid++;
        var f;
        if (o.hx__closures__ == null) o.hx__closures__ = {};
        else f = o.hx__closures__[m.__id__];
        if (f == null) {
            f = function() {
                return f.method.apply(f.scope, arguments);
            };
            f.scope = o;
            f.method = m;
            o.hx__closures__[m.__id__] = f;
        }
        return f;
    }
    if (Array.prototype.indexOf) HxOverrides.indexOf = function(a, o, i) {
        return Array.prototype.indexOf.call(a, o, i);
    };
    $hxClasses.Math = Math;
    String.prototype.__class__ = $hxClasses.String = String;
    String.__name__ = ["String"];
    $hxClasses.Array = Array;
    Array.__name__ = ["Array"];
    Date.prototype.__class__ = $hxClasses.Date = Date;
    Date.__name__ = ["Date"];
    var Int = $hxClasses.Int = {
        __name__: ["Int"]
    };
    var Dynamic = $hxClasses.Dynamic = {
        __name__: ["Dynamic"]
    };
    var Float = $hxClasses.Float = Number;
    Float.__name__ = ["Float"];
    var Bool = $hxClasses.Bool = Boolean;
    Bool.__ename__ = ["Bool"];
    var Class = $hxClasses.Class = {
        __name__: ["Class"]
    };
    var Enum = {};
    if (Array.prototype.filter == null) Array.prototype.filter = function(f1) {
        var a1 = [];
        var _g11 = 0;
        var _g2 = this.length;
        while (_g11 < _g2) {
            var i1 = _g11++;
            var e = this[i1];
            if (f1(e)) a1.push(e);
        }
        return a1;
    };
    var __map_reserved = {}
    var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
    if (ArrayBuffer.prototype.slice == null) ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
    var DataView = $global.DataView || js_html_compat_DataView;
    var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
    var this1;
    this1 = new Uint32Array(256);
    lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
    var _g = 0;
    while (_g < 256) {
        var i = _g++;
        var val = Math.ceil(i * 257.00392156862745);
        lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = val;
    }
    var this2;
    this2 = new Uint8Array(510);
    lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
    var _g1 = 0;
    while (_g1 < 255) {
        var i1 = _g1++;
        lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
    }
    var _g11 = 255;
    var _g2 = 511;
    while (_g11 < _g2) {
        var i2 = _g11++;
        lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
    }
    lime_system_CFFI.available = false;
    lime_system_CFFI.enabled = false;
    if (window.createjs != null) createjs.Sound.alternateExtensions = ["ogg", "mp3", "wav"];
    openfl_display_DisplayObject.__instanceCount = 0;
    openfl_display_DisplayObject.__worldRenderDirty = 0;
    openfl_display_DisplayObject.__worldTransformDirty = 0;
    openfl_display_DisplayObject.__cacheAsBitmapMode = false;
    com_davidmaletz_faengfl_Application.focus = null;
    com_davidmaletz_mining_Main.WIDTH = 256;
    com_davidmaletz_mining_Main.HEIGHT = 144;
    com_davidmaletz_mining_Main.MAX_SLOTS = 10;
    com_davidmaletz_mining_Main.VIEW = 0;
    com_davidmaletz_mining_Main.UI = 1;
    com_davidmaletz_mining_Main.OVER_UI = 2;
    com_davidmaletz_mining_Main.TRANSITION = 3;
    com_davidmaletz_mining_Main.keyCenter = new openfl_geom_Point(16, 16);
    com_davidmaletz_mining_Main.VERSION = 17;
    com_davidmaletz_mining_Main.MIN_VERSION = 11;
    PriorityManager.priority = 0;
    Xml.Element = 0;
    Xml.PCData = 1;
    Xml.CData = 2;
    Xml.Comment = 3;
    Xml.DocType = 4;
    Xml.ProcessingInstruction = 5;
    Xml.Document = 6;
    com_davidmaletz_controls_ClickableHandler.globalOnCancel = null;
    com_davidmaletz_controls_ClickableHandler.globalOnMove = null;
    com_davidmaletz_controls_ClickableHandler.globalOnSelect = null;
    com_davidmaletz_lerp_LerpSprite.priority = 0;
    com_davidmaletz_faengfl_Window.window_ct = 0;
    com_davidmaletz_controls_Controller.TAP = "tap";
    com_davidmaletz_controls_Controller.PRESS = "press";
    com_davidmaletz_controls_Controller.RELEASE = "release";
    com_davidmaletz_controls_Controller.REPEAT = 5;
    com_davidmaletz_controls_Controller.REPEAT_WAIT = 20;
    com_davidmaletz_controls_Controller.BUTTON_DOWN = "button_down";
    com_davidmaletz_controls_Controller.BUTTON_UP = "button_up";
    com_davidmaletz_controls_Controller.AXIS_MOVE = "axis_move";
    openfl_events_Event.ACTIVATE = "activate";
    openfl_events_Event.ADDED = "added";
    openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
    openfl_events_Event.CANCEL = "cancel";
    openfl_events_Event.CHANGE = "change";
    openfl_events_Event.CLOSE = "close";
    openfl_events_Event.COMPLETE = "complete";
    openfl_events_Event.CONNECT = "connect";
    openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
    openfl_events_Event.DEACTIVATE = "deactivate";
    openfl_events_Event.ENTER_FRAME = "enterFrame";
    openfl_events_Event.ID3 = "id3";
    openfl_events_Event.INIT = "init";
    openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
    openfl_events_Event.OPEN = "open";
    openfl_events_Event.REMOVED = "removed";
    openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
    openfl_events_Event.RENDER = "render";
    openfl_events_Event.RESIZE = "resize";
    openfl_events_Event.SCROLL = "scroll";
    openfl_events_Event.SELECT = "select";
    openfl_events_Event.SOUND_COMPLETE = "soundComplete";
    openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
    openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
    openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
    openfl_events_Event.UNLOAD = "unload";
    com_davidmaletz_controls_DefaultSliderUI.HEIGHT = 6;
    com_davidmaletz_controls_DefaultSliderUI.KNOB = 10;
    com_davidmaletz_controls_ListWindow.PAD = 4;
    com_davidmaletz_controls_Slider.VALUE_CHANGED = "value_changed";
    com_davidmaletz_controls_SliderKnob.KNOB = 1.0;
    com_davidmaletz_controls_SliderKnob.KNOBPRESS = 0.5;
    com_davidmaletz_controls_SliderKnob.KNOBHOVER = 0.7;
    com_davidmaletz_controls_SliderKnob.REPEAT = 5;
    com_davidmaletz_controls_SliderKnob.REPEAT_WAIT = 20;
    com_davidmaletz_controls_SliderKnob.MAX_MOVE = 20;
    com_davidmaletz_controls_SliderKnob.FUZZY = 0;
    com_davidmaletz_controls_Spinner.CHANGE_VALUE = "change_value";
    com_davidmaletz_controls_Spinner.ACTION = "action";
    com_davidmaletz_faengfl_ui_TextField.HT = 10;
    com_davidmaletz_faengfl_ui_TextField.CURSOR_CT = 30;
    com_davidmaletz_controls_scroll_DefaultScrollUI.SCROLL = 6;
    com_davidmaletz_controls_scroll_DefaultScrollUI.MIN_KNOB = 10;
    com_davidmaletz_controls_scroll_ScrollKnob.KNOB = 1.0;
    com_davidmaletz_controls_scroll_ScrollKnob.KNOBPRESS = 0.5;
    com_davidmaletz_controls_scroll_ScrollKnob.KNOBHOVER = 0.7;
    com_davidmaletz_controls_scroll_ScrollKnob.REPEAT = 5;
    com_davidmaletz_controls_scroll_ScrollKnob.REPEAT_WAIT = 20;
    com_davidmaletz_controls_scroll_ScrollKnob.MAX_MOVE = 20;
    com_davidmaletz_controls_scroll_ScrollKnob.FUZZY = 0;
    com_davidmaletz_controls_scroll_ScrollList.OVERLAP = 3;
    com_davidmaletz_controls_scroll_ScrollWindow.PAD = 4;
    com_davidmaletz_faengfl_Button.globalOnRelease = null;
    com_davidmaletz_faengfl_EventHandler.lastGroup = null;
    com_davidmaletz_faengfl_EventHandler.lastSel = 0;
    com_davidmaletz_faengfl_EventHandler.FLAG_ENTER = 1;
    com_davidmaletz_faengfl_EventHandler.FLAG_WAIT = 2;
    com_davidmaletz_faengfl_EventHandler.additionalVars = null;
    com_davidmaletz_faengfl_FaengFL.listeners = null;
    com_davidmaletz_faengfl_FaengFL.lastTime = -1;
    com_davidmaletz_faengfl_FaengFL.speed_mod = 1;
    com_davidmaletz_faengfl_FaengFL.frameTime = 0;
    com_davidmaletz_faengfl_RevealText.TEXT_SPEED = 4;
    com_davidmaletz_faengfl_RevealText.REVEALED = 0;
    com_davidmaletz_faengfl_RevealText.REVEALING = 1;
    com_davidmaletz_faengfl_RevealText.HIDDEN = 2;
    com_fancyfish_faeng_text_CharacterPlacer.LEFT = 0;
    com_fancyfish_faeng_text_CharacterPlacer.CENTER = 1;
    com_fancyfish_faeng_text_CharacterPlacer.RIGHT = 2;
    com_davidmaletz_faengfl__$RevealText_Pause.DEFAULT_LENGTH = 1;
    com_davidmaletz_faengfl_SoundManager.MAIN_VOL = 1;
    com_davidmaletz_faengfl_SoundManager.sound_cache = new haxe_ds_StringMap();
    com_davidmaletz_faengfl_SoundManager.music_cache = new haxe_ds_StringMap();
    com_davidmaletz_faengfl_SoundManager.sound_volume = new haxe_ds_StringMap();
    com_davidmaletz_faengfl_TextSprite.SMOOTH = false;
    com_davidmaletz_faengfl_TextSprite.data = [];
    com_davidmaletz_faengfl_TextSprite.ct = 0;
    com_davidmaletz_faengfl_TextSprite.chars = [];
    com_davidmaletz_faengfl_TextSprite.char_ct = 0;
    com_davidmaletz_faengfl_TouchAdapter.DOWN = "touch_down";
    com_davidmaletz_faengfl_TouchAdapter.UP = "touch_up";
    com_davidmaletz_faengfl_TouchAdapter.MOVE = "touch_move";
    com_davidmaletz_faengfl_achievement_Achievements.GAIN_ACHIEVEMENT = "gain_achievement";
    com_davidmaletz_faengfl_controls_ControlHandler.KEYBOARD = 0;
    com_davidmaletz_faengfl_controls_ControlHandler.CONTROLLER = 1;
    com_davidmaletz_faengfl_controls_ControlHandler.COUNT = 2;
    com_davidmaletz_faengfl_controls_ControlHandler.CONTROLS_CHANGED = "controls_changed";
    com_davidmaletz_faengfl_controls_Gamepad.BUTTON_DOWN = "button_down";
    com_davidmaletz_faengfl_controls_Gamepad.BUTTON_UP = "button_up";
    com_davidmaletz_faengfl_controls_Gamepad.AXIS_MOVE = "axis_move";
    com_davidmaletz_faengfl_controls_Gamepad.DEADZONE = 0.5;
    com_davidmaletz_faengfl_controls_MouseKey.LEFT = 0;
    com_davidmaletz_faengfl_controls_MouseKey.MIDDLE = 1;
    com_davidmaletz_faengfl_controls_MouseKey.RIGHT = 2;
    com_davidmaletz_faengfl_controls_MouseKey.FLASH_LENGTH = 30;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.LEFT = 0;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.RIGHT = 1;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.TRIGGER_LEFT = 2;
    com_davidmaletz_faengfl_events_ControllerAxisEvent.TRIGGER_RIGHT = 3;
    com_davidmaletz_faengfl_events_TEvent.SHIFT_KEY = 1;
    com_davidmaletz_faengfl_events_TEvent.CTRL_KEY = 2;
    com_davidmaletz_faengfl_events_TEvent.ALT_KEY = 4;
    com_davidmaletz_lerp_PositionKeyframe.ROUND = false;
    com_davidmaletz_mining_MyAchievements.KEY = "achievement.";
    com_davidmaletz_mining_MyController.UP = 0;
    com_davidmaletz_mining_MyController.DOWN = 2;
    com_davidmaletz_mining_MyController.LEFT = 4;
    com_davidmaletz_mining_MyController.RIGHT = 6;
    com_davidmaletz_mining_MyController.ACTION = 8;
    com_davidmaletz_mining_world_BaseObject.MOVE = "move";
    com_davidmaletz_mining_world_Object.CHANGE_HEALTH = "change_health";
    com_davidmaletz_mining_Player.CHANGE_STAMINA = "change_stamina";
    com_davidmaletz_mining_Player.CHANGE_COINS = "change_coins";
    com_davidmaletz_mining_Player.ADD_QUEST = "add_quest";
    com_davidmaletz_mining_Player.COMPLETE_QUEST = "complete_quest";
    com_davidmaletz_mining_Player.ADD_EXP = "add_exp";
    com_davidmaletz_mining_Player.HOTKEY_CHANGED = "hotkey_changed";
    com_davidmaletz_mining_Player.DEFAULT_WEIGHT = 50;
    com_davidmaletz_mining_Player.WALK_COST = 5;
    com_davidmaletz_mining_Player.MAX_SPEED = 4;
    com_davidmaletz_mining_Player.MAX_ENDURANCE = 4;
    com_davidmaletz_mining_Player.MAX_HEALTH = 50;
    com_davidmaletz_mining_Player.MAX_STAMINA = 100;
    com_davidmaletz_mining_Player.DEATH_EXP = 20;
    com_davidmaletz_mining_Player.MAX_COINS = 9999;
    com_davidmaletz_mining_Player.EXP_GROWTH = 1.5;
    com_davidmaletz_mining_Player.EXP_BASE = 40;
    com_davidmaletz_mining_effects_Rain.WIDTH = 256;
    com_davidmaletz_mining_effects_Rain.HEIGHT = 144;
    com_davidmaletz_mining_effects_Storm.instance = null;
    com_davidmaletz_mining_effects_Storm.STORM_WEIGHT = 15;
    com_davidmaletz_mining_effects_Storm.MAX_LIGHTNING = 500;
    com_davidmaletz_mining_effects_Storm.LIGHTNING_FRAMES = 20;
    com_davidmaletz_mining_enemy__$Rat_RatRenderer.range = 5;
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.NO_DIG = -2147483648;
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.mining_speed = 1;
    com_davidmaletz_mining_enemy__$Wyrm_WyrmRenderer.ATTACK_CT = 6;
    com_davidmaletz_mining_item_Animal.UPDATE_PERCENT = "update_percent";
    com_davidmaletz_mining_item_Animal.UPDATE_ITEM = "update_item";
    com_davidmaletz_mining_item_Animal.MAX_PERCENT = 10000;
    com_davidmaletz_mining_item_Item.RESOURCE = 1;
    com_davidmaletz_mining_item_Item.FOOD = 0;
    com_davidmaletz_mining_item_Item.EQUIPMENT = 2;
    com_davidmaletz_mining_item_Item.MISC = 3;
    com_davidmaletz_mining_item_Item.COUNT = 4;
    com_davidmaletz_mining_item_Item.type_names = ["food", "resource", "equipment", "misc", "all"];
    com_davidmaletz_mining_item_Item.type_icons = [null, null, null, null, null];
    com_davidmaletz_mining_item_FarmItem.UPDATE_PERCENT = "update_percent";
    com_davidmaletz_mining_item_FarmItem.FARM_SPEED = 200;
    com_davidmaletz_mining_item_Inventory.ITEM_ADDED = "item_added";
    com_davidmaletz_mining_item_SmeltItem.FUEL_COST = 5;
    com_davidmaletz_mining_item_SmeltItem.FUEL_SPEED = 25;
    com_davidmaletz_mining_item_SmeltItem.UPDATE_PERCENT = "update_percent";
    com_davidmaletz_mining_npc_MineOre.MAX_DEPTH = 10;
    com_davidmaletz_mining_npc_MineOre.mining_speed = 1;
    com_davidmaletz_mining_renderer_AnimatedChunk.FPS = 10;
    com_davidmaletz_mining_renderer_AnimatedChunk.DELTA_FRAME = 0.16666666666666666;
    com_davidmaletz_mining_renderer_LightChunk.FRAMES = 15;
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.FRONT_BACK = -1;
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.BACK_ONLY = 0;
    com_davidmaletz_mining_renderer_ObjectLayerRenderer.FRONT_ONLY = 1;
    com_davidmaletz_mining_renderer__$Parallax_Clouds.COUNT = 3;
    com_davidmaletz_mining_renderer__$Parallax_Clouds.MAX_FRAMES = 10;
    com_davidmaletz_mining_renderer_PlayerRenderer.RESET_CT = 10;
    com_davidmaletz_mining_renderer__$PlayerRenderer_PlayerButton.ALPHA = 0.75;
    com_davidmaletz_mining_renderer__$PlayerRenderer_InventoryButton.FLASH_CT = 30;
    com_davidmaletz_mining_renderer_WaterRenderer.OFFSET = 12;
    com_davidmaletz_mining_renderer_Waves.DELTA = 0.25;
    com_davidmaletz_mining_structure_Farm.ADD_ITEM = "add_item";
    com_davidmaletz_mining_structure_Farm.REM_ITEM = "rem_item";
    com_davidmaletz_mining_structure_Smelter.UPDATE_FUEL = "update_fuel";
    com_davidmaletz_mining_structure_Smelter.MAX_FUEL = 60;
    com_davidmaletz_mining_structure_Smelter.ADD_ITEM = "add_item";
    com_davidmaletz_mining_structure_Smelter.REM_ITEM = "rem_item";
    com_davidmaletz_mining_structure__$Market_MarketRenderer.SPEECH = 200;
    com_davidmaletz_mining_structure_WyrmPen.WYRM_COUNT = 2;
    com_davidmaletz_mining_ui_AcceptQuest.WIDTH = 106;
    com_davidmaletz_mining_ui_AcceptQuest.HEIGHT = 100;
    com_davidmaletz_mining_ui_AcceptQuest.PAD = 4;
    com_davidmaletz_mining_ui_Achievement.WIDTH = 180;
    com_davidmaletz_mining_ui_Achievement.PAD = 4;
    com_davidmaletz_mining_ui__$Achievement_AchievementIcon.FRAMES = 30;
    com_davidmaletz_mining_ui_AchievementRenderer.WIDTH = 20;
    com_davidmaletz_mining_ui_AchievementRenderer.HEIGHT = 20;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.WIDTH = 80;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.ALPHA = 0.5;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.HEIGHT = 13;
    com_davidmaletz_mining_ui__$AnimalItemRenderer_ListButton.PAD = 2;
    com_davidmaletz_mining_ui_CountPrompt.PAD = 4;
    com_davidmaletz_mining_ui_CountPrompt.WIDTH = 100;
    com_davidmaletz_mining_ui_ControlRenderer.WIDTH = 62;
    com_davidmaletz_mining_ui_Controls.KEY_CHANGED = "key_changed";
    com_davidmaletz_mining_ui_Controls.keys = ["left", "right", "up", "down", "select", "cancel", "inventory", "quest", "hotkey1", "hotkey2"];
    com_davidmaletz_mining_ui_CraftingWindow.PAD = 4;
    com_davidmaletz_mining_ui_Credits.credits = "Programming & Design\nDavid Maletz\n\nArt\nAaron Norell\n\nSound & Music\nChase Bethea\n\naa中文版汉化\n冻豺\n\n(c) Fancy Fish Games 2017\n(c) SnoBox Studio 2017\n\nThank you for playing!\nWe hope to see you in the new world!";
    com_davidmaletz_mining_ui_DialogueBox.WIDTH = 200;
    com_davidmaletz_mining_ui_DialogueBox.PAD = 4;
    com_davidmaletz_mining_ui_EatPrompt.ICON_W = 8;
    com_davidmaletz_mining_ui_EquipmentPanel.PAD = 3;
    com_davidmaletz_mining_ui_EquipmentPanel.HT = 10;
    com_davidmaletz_mining_ui_EquipmentPanel.WIDTH = 76;
    com_davidmaletz_mining_ui_EquipmentPanel.HEIGHT = 67;
    com_davidmaletz_mining_ui_ExperiencePanel.PAD = 3;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.WIDTH = 80;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.ALPHA = 0.5;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.HEIGHT = 13;
    com_davidmaletz_mining_ui__$FarmItemRenderer_ListButton.PAD = 2;
    com_davidmaletz_mining_ui_FarmItemWindow.PAD = 4;
    com_davidmaletz_mining_ui_FarmWindow.PAD = 4;
    com_davidmaletz_mining_ui_GameOver.WIDTH = 60;
    com_davidmaletz_mining_ui_GameOver.ITEMS = ["retry", "title"];
    com_davidmaletz_mining_ui_MyBar.PAD = 2;
    com_davidmaletz_mining_ui_MyBar.ALPHA = 0.25;
    com_davidmaletz_mining_ui_MyBar.FLASH_CT = 30;
    com_davidmaletz_mining_ui_InventoryTab.WIDTH = 20;
    com_davidmaletz_mining_ui_InventoryTabs.TAB_DARKEN = 0.6;
    com_davidmaletz_mining_ui_InventoryTabs.tab_order = [4, 0, 1, 2, 3];
    com_davidmaletz_mining_ui_Tooltip.PAD = 2;
    com_davidmaletz_mining_ui_Popup.DURATION = 20;
    com_davidmaletz_mining_ui_ItemPopup.PAD = 2;
    com_davidmaletz_mining_ui_ItemRenderer.WIDTH = 84;
    com_davidmaletz_mining_ui_ItemRenderer.HEIGHT = 10;
    com_davidmaletz_mining_ui_ListButton.ALPHA = 0.5;
    com_davidmaletz_mining_ui_ListButton.PAD = 1;
    com_davidmaletz_mining_ui__$KeyTooltip_KeyButton.ALPHA = 0.75;
    com_davidmaletz_mining_ui_MyButtonFactory.WIDTH = 12;
    com_davidmaletz_mining_ui_MyButtonFactory.HEIGHT = 12;
    com_davidmaletz_mining_ui_OptionRenderer.WIDTH = 150;
    com_davidmaletz_mining_ui_OptionRenderer.HEIGHT = 10;
    com_davidmaletz_mining_ui__$Options_TextSpeed.MAX = 20;
    com_davidmaletz_mining_ui_Options.ITEMS = [new com_davidmaletz_mining_ui__$Options_MusicVol("music"), new com_davidmaletz_mining_ui__$Options_SFXVol("sfx"), new com_davidmaletz_mining_ui__$Options_TextSpeed("textspeed"), new com_davidmaletz_mining_ui__$Options_Fullscreen("fullscreen"), new com_davidmaletz_mining_ui__$Options_Language("language"), "controls", "achievements", "back"];
    com_davidmaletz_mining_ui_PenWindow.PAD = 4;
    com_davidmaletz_mining_ui_Preloader.WIDTH = 256;
    com_davidmaletz_mining_ui_Preloader.HEIGHT = 144;
    com_davidmaletz_mining_ui_Preloader.sound_fail = false;
    com_davidmaletz_mining_ui_Prompt.WIDTH = 150;
    com_davidmaletz_mining_ui_Prompt.PAD = 4;
    com_davidmaletz_mining_ui_QuestButton.ALPHA = 0.5;
    com_davidmaletz_mining_ui_QuestButton.WIDTH = 80;
    com_davidmaletz_mining_ui_QuestButton.HEIGHT = 10;
    com_davidmaletz_mining_ui_QuestButton.PAD = 1;
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.WIDTH = 104;
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.ALPHA = 0.5;
    com_davidmaletz_mining_ui__$RecipeRenderer_ListButton.PAD = 2;
    com_davidmaletz_mining_ui__$RecipeRenderer_FuelButton.HEIGHT = 10;
    com_davidmaletz_mining_ui__$RecipeRenderer_RecipeButton.HEIGHT = 20;
    com_davidmaletz_mining_ui_SaveRenderer.WIDTH = 80;
    com_davidmaletz_mining_ui_SaveRenderer.HEIGHT = 20;
    com_davidmaletz_mining_ui_SaveButton.MINUTE = 60;
    com_davidmaletz_mining_ui_SaveButton.HOUR = 3600;
    com_davidmaletz_mining_ui_SaveButton.DAY = 86400;
    com_davidmaletz_mining_ui_ScrollbarUI.WIDTH = 7;
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.WIDTH = 92;
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.HEIGHT = 13;
    com_davidmaletz_mining_ui__$SmeltItemRenderer_ListButton.PAD = 2;
    com_davidmaletz_mining_ui_SmeltWindow.PAD = 4;
    com_davidmaletz_mining_ui_TransferInventory.PAD = 4;
    com_davidmaletz_mining_ui_StoreWindow.SALE_PERCENT = 0.7;
    com_davidmaletz_mining_ui_StringRenderer.HEIGHT = 10;
    com_davidmaletz_mining_ui_TextButton.WIDTH = 40;
    com_davidmaletz_mining_ui_TitleScreen.WIDTH = 60;
    com_davidmaletz_mining_ui_TitleScreen.ITEMS = ["newgame", "continue", "options", "forums"];
    com_davidmaletz_mining_ui_ValuePanel.PAD = 3;
    com_davidmaletz_mining_ui_Weight.PAD = 3;
    com_davidmaletz_mining_ui__$WindowFactory_WindowDrawable.SIZE = 16;
    com_davidmaletz_tiles_TileMap.CHUNK_UPDATE = "chunk_update";
    com_davidmaletz_tiles_TileMap.VERSION = 0;
    com_davidmaletz_mining_world_Area.ADD_STRUCTURE = "add_structure";
    com_davidmaletz_mining_world_Area.REM_STRUCTURE = "rem_structure";
    com_davidmaletz_mining_world_Area.ADD_PROJECTILE = "add_projectile";
    com_davidmaletz_mining_world_Area.REM_PROJECTILE = "rem_projectile";
    com_davidmaletz_mining_world_Area.BASE_LAYER = 0;
    com_davidmaletz_mining_world_Area.ORE_LAYER = 1;
    com_davidmaletz_mining_world_Area.LIGHT_LAYER = 2;
    com_davidmaletz_mining_world_Area.BACK_LAYER = 3;
    com_davidmaletz_mining_world_Area.FLAG_ACTION = 1;
    com_davidmaletz_mining_world_ObjectLayer.BUSH_LAYER = 0;
    com_davidmaletz_mining_world_ObjectLayer.ITEM_LAYER = 1;
    com_davidmaletz_mining_world_ObjectLayer.NPC_LAYER = 2;
    com_davidmaletz_mining_world_ObjectLayer.ENEMY_LAYER = 3;
    com_davidmaletz_mining_world_ObjectLayer.TRAP_LAYER = 4;
    com_davidmaletz_mining_world_ObjectLayer.PLAYER_LAYER = 5;
    com_davidmaletz_mining_world_ObjectLayer.ADD_OBJECT = "add_object";
    com_davidmaletz_mining_world_ObjectLayer.REM_OBJECT = "rem_object";
    com_davidmaletz_mining_world_Bush.FPS = 15;
    com_davidmaletz_mining_world_Tree.FPS = 15;
    com_davidmaletz_mining_world_types_Bird.MOVE = 16;
    com_davidmaletz_tiles_Chunk.SIZE = 16;
    com_davidmaletz_tiles_Floor.NULL = 32767;
    com_davidmaletz_tiles_Tile.SIZE = 16;
    com_fancyfish_faeng_common_Keyboard.TYPE_SMALL = 0;
    com_fancyfish_faeng_common_Keyboard.TYPE_MEDIUM = 1;
    com_fancyfish_faeng_common_Keyboard.TYPE_LARGE = 2;
    com_fancyfish_faeng_common_Lang.CHANGED = "lang_changed";
    com_fancyfish_faeng_common_Lang.dispatcher = new openfl_events_EventDispatcher();
    com_fancyfish_faeng_common_Lang.text_cache = new haxe_ds_StringMap();
    com_fancyfish_faeng_common_Lang.message_cache = new haxe_ds_StringMap();
    com_fancyfish_faeng_common_Lang.template_cache = new haxe_ds_StringMap();
    com_fancyfish_faeng_common_Lang.key_cache = new haxe_ds_StringMap();
    com_fancyfish_faeng_common_Lang.DEFAULT_FOLDERS = [""];
    com_fancyfish_faeng_common_mutable_Mutable.UPDATED = "updated";
    com_fancyfish_faeng_common_Noise.p_vals = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];
    com_fancyfish_faeng_common_Utils.MultiplyDeBruijnBitPosition = [0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9];
    com_fancyfish_faeng_common_Utils.RED = 16;
    com_fancyfish_faeng_common_Utils.GREEN = 8;
    com_fancyfish_faeng_common_Utils.BLUE = 0;
    com_fancyfish_faeng_common_Utils.ALPHA = 24;
    com_fancyfish_faeng_common_Utils.RAND_X = 9106.966345;
    com_fancyfish_faeng_common_Utils.RAND_Y = 3742.931314;
    com_fancyfish_faeng_common_Utils.RAND_Z = 8046.780733;
    com_fancyfish_faeng_common_Utils.RAND_W = 2574.684771;
    com_fancyfish_faeng_common_Utils.RAND_SCALAR = 49824.21294;
    com_fancyfish_faeng_common_Utils.nextGaussian = NaN;
    com_fancyfish_faeng_common_Utils.WIDTH = 32768;
    com_fancyfish_faeng_common_Utils.OFF = 16384;
    com_fancyfish_faeng_display_Matrix2D.IDENTITY = new com_fancyfish_faeng_display_Matrix2D();
    com_fancyfish_faeng_display_Rectangle2D.DELTA = 0.00001;
    com_fancyfish_faeng_text_FontManager.font_map = new haxe_ds_StringMap();
    com_fancyfish_faeng_text_FontManager.defaultFont = new com_fancyfish_faeng_common_mutable_Mutable();
    haxe_Serializer.USE_CACHE = false;
    haxe_Serializer.USE_ENUM_INDEX = false;
    haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
    haxe_Unserializer.DEFAULT_RESOLVER = Type;
    haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
    haxe_Unserializer.CODES = null;
    haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
    haxe_ds_ObjectMap.count = 0;
    haxe_io_FPHelper.i64tmp = (function($this) {
        var $r;
        var x = new haxe__$Int64__$_$_$Int64(0, 0);
        $r = x;
        return $r;
    } (this));
    haxe_xml_Parser.escapes = (function($this) {
        var $r;
        var h = new haxe_ds_StringMap();
        if (__map_reserved.lt != null) h.setReserved("lt", "<");
        else h.h["lt"] = "<";
        if (__map_reserved.gt != null) h.setReserved("gt", ">");
        else h.h["gt"] = ">";
        if (__map_reserved.amp != null) h.setReserved("amp", "&");
        else h.h["amp"] = "&";
        if (__map_reserved.quot != null) h.setReserved("quot", "\"");
        else h.h["quot"] = "\"";
        if (__map_reserved.apos != null) h.setReserved("apos", "'");
        else h.h["apos"] = "'";
        $r = h;
        return $r;
    } (this));
    hscript_Parser.p1 = 0;
    hscript_Parser.readPos = 0;
    hscript_Parser.tokenMin = 0;
    hscript_Parser.tokenMax = 0;
    js_Boot.__toStr = {}.toString;
    js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
    lime_Assets.cache = new lime_AssetCache();
    lime_Assets.libraries = new haxe_ds_StringMap();
    lime_Assets.onChange = new lime_app_Event_$Void_$Void();
    lime_Assets.initialized = false;
    lime__$backend_html5_HTML5Window.windowID = 0;
    lime_app_Preloader.images = new haxe_ds_StringMap();
    lime_app_Preloader.loaders = new haxe_ds_StringMap();
    lime_audio_openal_AL.NONE = 0;
    lime_audio_openal_AL.FALSE = 0;
    lime_audio_openal_AL.TRUE = 1;
    lime_audio_openal_AL.SOURCE_RELATIVE = 514;
    lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
    lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
    lime_audio_openal_AL.PITCH = 4099;
    lime_audio_openal_AL.POSITION = 4100;
    lime_audio_openal_AL.DIRECTION = 4101;
    lime_audio_openal_AL.VELOCITY = 4102;
    lime_audio_openal_AL.LOOPING = 4103;
    lime_audio_openal_AL.BUFFER = 4105;
    lime_audio_openal_AL.GAIN = 4106;
    lime_audio_openal_AL.MIN_GAIN = 4109;
    lime_audio_openal_AL.MAX_GAIN = 4110;
    lime_audio_openal_AL.ORIENTATION = 4111;
    lime_audio_openal_AL.SOURCE_STATE = 4112;
    lime_audio_openal_AL.INITIAL = 4113;
    lime_audio_openal_AL.PLAYING = 4114;
    lime_audio_openal_AL.PAUSED = 4115;
    lime_audio_openal_AL.STOPPED = 4116;
    lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
    lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
    lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
    lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
    lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
    lime_audio_openal_AL.MAX_DISTANCE = 4131;
    lime_audio_openal_AL.SEC_OFFSET = 4132;
    lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
    lime_audio_openal_AL.BYTE_OFFSET = 4134;
    lime_audio_openal_AL.SOURCE_TYPE = 4135;
    lime_audio_openal_AL.STATIC = 4136;
    lime_audio_openal_AL.STREAMING = 4137;
    lime_audio_openal_AL.UNDETERMINED = 4144;
    lime_audio_openal_AL.FORMAT_MONO8 = 4352;
    lime_audio_openal_AL.FORMAT_MONO16 = 4353;
    lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
    lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
    lime_audio_openal_AL.FREQUENCY = 8193;
    lime_audio_openal_AL.BITS = 8194;
    lime_audio_openal_AL.CHANNELS = 8195;
    lime_audio_openal_AL.SIZE = 8196;
    lime_audio_openal_AL.NO_ERROR = 0;
    lime_audio_openal_AL.INVALID_NAME = 40961;
    lime_audio_openal_AL.INVALID_ENUM = 40962;
    lime_audio_openal_AL.INVALID_VALUE = 40963;
    lime_audio_openal_AL.INVALID_OPERATION = 40964;
    lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
    lime_audio_openal_AL.VENDOR = 45057;
    lime_audio_openal_AL.VERSION = 45058;
    lime_audio_openal_AL.RENDERER = 45059;
    lime_audio_openal_AL.EXTENSIONS = 45060;
    lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
    lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
    lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
    lime_audio_openal_AL.DISTANCE_MODEL = 53248;
    lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
    lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
    lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
    lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
    lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
    lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
    lime_audio_openal_ALC.FALSE = 0;
    lime_audio_openal_ALC.TRUE = 1;
    lime_audio_openal_ALC.FREQUENCY = 4103;
    lime_audio_openal_ALC.REFRESH = 4104;
    lime_audio_openal_ALC.SYNC = 4105;
    lime_audio_openal_ALC.MONO_SOURCES = 4112;
    lime_audio_openal_ALC.STEREO_SOURCES = 4113;
    lime_audio_openal_ALC.NO_ERROR = 0;
    lime_audio_openal_ALC.INVALID_DEVICE = 40961;
    lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
    lime_audio_openal_ALC.INVALID_ENUM = 40963;
    lime_audio_openal_ALC.INVALID_VALUE = 40964;
    lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
    lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
    lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
    lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
    lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
    lime_audio_openal_ALC.EXTENSIONS = 4102;
    lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
    lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
    lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
    lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
    lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
    lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
    lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
    lime_graphics_opengl_GL.POINTS = 0;
    lime_graphics_opengl_GL.LINES = 1;
    lime_graphics_opengl_GL.LINE_LOOP = 2;
    lime_graphics_opengl_GL.LINE_STRIP = 3;
    lime_graphics_opengl_GL.TRIANGLES = 4;
    lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
    lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
    lime_graphics_opengl_GL.ZERO = 0;
    lime_graphics_opengl_GL.ONE = 1;
    lime_graphics_opengl_GL.SRC_COLOR = 768;
    lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
    lime_graphics_opengl_GL.SRC_ALPHA = 770;
    lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
    lime_graphics_opengl_GL.DST_ALPHA = 772;
    lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
    lime_graphics_opengl_GL.DST_COLOR = 774;
    lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
    lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
    lime_graphics_opengl_GL.FUNC_ADD = 32774;
    lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
    lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
    lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
    lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
    lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
    lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
    lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
    lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
    lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
    lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
    lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
    lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
    lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
    lime_graphics_opengl_GL.BLEND_COLOR = 32773;
    lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
    lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
    lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
    lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
    lime_graphics_opengl_GL.STREAM_DRAW = 35040;
    lime_graphics_opengl_GL.STATIC_DRAW = 35044;
    lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
    lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
    lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
    lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
    lime_graphics_opengl_GL.FRONT = 1028;
    lime_graphics_opengl_GL.BACK = 1029;
    lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
    lime_graphics_opengl_GL.CULL_FACE = 2884;
    lime_graphics_opengl_GL.BLEND = 3042;
    lime_graphics_opengl_GL.DITHER = 3024;
    lime_graphics_opengl_GL.STENCIL_TEST = 2960;
    lime_graphics_opengl_GL.DEPTH_TEST = 2929;
    lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
    lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
    lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
    lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
    lime_graphics_opengl_GL.NO_ERROR = 0;
    lime_graphics_opengl_GL.INVALID_ENUM = 1280;
    lime_graphics_opengl_GL.INVALID_VALUE = 1281;
    lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
    lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
    lime_graphics_opengl_GL.CW = 2304;
    lime_graphics_opengl_GL.CCW = 2305;
    lime_graphics_opengl_GL.LINE_WIDTH = 2849;
    lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
    lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
    lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
    lime_graphics_opengl_GL.FRONT_FACE = 2886;
    lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
    lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
    lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
    lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
    lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
    lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
    lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
    lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
    lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
    lime_graphics_opengl_GL.STENCIL_REF = 2967;
    lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
    lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
    lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
    lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
    lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
    lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
    lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
    lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
    lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
    lime_graphics_opengl_GL.VIEWPORT = 2978;
    lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
    lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
    lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
    lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
    lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
    lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
    lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
    lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
    lime_graphics_opengl_GL.RED_BITS = 3410;
    lime_graphics_opengl_GL.GREEN_BITS = 3411;
    lime_graphics_opengl_GL.BLUE_BITS = 3412;
    lime_graphics_opengl_GL.ALPHA_BITS = 3413;
    lime_graphics_opengl_GL.DEPTH_BITS = 3414;
    lime_graphics_opengl_GL.STENCIL_BITS = 3415;
    lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
    lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
    lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
    lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
    lime_graphics_opengl_GL.SAMPLES = 32937;
    lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
    lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
    lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
    lime_graphics_opengl_GL.DONT_CARE = 4352;
    lime_graphics_opengl_GL.FASTEST = 4353;
    lime_graphics_opengl_GL.NICEST = 4354;
    lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
    lime_graphics_opengl_GL.BYTE = 5120;
    lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
    lime_graphics_opengl_GL.SHORT = 5122;
    lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
    lime_graphics_opengl_GL.INT = 5124;
    lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
    lime_graphics_opengl_GL.FLOAT = 5126;
    lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
    lime_graphics_opengl_GL.ALPHA = 6406;
    lime_graphics_opengl_GL.RGB = 6407;
    lime_graphics_opengl_GL.RGBA = 6408;
    lime_graphics_opengl_GL.BGR_EXT = 32992;
    lime_graphics_opengl_GL.BGRA_EXT = 32993;
    lime_graphics_opengl_GL.LUMINANCE = 6409;
    lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
    lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
    lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
    lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
    lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
    lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
    lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
    lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
    lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
    lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
    lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
    lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
    lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
    lime_graphics_opengl_GL.SHADER_TYPE = 35663;
    lime_graphics_opengl_GL.DELETE_STATUS = 35712;
    lime_graphics_opengl_GL.LINK_STATUS = 35714;
    lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
    lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
    lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
    lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
    lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
    lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
    lime_graphics_opengl_GL.NEVER = 512;
    lime_graphics_opengl_GL.LESS = 513;
    lime_graphics_opengl_GL.EQUAL = 514;
    lime_graphics_opengl_GL.LEQUAL = 515;
    lime_graphics_opengl_GL.GREATER = 516;
    lime_graphics_opengl_GL.NOTEQUAL = 517;
    lime_graphics_opengl_GL.GEQUAL = 518;
    lime_graphics_opengl_GL.ALWAYS = 519;
    lime_graphics_opengl_GL.KEEP = 7680;
    lime_graphics_opengl_GL.REPLACE = 7681;
    lime_graphics_opengl_GL.INCR = 7682;
    lime_graphics_opengl_GL.DECR = 7683;
    lime_graphics_opengl_GL.INVERT = 5386;
    lime_graphics_opengl_GL.INCR_WRAP = 34055;
    lime_graphics_opengl_GL.DECR_WRAP = 34056;
    lime_graphics_opengl_GL.VENDOR = 7936;
    lime_graphics_opengl_GL.RENDERER = 7937;
    lime_graphics_opengl_GL.VERSION = 7938;
    lime_graphics_opengl_GL.NEAREST = 9728;
    lime_graphics_opengl_GL.LINEAR = 9729;
    lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
    lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
    lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
    lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
    lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
    lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
    lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
    lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
    lime_graphics_opengl_GL.TEXTURE_2D = 3553;
    lime_graphics_opengl_GL.TEXTURE = 5890;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
    lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
    lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
    lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    lime_graphics_opengl_GL.TEXTURE0 = 33984;
    lime_graphics_opengl_GL.TEXTURE1 = 33985;
    lime_graphics_opengl_GL.TEXTURE2 = 33986;
    lime_graphics_opengl_GL.TEXTURE3 = 33987;
    lime_graphics_opengl_GL.TEXTURE4 = 33988;
    lime_graphics_opengl_GL.TEXTURE5 = 33989;
    lime_graphics_opengl_GL.TEXTURE6 = 33990;
    lime_graphics_opengl_GL.TEXTURE7 = 33991;
    lime_graphics_opengl_GL.TEXTURE8 = 33992;
    lime_graphics_opengl_GL.TEXTURE9 = 33993;
    lime_graphics_opengl_GL.TEXTURE10 = 33994;
    lime_graphics_opengl_GL.TEXTURE11 = 33995;
    lime_graphics_opengl_GL.TEXTURE12 = 33996;
    lime_graphics_opengl_GL.TEXTURE13 = 33997;
    lime_graphics_opengl_GL.TEXTURE14 = 33998;
    lime_graphics_opengl_GL.TEXTURE15 = 33999;
    lime_graphics_opengl_GL.TEXTURE16 = 34000;
    lime_graphics_opengl_GL.TEXTURE17 = 34001;
    lime_graphics_opengl_GL.TEXTURE18 = 34002;
    lime_graphics_opengl_GL.TEXTURE19 = 34003;
    lime_graphics_opengl_GL.TEXTURE20 = 34004;
    lime_graphics_opengl_GL.TEXTURE21 = 34005;
    lime_graphics_opengl_GL.TEXTURE22 = 34006;
    lime_graphics_opengl_GL.TEXTURE23 = 34007;
    lime_graphics_opengl_GL.TEXTURE24 = 34008;
    lime_graphics_opengl_GL.TEXTURE25 = 34009;
    lime_graphics_opengl_GL.TEXTURE26 = 34010;
    lime_graphics_opengl_GL.TEXTURE27 = 34011;
    lime_graphics_opengl_GL.TEXTURE28 = 34012;
    lime_graphics_opengl_GL.TEXTURE29 = 34013;
    lime_graphics_opengl_GL.TEXTURE30 = 34014;
    lime_graphics_opengl_GL.TEXTURE31 = 34015;
    lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
    lime_graphics_opengl_GL.REPEAT = 10497;
    lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
    lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
    lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
    lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
    lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
    lime_graphics_opengl_GL.INT_VEC2 = 35667;
    lime_graphics_opengl_GL.INT_VEC3 = 35668;
    lime_graphics_opengl_GL.INT_VEC4 = 35669;
    lime_graphics_opengl_GL.BOOL = 35670;
    lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
    lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
    lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
    lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
    lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
    lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
    lime_graphics_opengl_GL.SAMPLER_2D = 35678;
    lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
    lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
    lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
    lime_graphics_opengl_GL.POINT_SPRITE = 34913;
    lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
    lime_graphics_opengl_GL.LOW_FLOAT = 36336;
    lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
    lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
    lime_graphics_opengl_GL.LOW_INT = 36339;
    lime_graphics_opengl_GL.MEDIUM_INT = 36340;
    lime_graphics_opengl_GL.HIGH_INT = 36341;
    lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
    lime_graphics_opengl_GL.RENDERBUFFER = 36161;
    lime_graphics_opengl_GL.RGBA4 = 32854;
    lime_graphics_opengl_GL.RGB5_A1 = 32855;
    lime_graphics_opengl_GL.RGB565 = 36194;
    lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
    lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
    lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
    lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
    lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
    lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
    lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
    lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
    lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
    lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
    lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
    lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
    lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
    lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
    lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
    lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
    lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
    lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
    lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
    lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
    lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
    lime_graphics_opengl_GL.NONE = 0;
    lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
    lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
    lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
    lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
    lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
    lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
    lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
    lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
    lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
    lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
    lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
    lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
    lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
    lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
    lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0];
    lime_math_Matrix3.__identity = new lime_math_Matrix3();
    lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
    lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
    lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
    lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
    lime_system_CFFI.__moduleNames = null;
    lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
    lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
    lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
    lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
    lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
    lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
    lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
    lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
    lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
    lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
    lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
    lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
    lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
    lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
    lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
    lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
    lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
    lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
    lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
    lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
    lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
    lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
    lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
    lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
    lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
    lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
    lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
    lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
    lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
    lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
    lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
    lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
    lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
    lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
    lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
    lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
    lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
    lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
    lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
    lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
    lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
    lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
    lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
    lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
    lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
    lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
    lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
    lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
    lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
    lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
    lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
    lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
    lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
    lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
    lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
    lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
    lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
    lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
    lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
    lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
    lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
    lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
    lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
    lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
    lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
    lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
    lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
    lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
    lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
    lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
    lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
    lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
    lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
    lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
    lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
    lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
    lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
    lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
    lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
    lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
    lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
    lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
    lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
    lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
    lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
    lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
    lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
    lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
    lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
    lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
    lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
    lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
    lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
    lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
    lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
    lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
    lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
    lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
    lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
    lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
    lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
    lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
    lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
    lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
    lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
    lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
    lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
    lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
    lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
    lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
    lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
    lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
    lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
    lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
    lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
    lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
    lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
    lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
    lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
    lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
    lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
    lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
    lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
    lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
    lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
    lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
    lime_ui_Gamepad.devices = new haxe_ds_IntMap();
    lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
    lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
    lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
    lime_ui_Joystick.devices = new haxe_ds_IntMap();
    lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
    lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
    lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
    lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
    lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
    lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
    lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
    lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
    lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
    lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
    lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
    lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
    lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
    lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
    lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
    lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
    lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
    lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
    lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
    lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
    lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
    lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
    lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
    lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
    lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
    lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
    lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
    lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
    lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
    lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
    lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
    lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
    lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
    lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
    lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
    lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
    lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
    lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
    lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
    lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
    lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
    lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
    lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
    lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
    lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
    lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
    lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
    lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
    lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
    lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
    lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
    lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
    lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
    lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
    lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
    lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
    lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
    lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
    lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
    lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
    lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
    lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
    lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
    lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
    lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
    lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
    lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
    lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
    lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
    lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
    lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
    lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
    lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
    lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
    lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
    lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
    lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
    lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
    lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
    lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
    lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
    lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
    lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = (function($this) {
        var $r;
        var inValue = lime_system_CFFI.load("lime", "lime_bytes_from_data_pointer", 2, false);
        $r = inValue;
        return $r;
    } (this));
    lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = (function($this) {
        var $r;
        var inValue = lime_system_CFFI.load("lime", "lime_bytes_get_data_pointer", 1, false);
        $r = inValue;
        return $r;
    } (this));
    lime_utils_Bytes.cffi_lime_bytes_read_file = (function($this) {
        var $r;
        var inValue = lime_system_CFFI.load("lime", "lime_bytes_read_file", 1, false);
        $r = inValue;
        return $r;
    } (this));
    lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
    lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
    lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
    lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
    lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
    lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
    openfl_Assets.cache = new openfl_AssetCache();
    openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
    openfl_display_LoaderInfo.__rootURL = window.document.URL;
    openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
    openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
    openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
    openfl_Lib.current = new openfl_display_MovieClip();
    openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
    openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
    openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
    openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
    openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
    openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
    openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
    openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
    openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
    openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
    openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
    openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
    openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
    openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
    openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
    openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";", "attribute vec2 " + "openfl_aTexCoord0" + ";", "attribute vec4 " + "openfl_aColor" + ";", "uniform mat3 " + "openfl_uProjectionMatrix" + ";", "uniform bool " + "openfl_uUseColorTransform" + ";", "varying vec2 " + "openfl_vTexCoord" + ";", "varying vec4 " + "openfl_vColor" + ";", "void main(void) {", "   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);", "   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";", "   if(" + "openfl_uUseColorTransform" + ")", "   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";", "   else", "   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);", "}"];
    openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
    openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
    openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition")];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aTexCoord0"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5121, true, "openfl_aColor")];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2, 5126, false, "openfl_aPosition"), new openfl__$internal_renderer_opengl_utils_VertexAttribute(4, 5126, false, "openfl_aColor")];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
    openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
    openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
    openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
    openfl__$internal_text_TextEngine.UTF8_TAB = 9;
    openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
    openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
    openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
    openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.HTML_FORMAT = 0;
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.RICH_TEXT_FORMAT = 1;
    openfl_desktop__$ClipboardFormats_ClipboardFormats_$Impl_$.TEXT_FORMAT = 2;
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_ONLY = 0;
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.CLONE_PREFERRED = 1;
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_ONLY = 2;
    openfl_desktop__$ClipboardTransferMode_ClipboardTransferMode_$Impl_$.ORIGINAL_PREFERRED = 3;
    openfl_display_BitmapData.__isGLES = null;
    openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
    openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
    openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
    openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
    openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
    openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
    openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
    openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
    openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
    openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
    openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
    openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
    openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
    openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
    openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
    openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
    openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
    openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
    openfl_display_Graphics.TILE_SCALE = 1;
    openfl_display_Graphics.TILE_ROTATION = 2;
    openfl_display_Graphics.TILE_RGB = 4;
    openfl_display_Graphics.TILE_ALPHA = 8;
    openfl_display_Graphics.TILE_TRANS_2x2 = 16;
    openfl_display_Graphics.TILE_RECT = 32;
    openfl_display_Graphics.TILE_ORIGIN = 64;
    openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
    openfl_display_Graphics.TILE_BLEND_ADD = 65536;
    openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
    openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
    openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
    openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
    openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
    openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
    openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
    openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
    openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
    openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
    openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
    openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
    openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
    openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
    openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
    openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
    openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
    openfl_display_Preloader.soundFail = null;
    openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$", "gmi");
    openfl_display_Shader.aPosition = "openfl_aPosition";
    openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
    openfl_display_Shader.aColor = "openfl_aColor";
    openfl_display_Shader.uSampler = "openfl_uSampler0";
    openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
    openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
    openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
    openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
    openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
    openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
    openfl_display_Shader.vColor = "openfl_vColor";
    openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";", "attribute vec2 " + openfl_display_Shader.aTexCoord + ";", "attribute vec4 " + openfl_display_Shader.aColor + ";", "uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";", "uniform vec2 " + openfl_display_Shader.uObjectSize + ";", "uniform vec2 " + openfl_display_Shader.uTextureSize + ";", "varying vec2 " + openfl_display_Shader.vTexCoord + ";", "varying vec4 " + openfl_display_Shader.vColor + ";"];
    openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";", "uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";", "uniform vec4 " + openfl_display_Shader.uColorOffset + ";", "uniform vec2 " + openfl_display_Shader.uObjectSize + ";", "uniform vec2 " + openfl_display_Shader.uTextureSize + ";", "varying vec2 " + openfl_display_Shader.vTexCoord + ";", "varying vec4 " + openfl_display_Shader.vColor + ";", "vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {", "   vec4 unmultiply = vec4(color.rgb / color.a, color.a);", "   vec4 result = unmultiply * tint * multiplier;", "   result = result + offset;", "   result = clamp(result, 0., 1.);", "   result = vec4(result.rgb * result.a, result.a);", "   return result;", "}"];
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
    openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
    openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
    openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
    openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
    openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
    openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
    openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
    openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
    openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
    openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
    openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
    openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
    openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
    openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
    openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
    openfl_display_Tilesheet.TILE_SCALE = 1;
    openfl_display_Tilesheet.TILE_ROTATION = 2;
    openfl_display_Tilesheet.TILE_RGB = 4;
    openfl_display_Tilesheet.TILE_ALPHA = 8;
    openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
    openfl_display_Tilesheet.TILE_RECT = 32;
    openfl_display_Tilesheet.TILE_ORIGIN = 64;
    openfl_display_Tilesheet.TILE_TRANS_COLOR = 128;
    openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
    openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
    openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
    openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
    openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
    openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
    openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
    openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
    openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
    openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
    openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
    openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0, 0);
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
    openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
    openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
    openfl_display3D_Context3D.MAX_SAMPLERS = 8;
    openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
    openfl_display3D_Context3D.anisotropySupportTested = false;
    openfl_display3D_Context3D.supportsAnisotropy = false;
    openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
    openfl_display3D_Context3DClearMask.ALL = 17664;
    openfl_display3D_Context3DClearMask.COLOR = 16384;
    openfl_display3D_Context3DClearMask.DEPTH = 256;
    openfl_display3D_Context3DClearMask.STENCIL = 1024;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 519;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 514;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 516;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 518;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 513;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 515;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 512;
    openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 517;
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
    openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
    openfl_display3D_textures_Texture.internalFormat = -1;
    openfl_errors_Error.DEFAULT_TO_STRING = "Error";
    openfl_events_ActivityEvent.ACTIVITY = "activity";
    openfl_events_TextEvent.LINK = "link";
    openfl_events_TextEvent.TEXT_INPUT = "textInput";
    openfl_events_ErrorEvent.ERROR = "error";
    openfl_events_FocusEvent.FOCUS_IN = "focusIn";
    openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
    openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
    openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
    openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
    openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
    openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
    openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
    openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
    openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
    openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
    openfl_events_IOErrorEvent.IO_ERROR = "ioError";
    openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
    openfl_events_KeyboardEvent.KEY_UP = "keyUp";
    openfl_events_MouseEvent.CLICK = "click";
    openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
    openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
    openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
    openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
    openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
    openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
    openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
    openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
    openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
    openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
    openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
    openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
    openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
    openfl_events_MouseEvent.ROLL_OUT = "rollOut";
    openfl_events_MouseEvent.ROLL_OVER = "rollOver";
    openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
    openfl_events_ProgressEvent.PROGRESS = "progress";
    openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
    openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
    openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
    openfl_events_TouchEvent.TOUCH_END = "touchEnd";
    openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
    openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
    openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
    openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
    openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
    openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
    openfl_events_UncaughtErrorEvent.UNCAUGHT_ERROR = "uncaughtError";
    openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__meta__ = {
        fields: {
            fragment: {
                fragment: null
            },
            get_uMultipliers: {
                noCompletion: null
            },
            set_uMultipliers: {
                noCompletion: null
            },
            get_uOffsets: {
                noCompletion: null
            },
            set_uOffsets: {
                noCompletion: null
            }
        }
    };
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
    openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
    openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
    openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
    openfl_net_SharedObject.defaultObjectEncoding = 3;
    openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
    openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
    openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.DELETE = 0;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.GET = 1;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.HEAD = 2;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.OPTIONS = 3;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.POST = 4;
    openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.PUT = 5;
    openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
    openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
    openfl_text_Font.__registeredFonts = [];
    openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
    openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
    openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
    openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
    openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
    openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
    openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
    openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
    openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
    openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
    openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
    openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
    openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
    openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
    openfl_ui_GameInput.isSupported = true;
    openfl_ui_GameInput.numDevices = 0;
    openfl_ui_GameInput.__deviceList = [];
    openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
    openfl_ui_GameInput.__instances = [];
    openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
    openfl_ui_Keyboard.NUMBER_0 = 48;
    openfl_ui_Keyboard.NUMBER_1 = 49;
    openfl_ui_Keyboard.NUMBER_2 = 50;
    openfl_ui_Keyboard.NUMBER_3 = 51;
    openfl_ui_Keyboard.NUMBER_4 = 52;
    openfl_ui_Keyboard.NUMBER_5 = 53;
    openfl_ui_Keyboard.NUMBER_6 = 54;
    openfl_ui_Keyboard.NUMBER_7 = 55;
    openfl_ui_Keyboard.NUMBER_8 = 56;
    openfl_ui_Keyboard.NUMBER_9 = 57;
    openfl_ui_Keyboard.A = 65;
    openfl_ui_Keyboard.B = 66;
    openfl_ui_Keyboard.C = 67;
    openfl_ui_Keyboard.D = 68;
    openfl_ui_Keyboard.E = 69;
    openfl_ui_Keyboard.F = 70;
    openfl_ui_Keyboard.G = 71;
    openfl_ui_Keyboard.H = 72;
    openfl_ui_Keyboard.I = 73;
    openfl_ui_Keyboard.J = 74;
    openfl_ui_Keyboard.K = 75;
    openfl_ui_Keyboard.L = 76;
    openfl_ui_Keyboard.M = 77;
    openfl_ui_Keyboard.N = 78;
    openfl_ui_Keyboard.O = 79;
    openfl_ui_Keyboard.P = 80;
    openfl_ui_Keyboard.Q = 81;
    openfl_ui_Keyboard.R = 82;
    openfl_ui_Keyboard.S = 83;
    openfl_ui_Keyboard.T = 84;
    openfl_ui_Keyboard.U = 85;
    openfl_ui_Keyboard.V = 86;
    openfl_ui_Keyboard.W = 87;
    openfl_ui_Keyboard.X = 88;
    openfl_ui_Keyboard.Y = 89;
    openfl_ui_Keyboard.Z = 90;
    openfl_ui_Keyboard.NUMPAD_0 = 96;
    openfl_ui_Keyboard.NUMPAD_1 = 97;
    openfl_ui_Keyboard.NUMPAD_2 = 98;
    openfl_ui_Keyboard.NUMPAD_3 = 99;
    openfl_ui_Keyboard.NUMPAD_4 = 100;
    openfl_ui_Keyboard.NUMPAD_5 = 101;
    openfl_ui_Keyboard.NUMPAD_6 = 102;
    openfl_ui_Keyboard.NUMPAD_7 = 103;
    openfl_ui_Keyboard.NUMPAD_8 = 104;
    openfl_ui_Keyboard.NUMPAD_9 = 105;
    openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
    openfl_ui_Keyboard.NUMPAD_ADD = 107;
    openfl_ui_Keyboard.NUMPAD_ENTER = 108;
    openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
    openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
    openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
    openfl_ui_Keyboard.F1 = 112;
    openfl_ui_Keyboard.F2 = 113;
    openfl_ui_Keyboard.F3 = 114;
    openfl_ui_Keyboard.F4 = 115;
    openfl_ui_Keyboard.F5 = 116;
    openfl_ui_Keyboard.F6 = 117;
    openfl_ui_Keyboard.F7 = 118;
    openfl_ui_Keyboard.F8 = 119;
    openfl_ui_Keyboard.F9 = 120;
    openfl_ui_Keyboard.F10 = 121;
    openfl_ui_Keyboard.F11 = 122;
    openfl_ui_Keyboard.F12 = 123;
    openfl_ui_Keyboard.F13 = 124;
    openfl_ui_Keyboard.F14 = 125;
    openfl_ui_Keyboard.F15 = 126;
    openfl_ui_Keyboard.BACKSPACE = 8;
    openfl_ui_Keyboard.TAB = 9;
    openfl_ui_Keyboard.ALTERNATE = 18;
    openfl_ui_Keyboard.ENTER = 13;
    openfl_ui_Keyboard.COMMAND = 15;
    openfl_ui_Keyboard.SHIFT = 16;
    openfl_ui_Keyboard.CONTROL = 17;
    openfl_ui_Keyboard.BREAK = 19;
    openfl_ui_Keyboard.CAPS_LOCK = 20;
    openfl_ui_Keyboard.NUMPAD = 21;
    openfl_ui_Keyboard.ESCAPE = 27;
    openfl_ui_Keyboard.SPACE = 32;
    openfl_ui_Keyboard.PAGE_UP = 33;
    openfl_ui_Keyboard.PAGE_DOWN = 34;
    openfl_ui_Keyboard.END = 35;
    openfl_ui_Keyboard.HOME = 36;
    openfl_ui_Keyboard.LEFT = 37;
    openfl_ui_Keyboard.RIGHT = 39;
    openfl_ui_Keyboard.UP = 38;
    openfl_ui_Keyboard.DOWN = 40;
    openfl_ui_Keyboard.INSERT = 45;
    openfl_ui_Keyboard.DELETE = 46;
    openfl_ui_Keyboard.NUMLOCK = 144;
    openfl_ui_Keyboard.SEMICOLON = 186;
    openfl_ui_Keyboard.EQUAL = 187;
    openfl_ui_Keyboard.COMMA = 188;
    openfl_ui_Keyboard.MINUS = 189;
    openfl_ui_Keyboard.PERIOD = 190;
    openfl_ui_Keyboard.SLASH = 191;
    openfl_ui_Keyboard.BACKQUOTE = 192;
    openfl_ui_Keyboard.LEFTBRACKET = 219;
    openfl_ui_Keyboard.BACKSLASH = 220;
    openfl_ui_Keyboard.RIGHTBRACKET = 221;
    openfl_ui_Keyboard.QUOTE = 222;
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
    openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
    openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
    openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
    ApplicationMain.main();
})(typeof console != "undefined" ? console: {
    log: function() {}
},
typeof window != "undefined" ? window: exports, typeof window != "undefined" ? window: typeof global != "undefined" ? global: typeof self != "undefined" ? self: this);